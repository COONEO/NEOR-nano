
Example2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006958  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08006b40  08006b40  00016b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f54  08006f54  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08006f54  08006f54  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f54  08006f54  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f58  08006f58  00016f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200001d4  08007130  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  08007130  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c858  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020fb  00000000  00000000  0002ca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  0002eb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a39  00000000  00000000  0002f8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa91  00000000  00000000  000302f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f443  00000000  00000000  0004ad8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a37f  00000000  00000000  0005a1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046fc  00000000  00000000  000f454c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000f8c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	08006b28 	.word	0x08006b28

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	08006b28 	.word	0x08006b28

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2f>:
 8000cc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ccc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cd0:	bf24      	itt	cs
 8000cd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cda:	d90d      	bls.n	8000cf8 <__aeabi_d2f+0x30>
 8000cdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ce0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ce4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ce8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cfc:	d121      	bne.n	8000d42 <__aeabi_d2f+0x7a>
 8000cfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d02:	bfbc      	itt	lt
 8000d04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d08:	4770      	bxlt	lr
 8000d0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d12:	f1c2 0218 	rsb	r2, r2, #24
 8000d16:	f1c2 0c20 	rsb	ip, r2, #32
 8000d1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d22:	bf18      	it	ne
 8000d24:	f040 0001 	orrne.w	r0, r0, #1
 8000d28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d34:	ea40 000c 	orr.w	r0, r0, ip
 8000d38:	fa23 f302 	lsr.w	r3, r3, r2
 8000d3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d40:	e7cc      	b.n	8000cdc <__aeabi_d2f+0x14>
 8000d42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d46:	d107      	bne.n	8000d58 <__aeabi_d2f+0x90>
 8000d48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d56:	4770      	bxne	lr
 8000d58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <__aeabi_frsub>:
 8000d68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000d6c:	e002      	b.n	8000d74 <__addsf3>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_fsub>:
 8000d70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000d74 <__addsf3>:
 8000d74:	0042      	lsls	r2, r0, #1
 8000d76:	bf1f      	itttt	ne
 8000d78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000d7c:	ea92 0f03 	teqne	r2, r3
 8000d80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d88:	d06a      	beq.n	8000e60 <__addsf3+0xec>
 8000d8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d92:	bfc1      	itttt	gt
 8000d94:	18d2      	addgt	r2, r2, r3
 8000d96:	4041      	eorgt	r1, r0
 8000d98:	4048      	eorgt	r0, r1
 8000d9a:	4041      	eorgt	r1, r0
 8000d9c:	bfb8      	it	lt
 8000d9e:	425b      	neglt	r3, r3
 8000da0:	2b19      	cmp	r3, #25
 8000da2:	bf88      	it	hi
 8000da4:	4770      	bxhi	lr
 8000da6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000daa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000db2:	bf18      	it	ne
 8000db4:	4240      	negne	r0, r0
 8000db6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000dbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000dc2:	bf18      	it	ne
 8000dc4:	4249      	negne	r1, r1
 8000dc6:	ea92 0f03 	teq	r2, r3
 8000dca:	d03f      	beq.n	8000e4c <__addsf3+0xd8>
 8000dcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000dd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000dd4:	eb10 000c 	adds.w	r0, r0, ip
 8000dd8:	f1c3 0320 	rsb	r3, r3, #32
 8000ddc:	fa01 f103 	lsl.w	r1, r1, r3
 8000de0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__addsf3+0x78>
 8000de6:	4249      	negs	r1, r1
 8000de8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000dec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000df0:	d313      	bcc.n	8000e1a <__addsf3+0xa6>
 8000df2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000df6:	d306      	bcc.n	8000e06 <__addsf3+0x92>
 8000df8:	0840      	lsrs	r0, r0, #1
 8000dfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000dfe:	f102 0201 	add.w	r2, r2, #1
 8000e02:	2afe      	cmp	r2, #254	; 0xfe
 8000e04:	d251      	bcs.n	8000eaa <__addsf3+0x136>
 8000e06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e0e:	bf08      	it	eq
 8000e10:	f020 0001 	biceq.w	r0, r0, #1
 8000e14:	ea40 0003 	orr.w	r0, r0, r3
 8000e18:	4770      	bx	lr
 8000e1a:	0049      	lsls	r1, r1, #1
 8000e1c:	eb40 0000 	adc.w	r0, r0, r0
 8000e20:	3a01      	subs	r2, #1
 8000e22:	bf28      	it	cs
 8000e24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e28:	d2ed      	bcs.n	8000e06 <__addsf3+0x92>
 8000e2a:	fab0 fc80 	clz	ip, r0
 8000e2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e32:	ebb2 020c 	subs.w	r2, r2, ip
 8000e36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e3a:	bfaa      	itet	ge
 8000e3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e40:	4252      	neglt	r2, r2
 8000e42:	4318      	orrge	r0, r3
 8000e44:	bfbc      	itt	lt
 8000e46:	40d0      	lsrlt	r0, r2
 8000e48:	4318      	orrlt	r0, r3
 8000e4a:	4770      	bx	lr
 8000e4c:	f092 0f00 	teq	r2, #0
 8000e50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e54:	bf06      	itte	eq
 8000e56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e5a:	3201      	addeq	r2, #1
 8000e5c:	3b01      	subne	r3, #1
 8000e5e:	e7b5      	b.n	8000dcc <__addsf3+0x58>
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d021      	beq.n	8000eb4 <__addsf3+0x140>
 8000e70:	ea92 0f03 	teq	r2, r3
 8000e74:	d004      	beq.n	8000e80 <__addsf3+0x10c>
 8000e76:	f092 0f00 	teq	r2, #0
 8000e7a:	bf08      	it	eq
 8000e7c:	4608      	moveq	r0, r1
 8000e7e:	4770      	bx	lr
 8000e80:	ea90 0f01 	teq	r0, r1
 8000e84:	bf1c      	itt	ne
 8000e86:	2000      	movne	r0, #0
 8000e88:	4770      	bxne	lr
 8000e8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000e8e:	d104      	bne.n	8000e9a <__addsf3+0x126>
 8000e90:	0040      	lsls	r0, r0, #1
 8000e92:	bf28      	it	cs
 8000e94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e9e:	bf3c      	itt	cc
 8000ea0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ea4:	4770      	bxcc	lr
 8000ea6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000eaa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000eae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb2:	4770      	bx	lr
 8000eb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000eb8:	bf16      	itet	ne
 8000eba:	4608      	movne	r0, r1
 8000ebc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ec0:	4601      	movne	r1, r0
 8000ec2:	0242      	lsls	r2, r0, #9
 8000ec4:	bf06      	itte	eq
 8000ec6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000eca:	ea90 0f01 	teqeq	r0, r1
 8000ece:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_ui2f>:
 8000ed4:	f04f 0300 	mov.w	r3, #0
 8000ed8:	e004      	b.n	8000ee4 <__aeabi_i2f+0x8>
 8000eda:	bf00      	nop

08000edc <__aeabi_i2f>:
 8000edc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ee0:	bf48      	it	mi
 8000ee2:	4240      	negmi	r0, r0
 8000ee4:	ea5f 0c00 	movs.w	ip, r0
 8000ee8:	bf08      	it	eq
 8000eea:	4770      	bxeq	lr
 8000eec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ef0:	4601      	mov	r1, r0
 8000ef2:	f04f 0000 	mov.w	r0, #0
 8000ef6:	e01c      	b.n	8000f32 <__aeabi_l2f+0x2a>

08000ef8 <__aeabi_ul2f>:
 8000ef8:	ea50 0201 	orrs.w	r2, r0, r1
 8000efc:	bf08      	it	eq
 8000efe:	4770      	bxeq	lr
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	e00a      	b.n	8000f1c <__aeabi_l2f+0x14>
 8000f06:	bf00      	nop

08000f08 <__aeabi_l2f>:
 8000f08:	ea50 0201 	orrs.w	r2, r0, r1
 8000f0c:	bf08      	it	eq
 8000f0e:	4770      	bxeq	lr
 8000f10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f14:	d502      	bpl.n	8000f1c <__aeabi_l2f+0x14>
 8000f16:	4240      	negs	r0, r0
 8000f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f1c:	ea5f 0c01 	movs.w	ip, r1
 8000f20:	bf02      	ittt	eq
 8000f22:	4684      	moveq	ip, r0
 8000f24:	4601      	moveq	r1, r0
 8000f26:	2000      	moveq	r0, #0
 8000f28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f2c:	bf08      	it	eq
 8000f2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f36:	fabc f28c 	clz	r2, ip
 8000f3a:	3a08      	subs	r2, #8
 8000f3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f40:	db10      	blt.n	8000f64 <__aeabi_l2f+0x5c>
 8000f42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f46:	4463      	add	r3, ip
 8000f48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f4c:	f1c2 0220 	rsb	r2, r2, #32
 8000f50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f54:	fa20 f202 	lsr.w	r2, r0, r2
 8000f58:	eb43 0002 	adc.w	r0, r3, r2
 8000f5c:	bf08      	it	eq
 8000f5e:	f020 0001 	biceq.w	r0, r0, #1
 8000f62:	4770      	bx	lr
 8000f64:	f102 0220 	add.w	r2, r2, #32
 8000f68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f6c:	f1c2 0220 	rsb	r2, r2, #32
 8000f70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000f74:	fa21 f202 	lsr.w	r2, r1, r2
 8000f78:	eb43 0002 	adc.w	r0, r3, r2
 8000f7c:	bf08      	it	eq
 8000f7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_f2iz>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30f      	bcc.n	8000fae <__aeabi_f2iz+0x2a>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x30>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa8:	bf18      	it	ne
 8000faa:	4240      	negne	r0, r0
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2iz+0x3a>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d105      	bne.n	8000fca <__aeabi_f2iz+0x46>
 8000fbe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fc2:	bf08      	it	eq
 8000fc4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe4:	4b23      	ldr	r3, [pc, #140]	; (8001074 <MX_GPIO_Init+0xa4>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a22      	ldr	r2, [pc, #136]	; (8001074 <MX_GPIO_Init+0xa4>)
 8000fea:	f043 0320 	orr.w	r3, r3, #32
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b20      	ldr	r3, [pc, #128]	; (8001074 <MX_GPIO_Init+0xa4>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0320 	and.w	r3, r3, #32
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <MX_GPIO_Init+0xa4>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <MX_GPIO_Init+0xa4>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <MX_GPIO_Init+0xa4>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <MX_GPIO_Init+0xa4>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a16      	ldr	r2, [pc, #88]	; (8001074 <MX_GPIO_Init+0xa4>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_GPIO_Init+0xa4>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_GPIO_Init+0xa4>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a10      	ldr	r2, [pc, #64]	; (8001074 <MX_GPIO_Init+0xa4>)
 8001032:	f043 0308 	orr.w	r3, r3, #8
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_GPIO_Init+0xa4>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	210f      	movs	r1, #15
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <MX_GPIO_Init+0xa8>)
 800104a:	f001 fadf 	bl	800260c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800104e:	230f      	movs	r3, #15
 8001050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2302      	movs	r3, #2
 800105c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4619      	mov	r1, r3
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <MX_GPIO_Init+0xa8>)
 8001066:	f001 f93d 	bl	80022e4 <HAL_GPIO_Init>

}
 800106a:	bf00      	nop
 800106c:	3720      	adds	r7, #32
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	40011000 	.word	0x40011000

0800107c <myabs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int myabs(int a)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	int temp;
	if(a<0)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	da03      	bge.n	8001092 <myabs+0x16>
	  temp=-a;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	425b      	negs	r3, r3
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e001      	b.n	8001096 <myabs+0x1a>
	else
	  temp=a;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]
	return temp;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
	...

080010a4 <Left_Go>:

void Left_Go()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(m_DirPort,AIN1,GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2101      	movs	r1, #1
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <Left_Go+0x1c>)
 80010ae:	f001 faad 	bl	800260c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m_DirPort,AIN2,GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2102      	movs	r1, #2
 80010b6:	4802      	ldr	r0, [pc, #8]	; (80010c0 <Left_Go+0x1c>)
 80010b8:	f001 faa8 	bl	800260c <HAL_GPIO_WritePin>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40011000 	.word	0x40011000

080010c4 <Right_Go>:

void Right_Go()
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(m_DirPort,BIN1,GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2104      	movs	r1, #4
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <Right_Go+0x1c>)
 80010ce:	f001 fa9d 	bl	800260c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m_DirPort,BIN2,GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2108      	movs	r1, #8
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <Right_Go+0x1c>)
 80010d8:	f001 fa98 	bl	800260c <HAL_GPIO_WritePin>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40011000 	.word	0x40011000

080010e4 <Left_Back>:

void Left_Back()
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(m_DirPort,AIN1,GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2101      	movs	r1, #1
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <Left_Back+0x1c>)
 80010ee:	f001 fa8d 	bl	800260c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m_DirPort,AIN2,GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2102      	movs	r1, #2
 80010f6:	4802      	ldr	r0, [pc, #8]	; (8001100 <Left_Back+0x1c>)
 80010f8:	f001 fa88 	bl	800260c <HAL_GPIO_WritePin>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40011000 	.word	0x40011000

08001104 <Right_Back>:

void Right_Back()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(m_DirPort,BIN1,GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2104      	movs	r1, #4
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <Right_Back+0x1c>)
 800110e:	f001 fa7d 	bl	800260c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m_DirPort,BIN2,GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2108      	movs	r1, #8
 8001116:	4802      	ldr	r0, [pc, #8]	; (8001120 <Right_Back+0x1c>)
 8001118:	f001 fa78 	bl	800260c <HAL_GPIO_WritePin>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40011000 	.word	0x40011000

08001124 <Left_Stop>:
		HAL_GPIO_WritePin(m_DirPort,BIN1,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(m_DirPort,BIN2,GPIO_PIN_SET);
}

void Left_Stop()
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(m_DirPort,AIN1,GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2101      	movs	r1, #1
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <Left_Stop+0x1c>)
 800112e:	f001 fa6d 	bl	800260c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m_DirPort,AIN2,GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	2102      	movs	r1, #2
 8001136:	4802      	ldr	r0, [pc, #8]	; (8001140 <Left_Stop+0x1c>)
 8001138:	f001 fa68 	bl	800260c <HAL_GPIO_WritePin>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40011000 	.word	0x40011000

08001144 <Right_Stop>:

void Right_Stop()
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(m_DirPort,BIN1,GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2104      	movs	r1, #4
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <Right_Stop+0x1c>)
 800114e:	f001 fa5d 	bl	800260c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m_DirPort,BIN2,GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	2108      	movs	r1, #8
 8001156:	4802      	ldr	r0, [pc, #8]	; (8001160 <Right_Stop+0x1c>)
 8001158:	f001 fa58 	bl	800260c <HAL_GPIO_WritePin>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40011000 	.word	0x40011000

08001164 <MotorControl>:

void MotorControl(int leftMotorPWM, int rightMotorPWM)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
		if(leftMotorPWM>=0&&rightMotorPWM>=0)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0f      	blt.n	8001194 <MotorControl+0x30>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	db0c      	blt.n	8001194 <MotorControl+0x30>
		{
//			printf("111\r\n");
				Left_Go();
 800117a:	f7ff ff93 	bl	80010a4 <Left_Go>
				Right_Go();
 800117e:	f7ff ffa1 	bl	80010c4 <Right_Go>
				__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,leftMotorPWM);
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MotorControl+0x90>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,rightMotorPWM);
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MotorControl+0x90>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	639a      	str	r2, [r3, #56]	; 0x38
 8001192:	e02b      	b.n	80011ec <MotorControl+0x88>
//		printf("leftPWM is %d\r\n",leftMotorPWM);
//		printf("rightPWM is %d\r\n",rightMotorPWM);
		}

		else if(leftMotorPWM<0&&rightMotorPWM<0)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	da15      	bge.n	80011c6 <MotorControl+0x62>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	da12      	bge.n	80011c6 <MotorControl+0x62>
		{
				Left_Back();
 80011a0:	f7ff ffa0 	bl	80010e4 <Left_Back>
				Right_Back();
 80011a4:	f7ff ffae 	bl	8001104 <Right_Back>
				__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,myabs(leftMotorPWM));
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff67 	bl	800107c <myabs>
 80011ae:	4602      	mov	r2, r0
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MotorControl+0x90>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,myabs(rightMotorPWM));
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	f7ff ff60 	bl	800107c <myabs>
 80011bc:	4602      	mov	r2, r0
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <MotorControl+0x90>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	639a      	str	r2, [r3, #56]	; 0x38
 80011c4:	e012      	b.n	80011ec <MotorControl+0x88>
		}

		else if(leftMotorPWM==0&&rightMotorPWM==0)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10f      	bne.n	80011ec <MotorControl+0x88>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10c      	bne.n	80011ec <MotorControl+0x88>
		{
				Left_Stop();
 80011d2:	f7ff ffa7 	bl	8001124 <Left_Stop>
				Right_Stop();
 80011d6:	f7ff ffb5 	bl	8001144 <Right_Stop>
				__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,0);
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MotorControl+0x90>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2200      	movs	r2, #0
 80011e0:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <MotorControl+0x90>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2200      	movs	r2, #0
 80011e8:	639a      	str	r2, [r3, #56]	; 0x38
		}
}
 80011ea:	e7ff      	b.n	80011ec <MotorControl+0x88>
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000358 	.word	0x20000358

080011f8 <GetEncoderPulse>:
	}
}


void GetEncoderPulse()
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
	  encoderPulse[0] = -((short)__HAL_TIM_GET_COUNTER(&htim2));
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <GetEncoderPulse+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	b29b      	uxth	r3, r3
 8001204:	425b      	negs	r3, r3
 8001206:	b29b      	uxth	r3, r3
 8001208:	b21a      	sxth	r2, r3
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <GetEncoderPulse+0x44>)
 800120c:	801a      	strh	r2, [r3, #0]
	  encoderPulse[1] = -((short)__HAL_TIM_GET_COUNTER(&htim3));
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <GetEncoderPulse+0x48>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	b29b      	uxth	r3, r3
 8001216:	425b      	negs	r3, r3
 8001218:	b29b      	uxth	r3, r3
 800121a:	b21a      	sxth	r2, r3
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <GetEncoderPulse+0x44>)
 800121e:	805a      	strh	r2, [r3, #2]

    __HAL_TIM_GET_COUNTER(&htim2) = 0;	 //计数值重新清�??
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <GetEncoderPulse+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2200      	movs	r2, #0
 8001226:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_GET_COUNTER(&htim3) = 0;
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <GetEncoderPulse+0x48>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	20000238 	.word	0x20000238
 800123c:	200001f0 	.word	0x200001f0
 8001240:	20000280 	.word	0x20000280
 8001244:	00000000 	.word	0x00000000

08001248 <CalActualSpeed>:


float CalActualSpeed(int pulse)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    return (float)(0.003092424 * pulse);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff f9f7 	bl	8000644 <__aeabi_i2d>
 8001256:	a308      	add	r3, pc, #32	; (adr r3, 8001278 <CalActualSpeed+0x30>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f7ff fa5c 	bl	8000718 <__aeabi_dmul>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f7ff fd2e 	bl	8000cc8 <__aeabi_d2f>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	7e406f28 	.word	0x7e406f28
 800127c:	3f695548 	.word	0x3f695548

08001280 <PID_Init>:
/**
  * @brief  PID相关参数的初始化
  * @param  PID的结构体指针
  */
void PID_Init(PID *p)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    p->Kp = Velocity_Kp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <PID_Init+0x48>)
 800128c:	601a      	str	r2, [r3, #0]
    p->Ki = Velocity_Ki;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001294:	605a      	str	r2, [r3, #4]
    p->Kd = Velocity_Kd;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
    p->last_error = 0;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
    p->prev_error = 0;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
    p->limit = limit_value;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012b4:	615a      	str	r2, [r3, #20]
    p->pwm_add = 0;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	41700000 	.word	0x41700000

080012cc <PID_Cal>:
 /**
  * @brief  PID相关参数的初始化
  * @param  PID的结构体指针
  */
void PID_Cal(int targetSpeed,int currentSpeed,PID *p)
{
 80012cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
    int error = targetSpeed - currentSpeed;
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	617b      	str	r3, [r7, #20]
    p->pwm_add += p->Kp*(error - p->last_error) + p->Ki*error + p->Kd*(error - 2*p->last_error+p->prev_error);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fdf8 	bl	8000edc <__aeabi_i2f>
 80012ec:	4605      	mov	r5, r0
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681c      	ldr	r4, [r3, #0]
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff fdf2 	bl	8000edc <__aeabi_i2f>
 80012f8:	4602      	mov	r2, r0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	4619      	mov	r1, r3
 8001300:	4610      	mov	r0, r2
 8001302:	f7ff fd35 	bl	8000d70 <__aeabi_fsub>
 8001306:	4603      	mov	r3, r0
 8001308:	4619      	mov	r1, r3
 800130a:	4620      	mov	r0, r4
 800130c:	f7fe ff94 	bl	8000238 <__aeabi_fmul>
 8001310:	4603      	mov	r3, r0
 8001312:	461e      	mov	r6, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685c      	ldr	r4, [r3, #4]
 8001318:	6978      	ldr	r0, [r7, #20]
 800131a:	f7ff fddf 	bl	8000edc <__aeabi_i2f>
 800131e:	4603      	mov	r3, r0
 8001320:	4619      	mov	r1, r3
 8001322:	4620      	mov	r0, r4
 8001324:	f7fe ff88 	bl	8000238 <__aeabi_fmul>
 8001328:	4603      	mov	r3, r0
 800132a:	4619      	mov	r1, r3
 800132c:	4630      	mov	r0, r6
 800132e:	f7ff fd21 	bl	8000d74 <__addsf3>
 8001332:	4603      	mov	r3, r0
 8001334:	4698      	mov	r8, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689c      	ldr	r4, [r3, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff fdce 	bl	8000edc <__aeabi_i2f>
 8001340:	4606      	mov	r6, r0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	4619      	mov	r1, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fd13 	bl	8000d74 <__addsf3>
 800134e:	4603      	mov	r3, r0
 8001350:	4619      	mov	r1, r3
 8001352:	4630      	mov	r0, r6
 8001354:	f7ff fd0c 	bl	8000d70 <__aeabi_fsub>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	4619      	mov	r1, r3
 8001362:	4610      	mov	r0, r2
 8001364:	f7ff fd06 	bl	8000d74 <__addsf3>
 8001368:	4603      	mov	r3, r0
 800136a:	4619      	mov	r1, r3
 800136c:	4620      	mov	r0, r4
 800136e:	f7fe ff63 	bl	8000238 <__aeabi_fmul>
 8001372:	4603      	mov	r3, r0
 8001374:	4619      	mov	r1, r3
 8001376:	4640      	mov	r0, r8
 8001378:	f7ff fcfc 	bl	8000d74 <__addsf3>
 800137c:	4603      	mov	r3, r0
 800137e:	4619      	mov	r1, r3
 8001380:	4628      	mov	r0, r5
 8001382:	f7ff fcf7 	bl	8000d74 <__addsf3>
 8001386:	4603      	mov	r3, r0
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fdfb 	bl	8000f84 <__aeabi_f2iz>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	619a      	str	r2, [r3, #24]

		p->prev_error = p->last_error;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	611a      	str	r2, [r3, #16]
	  p->last_error = error;
 800139c:	6978      	ldr	r0, [r7, #20]
 800139e:	f7ff fd9d 	bl	8000edc <__aeabi_i2f>
 80013a2:	4602      	mov	r2, r0
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	60da      	str	r2, [r3, #12]

		if(p->pwm_add>p->limit) p->pwm_add=p->limit;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699a      	ldr	r2, [r3, #24]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	dd03      	ble.n	80013bc <PID_Cal+0xf0>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
		if(p->pwm_add<-p->limit) p->pwm_add=-p->limit;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	699a      	ldr	r2, [r3, #24]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	425b      	negs	r3, r3
 80013c6:	429a      	cmp	r2, r3
 80013c8:	da04      	bge.n	80013d4 <PID_Cal+0x108>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	425a      	negs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e4:	f000 fe0e 	bl	8002004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e8:	f000 f84e 	bl	8001488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ec:	f7ff fdf0 	bl	8000fd0 <MX_GPIO_Init>
  MX_TIM8_Init();
 80013f0:	f000 fb84 	bl	8001afc <MX_TIM8_Init>
  MX_TIM4_Init();
 80013f4:	f000 faf2 	bl	80019dc <MX_TIM4_Init>
  MX_TIM2_Init();
 80013f8:	f000 fa48 	bl	800188c <MX_TIM2_Init>
  MX_TIM3_Init();
 80013fc:	f000 fa9a 	bl	8001934 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001400:	f000 fb46 	bl	8001a90 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001404:	f000 fd62 	bl	8001ecc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);  //使能定时�??6中断
 8001408:	4815      	ldr	r0, [pc, #84]	; (8001460 <main+0x80>)
 800140a:	f001 fd77 	bl	8002efc <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);  //使能定时�??8的PWM模式
 800140e:	2100      	movs	r1, #0
 8001410:	4814      	ldr	r0, [pc, #80]	; (8001464 <main+0x84>)
 8001412:	f001 fe23 	bl	800305c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8001416:	2104      	movs	r1, #4
 8001418:	4812      	ldr	r0, [pc, #72]	; (8001464 <main+0x84>)
 800141a:	f001 fe1f 	bl	800305c <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);  //启动定时�??4的PWM模式
 800141e:	2108      	movs	r1, #8
 8001420:	4811      	ldr	r0, [pc, #68]	; (8001468 <main+0x88>)
 8001422:	f001 fe1b 	bl	800305c <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1);  //启动定时�??2的编码器模式
 8001426:	2100      	movs	r1, #0
 8001428:	4810      	ldr	r0, [pc, #64]	; (800146c <main+0x8c>)
 800142a:	f001 ff73 	bl	8003314 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_2);
 800142e:	2104      	movs	r1, #4
 8001430:	480e      	ldr	r0, [pc, #56]	; (800146c <main+0x8c>)
 8001432:	f001 ff6f 	bl	8003314 <HAL_TIM_Encoder_Start>

  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);  //启动定时�??3的编码器模式
 8001436:	2100      	movs	r1, #0
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <main+0x90>)
 800143a:	f001 ff6b 	bl	8003314 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 800143e:	2104      	movs	r1, #4
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <main+0x90>)
 8001442:	f001 ff67 	bl	8003314 <HAL_TIM_Encoder_Start>

  PID_Init(&LeftMotor_PID);
 8001446:	480b      	ldr	r0, [pc, #44]	; (8001474 <main+0x94>)
 8001448:	f7ff ff1a 	bl	8001280 <PID_Init>
  PID_Init(&RightMotor_PID);
 800144c:	480a      	ldr	r0, [pc, #40]	; (8001478 <main+0x98>)
 800144e:	f7ff ff17 	bl	8001280 <PID_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	leftTargetSpeed = 0.2;
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <main+0x9c>)
 8001454:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <main+0xa0>)
 8001456:	601a      	str	r2, [r3, #0]
	rightTargetSpeed = 0.2;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <main+0xa4>)
 800145a:	4a09      	ldr	r2, [pc, #36]	; (8001480 <main+0xa0>)
 800145c:	601a      	str	r2, [r3, #0]
	leftTargetSpeed = 0.2;
 800145e:	e7f8      	b.n	8001452 <main+0x72>
 8001460:	20000310 	.word	0x20000310
 8001464:	20000358 	.word	0x20000358
 8001468:	200002c8 	.word	0x200002c8
 800146c:	20000238 	.word	0x20000238
 8001470:	20000280 	.word	0x20000280
 8001474:	200001fc 	.word	0x200001fc
 8001478:	20000218 	.word	0x20000218
 800147c:	200001f4 	.word	0x200001f4
 8001480:	3e4ccccd 	.word	0x3e4ccccd
 8001484:	200001f8 	.word	0x200001f8

08001488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b090      	sub	sp, #64	; 0x40
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 0318 	add.w	r3, r7, #24
 8001492:	2228      	movs	r2, #40	; 0x28
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f003 fc03 	bl	8004ca2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014bc:	2302      	movs	r3, #2
 80014be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 f8b3 	bl	800263c <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014dc:	f000 f8a6 	bl	800162c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e0:	230f      	movs	r3, #15
 80014e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e4:	2302      	movs	r3, #2
 80014e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2102      	movs	r1, #2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 fb20 	bl	8002b40 <HAL_RCC_ClockConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001506:	f000 f891 	bl	800162c <Error_Handler>
  }
}
 800150a:	bf00      	nop
 800150c:	3740      	adds	r7, #64	; 0x40
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  //定时器6中断回调函数，每50ms调用
{
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	float c_leftSpeed,c_rightSpeed;
  if(htim==(&htim6))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a38      	ldr	r2, [pc, #224]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d169      	bne.n	80015f8 <HAL_TIM_PeriodElapsedCallback+0xe4>
  {
		GetEncoderPulse();
 8001524:	f7ff fe68 	bl	80011f8 <GetEncoderPulse>
		c_leftSpeed = CalActualSpeed(encoderPulse[0]);   //获得当前的�?�度�??
 8001528:	4b36      	ldr	r3, [pc, #216]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800152a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fe8a 	bl	8001248 <CalActualSpeed>
 8001534:	60f8      	str	r0, [r7, #12]
		c_rightSpeed = CalActualSpeed(encoderPulse[1]);
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001538:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fe83 	bl	8001248 <CalActualSpeed>
 8001542:	60b8      	str	r0, [r7, #8]
		printf("{Left_Speed is:%.2f cm/s}\r\n",c_leftSpeed);
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f7ff f88f 	bl	8000668 <__aeabi_f2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	482e      	ldr	r0, [pc, #184]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001550:	f003 fb52 	bl	8004bf8 <iprintf>
		printf("{right_Speed is:%.2f cm/s}\r\n",c_rightSpeed);
 8001554:	68b8      	ldr	r0, [r7, #8]
 8001556:	f7ff f887 	bl	8000668 <__aeabi_f2d>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	482b      	ldr	r0, [pc, #172]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001560:	f003 fb4a 	bl	8004bf8 <iprintf>

		PID_Cal((leftTargetSpeed)*100,(c_leftSpeed)*100,&LeftMotor_PID);
 8001564:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	492a      	ldr	r1, [pc, #168]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe fe64 	bl	8000238 <__aeabi_fmul>
 8001570:	4603      	mov	r3, r0
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fd06 	bl	8000f84 <__aeabi_f2iz>
 8001578:	4604      	mov	r4, r0
 800157a:	4926      	ldr	r1, [pc, #152]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7fe fe5b 	bl	8000238 <__aeabi_fmul>
 8001582:	4603      	mov	r3, r0
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fcfd 	bl	8000f84 <__aeabi_f2iz>
 800158a:	4603      	mov	r3, r0
 800158c:	4a22      	ldr	r2, [pc, #136]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800158e:	4619      	mov	r1, r3
 8001590:	4620      	mov	r0, r4
 8001592:	f7ff fe9b 	bl	80012cc <PID_Cal>
		PID_Cal(rightTargetSpeed*100,c_rightSpeed*100,&RightMotor_PID);
 8001596:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	491e      	ldr	r1, [pc, #120]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fe4b 	bl	8000238 <__aeabi_fmul>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fced 	bl	8000f84 <__aeabi_f2iz>
 80015aa:	4604      	mov	r4, r0
 80015ac:	4919      	ldr	r1, [pc, #100]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80015ae:	68b8      	ldr	r0, [r7, #8]
 80015b0:	f7fe fe42 	bl	8000238 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fce4 	bl	8000f84 <__aeabi_f2iz>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a18      	ldr	r2, [pc, #96]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015c0:	4619      	mov	r1, r3
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff fe82 	bl	80012cc <PID_Cal>
		MotorControl(LeftMotor_PID.pwm_add,RightMotor_PID.pwm_add);
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80015ce:	6992      	ldr	r2, [r2, #24]
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fdc6 	bl	8001164 <MotorControl>
//		printf("leftpwmadd %d\r\n",LeftMotor_PID.pwm_add);
//		printf("rightpwmadd %d\r\n",RightMotor_PID.pwm_add);
//	  printf("currentLeftPulse is %d\r\n",encoderPulse[0]);
//		printf("currentrightPulse is %d\r\n",encoderPulse[1]);
//	  printf("----------------------------\r\n");
		 printf("{currentLeftSpeed is:%.2f}\r\n",c_leftSpeed);
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7ff f845 	bl	8000668 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4810      	ldr	r0, [pc, #64]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80015e4:	f003 fb08 	bl	8004bf8 <iprintf>
		 printf("{currentrightSpeed is:%.2f}\r\n",c_rightSpeed);
 80015e8:	68b8      	ldr	r0, [r7, #8]
 80015ea:	f7ff f83d 	bl	8000668 <__aeabi_f2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	480d      	ldr	r0, [pc, #52]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80015f4:	f003 fb00 	bl	8004bf8 <iprintf>
  }
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd90      	pop	{r4, r7, pc}
 8001600:	20000310 	.word	0x20000310
 8001604:	200001f0 	.word	0x200001f0
 8001608:	08006b40 	.word	0x08006b40
 800160c:	08006b5c 	.word	0x08006b5c
 8001610:	200001f4 	.word	0x200001f4
 8001614:	42c80000 	.word	0x42c80000
 8001618:	200001fc 	.word	0x200001fc
 800161c:	200001f8 	.word	0x200001f8
 8001620:	20000218 	.word	0x20000218
 8001624:	08006b7c 	.word	0x08006b7c
 8001628:	08006b9c 	.word	0x08006b9c

0800162c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
}
 8001632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001634:	e7fe      	b.n	8001634 <Error_Handler+0x8>
	...

08001638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_MspInit+0x5c>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	4a14      	ldr	r2, [pc, #80]	; (8001694 <HAL_MspInit+0x5c>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6193      	str	r3, [r2, #24]
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_MspInit+0x5c>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <HAL_MspInit+0x5c>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <HAL_MspInit+0x5c>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	61d3      	str	r3, [r2, #28]
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_MspInit+0x5c>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_MspInit+0x60>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <HAL_MspInit+0x60>)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	40021000 	.word	0x40021000
 8001698:	40010000 	.word	0x40010000

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <NMI_Handler+0x4>

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <MemManage_Handler+0x4>

080016ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler+0x4>

080016ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e2:	f000 fcd5 	bl	8002090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <TIM6_IRQHandler+0x10>)
 80016f2:	f001 fe9d 	bl	8003430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000310 	.word	0x20000310

08001700 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return 1;
 8001704:	2301      	movs	r3, #1
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <_kill>:

int _kill(int pid, int sig)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001718:	f003 fb16 	bl	8004d48 <__errno>
 800171c:	4603      	mov	r3, r0
 800171e:	2216      	movs	r2, #22
 8001720:	601a      	str	r2, [r3, #0]
  return -1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_exit>:

void _exit (int status)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001736:	f04f 31ff 	mov.w	r1, #4294967295
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ffe7 	bl	800170e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001740:	e7fe      	b.n	8001740 <_exit+0x12>

08001742 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e00a      	b.n	800176a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001754:	f3af 8000 	nop.w
 8001758:	4601      	mov	r1, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	60ba      	str	r2, [r7, #8]
 8001760:	b2ca      	uxtb	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3301      	adds	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	429a      	cmp	r2, r3
 8001770:	dbf0      	blt.n	8001754 <_read+0x12>
  }

  return len;
 8001772:	687b      	ldr	r3, [r7, #4]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	e009      	b.n	80017a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	60ba      	str	r2, [r7, #8]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f000 fb86 	bl	8001ea8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	dbf1      	blt.n	800178e <_write+0x12>
  }
  return len;
 80017aa:	687b      	ldr	r3, [r7, #4]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_close>:

int _close(int file)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017da:	605a      	str	r2, [r3, #4]
  return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <_isatty>:

int _isatty(int file)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017f0:	2301      	movs	r3, #1
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800181c:	4a14      	ldr	r2, [pc, #80]	; (8001870 <_sbrk+0x5c>)
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <_sbrk+0x60>)
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <_sbrk+0x64>)
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <_sbrk+0x68>)
 8001834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <_sbrk+0x64>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	429a      	cmp	r2, r3
 8001842:	d207      	bcs.n	8001854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001844:	f003 fa80 	bl	8004d48 <__errno>
 8001848:	4603      	mov	r3, r0
 800184a:	220c      	movs	r2, #12
 800184c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
 8001852:	e009      	b.n	8001868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <_sbrk+0x64>)
 8001864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2000c000 	.word	0x2000c000
 8001874:	00000400 	.word	0x00000400
 8001878:	20000234 	.word	0x20000234
 800187c:	20000538 	.word	0x20000538

08001880 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	; 0x30
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	2224      	movs	r2, #36	; 0x24
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f003 fa01 	bl	8004ca2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <MX_TIM2_Init+0xa4>)
 80018aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018b0:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <MX_TIM2_Init+0xa4>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b6:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <MX_TIM2_Init+0xa4>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <MX_TIM2_Init+0xa4>)
 80018be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <MX_TIM2_Init+0xa4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <MX_TIM2_Init+0xa4>)
 80018cc:	2280      	movs	r2, #128	; 0x80
 80018ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018d0:	2303      	movs	r3, #3
 80018d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018d4:	2300      	movs	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018d8:	2301      	movs	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018e8:	2301      	movs	r3, #1
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	4619      	mov	r1, r3
 80018fa:	480d      	ldr	r0, [pc, #52]	; (8001930 <MX_TIM2_Init+0xa4>)
 80018fc:	f001 fc68 	bl	80031d0 <HAL_TIM_Encoder_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001906:	f7ff fe91 	bl	800162c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4619      	mov	r1, r3
 8001916:	4806      	ldr	r0, [pc, #24]	; (8001930 <MX_TIM2_Init+0xa4>)
 8001918:	f002 f9c2 	bl	8003ca0 <HAL_TIMEx_MasterConfigSynchronization>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001922:	f7ff fe83 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	3730      	adds	r7, #48	; 0x30
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000238 	.word	0x20000238

08001934 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08c      	sub	sp, #48	; 0x30
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	2224      	movs	r2, #36	; 0x24
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f003 f9ad 	bl	8004ca2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001950:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <MX_TIM3_Init+0xa0>)
 8001952:	4a21      	ldr	r2, [pc, #132]	; (80019d8 <MX_TIM3_Init+0xa4>)
 8001954:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <MX_TIM3_Init+0xa0>)
 8001958:	2200      	movs	r2, #0
 800195a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <MX_TIM3_Init+0xa0>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <MX_TIM3_Init+0xa0>)
 8001964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001968:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <MX_TIM3_Init+0xa0>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <MX_TIM3_Init+0xa0>)
 8001972:	2280      	movs	r2, #128	; 0x80
 8001974:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001976:	2303      	movs	r3, #3
 8001978:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800197e:	2301      	movs	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800198e:	2301      	movs	r3, #1
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	4619      	mov	r1, r3
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <MX_TIM3_Init+0xa0>)
 80019a2:	f001 fc15 	bl	80031d0 <HAL_TIM_Encoder_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80019ac:	f7ff fe3e 	bl	800162c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	4619      	mov	r1, r3
 80019bc:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_TIM3_Init+0xa0>)
 80019be:	f002 f96f 	bl	8003ca0 <HAL_TIMEx_MasterConfigSynchronization>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80019c8:	f7ff fe30 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	3730      	adds	r7, #48	; 0x30
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000280 	.word	0x20000280
 80019d8:	40000400 	.word	0x40000400

080019dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e2:	f107 0320 	add.w	r3, r7, #32
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	611a      	str	r2, [r3, #16]
 80019fa:	615a      	str	r2, [r3, #20]
 80019fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019fe:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <MX_TIM4_Init+0xac>)
 8001a00:	4a22      	ldr	r2, [pc, #136]	; (8001a8c <MX_TIM4_Init+0xb0>)
 8001a02:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <MX_TIM4_Init+0xac>)
 8001a06:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001a0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <MX_TIM4_Init+0xac>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <MX_TIM4_Init+0xac>)
 8001a14:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001a18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <MX_TIM4_Init+0xac>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <MX_TIM4_Init+0xac>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a26:	4818      	ldr	r0, [pc, #96]	; (8001a88 <MX_TIM4_Init+0xac>)
 8001a28:	f001 fac8 	bl	8002fbc <HAL_TIM_PWM_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001a32:	f7ff fdfb 	bl	800162c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a3e:	f107 0320 	add.w	r3, r7, #32
 8001a42:	4619      	mov	r1, r3
 8001a44:	4810      	ldr	r0, [pc, #64]	; (8001a88 <MX_TIM4_Init+0xac>)
 8001a46:	f002 f92b 	bl	8003ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001a50:	f7ff fdec 	bl	800162c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a54:	2360      	movs	r3, #96	; 0x60
 8001a56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2208      	movs	r2, #8
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4807      	ldr	r0, [pc, #28]	; (8001a88 <MX_TIM4_Init+0xac>)
 8001a6c:	f001 fde8 	bl	8003640 <HAL_TIM_PWM_ConfigChannel>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001a76:	f7ff fdd9 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a7a:	4803      	ldr	r0, [pc, #12]	; (8001a88 <MX_TIM4_Init+0xac>)
 8001a7c:	f000 f9be 	bl	8001dfc <HAL_TIM_MspPostInit>

}
 8001a80:	bf00      	nop
 8001a82:	3728      	adds	r7, #40	; 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200002c8 	.word	0x200002c8
 8001a8c:	40000800 	.word	0x40000800

08001a90 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a96:	463b      	mov	r3, r7
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <MX_TIM6_Init+0x64>)
 8001aa0:	4a15      	ldr	r2, [pc, #84]	; (8001af8 <MX_TIM6_Init+0x68>)
 8001aa2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 499;
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <MX_TIM6_Init+0x64>)
 8001aa6:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001aaa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <MX_TIM6_Init+0x64>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7199;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <MX_TIM6_Init+0x64>)
 8001ab4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001ab8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <MX_TIM6_Init+0x64>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <MX_TIM6_Init+0x64>)
 8001ac2:	f001 f9cb 	bl	8002e5c <HAL_TIM_Base_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001acc:	f7ff fdae 	bl	800162c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ad8:	463b      	mov	r3, r7
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <MX_TIM6_Init+0x64>)
 8001ade:	f002 f8df 	bl	8003ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ae8:	f7ff fda0 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000310 	.word	0x20000310
 8001af8:	40001000 	.word	0x40001000

08001afc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b092      	sub	sp, #72	; 0x48
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
 8001b1c:	615a      	str	r2, [r3, #20]
 8001b1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	2220      	movs	r2, #32
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 f8bb 	bl	8004ca2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b2c:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <MX_TIM8_Init+0x118>)
 8001b2e:	4a3a      	ldr	r2, [pc, #232]	; (8001c18 <MX_TIM8_Init+0x11c>)
 8001b30:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8001b32:	4b38      	ldr	r3, [pc, #224]	; (8001c14 <MX_TIM8_Init+0x118>)
 8001b34:	2203      	movs	r2, #3
 8001b36:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <MX_TIM8_Init+0x118>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8001b3e:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <MX_TIM8_Init+0x118>)
 8001b40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b44:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b46:	4b33      	ldr	r3, [pc, #204]	; (8001c14 <MX_TIM8_Init+0x118>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b4c:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <MX_TIM8_Init+0x118>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b52:	4b30      	ldr	r3, [pc, #192]	; (8001c14 <MX_TIM8_Init+0x118>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b58:	482e      	ldr	r0, [pc, #184]	; (8001c14 <MX_TIM8_Init+0x118>)
 8001b5a:	f001 fa2f 	bl	8002fbc <HAL_TIM_PWM_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001b64:	f7ff fd62 	bl	800162c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b74:	4619      	mov	r1, r3
 8001b76:	4827      	ldr	r0, [pc, #156]	; (8001c14 <MX_TIM8_Init+0x118>)
 8001b78:	f002 f892 	bl	8003ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001b82:	f7ff fd53 	bl	800162c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b86:	2360      	movs	r3, #96	; 0x60
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b92:	2300      	movs	r3, #0
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	4619      	mov	r1, r3
 8001baa:	481a      	ldr	r0, [pc, #104]	; (8001c14 <MX_TIM8_Init+0x118>)
 8001bac:	f001 fd48 	bl	8003640 <HAL_TIM_PWM_ConfigChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001bb6:	f7ff fd39 	bl	800162c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4814      	ldr	r0, [pc, #80]	; (8001c14 <MX_TIM8_Init+0x118>)
 8001bc4:	f001 fd3c 	bl	8003640 <HAL_TIM_PWM_ConfigChannel>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001bce:	f7ff fd2d 	bl	800162c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4807      	ldr	r0, [pc, #28]	; (8001c14 <MX_TIM8_Init+0x118>)
 8001bf6:	f002 f8bf 	bl	8003d78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001c00:	f7ff fd14 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001c04:	4803      	ldr	r0, [pc, #12]	; (8001c14 <MX_TIM8_Init+0x118>)
 8001c06:	f000 f8f9 	bl	8001dfc <HAL_TIM_MspPostInit>

}
 8001c0a:	bf00      	nop
 8001c0c:	3748      	adds	r7, #72	; 0x48
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000358 	.word	0x20000358
 8001c18:	40013400 	.word	0x40013400

08001c1c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08c      	sub	sp, #48	; 0x30
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3a:	d14f      	bne.n	8001cdc <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c3c:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	4a3d      	ldr	r2, [pc, #244]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	61d3      	str	r3, [r2, #28]
 8001c48:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a37      	ldr	r2, [pc, #220]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b35      	ldr	r3, [pc, #212]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a31      	ldr	r2, [pc, #196]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c72:	f043 0308 	orr.w	r3, r3, #8
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	4619      	mov	r1, r3
 8001c98:	4828      	ldr	r0, [pc, #160]	; (8001d3c <HAL_TIM_Encoder_MspInit+0x120>)
 8001c9a:	f000 fb23 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c9e:	2308      	movs	r3, #8
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001caa:	f107 031c 	add.w	r3, r7, #28
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4823      	ldr	r0, [pc, #140]	; (8001d40 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cb2:	f000 fb17 	bl	80022e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001cb6:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <HAL_TIM_Encoder_MspInit+0x128>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd4:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <HAL_TIM_Encoder_MspInit+0x128>)
 8001cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001cda:	e028      	b.n	8001d2e <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM3)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d123      	bne.n	8001d2e <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a13      	ldr	r2, [pc, #76]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	61d3      	str	r3, [r2, #28]
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	6193      	str	r3, [r2, #24]
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d16:	23c0      	movs	r3, #192	; 0xc0
 8001d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4619      	mov	r1, r3
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <HAL_TIM_Encoder_MspInit+0x120>)
 8001d2a:	f000 fadb 	bl	80022e4 <HAL_GPIO_Init>
}
 8001d2e:	bf00      	nop
 8001d30:	3730      	adds	r7, #48	; 0x30
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40010800 	.word	0x40010800
 8001d40:	40010c00 	.word	0x40010c00
 8001d44:	40010000 	.word	0x40010000
 8001d48:	40000400 	.word	0x40000400

08001d4c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <HAL_TIM_PWM_MspInit+0x58>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d10c      	bne.n	8001d78 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4a11      	ldr	r2, [pc, #68]	; (8001da8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	61d3      	str	r3, [r2, #28]
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001d76:	e010      	b.n	8001d9a <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM8)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <HAL_TIM_PWM_MspInit+0x60>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d10b      	bne.n	8001d9a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001d88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d8c:	6193      	str	r3, [r2, #24]
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	40000800 	.word	0x40000800
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40013400 	.word	0x40013400

08001db0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <HAL_TIM_Base_MspInit+0x44>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d113      	bne.n	8001dea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_TIM_Base_MspInit+0x48>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <HAL_TIM_Base_MspInit+0x48>)
 8001dc8:	f043 0310 	orr.w	r3, r3, #16
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_TIM_Base_MspInit+0x48>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2036      	movs	r0, #54	; 0x36
 8001de0:	f000 fa49 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001de4:	2036      	movs	r0, #54	; 0x36
 8001de6:	f000 fa62 	bl	80022ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40001000 	.word	0x40001000
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0310 	add.w	r3, r7, #16
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_TIM_MspPostInit+0x98>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d119      	bne.n	8001e50 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <HAL_TIM_MspPostInit+0x9c>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <HAL_TIM_MspPostInit+0x9c>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_TIM_MspPostInit+0x9c>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e42:	f107 0310 	add.w	r3, r7, #16
 8001e46:	4619      	mov	r1, r3
 8001e48:	4814      	ldr	r0, [pc, #80]	; (8001e9c <HAL_TIM_MspPostInit+0xa0>)
 8001e4a:	f000 fa4b 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001e4e:	e01c      	b.n	8001e8a <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM8)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <HAL_TIM_MspPostInit+0xa4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d117      	bne.n	8001e8a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_TIM_MspPostInit+0x9c>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <HAL_TIM_MspPostInit+0x9c>)
 8001e60:	f043 0310 	orr.w	r3, r3, #16
 8001e64:	6193      	str	r3, [r2, #24]
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <HAL_TIM_MspPostInit+0x9c>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e72:	23c0      	movs	r3, #192	; 0xc0
 8001e74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	4619      	mov	r1, r3
 8001e84:	4807      	ldr	r0, [pc, #28]	; (8001ea4 <HAL_TIM_MspPostInit+0xa8>)
 8001e86:	f000 fa2d 	bl	80022e4 <HAL_GPIO_Init>
}
 8001e8a:	bf00      	nop
 8001e8c:	3720      	adds	r7, #32
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40000800 	.word	0x40000800
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010c00 	.word	0x40010c00
 8001ea0:	40013400 	.word	0x40013400
 8001ea4:	40011000 	.word	0x40011000

08001ea8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8001eb0:	1d39      	adds	r1, r7, #4
 8001eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <__io_putchar+0x20>)
 8001eba:	f002 f810 	bl	8003ede <HAL_UART_Transmit>
	return ch;
 8001ebe:	687b      	ldr	r3, [r7, #4]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	200003a0 	.word	0x200003a0

08001ecc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <MX_USART1_UART_Init+0x50>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001f04:	f001 ff9b 	bl	8003e3e <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f0e:	f7ff fb8d 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200003a0 	.word	0x200003a0
 8001f1c:	40013800 	.word	0x40013800

08001f20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <HAL_UART_MspInit+0x8c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d131      	bne.n	8001fa4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f40:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_UART_MspInit+0x90>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	4a1a      	ldr	r2, [pc, #104]	; (8001fb0 <HAL_UART_MspInit+0x90>)
 8001f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4a:	6193      	str	r3, [r2, #24]
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_UART_MspInit+0x90>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f58:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <HAL_UART_MspInit+0x90>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <HAL_UART_MspInit+0x90>)
 8001f5e:	f043 0304 	orr.w	r3, r3, #4
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_UART_MspInit+0x90>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 0310 	add.w	r3, r7, #16
 8001f82:	4619      	mov	r1, r3
 8001f84:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <HAL_UART_MspInit+0x94>)
 8001f86:	f000 f9ad 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <HAL_UART_MspInit+0x94>)
 8001fa0:	f000 f9a0 	bl	80022e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3720      	adds	r7, #32
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40013800 	.word	0x40013800
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40010800 	.word	0x40010800

08001fb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fb8:	f7ff fc62 	bl	8001880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fbc:	480b      	ldr	r0, [pc, #44]	; (8001fec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fbe:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fc0:	4a0c      	ldr	r2, [pc, #48]	; (8001ff4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc4:	e002      	b.n	8001fcc <LoopCopyDataInit>

08001fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fca:	3304      	adds	r3, #4

08001fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd0:	d3f9      	bcc.n	8001fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd2:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fd4:	4c09      	ldr	r4, [pc, #36]	; (8001ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd8:	e001      	b.n	8001fde <LoopFillZerobss>

08001fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fdc:	3204      	adds	r2, #4

08001fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe0:	d3fb      	bcc.n	8001fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fe2:	f002 feb7 	bl	8004d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fe6:	f7ff f9fb 	bl	80013e0 <main>
  bx lr
 8001fea:	4770      	bx	lr
  ldr r0, =_sdata
 8001fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ff4:	08006f5c 	.word	0x08006f5c
  ldr r2, =_sbss
 8001ff8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ffc:	20000538 	.word	0x20000538

08002000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002000:	e7fe      	b.n	8002000 <ADC1_2_IRQHandler>
	...

08002004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_Init+0x28>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a07      	ldr	r2, [pc, #28]	; (800202c <HAL_Init+0x28>)
 800200e:	f043 0310 	orr.w	r3, r3, #16
 8002012:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002014:	2003      	movs	r0, #3
 8002016:	f000 f923 	bl	8002260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800201a:	200f      	movs	r0, #15
 800201c:	f000 f808 	bl	8002030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002020:	f7ff fb0a 	bl	8001638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40022000 	.word	0x40022000

08002030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_InitTick+0x54>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_InitTick+0x58>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002046:	fbb3 f3f1 	udiv	r3, r3, r1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f93b 	bl	80022ca <HAL_SYSTICK_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e00e      	b.n	800207c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b0f      	cmp	r3, #15
 8002062:	d80a      	bhi.n	800207a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002064:	2200      	movs	r2, #0
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f000 f903 	bl	8002276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002070:	4a06      	ldr	r2, [pc, #24]	; (800208c <HAL_InitTick+0x5c>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000000 	.word	0x20000000
 8002088:	20000008 	.word	0x20000008
 800208c:	20000004 	.word	0x20000004

08002090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_IncTick+0x1c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_IncTick+0x20>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a03      	ldr	r2, [pc, #12]	; (80020b0 <HAL_IncTick+0x20>)
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	20000008 	.word	0x20000008
 80020b0:	200003e8 	.word	0x200003e8

080020b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return uwTick;
 80020b8:	4b02      	ldr	r3, [pc, #8]	; (80020c4 <HAL_GetTick+0x10>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	200003e8 	.word	0x200003e8

080020c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fa:	4a04      	ldr	r2, [pc, #16]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	60d3      	str	r3, [r2, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <__NVIC_GetPriorityGrouping+0x18>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	f003 0307 	and.w	r3, r3, #7
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	2b00      	cmp	r3, #0
 800213c:	db0b      	blt.n	8002156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	f003 021f 	and.w	r2, r3, #31
 8002144:	4906      	ldr	r1, [pc, #24]	; (8002160 <__NVIC_EnableIRQ+0x34>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	2001      	movs	r0, #1
 800214e:	fa00 f202 	lsl.w	r2, r0, r2
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	e000e100 	.word	0xe000e100

08002164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	2b00      	cmp	r3, #0
 8002176:	db0a      	blt.n	800218e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	490c      	ldr	r1, [pc, #48]	; (80021b0 <__NVIC_SetPriority+0x4c>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	0112      	lsls	r2, r2, #4
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	440b      	add	r3, r1
 8002188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800218c:	e00a      	b.n	80021a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4908      	ldr	r1, [pc, #32]	; (80021b4 <__NVIC_SetPriority+0x50>)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	3b04      	subs	r3, #4
 800219c:	0112      	lsls	r2, r2, #4
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	440b      	add	r3, r1
 80021a2:	761a      	strb	r2, [r3, #24]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000e100 	.word	0xe000e100
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f1c3 0307 	rsb	r3, r3, #7
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	bf28      	it	cs
 80021d6:	2304      	movcs	r3, #4
 80021d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3304      	adds	r3, #4
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d902      	bls.n	80021e8 <NVIC_EncodePriority+0x30>
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3b03      	subs	r3, #3
 80021e6:	e000      	b.n	80021ea <NVIC_EncodePriority+0x32>
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	f04f 32ff 	mov.w	r2, #4294967295
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	401a      	ands	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002200:	f04f 31ff 	mov.w	r1, #4294967295
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43d9      	mvns	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	4313      	orrs	r3, r2
         );
}
 8002212:	4618      	mov	r0, r3
 8002214:	3724      	adds	r7, #36	; 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800222c:	d301      	bcc.n	8002232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <SysTick_Config+0x40>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223a:	210f      	movs	r1, #15
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f7ff ff90 	bl	8002164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <SysTick_Config+0x40>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <SysTick_Config+0x40>)
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	e000e010 	.word	0xe000e010

08002260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff2d 	bl	80020c8 <__NVIC_SetPriorityGrouping>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002288:	f7ff ff42 	bl	8002110 <__NVIC_GetPriorityGrouping>
 800228c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	6978      	ldr	r0, [r7, #20]
 8002294:	f7ff ff90 	bl	80021b8 <NVIC_EncodePriority>
 8002298:	4602      	mov	r2, r0
 800229a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff5f 	bl	8002164 <__NVIC_SetPriority>
}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff35 	bl	800212c <__NVIC_EnableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffa2 	bl	800221c <SysTick_Config>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b08b      	sub	sp, #44	; 0x2c
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f6:	e179      	b.n	80025ec <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022f8:	2201      	movs	r2, #1
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	429a      	cmp	r2, r3
 8002312:	f040 8168 	bne.w	80025e6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4a96      	ldr	r2, [pc, #600]	; (8002574 <HAL_GPIO_Init+0x290>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d05e      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002320:	4a94      	ldr	r2, [pc, #592]	; (8002574 <HAL_GPIO_Init+0x290>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d875      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 8002326:	4a94      	ldr	r2, [pc, #592]	; (8002578 <HAL_GPIO_Init+0x294>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d058      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 800232c:	4a92      	ldr	r2, [pc, #584]	; (8002578 <HAL_GPIO_Init+0x294>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d86f      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 8002332:	4a92      	ldr	r2, [pc, #584]	; (800257c <HAL_GPIO_Init+0x298>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d052      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002338:	4a90      	ldr	r2, [pc, #576]	; (800257c <HAL_GPIO_Init+0x298>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d869      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 800233e:	4a90      	ldr	r2, [pc, #576]	; (8002580 <HAL_GPIO_Init+0x29c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d04c      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002344:	4a8e      	ldr	r2, [pc, #568]	; (8002580 <HAL_GPIO_Init+0x29c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d863      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 800234a:	4a8e      	ldr	r2, [pc, #568]	; (8002584 <HAL_GPIO_Init+0x2a0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d046      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002350:	4a8c      	ldr	r2, [pc, #560]	; (8002584 <HAL_GPIO_Init+0x2a0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d85d      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 8002356:	2b12      	cmp	r3, #18
 8002358:	d82a      	bhi.n	80023b0 <HAL_GPIO_Init+0xcc>
 800235a:	2b12      	cmp	r3, #18
 800235c:	d859      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 800235e:	a201      	add	r2, pc, #4	; (adr r2, 8002364 <HAL_GPIO_Init+0x80>)
 8002360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002364:	080023df 	.word	0x080023df
 8002368:	080023b9 	.word	0x080023b9
 800236c:	080023cb 	.word	0x080023cb
 8002370:	0800240d 	.word	0x0800240d
 8002374:	08002413 	.word	0x08002413
 8002378:	08002413 	.word	0x08002413
 800237c:	08002413 	.word	0x08002413
 8002380:	08002413 	.word	0x08002413
 8002384:	08002413 	.word	0x08002413
 8002388:	08002413 	.word	0x08002413
 800238c:	08002413 	.word	0x08002413
 8002390:	08002413 	.word	0x08002413
 8002394:	08002413 	.word	0x08002413
 8002398:	08002413 	.word	0x08002413
 800239c:	08002413 	.word	0x08002413
 80023a0:	08002413 	.word	0x08002413
 80023a4:	08002413 	.word	0x08002413
 80023a8:	080023c1 	.word	0x080023c1
 80023ac:	080023d5 	.word	0x080023d5
 80023b0:	4a75      	ldr	r2, [pc, #468]	; (8002588 <HAL_GPIO_Init+0x2a4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023b6:	e02c      	b.n	8002412 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	623b      	str	r3, [r7, #32]
          break;
 80023be:	e029      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	3304      	adds	r3, #4
 80023c6:	623b      	str	r3, [r7, #32]
          break;
 80023c8:	e024      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	3308      	adds	r3, #8
 80023d0:	623b      	str	r3, [r7, #32]
          break;
 80023d2:	e01f      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	330c      	adds	r3, #12
 80023da:	623b      	str	r3, [r7, #32]
          break;
 80023dc:	e01a      	b.n	8002414 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023e6:	2304      	movs	r3, #4
 80023e8:	623b      	str	r3, [r7, #32]
          break;
 80023ea:	e013      	b.n	8002414 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f4:	2308      	movs	r3, #8
 80023f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	611a      	str	r2, [r3, #16]
          break;
 80023fe:	e009      	b.n	8002414 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002400:	2308      	movs	r3, #8
 8002402:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	615a      	str	r2, [r3, #20]
          break;
 800240a:	e003      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
          break;
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x130>
          break;
 8002412:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2bff      	cmp	r3, #255	; 0xff
 8002418:	d801      	bhi.n	800241e <HAL_GPIO_Init+0x13a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	e001      	b.n	8002422 <HAL_GPIO_Init+0x13e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2bff      	cmp	r3, #255	; 0xff
 8002428:	d802      	bhi.n	8002430 <HAL_GPIO_Init+0x14c>
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	e002      	b.n	8002436 <HAL_GPIO_Init+0x152>
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	3b08      	subs	r3, #8
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	210f      	movs	r1, #15
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	401a      	ands	r2, r3
 8002448:	6a39      	ldr	r1, [r7, #32]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	431a      	orrs	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80c1 	beq.w	80025e6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002464:	4b49      	ldr	r3, [pc, #292]	; (800258c <HAL_GPIO_Init+0x2a8>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	4a48      	ldr	r2, [pc, #288]	; (800258c <HAL_GPIO_Init+0x2a8>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6193      	str	r3, [r2, #24]
 8002470:	4b46      	ldr	r3, [pc, #280]	; (800258c <HAL_GPIO_Init+0x2a8>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800247c:	4a44      	ldr	r2, [pc, #272]	; (8002590 <HAL_GPIO_Init+0x2ac>)
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002488:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	220f      	movs	r2, #15
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a3c      	ldr	r2, [pc, #240]	; (8002594 <HAL_GPIO_Init+0x2b0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d01f      	beq.n	80024e8 <HAL_GPIO_Init+0x204>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a3b      	ldr	r2, [pc, #236]	; (8002598 <HAL_GPIO_Init+0x2b4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d019      	beq.n	80024e4 <HAL_GPIO_Init+0x200>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a3a      	ldr	r2, [pc, #232]	; (800259c <HAL_GPIO_Init+0x2b8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d013      	beq.n	80024e0 <HAL_GPIO_Init+0x1fc>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a39      	ldr	r2, [pc, #228]	; (80025a0 <HAL_GPIO_Init+0x2bc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00d      	beq.n	80024dc <HAL_GPIO_Init+0x1f8>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a38      	ldr	r2, [pc, #224]	; (80025a4 <HAL_GPIO_Init+0x2c0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d007      	beq.n	80024d8 <HAL_GPIO_Init+0x1f4>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a37      	ldr	r2, [pc, #220]	; (80025a8 <HAL_GPIO_Init+0x2c4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d101      	bne.n	80024d4 <HAL_GPIO_Init+0x1f0>
 80024d0:	2305      	movs	r3, #5
 80024d2:	e00a      	b.n	80024ea <HAL_GPIO_Init+0x206>
 80024d4:	2306      	movs	r3, #6
 80024d6:	e008      	b.n	80024ea <HAL_GPIO_Init+0x206>
 80024d8:	2304      	movs	r3, #4
 80024da:	e006      	b.n	80024ea <HAL_GPIO_Init+0x206>
 80024dc:	2303      	movs	r3, #3
 80024de:	e004      	b.n	80024ea <HAL_GPIO_Init+0x206>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e002      	b.n	80024ea <HAL_GPIO_Init+0x206>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_GPIO_Init+0x206>
 80024e8:	2300      	movs	r3, #0
 80024ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ec:	f002 0203 	and.w	r2, r2, #3
 80024f0:	0092      	lsls	r2, r2, #2
 80024f2:	4093      	lsls	r3, r2
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024fa:	4925      	ldr	r1, [pc, #148]	; (8002590 <HAL_GPIO_Init+0x2ac>)
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	089b      	lsrs	r3, r3, #2
 8002500:	3302      	adds	r3, #2
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002514:	4b25      	ldr	r3, [pc, #148]	; (80025ac <HAL_GPIO_Init+0x2c8>)
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	4924      	ldr	r1, [pc, #144]	; (80025ac <HAL_GPIO_Init+0x2c8>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	608b      	str	r3, [r1, #8]
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002522:	4b22      	ldr	r3, [pc, #136]	; (80025ac <HAL_GPIO_Init+0x2c8>)
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	43db      	mvns	r3, r3
 800252a:	4920      	ldr	r1, [pc, #128]	; (80025ac <HAL_GPIO_Init+0x2c8>)
 800252c:	4013      	ands	r3, r2
 800252e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d006      	beq.n	800254a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_GPIO_Init+0x2c8>)
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	491a      	ldr	r1, [pc, #104]	; (80025ac <HAL_GPIO_Init+0x2c8>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	60cb      	str	r3, [r1, #12]
 8002548:	e006      	b.n	8002558 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <HAL_GPIO_Init+0x2c8>)
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	43db      	mvns	r3, r3
 8002552:	4916      	ldr	r1, [pc, #88]	; (80025ac <HAL_GPIO_Init+0x2c8>)
 8002554:	4013      	ands	r3, r2
 8002556:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d025      	beq.n	80025b0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_GPIO_Init+0x2c8>)
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4910      	ldr	r1, [pc, #64]	; (80025ac <HAL_GPIO_Init+0x2c8>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
 8002570:	e025      	b.n	80025be <HAL_GPIO_Init+0x2da>
 8002572:	bf00      	nop
 8002574:	10320000 	.word	0x10320000
 8002578:	10310000 	.word	0x10310000
 800257c:	10220000 	.word	0x10220000
 8002580:	10210000 	.word	0x10210000
 8002584:	10120000 	.word	0x10120000
 8002588:	10110000 	.word	0x10110000
 800258c:	40021000 	.word	0x40021000
 8002590:	40010000 	.word	0x40010000
 8002594:	40010800 	.word	0x40010800
 8002598:	40010c00 	.word	0x40010c00
 800259c:	40011000 	.word	0x40011000
 80025a0:	40011400 	.word	0x40011400
 80025a4:	40011800 	.word	0x40011800
 80025a8:	40011c00 	.word	0x40011c00
 80025ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025b0:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_GPIO_Init+0x324>)
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	4913      	ldr	r1, [pc, #76]	; (8002608 <HAL_GPIO_Init+0x324>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d006      	beq.n	80025d8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025ca:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_GPIO_Init+0x324>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	490e      	ldr	r1, [pc, #56]	; (8002608 <HAL_GPIO_Init+0x324>)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
 80025d6:	e006      	b.n	80025e6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_GPIO_Init+0x324>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	43db      	mvns	r3, r3
 80025e0:	4909      	ldr	r1, [pc, #36]	; (8002608 <HAL_GPIO_Init+0x324>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	3301      	adds	r3, #1
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	fa22 f303 	lsr.w	r3, r2, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f47f ae7e 	bne.w	80022f8 <HAL_GPIO_Init+0x14>
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	372c      	adds	r7, #44	; 0x2c
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	40010400 	.word	0x40010400

0800260c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]
 8002618:	4613      	mov	r3, r2
 800261a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800261c:	787b      	ldrb	r3, [r7, #1]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002622:	887a      	ldrh	r2, [r7, #2]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002628:	e003      	b.n	8002632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800262a:	887b      	ldrh	r3, [r7, #2]
 800262c:	041a      	lsls	r2, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	611a      	str	r2, [r3, #16]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e272      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8087 	beq.w	800276a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800265c:	4b92      	ldr	r3, [pc, #584]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b04      	cmp	r3, #4
 8002666:	d00c      	beq.n	8002682 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002668:	4b8f      	ldr	r3, [pc, #572]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b08      	cmp	r3, #8
 8002672:	d112      	bne.n	800269a <HAL_RCC_OscConfig+0x5e>
 8002674:	4b8c      	ldr	r3, [pc, #560]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002680:	d10b      	bne.n	800269a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002682:	4b89      	ldr	r3, [pc, #548]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d06c      	beq.n	8002768 <HAL_RCC_OscConfig+0x12c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d168      	bne.n	8002768 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e24c      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_OscConfig+0x76>
 80026a4:	4b80      	ldr	r3, [pc, #512]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a7f      	ldr	r2, [pc, #508]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	e02e      	b.n	8002710 <HAL_RCC_OscConfig+0xd4>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x98>
 80026ba:	4b7b      	ldr	r3, [pc, #492]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a7a      	ldr	r2, [pc, #488]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b78      	ldr	r3, [pc, #480]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a77      	ldr	r2, [pc, #476]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e01d      	b.n	8002710 <HAL_RCC_OscConfig+0xd4>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0xbc>
 80026de:	4b72      	ldr	r3, [pc, #456]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a71      	ldr	r2, [pc, #452]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b6f      	ldr	r3, [pc, #444]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a6e      	ldr	r2, [pc, #440]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e00b      	b.n	8002710 <HAL_RCC_OscConfig+0xd4>
 80026f8:	4b6b      	ldr	r3, [pc, #428]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a6a      	ldr	r2, [pc, #424]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80026fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	4b68      	ldr	r3, [pc, #416]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a67      	ldr	r2, [pc, #412]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 800270a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7ff fccc 	bl	80020b4 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002720:	f7ff fcc8 	bl	80020b4 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	; 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e200      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	4b5d      	ldr	r3, [pc, #372]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0xe4>
 800273e:	e014      	b.n	800276a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7ff fcb8 	bl	80020b4 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002748:	f7ff fcb4 	bl	80020b4 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e1ec      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275a:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x10c>
 8002766:	e000      	b.n	800276a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d063      	beq.n	800283e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002776:	4b4c      	ldr	r3, [pc, #304]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002782:	4b49      	ldr	r3, [pc, #292]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b08      	cmp	r3, #8
 800278c:	d11c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x18c>
 800278e:	4b46      	ldr	r3, [pc, #280]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d116      	bne.n	80027c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279a:	4b43      	ldr	r3, [pc, #268]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_RCC_OscConfig+0x176>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e1c0      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b2:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4939      	ldr	r1, [pc, #228]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c6:	e03a      	b.n	800283e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d0:	4b36      	ldr	r3, [pc, #216]	; (80028ac <HAL_RCC_OscConfig+0x270>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7ff fc6d 	bl	80020b4 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027de:	f7ff fc69 	bl	80020b4 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e1a1      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f0:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fc:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4927      	ldr	r1, [pc, #156]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 800280c:	4313      	orrs	r3, r2
 800280e:	600b      	str	r3, [r1, #0]
 8002810:	e015      	b.n	800283e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002812:	4b26      	ldr	r3, [pc, #152]	; (80028ac <HAL_RCC_OscConfig+0x270>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7ff fc4c 	bl	80020b4 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002820:	f7ff fc48 	bl	80020b4 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e180      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002832:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d03a      	beq.n	80028c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d019      	beq.n	8002886 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002852:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <HAL_RCC_OscConfig+0x274>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002858:	f7ff fc2c 	bl	80020b4 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002860:	f7ff fc28 	bl	80020b4 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e160      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <HAL_RCC_OscConfig+0x26c>)
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800287e:	2001      	movs	r0, #1
 8002880:	f000 face 	bl	8002e20 <RCC_Delay>
 8002884:	e01c      	b.n	80028c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_RCC_OscConfig+0x274>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288c:	f7ff fc12 	bl	80020b4 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002892:	e00f      	b.n	80028b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002894:	f7ff fc0e 	bl	80020b4 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d908      	bls.n	80028b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e146      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>
 80028a6:	bf00      	nop
 80028a8:	40021000 	.word	0x40021000
 80028ac:	42420000 	.word	0x42420000
 80028b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b4:	4b92      	ldr	r3, [pc, #584]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1e9      	bne.n	8002894 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80a6 	beq.w	8002a1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ce:	2300      	movs	r3, #0
 80028d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d2:	4b8b      	ldr	r3, [pc, #556]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10d      	bne.n	80028fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028de:	4b88      	ldr	r3, [pc, #544]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4a87      	ldr	r2, [pc, #540]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e8:	61d3      	str	r3, [r2, #28]
 80028ea:	4b85      	ldr	r3, [pc, #532]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f6:	2301      	movs	r3, #1
 80028f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fa:	4b82      	ldr	r3, [pc, #520]	; (8002b04 <HAL_RCC_OscConfig+0x4c8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d118      	bne.n	8002938 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002906:	4b7f      	ldr	r3, [pc, #508]	; (8002b04 <HAL_RCC_OscConfig+0x4c8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a7e      	ldr	r2, [pc, #504]	; (8002b04 <HAL_RCC_OscConfig+0x4c8>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002912:	f7ff fbcf 	bl	80020b4 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291a:	f7ff fbcb 	bl	80020b4 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b64      	cmp	r3, #100	; 0x64
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e103      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292c:	4b75      	ldr	r3, [pc, #468]	; (8002b04 <HAL_RCC_OscConfig+0x4c8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d106      	bne.n	800294e <HAL_RCC_OscConfig+0x312>
 8002940:	4b6f      	ldr	r3, [pc, #444]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4a6e      	ldr	r2, [pc, #440]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6213      	str	r3, [r2, #32]
 800294c:	e02d      	b.n	80029aa <HAL_RCC_OscConfig+0x36e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x334>
 8002956:	4b6a      	ldr	r3, [pc, #424]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4a69      	ldr	r2, [pc, #420]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	6213      	str	r3, [r2, #32]
 8002962:	4b67      	ldr	r3, [pc, #412]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	4a66      	ldr	r2, [pc, #408]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	f023 0304 	bic.w	r3, r3, #4
 800296c:	6213      	str	r3, [r2, #32]
 800296e:	e01c      	b.n	80029aa <HAL_RCC_OscConfig+0x36e>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b05      	cmp	r3, #5
 8002976:	d10c      	bne.n	8002992 <HAL_RCC_OscConfig+0x356>
 8002978:	4b61      	ldr	r3, [pc, #388]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	4a60      	ldr	r2, [pc, #384]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 800297e:	f043 0304 	orr.w	r3, r3, #4
 8002982:	6213      	str	r3, [r2, #32]
 8002984:	4b5e      	ldr	r3, [pc, #376]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	4a5d      	ldr	r2, [pc, #372]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6213      	str	r3, [r2, #32]
 8002990:	e00b      	b.n	80029aa <HAL_RCC_OscConfig+0x36e>
 8002992:	4b5b      	ldr	r3, [pc, #364]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	4a5a      	ldr	r2, [pc, #360]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	f023 0301 	bic.w	r3, r3, #1
 800299c:	6213      	str	r3, [r2, #32]
 800299e:	4b58      	ldr	r3, [pc, #352]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	4a57      	ldr	r2, [pc, #348]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	f023 0304 	bic.w	r3, r3, #4
 80029a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d015      	beq.n	80029de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b2:	f7ff fb7f 	bl	80020b4 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ba:	f7ff fb7b 	bl	80020b4 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e0b1      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d0:	4b4b      	ldr	r3, [pc, #300]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0ee      	beq.n	80029ba <HAL_RCC_OscConfig+0x37e>
 80029dc:	e014      	b.n	8002a08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029de:	f7ff fb69 	bl	80020b4 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e4:	e00a      	b.n	80029fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f7ff fb65 	bl	80020b4 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e09b      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fc:	4b40      	ldr	r3, [pc, #256]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1ee      	bne.n	80029e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d105      	bne.n	8002a1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0e:	4b3c      	ldr	r3, [pc, #240]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	4a3b      	ldr	r2, [pc, #236]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8087 	beq.w	8002b32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a24:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d061      	beq.n	8002af4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d146      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a38:	4b33      	ldr	r3, [pc, #204]	; (8002b08 <HAL_RCC_OscConfig+0x4cc>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3e:	f7ff fb39 	bl	80020b4 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a46:	f7ff fb35 	bl	80020b4 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e06d      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a58:	4b29      	ldr	r3, [pc, #164]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f0      	bne.n	8002a46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6c:	d108      	bne.n	8002a80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a6e:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4921      	ldr	r1, [pc, #132]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a80:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a19      	ldr	r1, [r3, #32]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	430b      	orrs	r3, r1
 8002a92:	491b      	ldr	r1, [pc, #108]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_RCC_OscConfig+0x4cc>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9e:	f7ff fb09 	bl	80020b4 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa6:	f7ff fb05 	bl	80020b4 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e03d      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab8:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x46a>
 8002ac4:	e035      	b.n	8002b32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <HAL_RCC_OscConfig+0x4cc>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7ff faf2 	bl	80020b4 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7ff faee 	bl	80020b4 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e026      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x498>
 8002af2:	e01e      	b.n	8002b32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d107      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e019      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40007000 	.word	0x40007000
 8002b08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_RCC_OscConfig+0x500>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d106      	bne.n	8002b2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000

08002b40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0d0      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b54:	4b6a      	ldr	r3, [pc, #424]	; (8002d00 <HAL_RCC_ClockConfig+0x1c0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d910      	bls.n	8002b84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b62:	4b67      	ldr	r3, [pc, #412]	; (8002d00 <HAL_RCC_ClockConfig+0x1c0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 0207 	bic.w	r2, r3, #7
 8002b6a:	4965      	ldr	r1, [pc, #404]	; (8002d00 <HAL_RCC_ClockConfig+0x1c0>)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0b8      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d020      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b9c:	4b59      	ldr	r3, [pc, #356]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	4a58      	ldr	r2, [pc, #352]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ba6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb4:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4a52      	ldr	r2, [pc, #328]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc0:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	494d      	ldr	r1, [pc, #308]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d040      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	4b47      	ldr	r3, [pc, #284]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d115      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e07f      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfe:	4b41      	ldr	r3, [pc, #260]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e073      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e06b      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c1e:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f023 0203 	bic.w	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4936      	ldr	r1, [pc, #216]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c30:	f7ff fa40 	bl	80020b4 <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c38:	f7ff fa3c 	bl	80020b4 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e053      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 020c 	and.w	r2, r3, #12
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d1eb      	bne.n	8002c38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <HAL_RCC_ClockConfig+0x1c0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d210      	bcs.n	8002c90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <HAL_RCC_ClockConfig+0x1c0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 0207 	bic.w	r2, r3, #7
 8002c76:	4922      	ldr	r1, [pc, #136]	; (8002d00 <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e032      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4916      	ldr	r1, [pc, #88]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	490e      	ldr	r1, [pc, #56]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cce:	f000 f821 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	490a      	ldr	r1, [pc, #40]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce0:	5ccb      	ldrb	r3, [r1, r3]
 8002ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce6:	4a09      	ldr	r2, [pc, #36]	; (8002d0c <HAL_RCC_ClockConfig+0x1cc>)
 8002ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_RCC_ClockConfig+0x1d0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f99e 	bl	8002030 <HAL_InitTick>

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40022000 	.word	0x40022000
 8002d04:	40021000 	.word	0x40021000
 8002d08:	08006bbc 	.word	0x08006bbc
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	20000004 	.word	0x20000004

08002d14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	2300      	movs	r3, #0
 8002d28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d2e:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d002      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x30>
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d003      	beq.n	8002d4a <HAL_RCC_GetSysClockFreq+0x36>
 8002d42:	e027      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d44:	4b19      	ldr	r3, [pc, #100]	; (8002dac <HAL_RCC_GetSysClockFreq+0x98>)
 8002d46:	613b      	str	r3, [r7, #16]
      break;
 8002d48:	e027      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	0c9b      	lsrs	r3, r3, #18
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d54:	5cd3      	ldrb	r3, [r2, r3]
 8002d56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d010      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	0c5b      	lsrs	r3, r3, #17
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	4a11      	ldr	r2, [pc, #68]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d6e:	5cd3      	ldrb	r3, [r2, r3]
 8002d70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <HAL_RCC_GetSysClockFreq+0x98>)
 8002d76:	fb03 f202 	mul.w	r2, r3, r2
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	e004      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	613b      	str	r3, [r7, #16]
      break;
 8002d92:	e002      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <HAL_RCC_GetSysClockFreq+0x98>)
 8002d96:	613b      	str	r3, [r7, #16]
      break;
 8002d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9a:	693b      	ldr	r3, [r7, #16]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	007a1200 	.word	0x007a1200
 8002db0:	08006bd4 	.word	0x08006bd4
 8002db4:	08006be4 	.word	0x08006be4
 8002db8:	003d0900 	.word	0x003d0900

08002dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc0:	4b02      	ldr	r3, [pc, #8]	; (8002dcc <HAL_RCC_GetHCLKFreq+0x10>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	20000000 	.word	0x20000000

08002dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dd4:	f7ff fff2 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4903      	ldr	r1, [pc, #12]	; (8002df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	08006bcc 	.word	0x08006bcc

08002df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dfc:	f7ff ffde 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	0adb      	lsrs	r3, r3, #11
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	4903      	ldr	r1, [pc, #12]	; (8002e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0e:	5ccb      	ldrb	r3, [r1, r3]
 8002e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	08006bcc 	.word	0x08006bcc

08002e20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <RCC_Delay+0x34>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <RCC_Delay+0x38>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	0a5b      	lsrs	r3, r3, #9
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	fb02 f303 	mul.w	r3, r2, r3
 8002e3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e3c:	bf00      	nop
  }
  while (Delay --);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1e5a      	subs	r2, r3, #1
 8002e42:	60fa      	str	r2, [r7, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f9      	bne.n	8002e3c <RCC_Delay+0x1c>
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr
 8002e54:	20000000 	.word	0x20000000
 8002e58:	10624dd3 	.word	0x10624dd3

08002e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e041      	b.n	8002ef2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fe ff94 	bl	8001db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3304      	adds	r3, #4
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	f000 fcb6 	bl	800380c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d001      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e044      	b.n	8002f9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <HAL_TIM_Base_Start_IT+0xac>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d018      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x6c>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1c      	ldr	r2, [pc, #112]	; (8002fac <HAL_TIM_Base_Start_IT+0xb0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d013      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x6c>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f48:	d00e      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x6c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a18      	ldr	r2, [pc, #96]	; (8002fb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x6c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d004      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x6c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d111      	bne.n	8002f8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d010      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0201 	orr.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8a:	e007      	b.n	8002f9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40013400 	.word	0x40013400
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	40000c00 	.word	0x40000c00

08002fbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e041      	b.n	8003052 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fe feb2 	bl	8001d4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f000 fc06 	bl	800380c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <HAL_TIM_PWM_Start+0x24>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	e022      	b.n	80030c6 <HAL_TIM_PWM_Start+0x6a>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2b04      	cmp	r3, #4
 8003084:	d109      	bne.n	800309a <HAL_TIM_PWM_Start+0x3e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b01      	cmp	r3, #1
 8003090:	bf14      	ite	ne
 8003092:	2301      	movne	r3, #1
 8003094:	2300      	moveq	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	e015      	b.n	80030c6 <HAL_TIM_PWM_Start+0x6a>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b08      	cmp	r3, #8
 800309e:	d109      	bne.n	80030b4 <HAL_TIM_PWM_Start+0x58>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e008      	b.n	80030c6 <HAL_TIM_PWM_Start+0x6a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e072      	b.n	80031b4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d104      	bne.n	80030de <HAL_TIM_PWM_Start+0x82>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030dc:	e013      	b.n	8003106 <HAL_TIM_PWM_Start+0xaa>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d104      	bne.n	80030ee <HAL_TIM_PWM_Start+0x92>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ec:	e00b      	b.n	8003106 <HAL_TIM_PWM_Start+0xaa>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d104      	bne.n	80030fe <HAL_TIM_PWM_Start+0xa2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030fc:	e003      	b.n	8003106 <HAL_TIM_PWM_Start+0xaa>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2202      	movs	r2, #2
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2201      	movs	r2, #1
 800310c:	6839      	ldr	r1, [r7, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fda2 	bl	8003c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a28      	ldr	r2, [pc, #160]	; (80031bc <HAL_TIM_PWM_Start+0x160>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d004      	beq.n	8003128 <HAL_TIM_PWM_Start+0xcc>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a27      	ldr	r2, [pc, #156]	; (80031c0 <HAL_TIM_PWM_Start+0x164>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d101      	bne.n	800312c <HAL_TIM_PWM_Start+0xd0>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <HAL_TIM_PWM_Start+0xd2>
 800312c:	2300      	movs	r3, #0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <HAL_TIM_PWM_Start+0x160>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d018      	beq.n	800317e <HAL_TIM_PWM_Start+0x122>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a1b      	ldr	r2, [pc, #108]	; (80031c0 <HAL_TIM_PWM_Start+0x164>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <HAL_TIM_PWM_Start+0x122>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315e:	d00e      	beq.n	800317e <HAL_TIM_PWM_Start+0x122>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a17      	ldr	r2, [pc, #92]	; (80031c4 <HAL_TIM_PWM_Start+0x168>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d009      	beq.n	800317e <HAL_TIM_PWM_Start+0x122>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <HAL_TIM_PWM_Start+0x16c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d004      	beq.n	800317e <HAL_TIM_PWM_Start+0x122>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <HAL_TIM_PWM_Start+0x170>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d111      	bne.n	80031a2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b06      	cmp	r3, #6
 800318e:	d010      	beq.n	80031b2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a0:	e007      	b.n	80031b2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0201 	orr.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40012c00 	.word	0x40012c00
 80031c0:	40013400 	.word	0x40013400
 80031c4:	40000400 	.word	0x40000400
 80031c8:	40000800 	.word	0x40000800
 80031cc:	40000c00 	.word	0x40000c00

080031d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e093      	b.n	800330c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d106      	bne.n	80031fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7fe fd0f 	bl	8001c1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2202      	movs	r2, #2
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003214:	f023 0307 	bic.w	r3, r3, #7
 8003218:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3304      	adds	r3, #4
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f000 faf1 	bl	800380c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003252:	f023 0303 	bic.w	r3, r3, #3
 8003256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	4313      	orrs	r3, r2
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003270:	f023 030c 	bic.w	r3, r3, #12
 8003274:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800327c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003280:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	4313      	orrs	r3, r2
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	011a      	lsls	r2, r3, #4
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	031b      	lsls	r3, r3, #12
 80032a0:	4313      	orrs	r3, r2
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80032ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	4313      	orrs	r3, r2
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003324:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800332c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003334:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800333c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d110      	bne.n	8003366 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d102      	bne.n	8003350 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800334a:	7b7b      	ldrb	r3, [r7, #13]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d001      	beq.n	8003354 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e069      	b.n	8003428 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003364:	e031      	b.n	80033ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b04      	cmp	r3, #4
 800336a:	d110      	bne.n	800338e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800336c:	7bbb      	ldrb	r3, [r7, #14]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d102      	bne.n	8003378 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003372:	7b3b      	ldrb	r3, [r7, #12]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d001      	beq.n	800337c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e055      	b.n	8003428 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800338c:	e01d      	b.n	80033ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d108      	bne.n	80033a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003394:	7bbb      	ldrb	r3, [r7, #14]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d105      	bne.n	80033a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800339a:	7b7b      	ldrb	r3, [r7, #13]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d102      	bne.n	80033a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80033a0:	7b3b      	ldrb	r3, [r7, #12]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d001      	beq.n	80033aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e03e      	b.n	8003428 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2202      	movs	r2, #2
 80033c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_TIM_Encoder_Start+0xc4>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d008      	beq.n	80033e8 <HAL_TIM_Encoder_Start+0xd4>
 80033d6:	e00f      	b.n	80033f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2201      	movs	r2, #1
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fc39 	bl	8003c58 <TIM_CCxChannelCmd>
      break;
 80033e6:	e016      	b.n	8003416 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2201      	movs	r2, #1
 80033ee:	2104      	movs	r1, #4
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fc31 	bl	8003c58 <TIM_CCxChannelCmd>
      break;
 80033f6:	e00e      	b.n	8003416 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2201      	movs	r2, #1
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fc29 	bl	8003c58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2201      	movs	r2, #1
 800340c:	2104      	movs	r1, #4
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fc22 	bl	8003c58 <TIM_CCxChannelCmd>
      break;
 8003414:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b02      	cmp	r3, #2
 8003444:	d122      	bne.n	800348c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b02      	cmp	r3, #2
 8003452:	d11b      	bne.n	800348c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0202 	mvn.w	r2, #2
 800345c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f9af 	bl	80037d6 <HAL_TIM_IC_CaptureCallback>
 8003478:	e005      	b.n	8003486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f9a2 	bl	80037c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f9b1 	bl	80037e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b04      	cmp	r3, #4
 8003498:	d122      	bne.n	80034e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d11b      	bne.n	80034e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0204 	mvn.w	r2, #4
 80034b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f985 	bl	80037d6 <HAL_TIM_IC_CaptureCallback>
 80034cc:	e005      	b.n	80034da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f978 	bl	80037c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f987 	bl	80037e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d122      	bne.n	8003534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d11b      	bne.n	8003534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0208 	mvn.w	r2, #8
 8003504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2204      	movs	r2, #4
 800350a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f95b 	bl	80037d6 <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f94e 	bl	80037c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f95d 	bl	80037e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b10      	cmp	r3, #16
 8003540:	d122      	bne.n	8003588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	2b10      	cmp	r3, #16
 800354e:	d11b      	bne.n	8003588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0210 	mvn.w	r2, #16
 8003558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2208      	movs	r2, #8
 800355e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f931 	bl	80037d6 <HAL_TIM_IC_CaptureCallback>
 8003574:	e005      	b.n	8003582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f924 	bl	80037c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f933 	bl	80037e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b01      	cmp	r3, #1
 8003594:	d10e      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d107      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0201 	mvn.w	r2, #1
 80035ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fd ffb0 	bl	8001514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035be:	2b80      	cmp	r3, #128	; 0x80
 80035c0:	d10e      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035cc:	2b80      	cmp	r3, #128	; 0x80
 80035ce:	d107      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fc26 	bl	8003e2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d10e      	bne.n	800360c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f8:	2b40      	cmp	r3, #64	; 0x40
 80035fa:	d107      	bne.n	800360c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f8f7 	bl	80037fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b20      	cmp	r3, #32
 8003618:	d10e      	bne.n	8003638 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b20      	cmp	r3, #32
 8003626:	d107      	bne.n	8003638 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0220 	mvn.w	r2, #32
 8003630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fbf1 	bl	8003e1a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800365a:	2302      	movs	r3, #2
 800365c:	e0ae      	b.n	80037bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b0c      	cmp	r3, #12
 800366a:	f200 809f 	bhi.w	80037ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800366e:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003674:	080036a9 	.word	0x080036a9
 8003678:	080037ad 	.word	0x080037ad
 800367c:	080037ad 	.word	0x080037ad
 8003680:	080037ad 	.word	0x080037ad
 8003684:	080036e9 	.word	0x080036e9
 8003688:	080037ad 	.word	0x080037ad
 800368c:	080037ad 	.word	0x080037ad
 8003690:	080037ad 	.word	0x080037ad
 8003694:	0800372b 	.word	0x0800372b
 8003698:	080037ad 	.word	0x080037ad
 800369c:	080037ad 	.word	0x080037ad
 80036a0:	080037ad 	.word	0x080037ad
 80036a4:	0800376b 	.word	0x0800376b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f926 	bl	8003900 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0208 	orr.w	r2, r2, #8
 80036c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0204 	bic.w	r2, r2, #4
 80036d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6999      	ldr	r1, [r3, #24]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	619a      	str	r2, [r3, #24]
      break;
 80036e6:	e064      	b.n	80037b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68b9      	ldr	r1, [r7, #8]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f976 	bl	80039e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699a      	ldr	r2, [r3, #24]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6999      	ldr	r1, [r3, #24]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	021a      	lsls	r2, r3, #8
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	619a      	str	r2, [r3, #24]
      break;
 8003728:	e043      	b.n	80037b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	4618      	mov	r0, r3
 8003732:	f000 f9c9 	bl	8003ac8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69da      	ldr	r2, [r3, #28]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0208 	orr.w	r2, r2, #8
 8003744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0204 	bic.w	r2, r2, #4
 8003754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69d9      	ldr	r1, [r3, #28]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	61da      	str	r2, [r3, #28]
      break;
 8003768:	e023      	b.n	80037b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fa1d 	bl	8003bb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69da      	ldr	r2, [r3, #28]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69d9      	ldr	r1, [r3, #28]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	021a      	lsls	r2, r3, #8
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	61da      	str	r2, [r3, #28]
      break;
 80037aa:	e002      	b.n	80037b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	75fb      	strb	r3, [r7, #23]
      break;
 80037b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr

080037e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr

080037fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a33      	ldr	r2, [pc, #204]	; (80038ec <TIM_Base_SetConfig+0xe0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <TIM_Base_SetConfig+0x40>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a32      	ldr	r2, [pc, #200]	; (80038f0 <TIM_Base_SetConfig+0xe4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00f      	beq.n	800384c <TIM_Base_SetConfig+0x40>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003832:	d00b      	beq.n	800384c <TIM_Base_SetConfig+0x40>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a2f      	ldr	r2, [pc, #188]	; (80038f4 <TIM_Base_SetConfig+0xe8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d007      	beq.n	800384c <TIM_Base_SetConfig+0x40>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a2e      	ldr	r2, [pc, #184]	; (80038f8 <TIM_Base_SetConfig+0xec>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_Base_SetConfig+0x40>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a2d      	ldr	r2, [pc, #180]	; (80038fc <TIM_Base_SetConfig+0xf0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d108      	bne.n	800385e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a22      	ldr	r2, [pc, #136]	; (80038ec <TIM_Base_SetConfig+0xe0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <TIM_Base_SetConfig+0x82>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a21      	ldr	r2, [pc, #132]	; (80038f0 <TIM_Base_SetConfig+0xe4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00f      	beq.n	800388e <TIM_Base_SetConfig+0x82>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003874:	d00b      	beq.n	800388e <TIM_Base_SetConfig+0x82>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a1e      	ldr	r2, [pc, #120]	; (80038f4 <TIM_Base_SetConfig+0xe8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d007      	beq.n	800388e <TIM_Base_SetConfig+0x82>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a1d      	ldr	r2, [pc, #116]	; (80038f8 <TIM_Base_SetConfig+0xec>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d003      	beq.n	800388e <TIM_Base_SetConfig+0x82>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a1c      	ldr	r2, [pc, #112]	; (80038fc <TIM_Base_SetConfig+0xf0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d108      	bne.n	80038a0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a09      	ldr	r2, [pc, #36]	; (80038ec <TIM_Base_SetConfig+0xe0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d003      	beq.n	80038d4 <TIM_Base_SetConfig+0xc8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a08      	ldr	r2, [pc, #32]	; (80038f0 <TIM_Base_SetConfig+0xe4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d103      	bne.n	80038dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	615a      	str	r2, [r3, #20]
}
 80038e2:	bf00      	nop
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr
 80038ec:	40012c00 	.word	0x40012c00
 80038f0:	40013400 	.word	0x40013400
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40000800 	.word	0x40000800
 80038fc:	40000c00 	.word	0x40000c00

08003900 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f023 0201 	bic.w	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0303 	bic.w	r3, r3, #3
 8003936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f023 0302 	bic.w	r3, r3, #2
 8003948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a20      	ldr	r2, [pc, #128]	; (80039d8 <TIM_OC1_SetConfig+0xd8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d003      	beq.n	8003964 <TIM_OC1_SetConfig+0x64>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a1f      	ldr	r2, [pc, #124]	; (80039dc <TIM_OC1_SetConfig+0xdc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d10c      	bne.n	800397e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f023 0308 	bic.w	r3, r3, #8
 800396a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f023 0304 	bic.w	r3, r3, #4
 800397c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a15      	ldr	r2, [pc, #84]	; (80039d8 <TIM_OC1_SetConfig+0xd8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <TIM_OC1_SetConfig+0x8e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a14      	ldr	r2, [pc, #80]	; (80039dc <TIM_OC1_SetConfig+0xdc>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d111      	bne.n	80039b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800399c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	621a      	str	r2, [r3, #32]
}
 80039cc:	bf00      	nop
 80039ce:	371c      	adds	r7, #28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40012c00 	.word	0x40012c00
 80039dc:	40013400 	.word	0x40013400

080039e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f023 0210 	bic.w	r2, r3, #16
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f023 0320 	bic.w	r3, r3, #32
 8003a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a21      	ldr	r2, [pc, #132]	; (8003ac0 <TIM_OC2_SetConfig+0xe0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <TIM_OC2_SetConfig+0x68>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <TIM_OC2_SetConfig+0xe4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d10d      	bne.n	8003a64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a16      	ldr	r2, [pc, #88]	; (8003ac0 <TIM_OC2_SetConfig+0xe0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <TIM_OC2_SetConfig+0x94>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a15      	ldr	r2, [pc, #84]	; (8003ac4 <TIM_OC2_SetConfig+0xe4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d113      	bne.n	8003a9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	621a      	str	r2, [r3, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40013400 	.word	0x40013400

08003ac8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0303 	bic.w	r3, r3, #3
 8003afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a21      	ldr	r2, [pc, #132]	; (8003ba8 <TIM_OC3_SetConfig+0xe0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d003      	beq.n	8003b2e <TIM_OC3_SetConfig+0x66>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a20      	ldr	r2, [pc, #128]	; (8003bac <TIM_OC3_SetConfig+0xe4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d10d      	bne.n	8003b4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a16      	ldr	r2, [pc, #88]	; (8003ba8 <TIM_OC3_SetConfig+0xe0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <TIM_OC3_SetConfig+0x92>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a15      	ldr	r2, [pc, #84]	; (8003bac <TIM_OC3_SetConfig+0xe4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d113      	bne.n	8003b82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	621a      	str	r2, [r3, #32]
}
 8003b9c:	bf00      	nop
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40012c00 	.word	0x40012c00
 8003bac:	40013400 	.word	0x40013400

08003bb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	031b      	lsls	r3, r3, #12
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a11      	ldr	r2, [pc, #68]	; (8003c50 <TIM_OC4_SetConfig+0xa0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d003      	beq.n	8003c18 <TIM_OC4_SetConfig+0x68>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a10      	ldr	r2, [pc, #64]	; (8003c54 <TIM_OC4_SetConfig+0xa4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d109      	bne.n	8003c2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	019b      	lsls	r3, r3, #6
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	621a      	str	r2, [r3, #32]
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr
 8003c50:	40012c00 	.word	0x40012c00
 8003c54:	40013400 	.word	0x40013400

08003c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1a      	ldr	r2, [r3, #32]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a1a      	ldr	r2, [r3, #32]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c90:	431a      	orrs	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	621a      	str	r2, [r3, #32]
}
 8003c96:	bf00      	nop
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e050      	b.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1b      	ldr	r2, [pc, #108]	; (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d018      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d013      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0e:	d00e      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d009      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a14      	ldr	r2, [pc, #80]	; (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d004      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10c      	bne.n	8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40013400 	.word	0x40013400
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800
 8003d74:	40000c00 	.word	0x40000c00

08003d78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e03d      	b.n	8003e10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr

08003e1a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr

08003e3e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e042      	b.n	8003ed6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d106      	bne.n	8003e6a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7fe f85b 	bl	8001f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2224      	movs	r2, #36	; 0x24
 8003e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f91c 	bl	80040c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ea6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eb6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b08a      	sub	sp, #40	; 0x28
 8003ee2:	af02      	add	r7, sp, #8
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	d16d      	bne.n	8003fda <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_UART_Transmit+0x2c>
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e066      	b.n	8003fdc <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2221      	movs	r2, #33	; 0x21
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f1c:	f7fe f8ca 	bl	80020b4 <HAL_GetTick>
 8003f20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	88fa      	ldrh	r2, [r7, #6]
 8003f26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	88fa      	ldrh	r2, [r7, #6]
 8003f2c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f36:	d108      	bne.n	8003f4a <HAL_UART_Transmit+0x6c>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d104      	bne.n	8003f4a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	e003      	b.n	8003f52 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f52:	e02a      	b.n	8003faa <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2180      	movs	r1, #128	; 0x80
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f840 	bl	8003fe4 <UART_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e036      	b.n	8003fdc <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10b      	bne.n	8003f8c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f82:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	3302      	adds	r3, #2
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	e007      	b.n	8003f9c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	781a      	ldrb	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1cf      	bne.n	8003f54 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2140      	movs	r1, #64	; 0x40
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f810 	bl	8003fe4 <UART_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e006      	b.n	8003fdc <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e000      	b.n	8003fdc <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
  }
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3720      	adds	r7, #32
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b090      	sub	sp, #64	; 0x40
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff4:	e050      	b.n	8004098 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d04c      	beq.n	8004098 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004000:	2b00      	cmp	r3, #0
 8004002:	d007      	beq.n	8004014 <UART_WaitOnFlagUntilTimeout+0x30>
 8004004:	f7fe f856 	bl	80020b4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004010:	429a      	cmp	r2, r3
 8004012:	d241      	bcs.n	8004098 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	330c      	adds	r3, #12
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	e853 3f00 	ldrex	r3, [r3]
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800402a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004034:	637a      	str	r2, [r7, #52]	; 0x34
 8004036:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800403a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e5      	bne.n	8004014 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3314      	adds	r3, #20
 800404e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	613b      	str	r3, [r7, #16]
   return(result);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f023 0301 	bic.w	r3, r3, #1
 800405e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3314      	adds	r3, #20
 8004066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004068:	623a      	str	r2, [r7, #32]
 800406a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	69f9      	ldr	r1, [r7, #28]
 800406e:	6a3a      	ldr	r2, [r7, #32]
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	61bb      	str	r3, [r7, #24]
   return(result);
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e5      	bne.n	8004048 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e00f      	b.n	80040b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	4013      	ands	r3, r2
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	bf0c      	ite	eq
 80040a8:	2301      	moveq	r3, #1
 80040aa:	2300      	movne	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d09f      	beq.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3740      	adds	r7, #64	; 0x40
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040fa:	f023 030c 	bic.w	r3, r3, #12
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	430b      	orrs	r3, r1
 8004106:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a2c      	ldr	r2, [pc, #176]	; (80041d4 <UART_SetConfig+0x114>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d103      	bne.n	8004130 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004128:	f7fe fe66 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	e002      	b.n	8004136 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004130:	f7fe fe4e 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8004134:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009a      	lsls	r2, r3, #2
 8004140:	441a      	add	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	4a22      	ldr	r2, [pc, #136]	; (80041d8 <UART_SetConfig+0x118>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	0119      	lsls	r1, r3, #4
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009a      	lsls	r2, r3, #2
 8004160:	441a      	add	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	fbb2 f2f3 	udiv	r2, r2, r3
 800416c:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <UART_SetConfig+0x118>)
 800416e:	fba3 0302 	umull	r0, r3, r3, r2
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2064      	movs	r0, #100	; 0x64
 8004176:	fb00 f303 	mul.w	r3, r0, r3
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	3332      	adds	r3, #50	; 0x32
 8004180:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <UART_SetConfig+0x118>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800418c:	4419      	add	r1, r3
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	009a      	lsls	r2, r3, #2
 8004198:	441a      	add	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a4:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <UART_SetConfig+0x118>)
 80041a6:	fba3 0302 	umull	r0, r3, r3, r2
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	2064      	movs	r0, #100	; 0x64
 80041ae:	fb00 f303 	mul.w	r3, r0, r3
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	3332      	adds	r3, #50	; 0x32
 80041b8:	4a07      	ldr	r2, [pc, #28]	; (80041d8 <UART_SetConfig+0x118>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	f003 020f 	and.w	r2, r3, #15
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	440a      	add	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041cc:	bf00      	nop
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40013800 	.word	0x40013800
 80041d8:	51eb851f 	.word	0x51eb851f

080041dc <__cvt>:
 80041dc:	2b00      	cmp	r3, #0
 80041de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e2:	461f      	mov	r7, r3
 80041e4:	bfbb      	ittet	lt
 80041e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80041ea:	461f      	movlt	r7, r3
 80041ec:	2300      	movge	r3, #0
 80041ee:	232d      	movlt	r3, #45	; 0x2d
 80041f0:	b088      	sub	sp, #32
 80041f2:	4614      	mov	r4, r2
 80041f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80041f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80041f8:	7013      	strb	r3, [r2, #0]
 80041fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80041fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004200:	f023 0820 	bic.w	r8, r3, #32
 8004204:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004208:	d005      	beq.n	8004216 <__cvt+0x3a>
 800420a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800420e:	d100      	bne.n	8004212 <__cvt+0x36>
 8004210:	3501      	adds	r5, #1
 8004212:	2302      	movs	r3, #2
 8004214:	e000      	b.n	8004218 <__cvt+0x3c>
 8004216:	2303      	movs	r3, #3
 8004218:	aa07      	add	r2, sp, #28
 800421a:	9204      	str	r2, [sp, #16]
 800421c:	aa06      	add	r2, sp, #24
 800421e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004222:	e9cd 3500 	strd	r3, r5, [sp]
 8004226:	4622      	mov	r2, r4
 8004228:	463b      	mov	r3, r7
 800422a:	f000 fe51 	bl	8004ed0 <_dtoa_r>
 800422e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004232:	4606      	mov	r6, r0
 8004234:	d102      	bne.n	800423c <__cvt+0x60>
 8004236:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004238:	07db      	lsls	r3, r3, #31
 800423a:	d522      	bpl.n	8004282 <__cvt+0xa6>
 800423c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004240:	eb06 0905 	add.w	r9, r6, r5
 8004244:	d110      	bne.n	8004268 <__cvt+0x8c>
 8004246:	7833      	ldrb	r3, [r6, #0]
 8004248:	2b30      	cmp	r3, #48	; 0x30
 800424a:	d10a      	bne.n	8004262 <__cvt+0x86>
 800424c:	2200      	movs	r2, #0
 800424e:	2300      	movs	r3, #0
 8004250:	4620      	mov	r0, r4
 8004252:	4639      	mov	r1, r7
 8004254:	f7fc fcc8 	bl	8000be8 <__aeabi_dcmpeq>
 8004258:	b918      	cbnz	r0, 8004262 <__cvt+0x86>
 800425a:	f1c5 0501 	rsb	r5, r5, #1
 800425e:	f8ca 5000 	str.w	r5, [sl]
 8004262:	f8da 3000 	ldr.w	r3, [sl]
 8004266:	4499      	add	r9, r3
 8004268:	2200      	movs	r2, #0
 800426a:	2300      	movs	r3, #0
 800426c:	4620      	mov	r0, r4
 800426e:	4639      	mov	r1, r7
 8004270:	f7fc fcba 	bl	8000be8 <__aeabi_dcmpeq>
 8004274:	b108      	cbz	r0, 800427a <__cvt+0x9e>
 8004276:	f8cd 901c 	str.w	r9, [sp, #28]
 800427a:	2230      	movs	r2, #48	; 0x30
 800427c:	9b07      	ldr	r3, [sp, #28]
 800427e:	454b      	cmp	r3, r9
 8004280:	d307      	bcc.n	8004292 <__cvt+0xb6>
 8004282:	4630      	mov	r0, r6
 8004284:	9b07      	ldr	r3, [sp, #28]
 8004286:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004288:	1b9b      	subs	r3, r3, r6
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	b008      	add	sp, #32
 800428e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004292:	1c59      	adds	r1, r3, #1
 8004294:	9107      	str	r1, [sp, #28]
 8004296:	701a      	strb	r2, [r3, #0]
 8004298:	e7f0      	b.n	800427c <__cvt+0xa0>

0800429a <__exponent>:
 800429a:	4603      	mov	r3, r0
 800429c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800429e:	2900      	cmp	r1, #0
 80042a0:	f803 2b02 	strb.w	r2, [r3], #2
 80042a4:	bfb6      	itet	lt
 80042a6:	222d      	movlt	r2, #45	; 0x2d
 80042a8:	222b      	movge	r2, #43	; 0x2b
 80042aa:	4249      	neglt	r1, r1
 80042ac:	2909      	cmp	r1, #9
 80042ae:	7042      	strb	r2, [r0, #1]
 80042b0:	dd2a      	ble.n	8004308 <__exponent+0x6e>
 80042b2:	f10d 0207 	add.w	r2, sp, #7
 80042b6:	4617      	mov	r7, r2
 80042b8:	260a      	movs	r6, #10
 80042ba:	fb91 f5f6 	sdiv	r5, r1, r6
 80042be:	4694      	mov	ip, r2
 80042c0:	fb06 1415 	mls	r4, r6, r5, r1
 80042c4:	3430      	adds	r4, #48	; 0x30
 80042c6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80042ca:	460c      	mov	r4, r1
 80042cc:	2c63      	cmp	r4, #99	; 0x63
 80042ce:	4629      	mov	r1, r5
 80042d0:	f102 32ff 	add.w	r2, r2, #4294967295
 80042d4:	dcf1      	bgt.n	80042ba <__exponent+0x20>
 80042d6:	3130      	adds	r1, #48	; 0x30
 80042d8:	f1ac 0402 	sub.w	r4, ip, #2
 80042dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80042e0:	4622      	mov	r2, r4
 80042e2:	1c41      	adds	r1, r0, #1
 80042e4:	42ba      	cmp	r2, r7
 80042e6:	d30a      	bcc.n	80042fe <__exponent+0x64>
 80042e8:	f10d 0209 	add.w	r2, sp, #9
 80042ec:	eba2 020c 	sub.w	r2, r2, ip
 80042f0:	42bc      	cmp	r4, r7
 80042f2:	bf88      	it	hi
 80042f4:	2200      	movhi	r2, #0
 80042f6:	4413      	add	r3, r2
 80042f8:	1a18      	subs	r0, r3, r0
 80042fa:	b003      	add	sp, #12
 80042fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004302:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004306:	e7ed      	b.n	80042e4 <__exponent+0x4a>
 8004308:	2330      	movs	r3, #48	; 0x30
 800430a:	3130      	adds	r1, #48	; 0x30
 800430c:	7083      	strb	r3, [r0, #2]
 800430e:	70c1      	strb	r1, [r0, #3]
 8004310:	1d03      	adds	r3, r0, #4
 8004312:	e7f1      	b.n	80042f8 <__exponent+0x5e>

08004314 <_printf_float>:
 8004314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004318:	b091      	sub	sp, #68	; 0x44
 800431a:	460c      	mov	r4, r1
 800431c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004320:	4616      	mov	r6, r2
 8004322:	461f      	mov	r7, r3
 8004324:	4605      	mov	r5, r0
 8004326:	f000 fcc5 	bl	8004cb4 <_localeconv_r>
 800432a:	6803      	ldr	r3, [r0, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	9309      	str	r3, [sp, #36]	; 0x24
 8004330:	f7fb ff7a 	bl	8000228 <strlen>
 8004334:	2300      	movs	r3, #0
 8004336:	930e      	str	r3, [sp, #56]	; 0x38
 8004338:	f8d8 3000 	ldr.w	r3, [r8]
 800433c:	900a      	str	r0, [sp, #40]	; 0x28
 800433e:	3307      	adds	r3, #7
 8004340:	f023 0307 	bic.w	r3, r3, #7
 8004344:	f103 0208 	add.w	r2, r3, #8
 8004348:	f894 9018 	ldrb.w	r9, [r4, #24]
 800434c:	f8d4 b000 	ldr.w	fp, [r4]
 8004350:	f8c8 2000 	str.w	r2, [r8]
 8004354:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004358:	4652      	mov	r2, sl
 800435a:	4643      	mov	r3, r8
 800435c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004360:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004364:	930b      	str	r3, [sp, #44]	; 0x2c
 8004366:	f04f 32ff 	mov.w	r2, #4294967295
 800436a:	4650      	mov	r0, sl
 800436c:	4b9c      	ldr	r3, [pc, #624]	; (80045e0 <_printf_float+0x2cc>)
 800436e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004370:	f7fc fc6c 	bl	8000c4c <__aeabi_dcmpun>
 8004374:	bb70      	cbnz	r0, 80043d4 <_printf_float+0xc0>
 8004376:	f04f 32ff 	mov.w	r2, #4294967295
 800437a:	4650      	mov	r0, sl
 800437c:	4b98      	ldr	r3, [pc, #608]	; (80045e0 <_printf_float+0x2cc>)
 800437e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004380:	f7fc fc46 	bl	8000c10 <__aeabi_dcmple>
 8004384:	bb30      	cbnz	r0, 80043d4 <_printf_float+0xc0>
 8004386:	2200      	movs	r2, #0
 8004388:	2300      	movs	r3, #0
 800438a:	4650      	mov	r0, sl
 800438c:	4641      	mov	r1, r8
 800438e:	f7fc fc35 	bl	8000bfc <__aeabi_dcmplt>
 8004392:	b110      	cbz	r0, 800439a <_printf_float+0x86>
 8004394:	232d      	movs	r3, #45	; 0x2d
 8004396:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800439a:	4a92      	ldr	r2, [pc, #584]	; (80045e4 <_printf_float+0x2d0>)
 800439c:	4b92      	ldr	r3, [pc, #584]	; (80045e8 <_printf_float+0x2d4>)
 800439e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80043a2:	bf94      	ite	ls
 80043a4:	4690      	movls	r8, r2
 80043a6:	4698      	movhi	r8, r3
 80043a8:	2303      	movs	r3, #3
 80043aa:	f04f 0a00 	mov.w	sl, #0
 80043ae:	6123      	str	r3, [r4, #16]
 80043b0:	f02b 0304 	bic.w	r3, fp, #4
 80043b4:	6023      	str	r3, [r4, #0]
 80043b6:	4633      	mov	r3, r6
 80043b8:	4621      	mov	r1, r4
 80043ba:	4628      	mov	r0, r5
 80043bc:	9700      	str	r7, [sp, #0]
 80043be:	aa0f      	add	r2, sp, #60	; 0x3c
 80043c0:	f000 f9d6 	bl	8004770 <_printf_common>
 80043c4:	3001      	adds	r0, #1
 80043c6:	f040 8090 	bne.w	80044ea <_printf_float+0x1d6>
 80043ca:	f04f 30ff 	mov.w	r0, #4294967295
 80043ce:	b011      	add	sp, #68	; 0x44
 80043d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d4:	4652      	mov	r2, sl
 80043d6:	4643      	mov	r3, r8
 80043d8:	4650      	mov	r0, sl
 80043da:	4641      	mov	r1, r8
 80043dc:	f7fc fc36 	bl	8000c4c <__aeabi_dcmpun>
 80043e0:	b148      	cbz	r0, 80043f6 <_printf_float+0xe2>
 80043e2:	f1b8 0f00 	cmp.w	r8, #0
 80043e6:	bfb8      	it	lt
 80043e8:	232d      	movlt	r3, #45	; 0x2d
 80043ea:	4a80      	ldr	r2, [pc, #512]	; (80045ec <_printf_float+0x2d8>)
 80043ec:	bfb8      	it	lt
 80043ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80043f2:	4b7f      	ldr	r3, [pc, #508]	; (80045f0 <_printf_float+0x2dc>)
 80043f4:	e7d3      	b.n	800439e <_printf_float+0x8a>
 80043f6:	6863      	ldr	r3, [r4, #4]
 80043f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	d142      	bne.n	8004486 <_printf_float+0x172>
 8004400:	2306      	movs	r3, #6
 8004402:	6063      	str	r3, [r4, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	9206      	str	r2, [sp, #24]
 8004408:	aa0e      	add	r2, sp, #56	; 0x38
 800440a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800440e:	aa0d      	add	r2, sp, #52	; 0x34
 8004410:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004414:	9203      	str	r2, [sp, #12]
 8004416:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800441a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800441e:	6023      	str	r3, [r4, #0]
 8004420:	6863      	ldr	r3, [r4, #4]
 8004422:	4652      	mov	r2, sl
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	4628      	mov	r0, r5
 8004428:	4643      	mov	r3, r8
 800442a:	910b      	str	r1, [sp, #44]	; 0x2c
 800442c:	f7ff fed6 	bl	80041dc <__cvt>
 8004430:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004432:	4680      	mov	r8, r0
 8004434:	2947      	cmp	r1, #71	; 0x47
 8004436:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004438:	d108      	bne.n	800444c <_printf_float+0x138>
 800443a:	1cc8      	adds	r0, r1, #3
 800443c:	db02      	blt.n	8004444 <_printf_float+0x130>
 800443e:	6863      	ldr	r3, [r4, #4]
 8004440:	4299      	cmp	r1, r3
 8004442:	dd40      	ble.n	80044c6 <_printf_float+0x1b2>
 8004444:	f1a9 0902 	sub.w	r9, r9, #2
 8004448:	fa5f f989 	uxtb.w	r9, r9
 800444c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004450:	d81f      	bhi.n	8004492 <_printf_float+0x17e>
 8004452:	464a      	mov	r2, r9
 8004454:	3901      	subs	r1, #1
 8004456:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800445a:	910d      	str	r1, [sp, #52]	; 0x34
 800445c:	f7ff ff1d 	bl	800429a <__exponent>
 8004460:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004462:	4682      	mov	sl, r0
 8004464:	1813      	adds	r3, r2, r0
 8004466:	2a01      	cmp	r2, #1
 8004468:	6123      	str	r3, [r4, #16]
 800446a:	dc02      	bgt.n	8004472 <_printf_float+0x15e>
 800446c:	6822      	ldr	r2, [r4, #0]
 800446e:	07d2      	lsls	r2, r2, #31
 8004470:	d501      	bpl.n	8004476 <_printf_float+0x162>
 8004472:	3301      	adds	r3, #1
 8004474:	6123      	str	r3, [r4, #16]
 8004476:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800447a:	2b00      	cmp	r3, #0
 800447c:	d09b      	beq.n	80043b6 <_printf_float+0xa2>
 800447e:	232d      	movs	r3, #45	; 0x2d
 8004480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004484:	e797      	b.n	80043b6 <_printf_float+0xa2>
 8004486:	2947      	cmp	r1, #71	; 0x47
 8004488:	d1bc      	bne.n	8004404 <_printf_float+0xf0>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1ba      	bne.n	8004404 <_printf_float+0xf0>
 800448e:	2301      	movs	r3, #1
 8004490:	e7b7      	b.n	8004402 <_printf_float+0xee>
 8004492:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004496:	d118      	bne.n	80044ca <_printf_float+0x1b6>
 8004498:	2900      	cmp	r1, #0
 800449a:	6863      	ldr	r3, [r4, #4]
 800449c:	dd0b      	ble.n	80044b6 <_printf_float+0x1a2>
 800449e:	6121      	str	r1, [r4, #16]
 80044a0:	b913      	cbnz	r3, 80044a8 <_printf_float+0x194>
 80044a2:	6822      	ldr	r2, [r4, #0]
 80044a4:	07d0      	lsls	r0, r2, #31
 80044a6:	d502      	bpl.n	80044ae <_printf_float+0x19a>
 80044a8:	3301      	adds	r3, #1
 80044aa:	440b      	add	r3, r1
 80044ac:	6123      	str	r3, [r4, #16]
 80044ae:	f04f 0a00 	mov.w	sl, #0
 80044b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80044b4:	e7df      	b.n	8004476 <_printf_float+0x162>
 80044b6:	b913      	cbnz	r3, 80044be <_printf_float+0x1aa>
 80044b8:	6822      	ldr	r2, [r4, #0]
 80044ba:	07d2      	lsls	r2, r2, #31
 80044bc:	d501      	bpl.n	80044c2 <_printf_float+0x1ae>
 80044be:	3302      	adds	r3, #2
 80044c0:	e7f4      	b.n	80044ac <_printf_float+0x198>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e7f2      	b.n	80044ac <_printf_float+0x198>
 80044c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80044ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044cc:	4299      	cmp	r1, r3
 80044ce:	db05      	blt.n	80044dc <_printf_float+0x1c8>
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	6121      	str	r1, [r4, #16]
 80044d4:	07d8      	lsls	r0, r3, #31
 80044d6:	d5ea      	bpl.n	80044ae <_printf_float+0x19a>
 80044d8:	1c4b      	adds	r3, r1, #1
 80044da:	e7e7      	b.n	80044ac <_printf_float+0x198>
 80044dc:	2900      	cmp	r1, #0
 80044de:	bfcc      	ite	gt
 80044e0:	2201      	movgt	r2, #1
 80044e2:	f1c1 0202 	rsble	r2, r1, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	e7e0      	b.n	80044ac <_printf_float+0x198>
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	055a      	lsls	r2, r3, #21
 80044ee:	d407      	bmi.n	8004500 <_printf_float+0x1ec>
 80044f0:	6923      	ldr	r3, [r4, #16]
 80044f2:	4642      	mov	r2, r8
 80044f4:	4631      	mov	r1, r6
 80044f6:	4628      	mov	r0, r5
 80044f8:	47b8      	blx	r7
 80044fa:	3001      	adds	r0, #1
 80044fc:	d12b      	bne.n	8004556 <_printf_float+0x242>
 80044fe:	e764      	b.n	80043ca <_printf_float+0xb6>
 8004500:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004504:	f240 80dd 	bls.w	80046c2 <_printf_float+0x3ae>
 8004508:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800450c:	2200      	movs	r2, #0
 800450e:	2300      	movs	r3, #0
 8004510:	f7fc fb6a 	bl	8000be8 <__aeabi_dcmpeq>
 8004514:	2800      	cmp	r0, #0
 8004516:	d033      	beq.n	8004580 <_printf_float+0x26c>
 8004518:	2301      	movs	r3, #1
 800451a:	4631      	mov	r1, r6
 800451c:	4628      	mov	r0, r5
 800451e:	4a35      	ldr	r2, [pc, #212]	; (80045f4 <_printf_float+0x2e0>)
 8004520:	47b8      	blx	r7
 8004522:	3001      	adds	r0, #1
 8004524:	f43f af51 	beq.w	80043ca <_printf_float+0xb6>
 8004528:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800452c:	429a      	cmp	r2, r3
 800452e:	db02      	blt.n	8004536 <_printf_float+0x222>
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	07d8      	lsls	r0, r3, #31
 8004534:	d50f      	bpl.n	8004556 <_printf_float+0x242>
 8004536:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800453a:	4631      	mov	r1, r6
 800453c:	4628      	mov	r0, r5
 800453e:	47b8      	blx	r7
 8004540:	3001      	adds	r0, #1
 8004542:	f43f af42 	beq.w	80043ca <_printf_float+0xb6>
 8004546:	f04f 0800 	mov.w	r8, #0
 800454a:	f104 091a 	add.w	r9, r4, #26
 800454e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004550:	3b01      	subs	r3, #1
 8004552:	4543      	cmp	r3, r8
 8004554:	dc09      	bgt.n	800456a <_printf_float+0x256>
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	079b      	lsls	r3, r3, #30
 800455a:	f100 8104 	bmi.w	8004766 <_printf_float+0x452>
 800455e:	68e0      	ldr	r0, [r4, #12]
 8004560:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004562:	4298      	cmp	r0, r3
 8004564:	bfb8      	it	lt
 8004566:	4618      	movlt	r0, r3
 8004568:	e731      	b.n	80043ce <_printf_float+0xba>
 800456a:	2301      	movs	r3, #1
 800456c:	464a      	mov	r2, r9
 800456e:	4631      	mov	r1, r6
 8004570:	4628      	mov	r0, r5
 8004572:	47b8      	blx	r7
 8004574:	3001      	adds	r0, #1
 8004576:	f43f af28 	beq.w	80043ca <_printf_float+0xb6>
 800457a:	f108 0801 	add.w	r8, r8, #1
 800457e:	e7e6      	b.n	800454e <_printf_float+0x23a>
 8004580:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004582:	2b00      	cmp	r3, #0
 8004584:	dc38      	bgt.n	80045f8 <_printf_float+0x2e4>
 8004586:	2301      	movs	r3, #1
 8004588:	4631      	mov	r1, r6
 800458a:	4628      	mov	r0, r5
 800458c:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <_printf_float+0x2e0>)
 800458e:	47b8      	blx	r7
 8004590:	3001      	adds	r0, #1
 8004592:	f43f af1a 	beq.w	80043ca <_printf_float+0xb6>
 8004596:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800459a:	4313      	orrs	r3, r2
 800459c:	d102      	bne.n	80045a4 <_printf_float+0x290>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	07d9      	lsls	r1, r3, #31
 80045a2:	d5d8      	bpl.n	8004556 <_printf_float+0x242>
 80045a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045a8:	4631      	mov	r1, r6
 80045aa:	4628      	mov	r0, r5
 80045ac:	47b8      	blx	r7
 80045ae:	3001      	adds	r0, #1
 80045b0:	f43f af0b 	beq.w	80043ca <_printf_float+0xb6>
 80045b4:	f04f 0900 	mov.w	r9, #0
 80045b8:	f104 0a1a 	add.w	sl, r4, #26
 80045bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045be:	425b      	negs	r3, r3
 80045c0:	454b      	cmp	r3, r9
 80045c2:	dc01      	bgt.n	80045c8 <_printf_float+0x2b4>
 80045c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045c6:	e794      	b.n	80044f2 <_printf_float+0x1de>
 80045c8:	2301      	movs	r3, #1
 80045ca:	4652      	mov	r2, sl
 80045cc:	4631      	mov	r1, r6
 80045ce:	4628      	mov	r0, r5
 80045d0:	47b8      	blx	r7
 80045d2:	3001      	adds	r0, #1
 80045d4:	f43f aef9 	beq.w	80043ca <_printf_float+0xb6>
 80045d8:	f109 0901 	add.w	r9, r9, #1
 80045dc:	e7ee      	b.n	80045bc <_printf_float+0x2a8>
 80045de:	bf00      	nop
 80045e0:	7fefffff 	.word	0x7fefffff
 80045e4:	08006be6 	.word	0x08006be6
 80045e8:	08006bea 	.word	0x08006bea
 80045ec:	08006bee 	.word	0x08006bee
 80045f0:	08006bf2 	.word	0x08006bf2
 80045f4:	08006bf6 	.word	0x08006bf6
 80045f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045fc:	429a      	cmp	r2, r3
 80045fe:	bfa8      	it	ge
 8004600:	461a      	movge	r2, r3
 8004602:	2a00      	cmp	r2, #0
 8004604:	4691      	mov	r9, r2
 8004606:	dc37      	bgt.n	8004678 <_printf_float+0x364>
 8004608:	f04f 0b00 	mov.w	fp, #0
 800460c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004610:	f104 021a 	add.w	r2, r4, #26
 8004614:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004618:	ebaa 0309 	sub.w	r3, sl, r9
 800461c:	455b      	cmp	r3, fp
 800461e:	dc33      	bgt.n	8004688 <_printf_float+0x374>
 8004620:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004624:	429a      	cmp	r2, r3
 8004626:	db3b      	blt.n	80046a0 <_printf_float+0x38c>
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	07da      	lsls	r2, r3, #31
 800462c:	d438      	bmi.n	80046a0 <_printf_float+0x38c>
 800462e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004632:	eba2 0903 	sub.w	r9, r2, r3
 8004636:	eba2 020a 	sub.w	r2, r2, sl
 800463a:	4591      	cmp	r9, r2
 800463c:	bfa8      	it	ge
 800463e:	4691      	movge	r9, r2
 8004640:	f1b9 0f00 	cmp.w	r9, #0
 8004644:	dc34      	bgt.n	80046b0 <_printf_float+0x39c>
 8004646:	f04f 0800 	mov.w	r8, #0
 800464a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800464e:	f104 0a1a 	add.w	sl, r4, #26
 8004652:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	eba3 0309 	sub.w	r3, r3, r9
 800465c:	4543      	cmp	r3, r8
 800465e:	f77f af7a 	ble.w	8004556 <_printf_float+0x242>
 8004662:	2301      	movs	r3, #1
 8004664:	4652      	mov	r2, sl
 8004666:	4631      	mov	r1, r6
 8004668:	4628      	mov	r0, r5
 800466a:	47b8      	blx	r7
 800466c:	3001      	adds	r0, #1
 800466e:	f43f aeac 	beq.w	80043ca <_printf_float+0xb6>
 8004672:	f108 0801 	add.w	r8, r8, #1
 8004676:	e7ec      	b.n	8004652 <_printf_float+0x33e>
 8004678:	4613      	mov	r3, r2
 800467a:	4631      	mov	r1, r6
 800467c:	4642      	mov	r2, r8
 800467e:	4628      	mov	r0, r5
 8004680:	47b8      	blx	r7
 8004682:	3001      	adds	r0, #1
 8004684:	d1c0      	bne.n	8004608 <_printf_float+0x2f4>
 8004686:	e6a0      	b.n	80043ca <_printf_float+0xb6>
 8004688:	2301      	movs	r3, #1
 800468a:	4631      	mov	r1, r6
 800468c:	4628      	mov	r0, r5
 800468e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004690:	47b8      	blx	r7
 8004692:	3001      	adds	r0, #1
 8004694:	f43f ae99 	beq.w	80043ca <_printf_float+0xb6>
 8004698:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800469a:	f10b 0b01 	add.w	fp, fp, #1
 800469e:	e7b9      	b.n	8004614 <_printf_float+0x300>
 80046a0:	4631      	mov	r1, r6
 80046a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046a6:	4628      	mov	r0, r5
 80046a8:	47b8      	blx	r7
 80046aa:	3001      	adds	r0, #1
 80046ac:	d1bf      	bne.n	800462e <_printf_float+0x31a>
 80046ae:	e68c      	b.n	80043ca <_printf_float+0xb6>
 80046b0:	464b      	mov	r3, r9
 80046b2:	4631      	mov	r1, r6
 80046b4:	4628      	mov	r0, r5
 80046b6:	eb08 020a 	add.w	r2, r8, sl
 80046ba:	47b8      	blx	r7
 80046bc:	3001      	adds	r0, #1
 80046be:	d1c2      	bne.n	8004646 <_printf_float+0x332>
 80046c0:	e683      	b.n	80043ca <_printf_float+0xb6>
 80046c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046c4:	2a01      	cmp	r2, #1
 80046c6:	dc01      	bgt.n	80046cc <_printf_float+0x3b8>
 80046c8:	07db      	lsls	r3, r3, #31
 80046ca:	d539      	bpl.n	8004740 <_printf_float+0x42c>
 80046cc:	2301      	movs	r3, #1
 80046ce:	4642      	mov	r2, r8
 80046d0:	4631      	mov	r1, r6
 80046d2:	4628      	mov	r0, r5
 80046d4:	47b8      	blx	r7
 80046d6:	3001      	adds	r0, #1
 80046d8:	f43f ae77 	beq.w	80043ca <_printf_float+0xb6>
 80046dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046e0:	4631      	mov	r1, r6
 80046e2:	4628      	mov	r0, r5
 80046e4:	47b8      	blx	r7
 80046e6:	3001      	adds	r0, #1
 80046e8:	f43f ae6f 	beq.w	80043ca <_printf_float+0xb6>
 80046ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80046f0:	2200      	movs	r2, #0
 80046f2:	2300      	movs	r3, #0
 80046f4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80046f8:	f7fc fa76 	bl	8000be8 <__aeabi_dcmpeq>
 80046fc:	b9d8      	cbnz	r0, 8004736 <_printf_float+0x422>
 80046fe:	f109 33ff 	add.w	r3, r9, #4294967295
 8004702:	f108 0201 	add.w	r2, r8, #1
 8004706:	4631      	mov	r1, r6
 8004708:	4628      	mov	r0, r5
 800470a:	47b8      	blx	r7
 800470c:	3001      	adds	r0, #1
 800470e:	d10e      	bne.n	800472e <_printf_float+0x41a>
 8004710:	e65b      	b.n	80043ca <_printf_float+0xb6>
 8004712:	2301      	movs	r3, #1
 8004714:	464a      	mov	r2, r9
 8004716:	4631      	mov	r1, r6
 8004718:	4628      	mov	r0, r5
 800471a:	47b8      	blx	r7
 800471c:	3001      	adds	r0, #1
 800471e:	f43f ae54 	beq.w	80043ca <_printf_float+0xb6>
 8004722:	f108 0801 	add.w	r8, r8, #1
 8004726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004728:	3b01      	subs	r3, #1
 800472a:	4543      	cmp	r3, r8
 800472c:	dcf1      	bgt.n	8004712 <_printf_float+0x3fe>
 800472e:	4653      	mov	r3, sl
 8004730:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004734:	e6de      	b.n	80044f4 <_printf_float+0x1e0>
 8004736:	f04f 0800 	mov.w	r8, #0
 800473a:	f104 091a 	add.w	r9, r4, #26
 800473e:	e7f2      	b.n	8004726 <_printf_float+0x412>
 8004740:	2301      	movs	r3, #1
 8004742:	4642      	mov	r2, r8
 8004744:	e7df      	b.n	8004706 <_printf_float+0x3f2>
 8004746:	2301      	movs	r3, #1
 8004748:	464a      	mov	r2, r9
 800474a:	4631      	mov	r1, r6
 800474c:	4628      	mov	r0, r5
 800474e:	47b8      	blx	r7
 8004750:	3001      	adds	r0, #1
 8004752:	f43f ae3a 	beq.w	80043ca <_printf_float+0xb6>
 8004756:	f108 0801 	add.w	r8, r8, #1
 800475a:	68e3      	ldr	r3, [r4, #12]
 800475c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800475e:	1a5b      	subs	r3, r3, r1
 8004760:	4543      	cmp	r3, r8
 8004762:	dcf0      	bgt.n	8004746 <_printf_float+0x432>
 8004764:	e6fb      	b.n	800455e <_printf_float+0x24a>
 8004766:	f04f 0800 	mov.w	r8, #0
 800476a:	f104 0919 	add.w	r9, r4, #25
 800476e:	e7f4      	b.n	800475a <_printf_float+0x446>

08004770 <_printf_common>:
 8004770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004774:	4616      	mov	r6, r2
 8004776:	4699      	mov	r9, r3
 8004778:	688a      	ldr	r2, [r1, #8]
 800477a:	690b      	ldr	r3, [r1, #16]
 800477c:	4607      	mov	r7, r0
 800477e:	4293      	cmp	r3, r2
 8004780:	bfb8      	it	lt
 8004782:	4613      	movlt	r3, r2
 8004784:	6033      	str	r3, [r6, #0]
 8004786:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800478a:	460c      	mov	r4, r1
 800478c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004790:	b10a      	cbz	r2, 8004796 <_printf_common+0x26>
 8004792:	3301      	adds	r3, #1
 8004794:	6033      	str	r3, [r6, #0]
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	0699      	lsls	r1, r3, #26
 800479a:	bf42      	ittt	mi
 800479c:	6833      	ldrmi	r3, [r6, #0]
 800479e:	3302      	addmi	r3, #2
 80047a0:	6033      	strmi	r3, [r6, #0]
 80047a2:	6825      	ldr	r5, [r4, #0]
 80047a4:	f015 0506 	ands.w	r5, r5, #6
 80047a8:	d106      	bne.n	80047b8 <_printf_common+0x48>
 80047aa:	f104 0a19 	add.w	sl, r4, #25
 80047ae:	68e3      	ldr	r3, [r4, #12]
 80047b0:	6832      	ldr	r2, [r6, #0]
 80047b2:	1a9b      	subs	r3, r3, r2
 80047b4:	42ab      	cmp	r3, r5
 80047b6:	dc2b      	bgt.n	8004810 <_printf_common+0xa0>
 80047b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047bc:	1e13      	subs	r3, r2, #0
 80047be:	6822      	ldr	r2, [r4, #0]
 80047c0:	bf18      	it	ne
 80047c2:	2301      	movne	r3, #1
 80047c4:	0692      	lsls	r2, r2, #26
 80047c6:	d430      	bmi.n	800482a <_printf_common+0xba>
 80047c8:	4649      	mov	r1, r9
 80047ca:	4638      	mov	r0, r7
 80047cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047d0:	47c0      	blx	r8
 80047d2:	3001      	adds	r0, #1
 80047d4:	d023      	beq.n	800481e <_printf_common+0xae>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	6922      	ldr	r2, [r4, #16]
 80047da:	f003 0306 	and.w	r3, r3, #6
 80047de:	2b04      	cmp	r3, #4
 80047e0:	bf14      	ite	ne
 80047e2:	2500      	movne	r5, #0
 80047e4:	6833      	ldreq	r3, [r6, #0]
 80047e6:	f04f 0600 	mov.w	r6, #0
 80047ea:	bf08      	it	eq
 80047ec:	68e5      	ldreq	r5, [r4, #12]
 80047ee:	f104 041a 	add.w	r4, r4, #26
 80047f2:	bf08      	it	eq
 80047f4:	1aed      	subeq	r5, r5, r3
 80047f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80047fa:	bf08      	it	eq
 80047fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004800:	4293      	cmp	r3, r2
 8004802:	bfc4      	itt	gt
 8004804:	1a9b      	subgt	r3, r3, r2
 8004806:	18ed      	addgt	r5, r5, r3
 8004808:	42b5      	cmp	r5, r6
 800480a:	d11a      	bne.n	8004842 <_printf_common+0xd2>
 800480c:	2000      	movs	r0, #0
 800480e:	e008      	b.n	8004822 <_printf_common+0xb2>
 8004810:	2301      	movs	r3, #1
 8004812:	4652      	mov	r2, sl
 8004814:	4649      	mov	r1, r9
 8004816:	4638      	mov	r0, r7
 8004818:	47c0      	blx	r8
 800481a:	3001      	adds	r0, #1
 800481c:	d103      	bne.n	8004826 <_printf_common+0xb6>
 800481e:	f04f 30ff 	mov.w	r0, #4294967295
 8004822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004826:	3501      	adds	r5, #1
 8004828:	e7c1      	b.n	80047ae <_printf_common+0x3e>
 800482a:	2030      	movs	r0, #48	; 0x30
 800482c:	18e1      	adds	r1, r4, r3
 800482e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004838:	4422      	add	r2, r4
 800483a:	3302      	adds	r3, #2
 800483c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004840:	e7c2      	b.n	80047c8 <_printf_common+0x58>
 8004842:	2301      	movs	r3, #1
 8004844:	4622      	mov	r2, r4
 8004846:	4649      	mov	r1, r9
 8004848:	4638      	mov	r0, r7
 800484a:	47c0      	blx	r8
 800484c:	3001      	adds	r0, #1
 800484e:	d0e6      	beq.n	800481e <_printf_common+0xae>
 8004850:	3601      	adds	r6, #1
 8004852:	e7d9      	b.n	8004808 <_printf_common+0x98>

08004854 <_printf_i>:
 8004854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004858:	7e0f      	ldrb	r7, [r1, #24]
 800485a:	4691      	mov	r9, r2
 800485c:	2f78      	cmp	r7, #120	; 0x78
 800485e:	4680      	mov	r8, r0
 8004860:	460c      	mov	r4, r1
 8004862:	469a      	mov	sl, r3
 8004864:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800486a:	d807      	bhi.n	800487c <_printf_i+0x28>
 800486c:	2f62      	cmp	r7, #98	; 0x62
 800486e:	d80a      	bhi.n	8004886 <_printf_i+0x32>
 8004870:	2f00      	cmp	r7, #0
 8004872:	f000 80d5 	beq.w	8004a20 <_printf_i+0x1cc>
 8004876:	2f58      	cmp	r7, #88	; 0x58
 8004878:	f000 80c1 	beq.w	80049fe <_printf_i+0x1aa>
 800487c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004884:	e03a      	b.n	80048fc <_printf_i+0xa8>
 8004886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800488a:	2b15      	cmp	r3, #21
 800488c:	d8f6      	bhi.n	800487c <_printf_i+0x28>
 800488e:	a101      	add	r1, pc, #4	; (adr r1, 8004894 <_printf_i+0x40>)
 8004890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004894:	080048ed 	.word	0x080048ed
 8004898:	08004901 	.word	0x08004901
 800489c:	0800487d 	.word	0x0800487d
 80048a0:	0800487d 	.word	0x0800487d
 80048a4:	0800487d 	.word	0x0800487d
 80048a8:	0800487d 	.word	0x0800487d
 80048ac:	08004901 	.word	0x08004901
 80048b0:	0800487d 	.word	0x0800487d
 80048b4:	0800487d 	.word	0x0800487d
 80048b8:	0800487d 	.word	0x0800487d
 80048bc:	0800487d 	.word	0x0800487d
 80048c0:	08004a07 	.word	0x08004a07
 80048c4:	0800492d 	.word	0x0800492d
 80048c8:	080049c1 	.word	0x080049c1
 80048cc:	0800487d 	.word	0x0800487d
 80048d0:	0800487d 	.word	0x0800487d
 80048d4:	08004a29 	.word	0x08004a29
 80048d8:	0800487d 	.word	0x0800487d
 80048dc:	0800492d 	.word	0x0800492d
 80048e0:	0800487d 	.word	0x0800487d
 80048e4:	0800487d 	.word	0x0800487d
 80048e8:	080049c9 	.word	0x080049c9
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	1d1a      	adds	r2, r3, #4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	602a      	str	r2, [r5, #0]
 80048f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0a0      	b.n	8004a42 <_printf_i+0x1ee>
 8004900:	6820      	ldr	r0, [r4, #0]
 8004902:	682b      	ldr	r3, [r5, #0]
 8004904:	0607      	lsls	r7, r0, #24
 8004906:	f103 0104 	add.w	r1, r3, #4
 800490a:	6029      	str	r1, [r5, #0]
 800490c:	d501      	bpl.n	8004912 <_printf_i+0xbe>
 800490e:	681e      	ldr	r6, [r3, #0]
 8004910:	e003      	b.n	800491a <_printf_i+0xc6>
 8004912:	0646      	lsls	r6, r0, #25
 8004914:	d5fb      	bpl.n	800490e <_printf_i+0xba>
 8004916:	f9b3 6000 	ldrsh.w	r6, [r3]
 800491a:	2e00      	cmp	r6, #0
 800491c:	da03      	bge.n	8004926 <_printf_i+0xd2>
 800491e:	232d      	movs	r3, #45	; 0x2d
 8004920:	4276      	negs	r6, r6
 8004922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004926:	230a      	movs	r3, #10
 8004928:	4859      	ldr	r0, [pc, #356]	; (8004a90 <_printf_i+0x23c>)
 800492a:	e012      	b.n	8004952 <_printf_i+0xfe>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	1d19      	adds	r1, r3, #4
 8004932:	6029      	str	r1, [r5, #0]
 8004934:	0605      	lsls	r5, r0, #24
 8004936:	d501      	bpl.n	800493c <_printf_i+0xe8>
 8004938:	681e      	ldr	r6, [r3, #0]
 800493a:	e002      	b.n	8004942 <_printf_i+0xee>
 800493c:	0641      	lsls	r1, r0, #25
 800493e:	d5fb      	bpl.n	8004938 <_printf_i+0xe4>
 8004940:	881e      	ldrh	r6, [r3, #0]
 8004942:	2f6f      	cmp	r7, #111	; 0x6f
 8004944:	bf0c      	ite	eq
 8004946:	2308      	moveq	r3, #8
 8004948:	230a      	movne	r3, #10
 800494a:	4851      	ldr	r0, [pc, #324]	; (8004a90 <_printf_i+0x23c>)
 800494c:	2100      	movs	r1, #0
 800494e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004952:	6865      	ldr	r5, [r4, #4]
 8004954:	2d00      	cmp	r5, #0
 8004956:	bfa8      	it	ge
 8004958:	6821      	ldrge	r1, [r4, #0]
 800495a:	60a5      	str	r5, [r4, #8]
 800495c:	bfa4      	itt	ge
 800495e:	f021 0104 	bicge.w	r1, r1, #4
 8004962:	6021      	strge	r1, [r4, #0]
 8004964:	b90e      	cbnz	r6, 800496a <_printf_i+0x116>
 8004966:	2d00      	cmp	r5, #0
 8004968:	d04b      	beq.n	8004a02 <_printf_i+0x1ae>
 800496a:	4615      	mov	r5, r2
 800496c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004970:	fb03 6711 	mls	r7, r3, r1, r6
 8004974:	5dc7      	ldrb	r7, [r0, r7]
 8004976:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800497a:	4637      	mov	r7, r6
 800497c:	42bb      	cmp	r3, r7
 800497e:	460e      	mov	r6, r1
 8004980:	d9f4      	bls.n	800496c <_printf_i+0x118>
 8004982:	2b08      	cmp	r3, #8
 8004984:	d10b      	bne.n	800499e <_printf_i+0x14a>
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	07de      	lsls	r6, r3, #31
 800498a:	d508      	bpl.n	800499e <_printf_i+0x14a>
 800498c:	6923      	ldr	r3, [r4, #16]
 800498e:	6861      	ldr	r1, [r4, #4]
 8004990:	4299      	cmp	r1, r3
 8004992:	bfde      	ittt	le
 8004994:	2330      	movle	r3, #48	; 0x30
 8004996:	f805 3c01 	strble.w	r3, [r5, #-1]
 800499a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800499e:	1b52      	subs	r2, r2, r5
 80049a0:	6122      	str	r2, [r4, #16]
 80049a2:	464b      	mov	r3, r9
 80049a4:	4621      	mov	r1, r4
 80049a6:	4640      	mov	r0, r8
 80049a8:	f8cd a000 	str.w	sl, [sp]
 80049ac:	aa03      	add	r2, sp, #12
 80049ae:	f7ff fedf 	bl	8004770 <_printf_common>
 80049b2:	3001      	adds	r0, #1
 80049b4:	d14a      	bne.n	8004a4c <_printf_i+0x1f8>
 80049b6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ba:	b004      	add	sp, #16
 80049bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	f043 0320 	orr.w	r3, r3, #32
 80049c6:	6023      	str	r3, [r4, #0]
 80049c8:	2778      	movs	r7, #120	; 0x78
 80049ca:	4832      	ldr	r0, [pc, #200]	; (8004a94 <_printf_i+0x240>)
 80049cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	6829      	ldr	r1, [r5, #0]
 80049d4:	061f      	lsls	r7, r3, #24
 80049d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80049da:	d402      	bmi.n	80049e2 <_printf_i+0x18e>
 80049dc:	065f      	lsls	r7, r3, #25
 80049de:	bf48      	it	mi
 80049e0:	b2b6      	uxthmi	r6, r6
 80049e2:	07df      	lsls	r7, r3, #31
 80049e4:	bf48      	it	mi
 80049e6:	f043 0320 	orrmi.w	r3, r3, #32
 80049ea:	6029      	str	r1, [r5, #0]
 80049ec:	bf48      	it	mi
 80049ee:	6023      	strmi	r3, [r4, #0]
 80049f0:	b91e      	cbnz	r6, 80049fa <_printf_i+0x1a6>
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	f023 0320 	bic.w	r3, r3, #32
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	2310      	movs	r3, #16
 80049fc:	e7a6      	b.n	800494c <_printf_i+0xf8>
 80049fe:	4824      	ldr	r0, [pc, #144]	; (8004a90 <_printf_i+0x23c>)
 8004a00:	e7e4      	b.n	80049cc <_printf_i+0x178>
 8004a02:	4615      	mov	r5, r2
 8004a04:	e7bd      	b.n	8004982 <_printf_i+0x12e>
 8004a06:	682b      	ldr	r3, [r5, #0]
 8004a08:	6826      	ldr	r6, [r4, #0]
 8004a0a:	1d18      	adds	r0, r3, #4
 8004a0c:	6961      	ldr	r1, [r4, #20]
 8004a0e:	6028      	str	r0, [r5, #0]
 8004a10:	0635      	lsls	r5, r6, #24
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	d501      	bpl.n	8004a1a <_printf_i+0x1c6>
 8004a16:	6019      	str	r1, [r3, #0]
 8004a18:	e002      	b.n	8004a20 <_printf_i+0x1cc>
 8004a1a:	0670      	lsls	r0, r6, #25
 8004a1c:	d5fb      	bpl.n	8004a16 <_printf_i+0x1c2>
 8004a1e:	8019      	strh	r1, [r3, #0]
 8004a20:	2300      	movs	r3, #0
 8004a22:	4615      	mov	r5, r2
 8004a24:	6123      	str	r3, [r4, #16]
 8004a26:	e7bc      	b.n	80049a2 <_printf_i+0x14e>
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	1d1a      	adds	r2, r3, #4
 8004a2e:	602a      	str	r2, [r5, #0]
 8004a30:	681d      	ldr	r5, [r3, #0]
 8004a32:	6862      	ldr	r2, [r4, #4]
 8004a34:	4628      	mov	r0, r5
 8004a36:	f000 f9b3 	bl	8004da0 <memchr>
 8004a3a:	b108      	cbz	r0, 8004a40 <_printf_i+0x1ec>
 8004a3c:	1b40      	subs	r0, r0, r5
 8004a3e:	6060      	str	r0, [r4, #4]
 8004a40:	6863      	ldr	r3, [r4, #4]
 8004a42:	6123      	str	r3, [r4, #16]
 8004a44:	2300      	movs	r3, #0
 8004a46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a4a:	e7aa      	b.n	80049a2 <_printf_i+0x14e>
 8004a4c:	462a      	mov	r2, r5
 8004a4e:	4649      	mov	r1, r9
 8004a50:	4640      	mov	r0, r8
 8004a52:	6923      	ldr	r3, [r4, #16]
 8004a54:	47d0      	blx	sl
 8004a56:	3001      	adds	r0, #1
 8004a58:	d0ad      	beq.n	80049b6 <_printf_i+0x162>
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	079b      	lsls	r3, r3, #30
 8004a5e:	d413      	bmi.n	8004a88 <_printf_i+0x234>
 8004a60:	68e0      	ldr	r0, [r4, #12]
 8004a62:	9b03      	ldr	r3, [sp, #12]
 8004a64:	4298      	cmp	r0, r3
 8004a66:	bfb8      	it	lt
 8004a68:	4618      	movlt	r0, r3
 8004a6a:	e7a6      	b.n	80049ba <_printf_i+0x166>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	4632      	mov	r2, r6
 8004a70:	4649      	mov	r1, r9
 8004a72:	4640      	mov	r0, r8
 8004a74:	47d0      	blx	sl
 8004a76:	3001      	adds	r0, #1
 8004a78:	d09d      	beq.n	80049b6 <_printf_i+0x162>
 8004a7a:	3501      	adds	r5, #1
 8004a7c:	68e3      	ldr	r3, [r4, #12]
 8004a7e:	9903      	ldr	r1, [sp, #12]
 8004a80:	1a5b      	subs	r3, r3, r1
 8004a82:	42ab      	cmp	r3, r5
 8004a84:	dcf2      	bgt.n	8004a6c <_printf_i+0x218>
 8004a86:	e7eb      	b.n	8004a60 <_printf_i+0x20c>
 8004a88:	2500      	movs	r5, #0
 8004a8a:	f104 0619 	add.w	r6, r4, #25
 8004a8e:	e7f5      	b.n	8004a7c <_printf_i+0x228>
 8004a90:	08006bf8 	.word	0x08006bf8
 8004a94:	08006c09 	.word	0x08006c09

08004a98 <std>:
 8004a98:	2300      	movs	r3, #0
 8004a9a:	b510      	push	{r4, lr}
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8004aa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aa6:	6083      	str	r3, [r0, #8]
 8004aa8:	8181      	strh	r1, [r0, #12]
 8004aaa:	6643      	str	r3, [r0, #100]	; 0x64
 8004aac:	81c2      	strh	r2, [r0, #14]
 8004aae:	6183      	str	r3, [r0, #24]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	2208      	movs	r2, #8
 8004ab4:	305c      	adds	r0, #92	; 0x5c
 8004ab6:	f000 f8f4 	bl	8004ca2 <memset>
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <std+0x38>)
 8004abc:	6224      	str	r4, [r4, #32]
 8004abe:	6263      	str	r3, [r4, #36]	; 0x24
 8004ac0:	4b04      	ldr	r3, [pc, #16]	; (8004ad4 <std+0x3c>)
 8004ac2:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ac4:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <std+0x40>)
 8004ac6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ac8:	4b04      	ldr	r3, [pc, #16]	; (8004adc <std+0x44>)
 8004aca:	6323      	str	r3, [r4, #48]	; 0x30
 8004acc:	bd10      	pop	{r4, pc}
 8004ace:	bf00      	nop
 8004ad0:	08004c1d 	.word	0x08004c1d
 8004ad4:	08004c3f 	.word	0x08004c3f
 8004ad8:	08004c77 	.word	0x08004c77
 8004adc:	08004c9b 	.word	0x08004c9b

08004ae0 <stdio_exit_handler>:
 8004ae0:	4a02      	ldr	r2, [pc, #8]	; (8004aec <stdio_exit_handler+0xc>)
 8004ae2:	4903      	ldr	r1, [pc, #12]	; (8004af0 <stdio_exit_handler+0x10>)
 8004ae4:	4803      	ldr	r0, [pc, #12]	; (8004af4 <stdio_exit_handler+0x14>)
 8004ae6:	f000 b869 	b.w	8004bbc <_fwalk_sglue>
 8004aea:	bf00      	nop
 8004aec:	2000000c 	.word	0x2000000c
 8004af0:	08006709 	.word	0x08006709
 8004af4:	20000018 	.word	0x20000018

08004af8 <cleanup_stdio>:
 8004af8:	6841      	ldr	r1, [r0, #4]
 8004afa:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <cleanup_stdio+0x34>)
 8004afc:	b510      	push	{r4, lr}
 8004afe:	4299      	cmp	r1, r3
 8004b00:	4604      	mov	r4, r0
 8004b02:	d001      	beq.n	8004b08 <cleanup_stdio+0x10>
 8004b04:	f001 fe00 	bl	8006708 <_fflush_r>
 8004b08:	68a1      	ldr	r1, [r4, #8]
 8004b0a:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <cleanup_stdio+0x38>)
 8004b0c:	4299      	cmp	r1, r3
 8004b0e:	d002      	beq.n	8004b16 <cleanup_stdio+0x1e>
 8004b10:	4620      	mov	r0, r4
 8004b12:	f001 fdf9 	bl	8006708 <_fflush_r>
 8004b16:	68e1      	ldr	r1, [r4, #12]
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <cleanup_stdio+0x3c>)
 8004b1a:	4299      	cmp	r1, r3
 8004b1c:	d004      	beq.n	8004b28 <cleanup_stdio+0x30>
 8004b1e:	4620      	mov	r0, r4
 8004b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b24:	f001 bdf0 	b.w	8006708 <_fflush_r>
 8004b28:	bd10      	pop	{r4, pc}
 8004b2a:	bf00      	nop
 8004b2c:	200003ec 	.word	0x200003ec
 8004b30:	20000454 	.word	0x20000454
 8004b34:	200004bc 	.word	0x200004bc

08004b38 <global_stdio_init.part.0>:
 8004b38:	b510      	push	{r4, lr}
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <global_stdio_init.part.0+0x30>)
 8004b3c:	4c0b      	ldr	r4, [pc, #44]	; (8004b6c <global_stdio_init.part.0+0x34>)
 8004b3e:	4a0c      	ldr	r2, [pc, #48]	; (8004b70 <global_stdio_init.part.0+0x38>)
 8004b40:	4620      	mov	r0, r4
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	2104      	movs	r1, #4
 8004b46:	2200      	movs	r2, #0
 8004b48:	f7ff ffa6 	bl	8004a98 <std>
 8004b4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004b50:	2201      	movs	r2, #1
 8004b52:	2109      	movs	r1, #9
 8004b54:	f7ff ffa0 	bl	8004a98 <std>
 8004b58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b62:	2112      	movs	r1, #18
 8004b64:	f7ff bf98 	b.w	8004a98 <std>
 8004b68:	20000524 	.word	0x20000524
 8004b6c:	200003ec 	.word	0x200003ec
 8004b70:	08004ae1 	.word	0x08004ae1

08004b74 <__sfp_lock_acquire>:
 8004b74:	4801      	ldr	r0, [pc, #4]	; (8004b7c <__sfp_lock_acquire+0x8>)
 8004b76:	f000 b911 	b.w	8004d9c <__retarget_lock_acquire_recursive>
 8004b7a:	bf00      	nop
 8004b7c:	2000052d 	.word	0x2000052d

08004b80 <__sfp_lock_release>:
 8004b80:	4801      	ldr	r0, [pc, #4]	; (8004b88 <__sfp_lock_release+0x8>)
 8004b82:	f000 b90c 	b.w	8004d9e <__retarget_lock_release_recursive>
 8004b86:	bf00      	nop
 8004b88:	2000052d 	.word	0x2000052d

08004b8c <__sinit>:
 8004b8c:	b510      	push	{r4, lr}
 8004b8e:	4604      	mov	r4, r0
 8004b90:	f7ff fff0 	bl	8004b74 <__sfp_lock_acquire>
 8004b94:	6a23      	ldr	r3, [r4, #32]
 8004b96:	b11b      	cbz	r3, 8004ba0 <__sinit+0x14>
 8004b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b9c:	f7ff bff0 	b.w	8004b80 <__sfp_lock_release>
 8004ba0:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <__sinit+0x28>)
 8004ba2:	6223      	str	r3, [r4, #32]
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <__sinit+0x2c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1f5      	bne.n	8004b98 <__sinit+0xc>
 8004bac:	f7ff ffc4 	bl	8004b38 <global_stdio_init.part.0>
 8004bb0:	e7f2      	b.n	8004b98 <__sinit+0xc>
 8004bb2:	bf00      	nop
 8004bb4:	08004af9 	.word	0x08004af9
 8004bb8:	20000524 	.word	0x20000524

08004bbc <_fwalk_sglue>:
 8004bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bc0:	4607      	mov	r7, r0
 8004bc2:	4688      	mov	r8, r1
 8004bc4:	4614      	mov	r4, r2
 8004bc6:	2600      	movs	r6, #0
 8004bc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bcc:	f1b9 0901 	subs.w	r9, r9, #1
 8004bd0:	d505      	bpl.n	8004bde <_fwalk_sglue+0x22>
 8004bd2:	6824      	ldr	r4, [r4, #0]
 8004bd4:	2c00      	cmp	r4, #0
 8004bd6:	d1f7      	bne.n	8004bc8 <_fwalk_sglue+0xc>
 8004bd8:	4630      	mov	r0, r6
 8004bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bde:	89ab      	ldrh	r3, [r5, #12]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d907      	bls.n	8004bf4 <_fwalk_sglue+0x38>
 8004be4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004be8:	3301      	adds	r3, #1
 8004bea:	d003      	beq.n	8004bf4 <_fwalk_sglue+0x38>
 8004bec:	4629      	mov	r1, r5
 8004bee:	4638      	mov	r0, r7
 8004bf0:	47c0      	blx	r8
 8004bf2:	4306      	orrs	r6, r0
 8004bf4:	3568      	adds	r5, #104	; 0x68
 8004bf6:	e7e9      	b.n	8004bcc <_fwalk_sglue+0x10>

08004bf8 <iprintf>:
 8004bf8:	b40f      	push	{r0, r1, r2, r3}
 8004bfa:	b507      	push	{r0, r1, r2, lr}
 8004bfc:	4906      	ldr	r1, [pc, #24]	; (8004c18 <iprintf+0x20>)
 8004bfe:	ab04      	add	r3, sp, #16
 8004c00:	6808      	ldr	r0, [r1, #0]
 8004c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c06:	6881      	ldr	r1, [r0, #8]
 8004c08:	9301      	str	r3, [sp, #4]
 8004c0a:	f001 fbe1 	bl	80063d0 <_vfiprintf_r>
 8004c0e:	b003      	add	sp, #12
 8004c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c14:	b004      	add	sp, #16
 8004c16:	4770      	bx	lr
 8004c18:	20000064 	.word	0x20000064

08004c1c <__sread>:
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	460c      	mov	r4, r1
 8004c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c24:	f000 f86c 	bl	8004d00 <_read_r>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	bfab      	itete	ge
 8004c2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8004c30:	181b      	addge	r3, r3, r0
 8004c32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c36:	bfac      	ite	ge
 8004c38:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c3a:	81a3      	strhlt	r3, [r4, #12]
 8004c3c:	bd10      	pop	{r4, pc}

08004c3e <__swrite>:
 8004c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c42:	461f      	mov	r7, r3
 8004c44:	898b      	ldrh	r3, [r1, #12]
 8004c46:	4605      	mov	r5, r0
 8004c48:	05db      	lsls	r3, r3, #23
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	4616      	mov	r6, r2
 8004c4e:	d505      	bpl.n	8004c5c <__swrite+0x1e>
 8004c50:	2302      	movs	r3, #2
 8004c52:	2200      	movs	r2, #0
 8004c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c58:	f000 f840 	bl	8004cdc <_lseek_r>
 8004c5c:	89a3      	ldrh	r3, [r4, #12]
 8004c5e:	4632      	mov	r2, r6
 8004c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c64:	81a3      	strh	r3, [r4, #12]
 8004c66:	4628      	mov	r0, r5
 8004c68:	463b      	mov	r3, r7
 8004c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c72:	f000 b857 	b.w	8004d24 <_write_r>

08004c76 <__sseek>:
 8004c76:	b510      	push	{r4, lr}
 8004c78:	460c      	mov	r4, r1
 8004c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c7e:	f000 f82d 	bl	8004cdc <_lseek_r>
 8004c82:	1c43      	adds	r3, r0, #1
 8004c84:	89a3      	ldrh	r3, [r4, #12]
 8004c86:	bf15      	itete	ne
 8004c88:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c92:	81a3      	strheq	r3, [r4, #12]
 8004c94:	bf18      	it	ne
 8004c96:	81a3      	strhne	r3, [r4, #12]
 8004c98:	bd10      	pop	{r4, pc}

08004c9a <__sclose>:
 8004c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c9e:	f000 b80d 	b.w	8004cbc <_close_r>

08004ca2 <memset>:
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4402      	add	r2, r0
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d100      	bne.n	8004cac <memset+0xa>
 8004caa:	4770      	bx	lr
 8004cac:	f803 1b01 	strb.w	r1, [r3], #1
 8004cb0:	e7f9      	b.n	8004ca6 <memset+0x4>
	...

08004cb4 <_localeconv_r>:
 8004cb4:	4800      	ldr	r0, [pc, #0]	; (8004cb8 <_localeconv_r+0x4>)
 8004cb6:	4770      	bx	lr
 8004cb8:	20000158 	.word	0x20000158

08004cbc <_close_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	4d05      	ldr	r5, [pc, #20]	; (8004cd8 <_close_r+0x1c>)
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	4608      	mov	r0, r1
 8004cc6:	602b      	str	r3, [r5, #0]
 8004cc8:	f7fc fd74 	bl	80017b4 <_close>
 8004ccc:	1c43      	adds	r3, r0, #1
 8004cce:	d102      	bne.n	8004cd6 <_close_r+0x1a>
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	b103      	cbz	r3, 8004cd6 <_close_r+0x1a>
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	bd38      	pop	{r3, r4, r5, pc}
 8004cd8:	20000528 	.word	0x20000528

08004cdc <_lseek_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	4604      	mov	r4, r0
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	4d05      	ldr	r5, [pc, #20]	; (8004cfc <_lseek_r+0x20>)
 8004ce8:	602a      	str	r2, [r5, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	f7fc fd86 	bl	80017fc <_lseek>
 8004cf0:	1c43      	adds	r3, r0, #1
 8004cf2:	d102      	bne.n	8004cfa <_lseek_r+0x1e>
 8004cf4:	682b      	ldr	r3, [r5, #0]
 8004cf6:	b103      	cbz	r3, 8004cfa <_lseek_r+0x1e>
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	bd38      	pop	{r3, r4, r5, pc}
 8004cfc:	20000528 	.word	0x20000528

08004d00 <_read_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4604      	mov	r4, r0
 8004d04:	4608      	mov	r0, r1
 8004d06:	4611      	mov	r1, r2
 8004d08:	2200      	movs	r2, #0
 8004d0a:	4d05      	ldr	r5, [pc, #20]	; (8004d20 <_read_r+0x20>)
 8004d0c:	602a      	str	r2, [r5, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f7fc fd17 	bl	8001742 <_read>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d102      	bne.n	8004d1e <_read_r+0x1e>
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	b103      	cbz	r3, 8004d1e <_read_r+0x1e>
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	20000528 	.word	0x20000528

08004d24 <_write_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4604      	mov	r4, r0
 8004d28:	4608      	mov	r0, r1
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	4d05      	ldr	r5, [pc, #20]	; (8004d44 <_write_r+0x20>)
 8004d30:	602a      	str	r2, [r5, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	f7fc fd22 	bl	800177c <_write>
 8004d38:	1c43      	adds	r3, r0, #1
 8004d3a:	d102      	bne.n	8004d42 <_write_r+0x1e>
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	b103      	cbz	r3, 8004d42 <_write_r+0x1e>
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	bd38      	pop	{r3, r4, r5, pc}
 8004d44:	20000528 	.word	0x20000528

08004d48 <__errno>:
 8004d48:	4b01      	ldr	r3, [pc, #4]	; (8004d50 <__errno+0x8>)
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	20000064 	.word	0x20000064

08004d54 <__libc_init_array>:
 8004d54:	b570      	push	{r4, r5, r6, lr}
 8004d56:	2600      	movs	r6, #0
 8004d58:	4d0c      	ldr	r5, [pc, #48]	; (8004d8c <__libc_init_array+0x38>)
 8004d5a:	4c0d      	ldr	r4, [pc, #52]	; (8004d90 <__libc_init_array+0x3c>)
 8004d5c:	1b64      	subs	r4, r4, r5
 8004d5e:	10a4      	asrs	r4, r4, #2
 8004d60:	42a6      	cmp	r6, r4
 8004d62:	d109      	bne.n	8004d78 <__libc_init_array+0x24>
 8004d64:	f001 fee0 	bl	8006b28 <_init>
 8004d68:	2600      	movs	r6, #0
 8004d6a:	4d0a      	ldr	r5, [pc, #40]	; (8004d94 <__libc_init_array+0x40>)
 8004d6c:	4c0a      	ldr	r4, [pc, #40]	; (8004d98 <__libc_init_array+0x44>)
 8004d6e:	1b64      	subs	r4, r4, r5
 8004d70:	10a4      	asrs	r4, r4, #2
 8004d72:	42a6      	cmp	r6, r4
 8004d74:	d105      	bne.n	8004d82 <__libc_init_array+0x2e>
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
 8004d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d7c:	4798      	blx	r3
 8004d7e:	3601      	adds	r6, #1
 8004d80:	e7ee      	b.n	8004d60 <__libc_init_array+0xc>
 8004d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d86:	4798      	blx	r3
 8004d88:	3601      	adds	r6, #1
 8004d8a:	e7f2      	b.n	8004d72 <__libc_init_array+0x1e>
 8004d8c:	08006f54 	.word	0x08006f54
 8004d90:	08006f54 	.word	0x08006f54
 8004d94:	08006f54 	.word	0x08006f54
 8004d98:	08006f58 	.word	0x08006f58

08004d9c <__retarget_lock_acquire_recursive>:
 8004d9c:	4770      	bx	lr

08004d9e <__retarget_lock_release_recursive>:
 8004d9e:	4770      	bx	lr

08004da0 <memchr>:
 8004da0:	4603      	mov	r3, r0
 8004da2:	b510      	push	{r4, lr}
 8004da4:	b2c9      	uxtb	r1, r1
 8004da6:	4402      	add	r2, r0
 8004da8:	4293      	cmp	r3, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	d101      	bne.n	8004db2 <memchr+0x12>
 8004dae:	2000      	movs	r0, #0
 8004db0:	e003      	b.n	8004dba <memchr+0x1a>
 8004db2:	7804      	ldrb	r4, [r0, #0]
 8004db4:	3301      	adds	r3, #1
 8004db6:	428c      	cmp	r4, r1
 8004db8:	d1f6      	bne.n	8004da8 <memchr+0x8>
 8004dba:	bd10      	pop	{r4, pc}

08004dbc <quorem>:
 8004dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc0:	6903      	ldr	r3, [r0, #16]
 8004dc2:	690c      	ldr	r4, [r1, #16]
 8004dc4:	4607      	mov	r7, r0
 8004dc6:	42a3      	cmp	r3, r4
 8004dc8:	db7f      	blt.n	8004eca <quorem+0x10e>
 8004dca:	3c01      	subs	r4, #1
 8004dcc:	f100 0514 	add.w	r5, r0, #20
 8004dd0:	f101 0814 	add.w	r8, r1, #20
 8004dd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004dde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004de2:	3301      	adds	r3, #1
 8004de4:	429a      	cmp	r2, r3
 8004de6:	fbb2 f6f3 	udiv	r6, r2, r3
 8004dea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004dee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004df2:	d331      	bcc.n	8004e58 <quorem+0x9c>
 8004df4:	f04f 0e00 	mov.w	lr, #0
 8004df8:	4640      	mov	r0, r8
 8004dfa:	46ac      	mov	ip, r5
 8004dfc:	46f2      	mov	sl, lr
 8004dfe:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e02:	b293      	uxth	r3, r2
 8004e04:	fb06 e303 	mla	r3, r6, r3, lr
 8004e08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e0c:	0c1a      	lsrs	r2, r3, #16
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	fb06 220e 	mla	r2, r6, lr, r2
 8004e14:	ebaa 0303 	sub.w	r3, sl, r3
 8004e18:	f8dc a000 	ldr.w	sl, [ip]
 8004e1c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e20:	fa1f fa8a 	uxth.w	sl, sl
 8004e24:	4453      	add	r3, sl
 8004e26:	f8dc a000 	ldr.w	sl, [ip]
 8004e2a:	b292      	uxth	r2, r2
 8004e2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004e30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e3a:	4581      	cmp	r9, r0
 8004e3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e40:	f84c 3b04 	str.w	r3, [ip], #4
 8004e44:	d2db      	bcs.n	8004dfe <quorem+0x42>
 8004e46:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e4a:	b92b      	cbnz	r3, 8004e58 <quorem+0x9c>
 8004e4c:	9b01      	ldr	r3, [sp, #4]
 8004e4e:	3b04      	subs	r3, #4
 8004e50:	429d      	cmp	r5, r3
 8004e52:	461a      	mov	r2, r3
 8004e54:	d32d      	bcc.n	8004eb2 <quorem+0xf6>
 8004e56:	613c      	str	r4, [r7, #16]
 8004e58:	4638      	mov	r0, r7
 8004e5a:	f001 f993 	bl	8006184 <__mcmp>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	db23      	blt.n	8004eaa <quorem+0xee>
 8004e62:	4629      	mov	r1, r5
 8004e64:	2000      	movs	r0, #0
 8004e66:	3601      	adds	r6, #1
 8004e68:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e6c:	f8d1 c000 	ldr.w	ip, [r1]
 8004e70:	b293      	uxth	r3, r2
 8004e72:	1ac3      	subs	r3, r0, r3
 8004e74:	0c12      	lsrs	r2, r2, #16
 8004e76:	fa1f f08c 	uxth.w	r0, ip
 8004e7a:	4403      	add	r3, r0
 8004e7c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004e80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e8a:	45c1      	cmp	r9, r8
 8004e8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004e90:	f841 3b04 	str.w	r3, [r1], #4
 8004e94:	d2e8      	bcs.n	8004e68 <quorem+0xac>
 8004e96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e9e:	b922      	cbnz	r2, 8004eaa <quorem+0xee>
 8004ea0:	3b04      	subs	r3, #4
 8004ea2:	429d      	cmp	r5, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	d30a      	bcc.n	8004ebe <quorem+0x102>
 8004ea8:	613c      	str	r4, [r7, #16]
 8004eaa:	4630      	mov	r0, r6
 8004eac:	b003      	add	sp, #12
 8004eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	3b04      	subs	r3, #4
 8004eb6:	2a00      	cmp	r2, #0
 8004eb8:	d1cd      	bne.n	8004e56 <quorem+0x9a>
 8004eba:	3c01      	subs	r4, #1
 8004ebc:	e7c8      	b.n	8004e50 <quorem+0x94>
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	3b04      	subs	r3, #4
 8004ec2:	2a00      	cmp	r2, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <quorem+0xec>
 8004ec6:	3c01      	subs	r4, #1
 8004ec8:	e7eb      	b.n	8004ea2 <quorem+0xe6>
 8004eca:	2000      	movs	r0, #0
 8004ecc:	e7ee      	b.n	8004eac <quorem+0xf0>
	...

08004ed0 <_dtoa_r>:
 8004ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed4:	4616      	mov	r6, r2
 8004ed6:	461f      	mov	r7, r3
 8004ed8:	69c4      	ldr	r4, [r0, #28]
 8004eda:	b099      	sub	sp, #100	; 0x64
 8004edc:	4605      	mov	r5, r0
 8004ede:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ee2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004ee6:	b974      	cbnz	r4, 8004f06 <_dtoa_r+0x36>
 8004ee8:	2010      	movs	r0, #16
 8004eea:	f000 fe1d 	bl	8005b28 <malloc>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	61e8      	str	r0, [r5, #28]
 8004ef2:	b920      	cbnz	r0, 8004efe <_dtoa_r+0x2e>
 8004ef4:	21ef      	movs	r1, #239	; 0xef
 8004ef6:	4bac      	ldr	r3, [pc, #688]	; (80051a8 <_dtoa_r+0x2d8>)
 8004ef8:	48ac      	ldr	r0, [pc, #688]	; (80051ac <_dtoa_r+0x2dc>)
 8004efa:	f001 fce1 	bl	80068c0 <__assert_func>
 8004efe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f02:	6004      	str	r4, [r0, #0]
 8004f04:	60c4      	str	r4, [r0, #12]
 8004f06:	69eb      	ldr	r3, [r5, #28]
 8004f08:	6819      	ldr	r1, [r3, #0]
 8004f0a:	b151      	cbz	r1, 8004f22 <_dtoa_r+0x52>
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	2301      	movs	r3, #1
 8004f10:	4093      	lsls	r3, r2
 8004f12:	604a      	str	r2, [r1, #4]
 8004f14:	608b      	str	r3, [r1, #8]
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 fefa 	bl	8005d10 <_Bfree>
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	69eb      	ldr	r3, [r5, #28]
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	1e3b      	subs	r3, r7, #0
 8004f24:	bfaf      	iteee	ge
 8004f26:	2300      	movge	r3, #0
 8004f28:	2201      	movlt	r2, #1
 8004f2a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f2e:	9305      	strlt	r3, [sp, #20]
 8004f30:	bfa8      	it	ge
 8004f32:	f8c8 3000 	strge.w	r3, [r8]
 8004f36:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004f3a:	4b9d      	ldr	r3, [pc, #628]	; (80051b0 <_dtoa_r+0x2e0>)
 8004f3c:	bfb8      	it	lt
 8004f3e:	f8c8 2000 	strlt.w	r2, [r8]
 8004f42:	ea33 0309 	bics.w	r3, r3, r9
 8004f46:	d119      	bne.n	8004f7c <_dtoa_r+0xac>
 8004f48:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f54:	4333      	orrs	r3, r6
 8004f56:	f000 8589 	beq.w	8005a6c <_dtoa_r+0xb9c>
 8004f5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f5c:	b953      	cbnz	r3, 8004f74 <_dtoa_r+0xa4>
 8004f5e:	4b95      	ldr	r3, [pc, #596]	; (80051b4 <_dtoa_r+0x2e4>)
 8004f60:	e023      	b.n	8004faa <_dtoa_r+0xda>
 8004f62:	4b95      	ldr	r3, [pc, #596]	; (80051b8 <_dtoa_r+0x2e8>)
 8004f64:	9303      	str	r3, [sp, #12]
 8004f66:	3308      	adds	r3, #8
 8004f68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	9803      	ldr	r0, [sp, #12]
 8004f6e:	b019      	add	sp, #100	; 0x64
 8004f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f74:	4b8f      	ldr	r3, [pc, #572]	; (80051b4 <_dtoa_r+0x2e4>)
 8004f76:	9303      	str	r3, [sp, #12]
 8004f78:	3303      	adds	r3, #3
 8004f7a:	e7f5      	b.n	8004f68 <_dtoa_r+0x98>
 8004f7c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f80:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004f84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f7fb fe2c 	bl	8000be8 <__aeabi_dcmpeq>
 8004f90:	4680      	mov	r8, r0
 8004f92:	b160      	cbz	r0, 8004fae <_dtoa_r+0xde>
 8004f94:	2301      	movs	r3, #1
 8004f96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 8562 	beq.w	8005a66 <_dtoa_r+0xb96>
 8004fa2:	4b86      	ldr	r3, [pc, #536]	; (80051bc <_dtoa_r+0x2ec>)
 8004fa4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	9303      	str	r3, [sp, #12]
 8004fac:	e7de      	b.n	8004f6c <_dtoa_r+0x9c>
 8004fae:	ab16      	add	r3, sp, #88	; 0x58
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	ab17      	add	r3, sp, #92	; 0x5c
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004fbc:	f001 f98a 	bl	80062d4 <__d2b>
 8004fc0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004fc4:	4682      	mov	sl, r0
 8004fc6:	2c00      	cmp	r4, #0
 8004fc8:	d07e      	beq.n	80050c8 <_dtoa_r+0x1f8>
 8004fca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fd0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fd8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004fdc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004fe0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	4b75      	ldr	r3, [pc, #468]	; (80051c0 <_dtoa_r+0x2f0>)
 8004fea:	f7fb f9dd 	bl	80003a8 <__aeabi_dsub>
 8004fee:	a368      	add	r3, pc, #416	; (adr r3, 8005190 <_dtoa_r+0x2c0>)
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	f7fb fb90 	bl	8000718 <__aeabi_dmul>
 8004ff8:	a367      	add	r3, pc, #412	; (adr r3, 8005198 <_dtoa_r+0x2c8>)
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	f7fb f9d5 	bl	80003ac <__adddf3>
 8005002:	4606      	mov	r6, r0
 8005004:	4620      	mov	r0, r4
 8005006:	460f      	mov	r7, r1
 8005008:	f7fb fb1c 	bl	8000644 <__aeabi_i2d>
 800500c:	a364      	add	r3, pc, #400	; (adr r3, 80051a0 <_dtoa_r+0x2d0>)
 800500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005012:	f7fb fb81 	bl	8000718 <__aeabi_dmul>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4630      	mov	r0, r6
 800501c:	4639      	mov	r1, r7
 800501e:	f7fb f9c5 	bl	80003ac <__adddf3>
 8005022:	4606      	mov	r6, r0
 8005024:	460f      	mov	r7, r1
 8005026:	f7fb fe27 	bl	8000c78 <__aeabi_d2iz>
 800502a:	2200      	movs	r2, #0
 800502c:	4683      	mov	fp, r0
 800502e:	2300      	movs	r3, #0
 8005030:	4630      	mov	r0, r6
 8005032:	4639      	mov	r1, r7
 8005034:	f7fb fde2 	bl	8000bfc <__aeabi_dcmplt>
 8005038:	b148      	cbz	r0, 800504e <_dtoa_r+0x17e>
 800503a:	4658      	mov	r0, fp
 800503c:	f7fb fb02 	bl	8000644 <__aeabi_i2d>
 8005040:	4632      	mov	r2, r6
 8005042:	463b      	mov	r3, r7
 8005044:	f7fb fdd0 	bl	8000be8 <__aeabi_dcmpeq>
 8005048:	b908      	cbnz	r0, 800504e <_dtoa_r+0x17e>
 800504a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800504e:	f1bb 0f16 	cmp.w	fp, #22
 8005052:	d857      	bhi.n	8005104 <_dtoa_r+0x234>
 8005054:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005058:	4b5a      	ldr	r3, [pc, #360]	; (80051c4 <_dtoa_r+0x2f4>)
 800505a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005062:	f7fb fdcb 	bl	8000bfc <__aeabi_dcmplt>
 8005066:	2800      	cmp	r0, #0
 8005068:	d04e      	beq.n	8005108 <_dtoa_r+0x238>
 800506a:	2300      	movs	r3, #0
 800506c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005070:	930f      	str	r3, [sp, #60]	; 0x3c
 8005072:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005074:	1b1b      	subs	r3, r3, r4
 8005076:	1e5a      	subs	r2, r3, #1
 8005078:	bf46      	itte	mi
 800507a:	f1c3 0901 	rsbmi	r9, r3, #1
 800507e:	2300      	movmi	r3, #0
 8005080:	f04f 0900 	movpl.w	r9, #0
 8005084:	9209      	str	r2, [sp, #36]	; 0x24
 8005086:	bf48      	it	mi
 8005088:	9309      	strmi	r3, [sp, #36]	; 0x24
 800508a:	f1bb 0f00 	cmp.w	fp, #0
 800508e:	db3d      	blt.n	800510c <_dtoa_r+0x23c>
 8005090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005092:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005096:	445b      	add	r3, fp
 8005098:	9309      	str	r3, [sp, #36]	; 0x24
 800509a:	2300      	movs	r3, #0
 800509c:	930a      	str	r3, [sp, #40]	; 0x28
 800509e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050a0:	2b09      	cmp	r3, #9
 80050a2:	d867      	bhi.n	8005174 <_dtoa_r+0x2a4>
 80050a4:	2b05      	cmp	r3, #5
 80050a6:	bfc4      	itt	gt
 80050a8:	3b04      	subgt	r3, #4
 80050aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80050ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050ae:	bfc8      	it	gt
 80050b0:	2400      	movgt	r4, #0
 80050b2:	f1a3 0302 	sub.w	r3, r3, #2
 80050b6:	bfd8      	it	le
 80050b8:	2401      	movle	r4, #1
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	f200 8086 	bhi.w	80051cc <_dtoa_r+0x2fc>
 80050c0:	e8df f003 	tbb	[pc, r3]
 80050c4:	5637392c 	.word	0x5637392c
 80050c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80050cc:	441c      	add	r4, r3
 80050ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	bfc1      	itttt	gt
 80050d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80050da:	fa09 f903 	lslgt.w	r9, r9, r3
 80050de:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80050e2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80050e6:	bfd6      	itet	le
 80050e8:	f1c3 0320 	rsble	r3, r3, #32
 80050ec:	ea49 0003 	orrgt.w	r0, r9, r3
 80050f0:	fa06 f003 	lslle.w	r0, r6, r3
 80050f4:	f7fb fa96 	bl	8000624 <__aeabi_ui2d>
 80050f8:	2201      	movs	r2, #1
 80050fa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80050fe:	3c01      	subs	r4, #1
 8005100:	9213      	str	r2, [sp, #76]	; 0x4c
 8005102:	e76f      	b.n	8004fe4 <_dtoa_r+0x114>
 8005104:	2301      	movs	r3, #1
 8005106:	e7b3      	b.n	8005070 <_dtoa_r+0x1a0>
 8005108:	900f      	str	r0, [sp, #60]	; 0x3c
 800510a:	e7b2      	b.n	8005072 <_dtoa_r+0x1a2>
 800510c:	f1cb 0300 	rsb	r3, fp, #0
 8005110:	930a      	str	r3, [sp, #40]	; 0x28
 8005112:	2300      	movs	r3, #0
 8005114:	eba9 090b 	sub.w	r9, r9, fp
 8005118:	930e      	str	r3, [sp, #56]	; 0x38
 800511a:	e7c0      	b.n	800509e <_dtoa_r+0x1ce>
 800511c:	2300      	movs	r3, #0
 800511e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005120:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005122:	2b00      	cmp	r3, #0
 8005124:	dc55      	bgt.n	80051d2 <_dtoa_r+0x302>
 8005126:	2301      	movs	r3, #1
 8005128:	461a      	mov	r2, r3
 800512a:	9306      	str	r3, [sp, #24]
 800512c:	9308      	str	r3, [sp, #32]
 800512e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005130:	e00b      	b.n	800514a <_dtoa_r+0x27a>
 8005132:	2301      	movs	r3, #1
 8005134:	e7f3      	b.n	800511e <_dtoa_r+0x24e>
 8005136:	2300      	movs	r3, #0
 8005138:	930b      	str	r3, [sp, #44]	; 0x2c
 800513a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800513c:	445b      	add	r3, fp
 800513e:	9306      	str	r3, [sp, #24]
 8005140:	3301      	adds	r3, #1
 8005142:	2b01      	cmp	r3, #1
 8005144:	9308      	str	r3, [sp, #32]
 8005146:	bfb8      	it	lt
 8005148:	2301      	movlt	r3, #1
 800514a:	2100      	movs	r1, #0
 800514c:	2204      	movs	r2, #4
 800514e:	69e8      	ldr	r0, [r5, #28]
 8005150:	f102 0614 	add.w	r6, r2, #20
 8005154:	429e      	cmp	r6, r3
 8005156:	d940      	bls.n	80051da <_dtoa_r+0x30a>
 8005158:	6041      	str	r1, [r0, #4]
 800515a:	4628      	mov	r0, r5
 800515c:	f000 fd98 	bl	8005c90 <_Balloc>
 8005160:	9003      	str	r0, [sp, #12]
 8005162:	2800      	cmp	r0, #0
 8005164:	d13c      	bne.n	80051e0 <_dtoa_r+0x310>
 8005166:	4602      	mov	r2, r0
 8005168:	f240 11af 	movw	r1, #431	; 0x1af
 800516c:	4b16      	ldr	r3, [pc, #88]	; (80051c8 <_dtoa_r+0x2f8>)
 800516e:	e6c3      	b.n	8004ef8 <_dtoa_r+0x28>
 8005170:	2301      	movs	r3, #1
 8005172:	e7e1      	b.n	8005138 <_dtoa_r+0x268>
 8005174:	2401      	movs	r4, #1
 8005176:	2300      	movs	r3, #0
 8005178:	940b      	str	r4, [sp, #44]	; 0x2c
 800517a:	9322      	str	r3, [sp, #136]	; 0x88
 800517c:	f04f 33ff 	mov.w	r3, #4294967295
 8005180:	2200      	movs	r2, #0
 8005182:	9306      	str	r3, [sp, #24]
 8005184:	9308      	str	r3, [sp, #32]
 8005186:	2312      	movs	r3, #18
 8005188:	e7d1      	b.n	800512e <_dtoa_r+0x25e>
 800518a:	bf00      	nop
 800518c:	f3af 8000 	nop.w
 8005190:	636f4361 	.word	0x636f4361
 8005194:	3fd287a7 	.word	0x3fd287a7
 8005198:	8b60c8b3 	.word	0x8b60c8b3
 800519c:	3fc68a28 	.word	0x3fc68a28
 80051a0:	509f79fb 	.word	0x509f79fb
 80051a4:	3fd34413 	.word	0x3fd34413
 80051a8:	08006c27 	.word	0x08006c27
 80051ac:	08006c3e 	.word	0x08006c3e
 80051b0:	7ff00000 	.word	0x7ff00000
 80051b4:	08006c23 	.word	0x08006c23
 80051b8:	08006c1a 	.word	0x08006c1a
 80051bc:	08006bf7 	.word	0x08006bf7
 80051c0:	3ff80000 	.word	0x3ff80000
 80051c4:	08006d28 	.word	0x08006d28
 80051c8:	08006c96 	.word	0x08006c96
 80051cc:	2301      	movs	r3, #1
 80051ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80051d0:	e7d4      	b.n	800517c <_dtoa_r+0x2ac>
 80051d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051d4:	9306      	str	r3, [sp, #24]
 80051d6:	9308      	str	r3, [sp, #32]
 80051d8:	e7b7      	b.n	800514a <_dtoa_r+0x27a>
 80051da:	3101      	adds	r1, #1
 80051dc:	0052      	lsls	r2, r2, #1
 80051de:	e7b7      	b.n	8005150 <_dtoa_r+0x280>
 80051e0:	69eb      	ldr	r3, [r5, #28]
 80051e2:	9a03      	ldr	r2, [sp, #12]
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	9b08      	ldr	r3, [sp, #32]
 80051e8:	2b0e      	cmp	r3, #14
 80051ea:	f200 80a8 	bhi.w	800533e <_dtoa_r+0x46e>
 80051ee:	2c00      	cmp	r4, #0
 80051f0:	f000 80a5 	beq.w	800533e <_dtoa_r+0x46e>
 80051f4:	f1bb 0f00 	cmp.w	fp, #0
 80051f8:	dd34      	ble.n	8005264 <_dtoa_r+0x394>
 80051fa:	4b9a      	ldr	r3, [pc, #616]	; (8005464 <_dtoa_r+0x594>)
 80051fc:	f00b 020f 	and.w	r2, fp, #15
 8005200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005204:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005208:	e9d3 3400 	ldrd	r3, r4, [r3]
 800520c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005210:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005214:	d016      	beq.n	8005244 <_dtoa_r+0x374>
 8005216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800521a:	4b93      	ldr	r3, [pc, #588]	; (8005468 <_dtoa_r+0x598>)
 800521c:	2703      	movs	r7, #3
 800521e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005222:	f7fb fba3 	bl	800096c <__aeabi_ddiv>
 8005226:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800522a:	f004 040f 	and.w	r4, r4, #15
 800522e:	4e8e      	ldr	r6, [pc, #568]	; (8005468 <_dtoa_r+0x598>)
 8005230:	b954      	cbnz	r4, 8005248 <_dtoa_r+0x378>
 8005232:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800523a:	f7fb fb97 	bl	800096c <__aeabi_ddiv>
 800523e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005242:	e029      	b.n	8005298 <_dtoa_r+0x3c8>
 8005244:	2702      	movs	r7, #2
 8005246:	e7f2      	b.n	800522e <_dtoa_r+0x35e>
 8005248:	07e1      	lsls	r1, r4, #31
 800524a:	d508      	bpl.n	800525e <_dtoa_r+0x38e>
 800524c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005250:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005254:	f7fb fa60 	bl	8000718 <__aeabi_dmul>
 8005258:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800525c:	3701      	adds	r7, #1
 800525e:	1064      	asrs	r4, r4, #1
 8005260:	3608      	adds	r6, #8
 8005262:	e7e5      	b.n	8005230 <_dtoa_r+0x360>
 8005264:	f000 80a5 	beq.w	80053b2 <_dtoa_r+0x4e2>
 8005268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800526c:	f1cb 0400 	rsb	r4, fp, #0
 8005270:	4b7c      	ldr	r3, [pc, #496]	; (8005464 <_dtoa_r+0x594>)
 8005272:	f004 020f 	and.w	r2, r4, #15
 8005276:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f7fb fa4b 	bl	8000718 <__aeabi_dmul>
 8005282:	2702      	movs	r7, #2
 8005284:	2300      	movs	r3, #0
 8005286:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800528a:	4e77      	ldr	r6, [pc, #476]	; (8005468 <_dtoa_r+0x598>)
 800528c:	1124      	asrs	r4, r4, #4
 800528e:	2c00      	cmp	r4, #0
 8005290:	f040 8084 	bne.w	800539c <_dtoa_r+0x4cc>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1d2      	bne.n	800523e <_dtoa_r+0x36e>
 8005298:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800529c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80052a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 8087 	beq.w	80053b6 <_dtoa_r+0x4e6>
 80052a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052ac:	2200      	movs	r2, #0
 80052ae:	4b6f      	ldr	r3, [pc, #444]	; (800546c <_dtoa_r+0x59c>)
 80052b0:	f7fb fca4 	bl	8000bfc <__aeabi_dcmplt>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d07e      	beq.n	80053b6 <_dtoa_r+0x4e6>
 80052b8:	9b08      	ldr	r3, [sp, #32]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d07b      	beq.n	80053b6 <_dtoa_r+0x4e6>
 80052be:	9b06      	ldr	r3, [sp, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	dd38      	ble.n	8005336 <_dtoa_r+0x466>
 80052c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052c8:	2200      	movs	r2, #0
 80052ca:	4b69      	ldr	r3, [pc, #420]	; (8005470 <_dtoa_r+0x5a0>)
 80052cc:	f7fb fa24 	bl	8000718 <__aeabi_dmul>
 80052d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052d4:	9c06      	ldr	r4, [sp, #24]
 80052d6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80052da:	3701      	adds	r7, #1
 80052dc:	4638      	mov	r0, r7
 80052de:	f7fb f9b1 	bl	8000644 <__aeabi_i2d>
 80052e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052e6:	f7fb fa17 	bl	8000718 <__aeabi_dmul>
 80052ea:	2200      	movs	r2, #0
 80052ec:	4b61      	ldr	r3, [pc, #388]	; (8005474 <_dtoa_r+0x5a4>)
 80052ee:	f7fb f85d 	bl	80003ac <__adddf3>
 80052f2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80052f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052fa:	9611      	str	r6, [sp, #68]	; 0x44
 80052fc:	2c00      	cmp	r4, #0
 80052fe:	d15d      	bne.n	80053bc <_dtoa_r+0x4ec>
 8005300:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005304:	2200      	movs	r2, #0
 8005306:	4b5c      	ldr	r3, [pc, #368]	; (8005478 <_dtoa_r+0x5a8>)
 8005308:	f7fb f84e 	bl	80003a8 <__aeabi_dsub>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005314:	4633      	mov	r3, r6
 8005316:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005318:	f7fb fc8e 	bl	8000c38 <__aeabi_dcmpgt>
 800531c:	2800      	cmp	r0, #0
 800531e:	f040 8295 	bne.w	800584c <_dtoa_r+0x97c>
 8005322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005326:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005328:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800532c:	f7fb fc66 	bl	8000bfc <__aeabi_dcmplt>
 8005330:	2800      	cmp	r0, #0
 8005332:	f040 8289 	bne.w	8005848 <_dtoa_r+0x978>
 8005336:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800533a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800533e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005340:	2b00      	cmp	r3, #0
 8005342:	f2c0 8151 	blt.w	80055e8 <_dtoa_r+0x718>
 8005346:	f1bb 0f0e 	cmp.w	fp, #14
 800534a:	f300 814d 	bgt.w	80055e8 <_dtoa_r+0x718>
 800534e:	4b45      	ldr	r3, [pc, #276]	; (8005464 <_dtoa_r+0x594>)
 8005350:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005354:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005358:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800535c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800535e:	2b00      	cmp	r3, #0
 8005360:	f280 80da 	bge.w	8005518 <_dtoa_r+0x648>
 8005364:	9b08      	ldr	r3, [sp, #32]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f300 80d6 	bgt.w	8005518 <_dtoa_r+0x648>
 800536c:	f040 826b 	bne.w	8005846 <_dtoa_r+0x976>
 8005370:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005374:	2200      	movs	r2, #0
 8005376:	4b40      	ldr	r3, [pc, #256]	; (8005478 <_dtoa_r+0x5a8>)
 8005378:	f7fb f9ce 	bl	8000718 <__aeabi_dmul>
 800537c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005380:	f7fb fc50 	bl	8000c24 <__aeabi_dcmpge>
 8005384:	9c08      	ldr	r4, [sp, #32]
 8005386:	4626      	mov	r6, r4
 8005388:	2800      	cmp	r0, #0
 800538a:	f040 8241 	bne.w	8005810 <_dtoa_r+0x940>
 800538e:	2331      	movs	r3, #49	; 0x31
 8005390:	9f03      	ldr	r7, [sp, #12]
 8005392:	f10b 0b01 	add.w	fp, fp, #1
 8005396:	f807 3b01 	strb.w	r3, [r7], #1
 800539a:	e23d      	b.n	8005818 <_dtoa_r+0x948>
 800539c:	07e2      	lsls	r2, r4, #31
 800539e:	d505      	bpl.n	80053ac <_dtoa_r+0x4dc>
 80053a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80053a4:	f7fb f9b8 	bl	8000718 <__aeabi_dmul>
 80053a8:	2301      	movs	r3, #1
 80053aa:	3701      	adds	r7, #1
 80053ac:	1064      	asrs	r4, r4, #1
 80053ae:	3608      	adds	r6, #8
 80053b0:	e76d      	b.n	800528e <_dtoa_r+0x3be>
 80053b2:	2702      	movs	r7, #2
 80053b4:	e770      	b.n	8005298 <_dtoa_r+0x3c8>
 80053b6:	46d8      	mov	r8, fp
 80053b8:	9c08      	ldr	r4, [sp, #32]
 80053ba:	e78f      	b.n	80052dc <_dtoa_r+0x40c>
 80053bc:	9903      	ldr	r1, [sp, #12]
 80053be:	4b29      	ldr	r3, [pc, #164]	; (8005464 <_dtoa_r+0x594>)
 80053c0:	4421      	add	r1, r4
 80053c2:	9112      	str	r1, [sp, #72]	; 0x48
 80053c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80053ca:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80053ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80053d2:	2900      	cmp	r1, #0
 80053d4:	d054      	beq.n	8005480 <_dtoa_r+0x5b0>
 80053d6:	2000      	movs	r0, #0
 80053d8:	4928      	ldr	r1, [pc, #160]	; (800547c <_dtoa_r+0x5ac>)
 80053da:	f7fb fac7 	bl	800096c <__aeabi_ddiv>
 80053de:	463b      	mov	r3, r7
 80053e0:	4632      	mov	r2, r6
 80053e2:	f7fa ffe1 	bl	80003a8 <__aeabi_dsub>
 80053e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053ea:	9f03      	ldr	r7, [sp, #12]
 80053ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053f0:	f7fb fc42 	bl	8000c78 <__aeabi_d2iz>
 80053f4:	4604      	mov	r4, r0
 80053f6:	f7fb f925 	bl	8000644 <__aeabi_i2d>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005402:	f7fa ffd1 	bl	80003a8 <__aeabi_dsub>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	3430      	adds	r4, #48	; 0x30
 800540c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005410:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005414:	f807 4b01 	strb.w	r4, [r7], #1
 8005418:	f7fb fbf0 	bl	8000bfc <__aeabi_dcmplt>
 800541c:	2800      	cmp	r0, #0
 800541e:	d173      	bne.n	8005508 <_dtoa_r+0x638>
 8005420:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005424:	2000      	movs	r0, #0
 8005426:	4911      	ldr	r1, [pc, #68]	; (800546c <_dtoa_r+0x59c>)
 8005428:	f7fa ffbe 	bl	80003a8 <__aeabi_dsub>
 800542c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005430:	f7fb fbe4 	bl	8000bfc <__aeabi_dcmplt>
 8005434:	2800      	cmp	r0, #0
 8005436:	f040 80b6 	bne.w	80055a6 <_dtoa_r+0x6d6>
 800543a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800543c:	429f      	cmp	r7, r3
 800543e:	f43f af7a 	beq.w	8005336 <_dtoa_r+0x466>
 8005442:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005446:	2200      	movs	r2, #0
 8005448:	4b09      	ldr	r3, [pc, #36]	; (8005470 <_dtoa_r+0x5a0>)
 800544a:	f7fb f965 	bl	8000718 <__aeabi_dmul>
 800544e:	2200      	movs	r2, #0
 8005450:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005458:	4b05      	ldr	r3, [pc, #20]	; (8005470 <_dtoa_r+0x5a0>)
 800545a:	f7fb f95d 	bl	8000718 <__aeabi_dmul>
 800545e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005462:	e7c3      	b.n	80053ec <_dtoa_r+0x51c>
 8005464:	08006d28 	.word	0x08006d28
 8005468:	08006d00 	.word	0x08006d00
 800546c:	3ff00000 	.word	0x3ff00000
 8005470:	40240000 	.word	0x40240000
 8005474:	401c0000 	.word	0x401c0000
 8005478:	40140000 	.word	0x40140000
 800547c:	3fe00000 	.word	0x3fe00000
 8005480:	4630      	mov	r0, r6
 8005482:	4639      	mov	r1, r7
 8005484:	f7fb f948 	bl	8000718 <__aeabi_dmul>
 8005488:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800548a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800548e:	9c03      	ldr	r4, [sp, #12]
 8005490:	9314      	str	r3, [sp, #80]	; 0x50
 8005492:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005496:	f7fb fbef 	bl	8000c78 <__aeabi_d2iz>
 800549a:	9015      	str	r0, [sp, #84]	; 0x54
 800549c:	f7fb f8d2 	bl	8000644 <__aeabi_i2d>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054a8:	f7fa ff7e 	bl	80003a8 <__aeabi_dsub>
 80054ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80054ae:	4606      	mov	r6, r0
 80054b0:	3330      	adds	r3, #48	; 0x30
 80054b2:	f804 3b01 	strb.w	r3, [r4], #1
 80054b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054b8:	460f      	mov	r7, r1
 80054ba:	429c      	cmp	r4, r3
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	d124      	bne.n	800550c <_dtoa_r+0x63c>
 80054c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054c6:	4baf      	ldr	r3, [pc, #700]	; (8005784 <_dtoa_r+0x8b4>)
 80054c8:	f7fa ff70 	bl	80003ac <__adddf3>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4630      	mov	r0, r6
 80054d2:	4639      	mov	r1, r7
 80054d4:	f7fb fbb0 	bl	8000c38 <__aeabi_dcmpgt>
 80054d8:	2800      	cmp	r0, #0
 80054da:	d163      	bne.n	80055a4 <_dtoa_r+0x6d4>
 80054dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054e0:	2000      	movs	r0, #0
 80054e2:	49a8      	ldr	r1, [pc, #672]	; (8005784 <_dtoa_r+0x8b4>)
 80054e4:	f7fa ff60 	bl	80003a8 <__aeabi_dsub>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4630      	mov	r0, r6
 80054ee:	4639      	mov	r1, r7
 80054f0:	f7fb fb84 	bl	8000bfc <__aeabi_dcmplt>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	f43f af1e 	beq.w	8005336 <_dtoa_r+0x466>
 80054fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80054fc:	1e7b      	subs	r3, r7, #1
 80054fe:	9314      	str	r3, [sp, #80]	; 0x50
 8005500:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005504:	2b30      	cmp	r3, #48	; 0x30
 8005506:	d0f8      	beq.n	80054fa <_dtoa_r+0x62a>
 8005508:	46c3      	mov	fp, r8
 800550a:	e03b      	b.n	8005584 <_dtoa_r+0x6b4>
 800550c:	4b9e      	ldr	r3, [pc, #632]	; (8005788 <_dtoa_r+0x8b8>)
 800550e:	f7fb f903 	bl	8000718 <__aeabi_dmul>
 8005512:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005516:	e7bc      	b.n	8005492 <_dtoa_r+0x5c2>
 8005518:	9f03      	ldr	r7, [sp, #12]
 800551a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800551e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005522:	4640      	mov	r0, r8
 8005524:	4649      	mov	r1, r9
 8005526:	f7fb fa21 	bl	800096c <__aeabi_ddiv>
 800552a:	f7fb fba5 	bl	8000c78 <__aeabi_d2iz>
 800552e:	4604      	mov	r4, r0
 8005530:	f7fb f888 	bl	8000644 <__aeabi_i2d>
 8005534:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005538:	f7fb f8ee 	bl	8000718 <__aeabi_dmul>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4640      	mov	r0, r8
 8005542:	4649      	mov	r1, r9
 8005544:	f7fa ff30 	bl	80003a8 <__aeabi_dsub>
 8005548:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800554c:	f807 6b01 	strb.w	r6, [r7], #1
 8005550:	9e03      	ldr	r6, [sp, #12]
 8005552:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005556:	1bbe      	subs	r6, r7, r6
 8005558:	45b4      	cmp	ip, r6
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	d136      	bne.n	80055ce <_dtoa_r+0x6fe>
 8005560:	f7fa ff24 	bl	80003ac <__adddf3>
 8005564:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005568:	4680      	mov	r8, r0
 800556a:	4689      	mov	r9, r1
 800556c:	f7fb fb64 	bl	8000c38 <__aeabi_dcmpgt>
 8005570:	bb58      	cbnz	r0, 80055ca <_dtoa_r+0x6fa>
 8005572:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005576:	4640      	mov	r0, r8
 8005578:	4649      	mov	r1, r9
 800557a:	f7fb fb35 	bl	8000be8 <__aeabi_dcmpeq>
 800557e:	b108      	cbz	r0, 8005584 <_dtoa_r+0x6b4>
 8005580:	07e3      	lsls	r3, r4, #31
 8005582:	d422      	bmi.n	80055ca <_dtoa_r+0x6fa>
 8005584:	4651      	mov	r1, sl
 8005586:	4628      	mov	r0, r5
 8005588:	f000 fbc2 	bl	8005d10 <_Bfree>
 800558c:	2300      	movs	r3, #0
 800558e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005590:	703b      	strb	r3, [r7, #0]
 8005592:	f10b 0301 	add.w	r3, fp, #1
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800559a:	2b00      	cmp	r3, #0
 800559c:	f43f ace6 	beq.w	8004f6c <_dtoa_r+0x9c>
 80055a0:	601f      	str	r7, [r3, #0]
 80055a2:	e4e3      	b.n	8004f6c <_dtoa_r+0x9c>
 80055a4:	4627      	mov	r7, r4
 80055a6:	463b      	mov	r3, r7
 80055a8:	461f      	mov	r7, r3
 80055aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055ae:	2a39      	cmp	r2, #57	; 0x39
 80055b0:	d107      	bne.n	80055c2 <_dtoa_r+0x6f2>
 80055b2:	9a03      	ldr	r2, [sp, #12]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d1f7      	bne.n	80055a8 <_dtoa_r+0x6d8>
 80055b8:	2230      	movs	r2, #48	; 0x30
 80055ba:	9903      	ldr	r1, [sp, #12]
 80055bc:	f108 0801 	add.w	r8, r8, #1
 80055c0:	700a      	strb	r2, [r1, #0]
 80055c2:	781a      	ldrb	r2, [r3, #0]
 80055c4:	3201      	adds	r2, #1
 80055c6:	701a      	strb	r2, [r3, #0]
 80055c8:	e79e      	b.n	8005508 <_dtoa_r+0x638>
 80055ca:	46d8      	mov	r8, fp
 80055cc:	e7eb      	b.n	80055a6 <_dtoa_r+0x6d6>
 80055ce:	2200      	movs	r2, #0
 80055d0:	4b6d      	ldr	r3, [pc, #436]	; (8005788 <_dtoa_r+0x8b8>)
 80055d2:	f7fb f8a1 	bl	8000718 <__aeabi_dmul>
 80055d6:	2200      	movs	r2, #0
 80055d8:	2300      	movs	r3, #0
 80055da:	4680      	mov	r8, r0
 80055dc:	4689      	mov	r9, r1
 80055de:	f7fb fb03 	bl	8000be8 <__aeabi_dcmpeq>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d09b      	beq.n	800551e <_dtoa_r+0x64e>
 80055e6:	e7cd      	b.n	8005584 <_dtoa_r+0x6b4>
 80055e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055ea:	2a00      	cmp	r2, #0
 80055ec:	f000 80c4 	beq.w	8005778 <_dtoa_r+0x8a8>
 80055f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80055f2:	2a01      	cmp	r2, #1
 80055f4:	f300 80a8 	bgt.w	8005748 <_dtoa_r+0x878>
 80055f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80055fa:	2a00      	cmp	r2, #0
 80055fc:	f000 80a0 	beq.w	8005740 <_dtoa_r+0x870>
 8005600:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005604:	464f      	mov	r7, r9
 8005606:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800560a:	2101      	movs	r1, #1
 800560c:	441a      	add	r2, r3
 800560e:	4628      	mov	r0, r5
 8005610:	4499      	add	r9, r3
 8005612:	9209      	str	r2, [sp, #36]	; 0x24
 8005614:	f000 fc32 	bl	8005e7c <__i2b>
 8005618:	4606      	mov	r6, r0
 800561a:	b15f      	cbz	r7, 8005634 <_dtoa_r+0x764>
 800561c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561e:	2b00      	cmp	r3, #0
 8005620:	dd08      	ble.n	8005634 <_dtoa_r+0x764>
 8005622:	42bb      	cmp	r3, r7
 8005624:	bfa8      	it	ge
 8005626:	463b      	movge	r3, r7
 8005628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800562a:	eba9 0903 	sub.w	r9, r9, r3
 800562e:	1aff      	subs	r7, r7, r3
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	9309      	str	r3, [sp, #36]	; 0x24
 8005634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005636:	b1f3      	cbz	r3, 8005676 <_dtoa_r+0x7a6>
 8005638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 80a0 	beq.w	8005780 <_dtoa_r+0x8b0>
 8005640:	2c00      	cmp	r4, #0
 8005642:	dd10      	ble.n	8005666 <_dtoa_r+0x796>
 8005644:	4631      	mov	r1, r6
 8005646:	4622      	mov	r2, r4
 8005648:	4628      	mov	r0, r5
 800564a:	f000 fcd5 	bl	8005ff8 <__pow5mult>
 800564e:	4652      	mov	r2, sl
 8005650:	4601      	mov	r1, r0
 8005652:	4606      	mov	r6, r0
 8005654:	4628      	mov	r0, r5
 8005656:	f000 fc27 	bl	8005ea8 <__multiply>
 800565a:	4680      	mov	r8, r0
 800565c:	4651      	mov	r1, sl
 800565e:	4628      	mov	r0, r5
 8005660:	f000 fb56 	bl	8005d10 <_Bfree>
 8005664:	46c2      	mov	sl, r8
 8005666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005668:	1b1a      	subs	r2, r3, r4
 800566a:	d004      	beq.n	8005676 <_dtoa_r+0x7a6>
 800566c:	4651      	mov	r1, sl
 800566e:	4628      	mov	r0, r5
 8005670:	f000 fcc2 	bl	8005ff8 <__pow5mult>
 8005674:	4682      	mov	sl, r0
 8005676:	2101      	movs	r1, #1
 8005678:	4628      	mov	r0, r5
 800567a:	f000 fbff 	bl	8005e7c <__i2b>
 800567e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005680:	4604      	mov	r4, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	f340 8082 	ble.w	800578c <_dtoa_r+0x8bc>
 8005688:	461a      	mov	r2, r3
 800568a:	4601      	mov	r1, r0
 800568c:	4628      	mov	r0, r5
 800568e:	f000 fcb3 	bl	8005ff8 <__pow5mult>
 8005692:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005694:	4604      	mov	r4, r0
 8005696:	2b01      	cmp	r3, #1
 8005698:	dd7b      	ble.n	8005792 <_dtoa_r+0x8c2>
 800569a:	f04f 0800 	mov.w	r8, #0
 800569e:	6923      	ldr	r3, [r4, #16]
 80056a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80056a4:	6918      	ldr	r0, [r3, #16]
 80056a6:	f000 fb9b 	bl	8005de0 <__hi0bits>
 80056aa:	f1c0 0020 	rsb	r0, r0, #32
 80056ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b0:	4418      	add	r0, r3
 80056b2:	f010 001f 	ands.w	r0, r0, #31
 80056b6:	f000 8092 	beq.w	80057de <_dtoa_r+0x90e>
 80056ba:	f1c0 0320 	rsb	r3, r0, #32
 80056be:	2b04      	cmp	r3, #4
 80056c0:	f340 8085 	ble.w	80057ce <_dtoa_r+0x8fe>
 80056c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c6:	f1c0 001c 	rsb	r0, r0, #28
 80056ca:	4403      	add	r3, r0
 80056cc:	4481      	add	r9, r0
 80056ce:	4407      	add	r7, r0
 80056d0:	9309      	str	r3, [sp, #36]	; 0x24
 80056d2:	f1b9 0f00 	cmp.w	r9, #0
 80056d6:	dd05      	ble.n	80056e4 <_dtoa_r+0x814>
 80056d8:	4651      	mov	r1, sl
 80056da:	464a      	mov	r2, r9
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 fce5 	bl	80060ac <__lshift>
 80056e2:	4682      	mov	sl, r0
 80056e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	dd05      	ble.n	80056f6 <_dtoa_r+0x826>
 80056ea:	4621      	mov	r1, r4
 80056ec:	461a      	mov	r2, r3
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 fcdc 	bl	80060ac <__lshift>
 80056f4:	4604      	mov	r4, r0
 80056f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d072      	beq.n	80057e2 <_dtoa_r+0x912>
 80056fc:	4621      	mov	r1, r4
 80056fe:	4650      	mov	r0, sl
 8005700:	f000 fd40 	bl	8006184 <__mcmp>
 8005704:	2800      	cmp	r0, #0
 8005706:	da6c      	bge.n	80057e2 <_dtoa_r+0x912>
 8005708:	2300      	movs	r3, #0
 800570a:	4651      	mov	r1, sl
 800570c:	220a      	movs	r2, #10
 800570e:	4628      	mov	r0, r5
 8005710:	f000 fb20 	bl	8005d54 <__multadd>
 8005714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005716:	4682      	mov	sl, r0
 8005718:	f10b 3bff 	add.w	fp, fp, #4294967295
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 81ac 	beq.w	8005a7a <_dtoa_r+0xbaa>
 8005722:	2300      	movs	r3, #0
 8005724:	4631      	mov	r1, r6
 8005726:	220a      	movs	r2, #10
 8005728:	4628      	mov	r0, r5
 800572a:	f000 fb13 	bl	8005d54 <__multadd>
 800572e:	9b06      	ldr	r3, [sp, #24]
 8005730:	4606      	mov	r6, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	f300 8093 	bgt.w	800585e <_dtoa_r+0x98e>
 8005738:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800573a:	2b02      	cmp	r3, #2
 800573c:	dc59      	bgt.n	80057f2 <_dtoa_r+0x922>
 800573e:	e08e      	b.n	800585e <_dtoa_r+0x98e>
 8005740:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005742:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005746:	e75d      	b.n	8005604 <_dtoa_r+0x734>
 8005748:	9b08      	ldr	r3, [sp, #32]
 800574a:	1e5c      	subs	r4, r3, #1
 800574c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800574e:	42a3      	cmp	r3, r4
 8005750:	bfbf      	itttt	lt
 8005752:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005754:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005756:	1ae3      	sublt	r3, r4, r3
 8005758:	18d2      	addlt	r2, r2, r3
 800575a:	bfa8      	it	ge
 800575c:	1b1c      	subge	r4, r3, r4
 800575e:	9b08      	ldr	r3, [sp, #32]
 8005760:	bfbe      	ittt	lt
 8005762:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005764:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005766:	2400      	movlt	r4, #0
 8005768:	2b00      	cmp	r3, #0
 800576a:	bfb5      	itete	lt
 800576c:	eba9 0703 	sublt.w	r7, r9, r3
 8005770:	464f      	movge	r7, r9
 8005772:	2300      	movlt	r3, #0
 8005774:	9b08      	ldrge	r3, [sp, #32]
 8005776:	e747      	b.n	8005608 <_dtoa_r+0x738>
 8005778:	464f      	mov	r7, r9
 800577a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800577c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800577e:	e74c      	b.n	800561a <_dtoa_r+0x74a>
 8005780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005782:	e773      	b.n	800566c <_dtoa_r+0x79c>
 8005784:	3fe00000 	.word	0x3fe00000
 8005788:	40240000 	.word	0x40240000
 800578c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800578e:	2b01      	cmp	r3, #1
 8005790:	dc18      	bgt.n	80057c4 <_dtoa_r+0x8f4>
 8005792:	9b04      	ldr	r3, [sp, #16]
 8005794:	b9b3      	cbnz	r3, 80057c4 <_dtoa_r+0x8f4>
 8005796:	9b05      	ldr	r3, [sp, #20]
 8005798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800579c:	b993      	cbnz	r3, 80057c4 <_dtoa_r+0x8f4>
 800579e:	9b05      	ldr	r3, [sp, #20]
 80057a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057a4:	0d1b      	lsrs	r3, r3, #20
 80057a6:	051b      	lsls	r3, r3, #20
 80057a8:	b17b      	cbz	r3, 80057ca <_dtoa_r+0x8fa>
 80057aa:	f04f 0801 	mov.w	r8, #1
 80057ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b0:	f109 0901 	add.w	r9, r9, #1
 80057b4:	3301      	adds	r3, #1
 80057b6:	9309      	str	r3, [sp, #36]	; 0x24
 80057b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f47f af6f 	bne.w	800569e <_dtoa_r+0x7ce>
 80057c0:	2001      	movs	r0, #1
 80057c2:	e774      	b.n	80056ae <_dtoa_r+0x7de>
 80057c4:	f04f 0800 	mov.w	r8, #0
 80057c8:	e7f6      	b.n	80057b8 <_dtoa_r+0x8e8>
 80057ca:	4698      	mov	r8, r3
 80057cc:	e7f4      	b.n	80057b8 <_dtoa_r+0x8e8>
 80057ce:	d080      	beq.n	80056d2 <_dtoa_r+0x802>
 80057d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057d2:	331c      	adds	r3, #28
 80057d4:	441a      	add	r2, r3
 80057d6:	4499      	add	r9, r3
 80057d8:	441f      	add	r7, r3
 80057da:	9209      	str	r2, [sp, #36]	; 0x24
 80057dc:	e779      	b.n	80056d2 <_dtoa_r+0x802>
 80057de:	4603      	mov	r3, r0
 80057e0:	e7f6      	b.n	80057d0 <_dtoa_r+0x900>
 80057e2:	9b08      	ldr	r3, [sp, #32]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	dc34      	bgt.n	8005852 <_dtoa_r+0x982>
 80057e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	dd31      	ble.n	8005852 <_dtoa_r+0x982>
 80057ee:	9b08      	ldr	r3, [sp, #32]
 80057f0:	9306      	str	r3, [sp, #24]
 80057f2:	9b06      	ldr	r3, [sp, #24]
 80057f4:	b963      	cbnz	r3, 8005810 <_dtoa_r+0x940>
 80057f6:	4621      	mov	r1, r4
 80057f8:	2205      	movs	r2, #5
 80057fa:	4628      	mov	r0, r5
 80057fc:	f000 faaa 	bl	8005d54 <__multadd>
 8005800:	4601      	mov	r1, r0
 8005802:	4604      	mov	r4, r0
 8005804:	4650      	mov	r0, sl
 8005806:	f000 fcbd 	bl	8006184 <__mcmp>
 800580a:	2800      	cmp	r0, #0
 800580c:	f73f adbf 	bgt.w	800538e <_dtoa_r+0x4be>
 8005810:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005812:	9f03      	ldr	r7, [sp, #12]
 8005814:	ea6f 0b03 	mvn.w	fp, r3
 8005818:	f04f 0800 	mov.w	r8, #0
 800581c:	4621      	mov	r1, r4
 800581e:	4628      	mov	r0, r5
 8005820:	f000 fa76 	bl	8005d10 <_Bfree>
 8005824:	2e00      	cmp	r6, #0
 8005826:	f43f aead 	beq.w	8005584 <_dtoa_r+0x6b4>
 800582a:	f1b8 0f00 	cmp.w	r8, #0
 800582e:	d005      	beq.n	800583c <_dtoa_r+0x96c>
 8005830:	45b0      	cmp	r8, r6
 8005832:	d003      	beq.n	800583c <_dtoa_r+0x96c>
 8005834:	4641      	mov	r1, r8
 8005836:	4628      	mov	r0, r5
 8005838:	f000 fa6a 	bl	8005d10 <_Bfree>
 800583c:	4631      	mov	r1, r6
 800583e:	4628      	mov	r0, r5
 8005840:	f000 fa66 	bl	8005d10 <_Bfree>
 8005844:	e69e      	b.n	8005584 <_dtoa_r+0x6b4>
 8005846:	2400      	movs	r4, #0
 8005848:	4626      	mov	r6, r4
 800584a:	e7e1      	b.n	8005810 <_dtoa_r+0x940>
 800584c:	46c3      	mov	fp, r8
 800584e:	4626      	mov	r6, r4
 8005850:	e59d      	b.n	800538e <_dtoa_r+0x4be>
 8005852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80c8 	beq.w	80059ea <_dtoa_r+0xb1a>
 800585a:	9b08      	ldr	r3, [sp, #32]
 800585c:	9306      	str	r3, [sp, #24]
 800585e:	2f00      	cmp	r7, #0
 8005860:	dd05      	ble.n	800586e <_dtoa_r+0x99e>
 8005862:	4631      	mov	r1, r6
 8005864:	463a      	mov	r2, r7
 8005866:	4628      	mov	r0, r5
 8005868:	f000 fc20 	bl	80060ac <__lshift>
 800586c:	4606      	mov	r6, r0
 800586e:	f1b8 0f00 	cmp.w	r8, #0
 8005872:	d05b      	beq.n	800592c <_dtoa_r+0xa5c>
 8005874:	4628      	mov	r0, r5
 8005876:	6871      	ldr	r1, [r6, #4]
 8005878:	f000 fa0a 	bl	8005c90 <_Balloc>
 800587c:	4607      	mov	r7, r0
 800587e:	b928      	cbnz	r0, 800588c <_dtoa_r+0x9bc>
 8005880:	4602      	mov	r2, r0
 8005882:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005886:	4b81      	ldr	r3, [pc, #516]	; (8005a8c <_dtoa_r+0xbbc>)
 8005888:	f7ff bb36 	b.w	8004ef8 <_dtoa_r+0x28>
 800588c:	6932      	ldr	r2, [r6, #16]
 800588e:	f106 010c 	add.w	r1, r6, #12
 8005892:	3202      	adds	r2, #2
 8005894:	0092      	lsls	r2, r2, #2
 8005896:	300c      	adds	r0, #12
 8005898:	f001 f804 	bl	80068a4 <memcpy>
 800589c:	2201      	movs	r2, #1
 800589e:	4639      	mov	r1, r7
 80058a0:	4628      	mov	r0, r5
 80058a2:	f000 fc03 	bl	80060ac <__lshift>
 80058a6:	46b0      	mov	r8, r6
 80058a8:	4606      	mov	r6, r0
 80058aa:	9b03      	ldr	r3, [sp, #12]
 80058ac:	9a03      	ldr	r2, [sp, #12]
 80058ae:	3301      	adds	r3, #1
 80058b0:	9308      	str	r3, [sp, #32]
 80058b2:	9b06      	ldr	r3, [sp, #24]
 80058b4:	4413      	add	r3, r2
 80058b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80058b8:	9b04      	ldr	r3, [sp, #16]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	930a      	str	r3, [sp, #40]	; 0x28
 80058c0:	9b08      	ldr	r3, [sp, #32]
 80058c2:	4621      	mov	r1, r4
 80058c4:	3b01      	subs	r3, #1
 80058c6:	4650      	mov	r0, sl
 80058c8:	9304      	str	r3, [sp, #16]
 80058ca:	f7ff fa77 	bl	8004dbc <quorem>
 80058ce:	4641      	mov	r1, r8
 80058d0:	9006      	str	r0, [sp, #24]
 80058d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80058d6:	4650      	mov	r0, sl
 80058d8:	f000 fc54 	bl	8006184 <__mcmp>
 80058dc:	4632      	mov	r2, r6
 80058de:	9009      	str	r0, [sp, #36]	; 0x24
 80058e0:	4621      	mov	r1, r4
 80058e2:	4628      	mov	r0, r5
 80058e4:	f000 fc6a 	bl	80061bc <__mdiff>
 80058e8:	68c2      	ldr	r2, [r0, #12]
 80058ea:	4607      	mov	r7, r0
 80058ec:	bb02      	cbnz	r2, 8005930 <_dtoa_r+0xa60>
 80058ee:	4601      	mov	r1, r0
 80058f0:	4650      	mov	r0, sl
 80058f2:	f000 fc47 	bl	8006184 <__mcmp>
 80058f6:	4602      	mov	r2, r0
 80058f8:	4639      	mov	r1, r7
 80058fa:	4628      	mov	r0, r5
 80058fc:	920c      	str	r2, [sp, #48]	; 0x30
 80058fe:	f000 fa07 	bl	8005d10 <_Bfree>
 8005902:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005904:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005906:	9f08      	ldr	r7, [sp, #32]
 8005908:	ea43 0102 	orr.w	r1, r3, r2
 800590c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800590e:	4319      	orrs	r1, r3
 8005910:	d110      	bne.n	8005934 <_dtoa_r+0xa64>
 8005912:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005916:	d029      	beq.n	800596c <_dtoa_r+0xa9c>
 8005918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800591a:	2b00      	cmp	r3, #0
 800591c:	dd02      	ble.n	8005924 <_dtoa_r+0xa54>
 800591e:	9b06      	ldr	r3, [sp, #24]
 8005920:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005924:	9b04      	ldr	r3, [sp, #16]
 8005926:	f883 9000 	strb.w	r9, [r3]
 800592a:	e777      	b.n	800581c <_dtoa_r+0x94c>
 800592c:	4630      	mov	r0, r6
 800592e:	e7ba      	b.n	80058a6 <_dtoa_r+0x9d6>
 8005930:	2201      	movs	r2, #1
 8005932:	e7e1      	b.n	80058f8 <_dtoa_r+0xa28>
 8005934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005936:	2b00      	cmp	r3, #0
 8005938:	db04      	blt.n	8005944 <_dtoa_r+0xa74>
 800593a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800593c:	430b      	orrs	r3, r1
 800593e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005940:	430b      	orrs	r3, r1
 8005942:	d120      	bne.n	8005986 <_dtoa_r+0xab6>
 8005944:	2a00      	cmp	r2, #0
 8005946:	dded      	ble.n	8005924 <_dtoa_r+0xa54>
 8005948:	4651      	mov	r1, sl
 800594a:	2201      	movs	r2, #1
 800594c:	4628      	mov	r0, r5
 800594e:	f000 fbad 	bl	80060ac <__lshift>
 8005952:	4621      	mov	r1, r4
 8005954:	4682      	mov	sl, r0
 8005956:	f000 fc15 	bl	8006184 <__mcmp>
 800595a:	2800      	cmp	r0, #0
 800595c:	dc03      	bgt.n	8005966 <_dtoa_r+0xa96>
 800595e:	d1e1      	bne.n	8005924 <_dtoa_r+0xa54>
 8005960:	f019 0f01 	tst.w	r9, #1
 8005964:	d0de      	beq.n	8005924 <_dtoa_r+0xa54>
 8005966:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800596a:	d1d8      	bne.n	800591e <_dtoa_r+0xa4e>
 800596c:	2339      	movs	r3, #57	; 0x39
 800596e:	9a04      	ldr	r2, [sp, #16]
 8005970:	7013      	strb	r3, [r2, #0]
 8005972:	463b      	mov	r3, r7
 8005974:	461f      	mov	r7, r3
 8005976:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800597a:	3b01      	subs	r3, #1
 800597c:	2a39      	cmp	r2, #57	; 0x39
 800597e:	d06b      	beq.n	8005a58 <_dtoa_r+0xb88>
 8005980:	3201      	adds	r2, #1
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	e74a      	b.n	800581c <_dtoa_r+0x94c>
 8005986:	2a00      	cmp	r2, #0
 8005988:	dd07      	ble.n	800599a <_dtoa_r+0xaca>
 800598a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800598e:	d0ed      	beq.n	800596c <_dtoa_r+0xa9c>
 8005990:	9a04      	ldr	r2, [sp, #16]
 8005992:	f109 0301 	add.w	r3, r9, #1
 8005996:	7013      	strb	r3, [r2, #0]
 8005998:	e740      	b.n	800581c <_dtoa_r+0x94c>
 800599a:	9b08      	ldr	r3, [sp, #32]
 800599c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800599e:	f803 9c01 	strb.w	r9, [r3, #-1]
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d042      	beq.n	8005a2c <_dtoa_r+0xb5c>
 80059a6:	4651      	mov	r1, sl
 80059a8:	2300      	movs	r3, #0
 80059aa:	220a      	movs	r2, #10
 80059ac:	4628      	mov	r0, r5
 80059ae:	f000 f9d1 	bl	8005d54 <__multadd>
 80059b2:	45b0      	cmp	r8, r6
 80059b4:	4682      	mov	sl, r0
 80059b6:	f04f 0300 	mov.w	r3, #0
 80059ba:	f04f 020a 	mov.w	r2, #10
 80059be:	4641      	mov	r1, r8
 80059c0:	4628      	mov	r0, r5
 80059c2:	d107      	bne.n	80059d4 <_dtoa_r+0xb04>
 80059c4:	f000 f9c6 	bl	8005d54 <__multadd>
 80059c8:	4680      	mov	r8, r0
 80059ca:	4606      	mov	r6, r0
 80059cc:	9b08      	ldr	r3, [sp, #32]
 80059ce:	3301      	adds	r3, #1
 80059d0:	9308      	str	r3, [sp, #32]
 80059d2:	e775      	b.n	80058c0 <_dtoa_r+0x9f0>
 80059d4:	f000 f9be 	bl	8005d54 <__multadd>
 80059d8:	4631      	mov	r1, r6
 80059da:	4680      	mov	r8, r0
 80059dc:	2300      	movs	r3, #0
 80059de:	220a      	movs	r2, #10
 80059e0:	4628      	mov	r0, r5
 80059e2:	f000 f9b7 	bl	8005d54 <__multadd>
 80059e6:	4606      	mov	r6, r0
 80059e8:	e7f0      	b.n	80059cc <_dtoa_r+0xafc>
 80059ea:	9b08      	ldr	r3, [sp, #32]
 80059ec:	9306      	str	r3, [sp, #24]
 80059ee:	9f03      	ldr	r7, [sp, #12]
 80059f0:	4621      	mov	r1, r4
 80059f2:	4650      	mov	r0, sl
 80059f4:	f7ff f9e2 	bl	8004dbc <quorem>
 80059f8:	9b03      	ldr	r3, [sp, #12]
 80059fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80059fe:	f807 9b01 	strb.w	r9, [r7], #1
 8005a02:	1afa      	subs	r2, r7, r3
 8005a04:	9b06      	ldr	r3, [sp, #24]
 8005a06:	4293      	cmp	r3, r2
 8005a08:	dd07      	ble.n	8005a1a <_dtoa_r+0xb4a>
 8005a0a:	4651      	mov	r1, sl
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	220a      	movs	r2, #10
 8005a10:	4628      	mov	r0, r5
 8005a12:	f000 f99f 	bl	8005d54 <__multadd>
 8005a16:	4682      	mov	sl, r0
 8005a18:	e7ea      	b.n	80059f0 <_dtoa_r+0xb20>
 8005a1a:	9b06      	ldr	r3, [sp, #24]
 8005a1c:	f04f 0800 	mov.w	r8, #0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bfcc      	ite	gt
 8005a24:	461f      	movgt	r7, r3
 8005a26:	2701      	movle	r7, #1
 8005a28:	9b03      	ldr	r3, [sp, #12]
 8005a2a:	441f      	add	r7, r3
 8005a2c:	4651      	mov	r1, sl
 8005a2e:	2201      	movs	r2, #1
 8005a30:	4628      	mov	r0, r5
 8005a32:	f000 fb3b 	bl	80060ac <__lshift>
 8005a36:	4621      	mov	r1, r4
 8005a38:	4682      	mov	sl, r0
 8005a3a:	f000 fba3 	bl	8006184 <__mcmp>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	dc97      	bgt.n	8005972 <_dtoa_r+0xaa2>
 8005a42:	d102      	bne.n	8005a4a <_dtoa_r+0xb7a>
 8005a44:	f019 0f01 	tst.w	r9, #1
 8005a48:	d193      	bne.n	8005972 <_dtoa_r+0xaa2>
 8005a4a:	463b      	mov	r3, r7
 8005a4c:	461f      	mov	r7, r3
 8005a4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a52:	2a30      	cmp	r2, #48	; 0x30
 8005a54:	d0fa      	beq.n	8005a4c <_dtoa_r+0xb7c>
 8005a56:	e6e1      	b.n	800581c <_dtoa_r+0x94c>
 8005a58:	9a03      	ldr	r2, [sp, #12]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d18a      	bne.n	8005974 <_dtoa_r+0xaa4>
 8005a5e:	2331      	movs	r3, #49	; 0x31
 8005a60:	f10b 0b01 	add.w	fp, fp, #1
 8005a64:	e797      	b.n	8005996 <_dtoa_r+0xac6>
 8005a66:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <_dtoa_r+0xbc0>)
 8005a68:	f7ff ba9f 	b.w	8004faa <_dtoa_r+0xda>
 8005a6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f47f aa77 	bne.w	8004f62 <_dtoa_r+0x92>
 8005a74:	4b07      	ldr	r3, [pc, #28]	; (8005a94 <_dtoa_r+0xbc4>)
 8005a76:	f7ff ba98 	b.w	8004faa <_dtoa_r+0xda>
 8005a7a:	9b06      	ldr	r3, [sp, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	dcb6      	bgt.n	80059ee <_dtoa_r+0xb1e>
 8005a80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	f73f aeb5 	bgt.w	80057f2 <_dtoa_r+0x922>
 8005a88:	e7b1      	b.n	80059ee <_dtoa_r+0xb1e>
 8005a8a:	bf00      	nop
 8005a8c:	08006c96 	.word	0x08006c96
 8005a90:	08006bf6 	.word	0x08006bf6
 8005a94:	08006c1a 	.word	0x08006c1a

08005a98 <_free_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4605      	mov	r5, r0
 8005a9c:	2900      	cmp	r1, #0
 8005a9e:	d040      	beq.n	8005b22 <_free_r+0x8a>
 8005aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aa4:	1f0c      	subs	r4, r1, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	bfb8      	it	lt
 8005aaa:	18e4      	addlt	r4, r4, r3
 8005aac:	f000 f8e4 	bl	8005c78 <__malloc_lock>
 8005ab0:	4a1c      	ldr	r2, [pc, #112]	; (8005b24 <_free_r+0x8c>)
 8005ab2:	6813      	ldr	r3, [r2, #0]
 8005ab4:	b933      	cbnz	r3, 8005ac4 <_free_r+0x2c>
 8005ab6:	6063      	str	r3, [r4, #4]
 8005ab8:	6014      	str	r4, [r2, #0]
 8005aba:	4628      	mov	r0, r5
 8005abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ac0:	f000 b8e0 	b.w	8005c84 <__malloc_unlock>
 8005ac4:	42a3      	cmp	r3, r4
 8005ac6:	d908      	bls.n	8005ada <_free_r+0x42>
 8005ac8:	6820      	ldr	r0, [r4, #0]
 8005aca:	1821      	adds	r1, r4, r0
 8005acc:	428b      	cmp	r3, r1
 8005ace:	bf01      	itttt	eq
 8005ad0:	6819      	ldreq	r1, [r3, #0]
 8005ad2:	685b      	ldreq	r3, [r3, #4]
 8005ad4:	1809      	addeq	r1, r1, r0
 8005ad6:	6021      	streq	r1, [r4, #0]
 8005ad8:	e7ed      	b.n	8005ab6 <_free_r+0x1e>
 8005ada:	461a      	mov	r2, r3
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	b10b      	cbz	r3, 8005ae4 <_free_r+0x4c>
 8005ae0:	42a3      	cmp	r3, r4
 8005ae2:	d9fa      	bls.n	8005ada <_free_r+0x42>
 8005ae4:	6811      	ldr	r1, [r2, #0]
 8005ae6:	1850      	adds	r0, r2, r1
 8005ae8:	42a0      	cmp	r0, r4
 8005aea:	d10b      	bne.n	8005b04 <_free_r+0x6c>
 8005aec:	6820      	ldr	r0, [r4, #0]
 8005aee:	4401      	add	r1, r0
 8005af0:	1850      	adds	r0, r2, r1
 8005af2:	4283      	cmp	r3, r0
 8005af4:	6011      	str	r1, [r2, #0]
 8005af6:	d1e0      	bne.n	8005aba <_free_r+0x22>
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	4408      	add	r0, r1
 8005afe:	6010      	str	r0, [r2, #0]
 8005b00:	6053      	str	r3, [r2, #4]
 8005b02:	e7da      	b.n	8005aba <_free_r+0x22>
 8005b04:	d902      	bls.n	8005b0c <_free_r+0x74>
 8005b06:	230c      	movs	r3, #12
 8005b08:	602b      	str	r3, [r5, #0]
 8005b0a:	e7d6      	b.n	8005aba <_free_r+0x22>
 8005b0c:	6820      	ldr	r0, [r4, #0]
 8005b0e:	1821      	adds	r1, r4, r0
 8005b10:	428b      	cmp	r3, r1
 8005b12:	bf01      	itttt	eq
 8005b14:	6819      	ldreq	r1, [r3, #0]
 8005b16:	685b      	ldreq	r3, [r3, #4]
 8005b18:	1809      	addeq	r1, r1, r0
 8005b1a:	6021      	streq	r1, [r4, #0]
 8005b1c:	6063      	str	r3, [r4, #4]
 8005b1e:	6054      	str	r4, [r2, #4]
 8005b20:	e7cb      	b.n	8005aba <_free_r+0x22>
 8005b22:	bd38      	pop	{r3, r4, r5, pc}
 8005b24:	20000530 	.word	0x20000530

08005b28 <malloc>:
 8005b28:	4b02      	ldr	r3, [pc, #8]	; (8005b34 <malloc+0xc>)
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	f000 b823 	b.w	8005b78 <_malloc_r>
 8005b32:	bf00      	nop
 8005b34:	20000064 	.word	0x20000064

08005b38 <sbrk_aligned>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	4e0e      	ldr	r6, [pc, #56]	; (8005b74 <sbrk_aligned+0x3c>)
 8005b3c:	460c      	mov	r4, r1
 8005b3e:	6831      	ldr	r1, [r6, #0]
 8005b40:	4605      	mov	r5, r0
 8005b42:	b911      	cbnz	r1, 8005b4a <sbrk_aligned+0x12>
 8005b44:	f000 fe9e 	bl	8006884 <_sbrk_r>
 8005b48:	6030      	str	r0, [r6, #0]
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	f000 fe99 	bl	8006884 <_sbrk_r>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	d00a      	beq.n	8005b6c <sbrk_aligned+0x34>
 8005b56:	1cc4      	adds	r4, r0, #3
 8005b58:	f024 0403 	bic.w	r4, r4, #3
 8005b5c:	42a0      	cmp	r0, r4
 8005b5e:	d007      	beq.n	8005b70 <sbrk_aligned+0x38>
 8005b60:	1a21      	subs	r1, r4, r0
 8005b62:	4628      	mov	r0, r5
 8005b64:	f000 fe8e 	bl	8006884 <_sbrk_r>
 8005b68:	3001      	adds	r0, #1
 8005b6a:	d101      	bne.n	8005b70 <sbrk_aligned+0x38>
 8005b6c:	f04f 34ff 	mov.w	r4, #4294967295
 8005b70:	4620      	mov	r0, r4
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	20000534 	.word	0x20000534

08005b78 <_malloc_r>:
 8005b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b7c:	1ccd      	adds	r5, r1, #3
 8005b7e:	f025 0503 	bic.w	r5, r5, #3
 8005b82:	3508      	adds	r5, #8
 8005b84:	2d0c      	cmp	r5, #12
 8005b86:	bf38      	it	cc
 8005b88:	250c      	movcc	r5, #12
 8005b8a:	2d00      	cmp	r5, #0
 8005b8c:	4607      	mov	r7, r0
 8005b8e:	db01      	blt.n	8005b94 <_malloc_r+0x1c>
 8005b90:	42a9      	cmp	r1, r5
 8005b92:	d905      	bls.n	8005ba0 <_malloc_r+0x28>
 8005b94:	230c      	movs	r3, #12
 8005b96:	2600      	movs	r6, #0
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ba0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c74 <_malloc_r+0xfc>
 8005ba4:	f000 f868 	bl	8005c78 <__malloc_lock>
 8005ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bac:	461c      	mov	r4, r3
 8005bae:	bb5c      	cbnz	r4, 8005c08 <_malloc_r+0x90>
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	f7ff ffc0 	bl	8005b38 <sbrk_aligned>
 8005bb8:	1c43      	adds	r3, r0, #1
 8005bba:	4604      	mov	r4, r0
 8005bbc:	d155      	bne.n	8005c6a <_malloc_r+0xf2>
 8005bbe:	f8d8 4000 	ldr.w	r4, [r8]
 8005bc2:	4626      	mov	r6, r4
 8005bc4:	2e00      	cmp	r6, #0
 8005bc6:	d145      	bne.n	8005c54 <_malloc_r+0xdc>
 8005bc8:	2c00      	cmp	r4, #0
 8005bca:	d048      	beq.n	8005c5e <_malloc_r+0xe6>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	eb04 0903 	add.w	r9, r4, r3
 8005bd6:	f000 fe55 	bl	8006884 <_sbrk_r>
 8005bda:	4581      	cmp	r9, r0
 8005bdc:	d13f      	bne.n	8005c5e <_malloc_r+0xe6>
 8005bde:	6821      	ldr	r1, [r4, #0]
 8005be0:	4638      	mov	r0, r7
 8005be2:	1a6d      	subs	r5, r5, r1
 8005be4:	4629      	mov	r1, r5
 8005be6:	f7ff ffa7 	bl	8005b38 <sbrk_aligned>
 8005bea:	3001      	adds	r0, #1
 8005bec:	d037      	beq.n	8005c5e <_malloc_r+0xe6>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	442b      	add	r3, r5
 8005bf2:	6023      	str	r3, [r4, #0]
 8005bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d038      	beq.n	8005c6e <_malloc_r+0xf6>
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	42a2      	cmp	r2, r4
 8005c00:	d12b      	bne.n	8005c5a <_malloc_r+0xe2>
 8005c02:	2200      	movs	r2, #0
 8005c04:	605a      	str	r2, [r3, #4]
 8005c06:	e00f      	b.n	8005c28 <_malloc_r+0xb0>
 8005c08:	6822      	ldr	r2, [r4, #0]
 8005c0a:	1b52      	subs	r2, r2, r5
 8005c0c:	d41f      	bmi.n	8005c4e <_malloc_r+0xd6>
 8005c0e:	2a0b      	cmp	r2, #11
 8005c10:	d917      	bls.n	8005c42 <_malloc_r+0xca>
 8005c12:	1961      	adds	r1, r4, r5
 8005c14:	42a3      	cmp	r3, r4
 8005c16:	6025      	str	r5, [r4, #0]
 8005c18:	bf18      	it	ne
 8005c1a:	6059      	strne	r1, [r3, #4]
 8005c1c:	6863      	ldr	r3, [r4, #4]
 8005c1e:	bf08      	it	eq
 8005c20:	f8c8 1000 	streq.w	r1, [r8]
 8005c24:	5162      	str	r2, [r4, r5]
 8005c26:	604b      	str	r3, [r1, #4]
 8005c28:	4638      	mov	r0, r7
 8005c2a:	f104 060b 	add.w	r6, r4, #11
 8005c2e:	f000 f829 	bl	8005c84 <__malloc_unlock>
 8005c32:	f026 0607 	bic.w	r6, r6, #7
 8005c36:	1d23      	adds	r3, r4, #4
 8005c38:	1af2      	subs	r2, r6, r3
 8005c3a:	d0ae      	beq.n	8005b9a <_malloc_r+0x22>
 8005c3c:	1b9b      	subs	r3, r3, r6
 8005c3e:	50a3      	str	r3, [r4, r2]
 8005c40:	e7ab      	b.n	8005b9a <_malloc_r+0x22>
 8005c42:	42a3      	cmp	r3, r4
 8005c44:	6862      	ldr	r2, [r4, #4]
 8005c46:	d1dd      	bne.n	8005c04 <_malloc_r+0x8c>
 8005c48:	f8c8 2000 	str.w	r2, [r8]
 8005c4c:	e7ec      	b.n	8005c28 <_malloc_r+0xb0>
 8005c4e:	4623      	mov	r3, r4
 8005c50:	6864      	ldr	r4, [r4, #4]
 8005c52:	e7ac      	b.n	8005bae <_malloc_r+0x36>
 8005c54:	4634      	mov	r4, r6
 8005c56:	6876      	ldr	r6, [r6, #4]
 8005c58:	e7b4      	b.n	8005bc4 <_malloc_r+0x4c>
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	e7cc      	b.n	8005bf8 <_malloc_r+0x80>
 8005c5e:	230c      	movs	r3, #12
 8005c60:	4638      	mov	r0, r7
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	f000 f80e 	bl	8005c84 <__malloc_unlock>
 8005c68:	e797      	b.n	8005b9a <_malloc_r+0x22>
 8005c6a:	6025      	str	r5, [r4, #0]
 8005c6c:	e7dc      	b.n	8005c28 <_malloc_r+0xb0>
 8005c6e:	605b      	str	r3, [r3, #4]
 8005c70:	deff      	udf	#255	; 0xff
 8005c72:	bf00      	nop
 8005c74:	20000530 	.word	0x20000530

08005c78 <__malloc_lock>:
 8005c78:	4801      	ldr	r0, [pc, #4]	; (8005c80 <__malloc_lock+0x8>)
 8005c7a:	f7ff b88f 	b.w	8004d9c <__retarget_lock_acquire_recursive>
 8005c7e:	bf00      	nop
 8005c80:	2000052c 	.word	0x2000052c

08005c84 <__malloc_unlock>:
 8005c84:	4801      	ldr	r0, [pc, #4]	; (8005c8c <__malloc_unlock+0x8>)
 8005c86:	f7ff b88a 	b.w	8004d9e <__retarget_lock_release_recursive>
 8005c8a:	bf00      	nop
 8005c8c:	2000052c 	.word	0x2000052c

08005c90 <_Balloc>:
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	69c6      	ldr	r6, [r0, #28]
 8005c94:	4604      	mov	r4, r0
 8005c96:	460d      	mov	r5, r1
 8005c98:	b976      	cbnz	r6, 8005cb8 <_Balloc+0x28>
 8005c9a:	2010      	movs	r0, #16
 8005c9c:	f7ff ff44 	bl	8005b28 <malloc>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	61e0      	str	r0, [r4, #28]
 8005ca4:	b920      	cbnz	r0, 8005cb0 <_Balloc+0x20>
 8005ca6:	216b      	movs	r1, #107	; 0x6b
 8005ca8:	4b17      	ldr	r3, [pc, #92]	; (8005d08 <_Balloc+0x78>)
 8005caa:	4818      	ldr	r0, [pc, #96]	; (8005d0c <_Balloc+0x7c>)
 8005cac:	f000 fe08 	bl	80068c0 <__assert_func>
 8005cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cb4:	6006      	str	r6, [r0, #0]
 8005cb6:	60c6      	str	r6, [r0, #12]
 8005cb8:	69e6      	ldr	r6, [r4, #28]
 8005cba:	68f3      	ldr	r3, [r6, #12]
 8005cbc:	b183      	cbz	r3, 8005ce0 <_Balloc+0x50>
 8005cbe:	69e3      	ldr	r3, [r4, #28]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005cc6:	b9b8      	cbnz	r0, 8005cf8 <_Balloc+0x68>
 8005cc8:	2101      	movs	r1, #1
 8005cca:	fa01 f605 	lsl.w	r6, r1, r5
 8005cce:	1d72      	adds	r2, r6, #5
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	0092      	lsls	r2, r2, #2
 8005cd4:	f000 fe12 	bl	80068fc <_calloc_r>
 8005cd8:	b160      	cbz	r0, 8005cf4 <_Balloc+0x64>
 8005cda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005cde:	e00e      	b.n	8005cfe <_Balloc+0x6e>
 8005ce0:	2221      	movs	r2, #33	; 0x21
 8005ce2:	2104      	movs	r1, #4
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f000 fe09 	bl	80068fc <_calloc_r>
 8005cea:	69e3      	ldr	r3, [r4, #28]
 8005cec:	60f0      	str	r0, [r6, #12]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e4      	bne.n	8005cbe <_Balloc+0x2e>
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
 8005cf8:	6802      	ldr	r2, [r0, #0]
 8005cfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d04:	e7f7      	b.n	8005cf6 <_Balloc+0x66>
 8005d06:	bf00      	nop
 8005d08:	08006c27 	.word	0x08006c27
 8005d0c:	08006ca7 	.word	0x08006ca7

08005d10 <_Bfree>:
 8005d10:	b570      	push	{r4, r5, r6, lr}
 8005d12:	69c6      	ldr	r6, [r0, #28]
 8005d14:	4605      	mov	r5, r0
 8005d16:	460c      	mov	r4, r1
 8005d18:	b976      	cbnz	r6, 8005d38 <_Bfree+0x28>
 8005d1a:	2010      	movs	r0, #16
 8005d1c:	f7ff ff04 	bl	8005b28 <malloc>
 8005d20:	4602      	mov	r2, r0
 8005d22:	61e8      	str	r0, [r5, #28]
 8005d24:	b920      	cbnz	r0, 8005d30 <_Bfree+0x20>
 8005d26:	218f      	movs	r1, #143	; 0x8f
 8005d28:	4b08      	ldr	r3, [pc, #32]	; (8005d4c <_Bfree+0x3c>)
 8005d2a:	4809      	ldr	r0, [pc, #36]	; (8005d50 <_Bfree+0x40>)
 8005d2c:	f000 fdc8 	bl	80068c0 <__assert_func>
 8005d30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d34:	6006      	str	r6, [r0, #0]
 8005d36:	60c6      	str	r6, [r0, #12]
 8005d38:	b13c      	cbz	r4, 8005d4a <_Bfree+0x3a>
 8005d3a:	69eb      	ldr	r3, [r5, #28]
 8005d3c:	6862      	ldr	r2, [r4, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d44:	6021      	str	r1, [r4, #0]
 8005d46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d4a:	bd70      	pop	{r4, r5, r6, pc}
 8005d4c:	08006c27 	.word	0x08006c27
 8005d50:	08006ca7 	.word	0x08006ca7

08005d54 <__multadd>:
 8005d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d58:	4607      	mov	r7, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	461e      	mov	r6, r3
 8005d5e:	2000      	movs	r0, #0
 8005d60:	690d      	ldr	r5, [r1, #16]
 8005d62:	f101 0c14 	add.w	ip, r1, #20
 8005d66:	f8dc 3000 	ldr.w	r3, [ip]
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	b299      	uxth	r1, r3
 8005d6e:	fb02 6101 	mla	r1, r2, r1, r6
 8005d72:	0c1e      	lsrs	r6, r3, #16
 8005d74:	0c0b      	lsrs	r3, r1, #16
 8005d76:	fb02 3306 	mla	r3, r2, r6, r3
 8005d7a:	b289      	uxth	r1, r1
 8005d7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d80:	4285      	cmp	r5, r0
 8005d82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d86:	f84c 1b04 	str.w	r1, [ip], #4
 8005d8a:	dcec      	bgt.n	8005d66 <__multadd+0x12>
 8005d8c:	b30e      	cbz	r6, 8005dd2 <__multadd+0x7e>
 8005d8e:	68a3      	ldr	r3, [r4, #8]
 8005d90:	42ab      	cmp	r3, r5
 8005d92:	dc19      	bgt.n	8005dc8 <__multadd+0x74>
 8005d94:	6861      	ldr	r1, [r4, #4]
 8005d96:	4638      	mov	r0, r7
 8005d98:	3101      	adds	r1, #1
 8005d9a:	f7ff ff79 	bl	8005c90 <_Balloc>
 8005d9e:	4680      	mov	r8, r0
 8005da0:	b928      	cbnz	r0, 8005dae <__multadd+0x5a>
 8005da2:	4602      	mov	r2, r0
 8005da4:	21ba      	movs	r1, #186	; 0xba
 8005da6:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <__multadd+0x84>)
 8005da8:	480c      	ldr	r0, [pc, #48]	; (8005ddc <__multadd+0x88>)
 8005daa:	f000 fd89 	bl	80068c0 <__assert_func>
 8005dae:	6922      	ldr	r2, [r4, #16]
 8005db0:	f104 010c 	add.w	r1, r4, #12
 8005db4:	3202      	adds	r2, #2
 8005db6:	0092      	lsls	r2, r2, #2
 8005db8:	300c      	adds	r0, #12
 8005dba:	f000 fd73 	bl	80068a4 <memcpy>
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	4638      	mov	r0, r7
 8005dc2:	f7ff ffa5 	bl	8005d10 <_Bfree>
 8005dc6:	4644      	mov	r4, r8
 8005dc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005dcc:	3501      	adds	r5, #1
 8005dce:	615e      	str	r6, [r3, #20]
 8005dd0:	6125      	str	r5, [r4, #16]
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd8:	08006c96 	.word	0x08006c96
 8005ddc:	08006ca7 	.word	0x08006ca7

08005de0 <__hi0bits>:
 8005de0:	0c02      	lsrs	r2, r0, #16
 8005de2:	0412      	lsls	r2, r2, #16
 8005de4:	4603      	mov	r3, r0
 8005de6:	b9ca      	cbnz	r2, 8005e1c <__hi0bits+0x3c>
 8005de8:	0403      	lsls	r3, r0, #16
 8005dea:	2010      	movs	r0, #16
 8005dec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005df0:	bf04      	itt	eq
 8005df2:	021b      	lsleq	r3, r3, #8
 8005df4:	3008      	addeq	r0, #8
 8005df6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005dfa:	bf04      	itt	eq
 8005dfc:	011b      	lsleq	r3, r3, #4
 8005dfe:	3004      	addeq	r0, #4
 8005e00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e04:	bf04      	itt	eq
 8005e06:	009b      	lsleq	r3, r3, #2
 8005e08:	3002      	addeq	r0, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	db05      	blt.n	8005e1a <__hi0bits+0x3a>
 8005e0e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005e12:	f100 0001 	add.w	r0, r0, #1
 8005e16:	bf08      	it	eq
 8005e18:	2020      	moveq	r0, #32
 8005e1a:	4770      	bx	lr
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	e7e5      	b.n	8005dec <__hi0bits+0xc>

08005e20 <__lo0bits>:
 8005e20:	6803      	ldr	r3, [r0, #0]
 8005e22:	4602      	mov	r2, r0
 8005e24:	f013 0007 	ands.w	r0, r3, #7
 8005e28:	d00b      	beq.n	8005e42 <__lo0bits+0x22>
 8005e2a:	07d9      	lsls	r1, r3, #31
 8005e2c:	d421      	bmi.n	8005e72 <__lo0bits+0x52>
 8005e2e:	0798      	lsls	r0, r3, #30
 8005e30:	bf49      	itett	mi
 8005e32:	085b      	lsrmi	r3, r3, #1
 8005e34:	089b      	lsrpl	r3, r3, #2
 8005e36:	2001      	movmi	r0, #1
 8005e38:	6013      	strmi	r3, [r2, #0]
 8005e3a:	bf5c      	itt	pl
 8005e3c:	2002      	movpl	r0, #2
 8005e3e:	6013      	strpl	r3, [r2, #0]
 8005e40:	4770      	bx	lr
 8005e42:	b299      	uxth	r1, r3
 8005e44:	b909      	cbnz	r1, 8005e4a <__lo0bits+0x2a>
 8005e46:	2010      	movs	r0, #16
 8005e48:	0c1b      	lsrs	r3, r3, #16
 8005e4a:	b2d9      	uxtb	r1, r3
 8005e4c:	b909      	cbnz	r1, 8005e52 <__lo0bits+0x32>
 8005e4e:	3008      	adds	r0, #8
 8005e50:	0a1b      	lsrs	r3, r3, #8
 8005e52:	0719      	lsls	r1, r3, #28
 8005e54:	bf04      	itt	eq
 8005e56:	091b      	lsreq	r3, r3, #4
 8005e58:	3004      	addeq	r0, #4
 8005e5a:	0799      	lsls	r1, r3, #30
 8005e5c:	bf04      	itt	eq
 8005e5e:	089b      	lsreq	r3, r3, #2
 8005e60:	3002      	addeq	r0, #2
 8005e62:	07d9      	lsls	r1, r3, #31
 8005e64:	d403      	bmi.n	8005e6e <__lo0bits+0x4e>
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	f100 0001 	add.w	r0, r0, #1
 8005e6c:	d003      	beq.n	8005e76 <__lo0bits+0x56>
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	4770      	bx	lr
 8005e72:	2000      	movs	r0, #0
 8005e74:	4770      	bx	lr
 8005e76:	2020      	movs	r0, #32
 8005e78:	4770      	bx	lr
	...

08005e7c <__i2b>:
 8005e7c:	b510      	push	{r4, lr}
 8005e7e:	460c      	mov	r4, r1
 8005e80:	2101      	movs	r1, #1
 8005e82:	f7ff ff05 	bl	8005c90 <_Balloc>
 8005e86:	4602      	mov	r2, r0
 8005e88:	b928      	cbnz	r0, 8005e96 <__i2b+0x1a>
 8005e8a:	f240 1145 	movw	r1, #325	; 0x145
 8005e8e:	4b04      	ldr	r3, [pc, #16]	; (8005ea0 <__i2b+0x24>)
 8005e90:	4804      	ldr	r0, [pc, #16]	; (8005ea4 <__i2b+0x28>)
 8005e92:	f000 fd15 	bl	80068c0 <__assert_func>
 8005e96:	2301      	movs	r3, #1
 8005e98:	6144      	str	r4, [r0, #20]
 8005e9a:	6103      	str	r3, [r0, #16]
 8005e9c:	bd10      	pop	{r4, pc}
 8005e9e:	bf00      	nop
 8005ea0:	08006c96 	.word	0x08006c96
 8005ea4:	08006ca7 	.word	0x08006ca7

08005ea8 <__multiply>:
 8005ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	4691      	mov	r9, r2
 8005eae:	690a      	ldr	r2, [r1, #16]
 8005eb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	bfbe      	ittt	lt
 8005eba:	460b      	movlt	r3, r1
 8005ebc:	464c      	movlt	r4, r9
 8005ebe:	4699      	movlt	r9, r3
 8005ec0:	6927      	ldr	r7, [r4, #16]
 8005ec2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ec6:	68a3      	ldr	r3, [r4, #8]
 8005ec8:	6861      	ldr	r1, [r4, #4]
 8005eca:	eb07 060a 	add.w	r6, r7, sl
 8005ece:	42b3      	cmp	r3, r6
 8005ed0:	b085      	sub	sp, #20
 8005ed2:	bfb8      	it	lt
 8005ed4:	3101      	addlt	r1, #1
 8005ed6:	f7ff fedb 	bl	8005c90 <_Balloc>
 8005eda:	b930      	cbnz	r0, 8005eea <__multiply+0x42>
 8005edc:	4602      	mov	r2, r0
 8005ede:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005ee2:	4b43      	ldr	r3, [pc, #268]	; (8005ff0 <__multiply+0x148>)
 8005ee4:	4843      	ldr	r0, [pc, #268]	; (8005ff4 <__multiply+0x14c>)
 8005ee6:	f000 fceb 	bl	80068c0 <__assert_func>
 8005eea:	f100 0514 	add.w	r5, r0, #20
 8005eee:	462b      	mov	r3, r5
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ef6:	4543      	cmp	r3, r8
 8005ef8:	d321      	bcc.n	8005f3e <__multiply+0x96>
 8005efa:	f104 0314 	add.w	r3, r4, #20
 8005efe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f02:	f109 0314 	add.w	r3, r9, #20
 8005f06:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f0a:	9202      	str	r2, [sp, #8]
 8005f0c:	1b3a      	subs	r2, r7, r4
 8005f0e:	3a15      	subs	r2, #21
 8005f10:	f022 0203 	bic.w	r2, r2, #3
 8005f14:	3204      	adds	r2, #4
 8005f16:	f104 0115 	add.w	r1, r4, #21
 8005f1a:	428f      	cmp	r7, r1
 8005f1c:	bf38      	it	cc
 8005f1e:	2204      	movcc	r2, #4
 8005f20:	9201      	str	r2, [sp, #4]
 8005f22:	9a02      	ldr	r2, [sp, #8]
 8005f24:	9303      	str	r3, [sp, #12]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d80c      	bhi.n	8005f44 <__multiply+0x9c>
 8005f2a:	2e00      	cmp	r6, #0
 8005f2c:	dd03      	ble.n	8005f36 <__multiply+0x8e>
 8005f2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d05a      	beq.n	8005fec <__multiply+0x144>
 8005f36:	6106      	str	r6, [r0, #16]
 8005f38:	b005      	add	sp, #20
 8005f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f3e:	f843 2b04 	str.w	r2, [r3], #4
 8005f42:	e7d8      	b.n	8005ef6 <__multiply+0x4e>
 8005f44:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f48:	f1ba 0f00 	cmp.w	sl, #0
 8005f4c:	d023      	beq.n	8005f96 <__multiply+0xee>
 8005f4e:	46a9      	mov	r9, r5
 8005f50:	f04f 0c00 	mov.w	ip, #0
 8005f54:	f104 0e14 	add.w	lr, r4, #20
 8005f58:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f5c:	f8d9 1000 	ldr.w	r1, [r9]
 8005f60:	fa1f fb82 	uxth.w	fp, r2
 8005f64:	b289      	uxth	r1, r1
 8005f66:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f6a:	4461      	add	r1, ip
 8005f6c:	f8d9 c000 	ldr.w	ip, [r9]
 8005f70:	0c12      	lsrs	r2, r2, #16
 8005f72:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005f76:	fb0a c202 	mla	r2, sl, r2, ip
 8005f7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f7e:	b289      	uxth	r1, r1
 8005f80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f84:	4577      	cmp	r7, lr
 8005f86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f8a:	f849 1b04 	str.w	r1, [r9], #4
 8005f8e:	d8e3      	bhi.n	8005f58 <__multiply+0xb0>
 8005f90:	9a01      	ldr	r2, [sp, #4]
 8005f92:	f845 c002 	str.w	ip, [r5, r2]
 8005f96:	9a03      	ldr	r2, [sp, #12]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f9e:	f1b9 0f00 	cmp.w	r9, #0
 8005fa2:	d021      	beq.n	8005fe8 <__multiply+0x140>
 8005fa4:	46ae      	mov	lr, r5
 8005fa6:	f04f 0a00 	mov.w	sl, #0
 8005faa:	6829      	ldr	r1, [r5, #0]
 8005fac:	f104 0c14 	add.w	ip, r4, #20
 8005fb0:	f8bc b000 	ldrh.w	fp, [ip]
 8005fb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005fb8:	b289      	uxth	r1, r1
 8005fba:	fb09 220b 	mla	r2, r9, fp, r2
 8005fbe:	4452      	add	r2, sl
 8005fc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005fc4:	f84e 1b04 	str.w	r1, [lr], #4
 8005fc8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005fcc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005fd0:	f8be 1000 	ldrh.w	r1, [lr]
 8005fd4:	4567      	cmp	r7, ip
 8005fd6:	fb09 110a 	mla	r1, r9, sl, r1
 8005fda:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005fde:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005fe2:	d8e5      	bhi.n	8005fb0 <__multiply+0x108>
 8005fe4:	9a01      	ldr	r2, [sp, #4]
 8005fe6:	50a9      	str	r1, [r5, r2]
 8005fe8:	3504      	adds	r5, #4
 8005fea:	e79a      	b.n	8005f22 <__multiply+0x7a>
 8005fec:	3e01      	subs	r6, #1
 8005fee:	e79c      	b.n	8005f2a <__multiply+0x82>
 8005ff0:	08006c96 	.word	0x08006c96
 8005ff4:	08006ca7 	.word	0x08006ca7

08005ff8 <__pow5mult>:
 8005ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ffc:	4615      	mov	r5, r2
 8005ffe:	f012 0203 	ands.w	r2, r2, #3
 8006002:	4606      	mov	r6, r0
 8006004:	460f      	mov	r7, r1
 8006006:	d007      	beq.n	8006018 <__pow5mult+0x20>
 8006008:	4c25      	ldr	r4, [pc, #148]	; (80060a0 <__pow5mult+0xa8>)
 800600a:	3a01      	subs	r2, #1
 800600c:	2300      	movs	r3, #0
 800600e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006012:	f7ff fe9f 	bl	8005d54 <__multadd>
 8006016:	4607      	mov	r7, r0
 8006018:	10ad      	asrs	r5, r5, #2
 800601a:	d03d      	beq.n	8006098 <__pow5mult+0xa0>
 800601c:	69f4      	ldr	r4, [r6, #28]
 800601e:	b97c      	cbnz	r4, 8006040 <__pow5mult+0x48>
 8006020:	2010      	movs	r0, #16
 8006022:	f7ff fd81 	bl	8005b28 <malloc>
 8006026:	4602      	mov	r2, r0
 8006028:	61f0      	str	r0, [r6, #28]
 800602a:	b928      	cbnz	r0, 8006038 <__pow5mult+0x40>
 800602c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006030:	4b1c      	ldr	r3, [pc, #112]	; (80060a4 <__pow5mult+0xac>)
 8006032:	481d      	ldr	r0, [pc, #116]	; (80060a8 <__pow5mult+0xb0>)
 8006034:	f000 fc44 	bl	80068c0 <__assert_func>
 8006038:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800603c:	6004      	str	r4, [r0, #0]
 800603e:	60c4      	str	r4, [r0, #12]
 8006040:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006048:	b94c      	cbnz	r4, 800605e <__pow5mult+0x66>
 800604a:	f240 2171 	movw	r1, #625	; 0x271
 800604e:	4630      	mov	r0, r6
 8006050:	f7ff ff14 	bl	8005e7c <__i2b>
 8006054:	2300      	movs	r3, #0
 8006056:	4604      	mov	r4, r0
 8006058:	f8c8 0008 	str.w	r0, [r8, #8]
 800605c:	6003      	str	r3, [r0, #0]
 800605e:	f04f 0900 	mov.w	r9, #0
 8006062:	07eb      	lsls	r3, r5, #31
 8006064:	d50a      	bpl.n	800607c <__pow5mult+0x84>
 8006066:	4639      	mov	r1, r7
 8006068:	4622      	mov	r2, r4
 800606a:	4630      	mov	r0, r6
 800606c:	f7ff ff1c 	bl	8005ea8 <__multiply>
 8006070:	4680      	mov	r8, r0
 8006072:	4639      	mov	r1, r7
 8006074:	4630      	mov	r0, r6
 8006076:	f7ff fe4b 	bl	8005d10 <_Bfree>
 800607a:	4647      	mov	r7, r8
 800607c:	106d      	asrs	r5, r5, #1
 800607e:	d00b      	beq.n	8006098 <__pow5mult+0xa0>
 8006080:	6820      	ldr	r0, [r4, #0]
 8006082:	b938      	cbnz	r0, 8006094 <__pow5mult+0x9c>
 8006084:	4622      	mov	r2, r4
 8006086:	4621      	mov	r1, r4
 8006088:	4630      	mov	r0, r6
 800608a:	f7ff ff0d 	bl	8005ea8 <__multiply>
 800608e:	6020      	str	r0, [r4, #0]
 8006090:	f8c0 9000 	str.w	r9, [r0]
 8006094:	4604      	mov	r4, r0
 8006096:	e7e4      	b.n	8006062 <__pow5mult+0x6a>
 8006098:	4638      	mov	r0, r7
 800609a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800609e:	bf00      	nop
 80060a0:	08006df0 	.word	0x08006df0
 80060a4:	08006c27 	.word	0x08006c27
 80060a8:	08006ca7 	.word	0x08006ca7

080060ac <__lshift>:
 80060ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b0:	460c      	mov	r4, r1
 80060b2:	4607      	mov	r7, r0
 80060b4:	4691      	mov	r9, r2
 80060b6:	6923      	ldr	r3, [r4, #16]
 80060b8:	6849      	ldr	r1, [r1, #4]
 80060ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060be:	68a3      	ldr	r3, [r4, #8]
 80060c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060c4:	f108 0601 	add.w	r6, r8, #1
 80060c8:	42b3      	cmp	r3, r6
 80060ca:	db0b      	blt.n	80060e4 <__lshift+0x38>
 80060cc:	4638      	mov	r0, r7
 80060ce:	f7ff fddf 	bl	8005c90 <_Balloc>
 80060d2:	4605      	mov	r5, r0
 80060d4:	b948      	cbnz	r0, 80060ea <__lshift+0x3e>
 80060d6:	4602      	mov	r2, r0
 80060d8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80060dc:	4b27      	ldr	r3, [pc, #156]	; (800617c <__lshift+0xd0>)
 80060de:	4828      	ldr	r0, [pc, #160]	; (8006180 <__lshift+0xd4>)
 80060e0:	f000 fbee 	bl	80068c0 <__assert_func>
 80060e4:	3101      	adds	r1, #1
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	e7ee      	b.n	80060c8 <__lshift+0x1c>
 80060ea:	2300      	movs	r3, #0
 80060ec:	f100 0114 	add.w	r1, r0, #20
 80060f0:	f100 0210 	add.w	r2, r0, #16
 80060f4:	4618      	mov	r0, r3
 80060f6:	4553      	cmp	r3, sl
 80060f8:	db33      	blt.n	8006162 <__lshift+0xb6>
 80060fa:	6920      	ldr	r0, [r4, #16]
 80060fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006100:	f104 0314 	add.w	r3, r4, #20
 8006104:	f019 091f 	ands.w	r9, r9, #31
 8006108:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800610c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006110:	d02b      	beq.n	800616a <__lshift+0xbe>
 8006112:	468a      	mov	sl, r1
 8006114:	2200      	movs	r2, #0
 8006116:	f1c9 0e20 	rsb	lr, r9, #32
 800611a:	6818      	ldr	r0, [r3, #0]
 800611c:	fa00 f009 	lsl.w	r0, r0, r9
 8006120:	4310      	orrs	r0, r2
 8006122:	f84a 0b04 	str.w	r0, [sl], #4
 8006126:	f853 2b04 	ldr.w	r2, [r3], #4
 800612a:	459c      	cmp	ip, r3
 800612c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006130:	d8f3      	bhi.n	800611a <__lshift+0x6e>
 8006132:	ebac 0304 	sub.w	r3, ip, r4
 8006136:	3b15      	subs	r3, #21
 8006138:	f023 0303 	bic.w	r3, r3, #3
 800613c:	3304      	adds	r3, #4
 800613e:	f104 0015 	add.w	r0, r4, #21
 8006142:	4584      	cmp	ip, r0
 8006144:	bf38      	it	cc
 8006146:	2304      	movcc	r3, #4
 8006148:	50ca      	str	r2, [r1, r3]
 800614a:	b10a      	cbz	r2, 8006150 <__lshift+0xa4>
 800614c:	f108 0602 	add.w	r6, r8, #2
 8006150:	3e01      	subs	r6, #1
 8006152:	4638      	mov	r0, r7
 8006154:	4621      	mov	r1, r4
 8006156:	612e      	str	r6, [r5, #16]
 8006158:	f7ff fdda 	bl	8005d10 <_Bfree>
 800615c:	4628      	mov	r0, r5
 800615e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006162:	f842 0f04 	str.w	r0, [r2, #4]!
 8006166:	3301      	adds	r3, #1
 8006168:	e7c5      	b.n	80060f6 <__lshift+0x4a>
 800616a:	3904      	subs	r1, #4
 800616c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006170:	459c      	cmp	ip, r3
 8006172:	f841 2f04 	str.w	r2, [r1, #4]!
 8006176:	d8f9      	bhi.n	800616c <__lshift+0xc0>
 8006178:	e7ea      	b.n	8006150 <__lshift+0xa4>
 800617a:	bf00      	nop
 800617c:	08006c96 	.word	0x08006c96
 8006180:	08006ca7 	.word	0x08006ca7

08006184 <__mcmp>:
 8006184:	4603      	mov	r3, r0
 8006186:	690a      	ldr	r2, [r1, #16]
 8006188:	6900      	ldr	r0, [r0, #16]
 800618a:	b530      	push	{r4, r5, lr}
 800618c:	1a80      	subs	r0, r0, r2
 800618e:	d10d      	bne.n	80061ac <__mcmp+0x28>
 8006190:	3314      	adds	r3, #20
 8006192:	3114      	adds	r1, #20
 8006194:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006198:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800619c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061a4:	4295      	cmp	r5, r2
 80061a6:	d002      	beq.n	80061ae <__mcmp+0x2a>
 80061a8:	d304      	bcc.n	80061b4 <__mcmp+0x30>
 80061aa:	2001      	movs	r0, #1
 80061ac:	bd30      	pop	{r4, r5, pc}
 80061ae:	42a3      	cmp	r3, r4
 80061b0:	d3f4      	bcc.n	800619c <__mcmp+0x18>
 80061b2:	e7fb      	b.n	80061ac <__mcmp+0x28>
 80061b4:	f04f 30ff 	mov.w	r0, #4294967295
 80061b8:	e7f8      	b.n	80061ac <__mcmp+0x28>
	...

080061bc <__mdiff>:
 80061bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c0:	460d      	mov	r5, r1
 80061c2:	4607      	mov	r7, r0
 80061c4:	4611      	mov	r1, r2
 80061c6:	4628      	mov	r0, r5
 80061c8:	4614      	mov	r4, r2
 80061ca:	f7ff ffdb 	bl	8006184 <__mcmp>
 80061ce:	1e06      	subs	r6, r0, #0
 80061d0:	d111      	bne.n	80061f6 <__mdiff+0x3a>
 80061d2:	4631      	mov	r1, r6
 80061d4:	4638      	mov	r0, r7
 80061d6:	f7ff fd5b 	bl	8005c90 <_Balloc>
 80061da:	4602      	mov	r2, r0
 80061dc:	b928      	cbnz	r0, 80061ea <__mdiff+0x2e>
 80061de:	f240 2137 	movw	r1, #567	; 0x237
 80061e2:	4b3a      	ldr	r3, [pc, #232]	; (80062cc <__mdiff+0x110>)
 80061e4:	483a      	ldr	r0, [pc, #232]	; (80062d0 <__mdiff+0x114>)
 80061e6:	f000 fb6b 	bl	80068c0 <__assert_func>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80061f0:	4610      	mov	r0, r2
 80061f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f6:	bfa4      	itt	ge
 80061f8:	4623      	movge	r3, r4
 80061fa:	462c      	movge	r4, r5
 80061fc:	4638      	mov	r0, r7
 80061fe:	6861      	ldr	r1, [r4, #4]
 8006200:	bfa6      	itte	ge
 8006202:	461d      	movge	r5, r3
 8006204:	2600      	movge	r6, #0
 8006206:	2601      	movlt	r6, #1
 8006208:	f7ff fd42 	bl	8005c90 <_Balloc>
 800620c:	4602      	mov	r2, r0
 800620e:	b918      	cbnz	r0, 8006218 <__mdiff+0x5c>
 8006210:	f240 2145 	movw	r1, #581	; 0x245
 8006214:	4b2d      	ldr	r3, [pc, #180]	; (80062cc <__mdiff+0x110>)
 8006216:	e7e5      	b.n	80061e4 <__mdiff+0x28>
 8006218:	f102 0814 	add.w	r8, r2, #20
 800621c:	46c2      	mov	sl, r8
 800621e:	f04f 0c00 	mov.w	ip, #0
 8006222:	6927      	ldr	r7, [r4, #16]
 8006224:	60c6      	str	r6, [r0, #12]
 8006226:	692e      	ldr	r6, [r5, #16]
 8006228:	f104 0014 	add.w	r0, r4, #20
 800622c:	f105 0914 	add.w	r9, r5, #20
 8006230:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006234:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006238:	3410      	adds	r4, #16
 800623a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800623e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006242:	fa1f f18b 	uxth.w	r1, fp
 8006246:	4461      	add	r1, ip
 8006248:	fa1f fc83 	uxth.w	ip, r3
 800624c:	0c1b      	lsrs	r3, r3, #16
 800624e:	eba1 010c 	sub.w	r1, r1, ip
 8006252:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006256:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800625a:	b289      	uxth	r1, r1
 800625c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006260:	454e      	cmp	r6, r9
 8006262:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006266:	f84a 1b04 	str.w	r1, [sl], #4
 800626a:	d8e6      	bhi.n	800623a <__mdiff+0x7e>
 800626c:	1b73      	subs	r3, r6, r5
 800626e:	3b15      	subs	r3, #21
 8006270:	f023 0303 	bic.w	r3, r3, #3
 8006274:	3515      	adds	r5, #21
 8006276:	3304      	adds	r3, #4
 8006278:	42ae      	cmp	r6, r5
 800627a:	bf38      	it	cc
 800627c:	2304      	movcc	r3, #4
 800627e:	4418      	add	r0, r3
 8006280:	4443      	add	r3, r8
 8006282:	461e      	mov	r6, r3
 8006284:	4605      	mov	r5, r0
 8006286:	4575      	cmp	r5, lr
 8006288:	d30e      	bcc.n	80062a8 <__mdiff+0xec>
 800628a:	f10e 0103 	add.w	r1, lr, #3
 800628e:	1a09      	subs	r1, r1, r0
 8006290:	f021 0103 	bic.w	r1, r1, #3
 8006294:	3803      	subs	r0, #3
 8006296:	4586      	cmp	lr, r0
 8006298:	bf38      	it	cc
 800629a:	2100      	movcc	r1, #0
 800629c:	440b      	add	r3, r1
 800629e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80062a2:	b189      	cbz	r1, 80062c8 <__mdiff+0x10c>
 80062a4:	6117      	str	r7, [r2, #16]
 80062a6:	e7a3      	b.n	80061f0 <__mdiff+0x34>
 80062a8:	f855 8b04 	ldr.w	r8, [r5], #4
 80062ac:	fa1f f188 	uxth.w	r1, r8
 80062b0:	4461      	add	r1, ip
 80062b2:	140c      	asrs	r4, r1, #16
 80062b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80062b8:	b289      	uxth	r1, r1
 80062ba:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80062be:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80062c2:	f846 1b04 	str.w	r1, [r6], #4
 80062c6:	e7de      	b.n	8006286 <__mdiff+0xca>
 80062c8:	3f01      	subs	r7, #1
 80062ca:	e7e8      	b.n	800629e <__mdiff+0xe2>
 80062cc:	08006c96 	.word	0x08006c96
 80062d0:	08006ca7 	.word	0x08006ca7

080062d4 <__d2b>:
 80062d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062d6:	2101      	movs	r1, #1
 80062d8:	4617      	mov	r7, r2
 80062da:	461c      	mov	r4, r3
 80062dc:	9e08      	ldr	r6, [sp, #32]
 80062de:	f7ff fcd7 	bl	8005c90 <_Balloc>
 80062e2:	4605      	mov	r5, r0
 80062e4:	b930      	cbnz	r0, 80062f4 <__d2b+0x20>
 80062e6:	4602      	mov	r2, r0
 80062e8:	f240 310f 	movw	r1, #783	; 0x30f
 80062ec:	4b22      	ldr	r3, [pc, #136]	; (8006378 <__d2b+0xa4>)
 80062ee:	4823      	ldr	r0, [pc, #140]	; (800637c <__d2b+0xa8>)
 80062f0:	f000 fae6 	bl	80068c0 <__assert_func>
 80062f4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80062f8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80062fc:	bb24      	cbnz	r4, 8006348 <__d2b+0x74>
 80062fe:	2f00      	cmp	r7, #0
 8006300:	9301      	str	r3, [sp, #4]
 8006302:	d026      	beq.n	8006352 <__d2b+0x7e>
 8006304:	4668      	mov	r0, sp
 8006306:	9700      	str	r7, [sp, #0]
 8006308:	f7ff fd8a 	bl	8005e20 <__lo0bits>
 800630c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006310:	b1e8      	cbz	r0, 800634e <__d2b+0x7a>
 8006312:	f1c0 0320 	rsb	r3, r0, #32
 8006316:	fa02 f303 	lsl.w	r3, r2, r3
 800631a:	430b      	orrs	r3, r1
 800631c:	40c2      	lsrs	r2, r0
 800631e:	616b      	str	r3, [r5, #20]
 8006320:	9201      	str	r2, [sp, #4]
 8006322:	9b01      	ldr	r3, [sp, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	bf14      	ite	ne
 8006328:	2102      	movne	r1, #2
 800632a:	2101      	moveq	r1, #1
 800632c:	61ab      	str	r3, [r5, #24]
 800632e:	6129      	str	r1, [r5, #16]
 8006330:	b1bc      	cbz	r4, 8006362 <__d2b+0x8e>
 8006332:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006336:	4404      	add	r4, r0
 8006338:	6034      	str	r4, [r6, #0]
 800633a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800633e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006340:	6018      	str	r0, [r3, #0]
 8006342:	4628      	mov	r0, r5
 8006344:	b003      	add	sp, #12
 8006346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006348:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800634c:	e7d7      	b.n	80062fe <__d2b+0x2a>
 800634e:	6169      	str	r1, [r5, #20]
 8006350:	e7e7      	b.n	8006322 <__d2b+0x4e>
 8006352:	a801      	add	r0, sp, #4
 8006354:	f7ff fd64 	bl	8005e20 <__lo0bits>
 8006358:	9b01      	ldr	r3, [sp, #4]
 800635a:	2101      	movs	r1, #1
 800635c:	616b      	str	r3, [r5, #20]
 800635e:	3020      	adds	r0, #32
 8006360:	e7e5      	b.n	800632e <__d2b+0x5a>
 8006362:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006366:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800636a:	6030      	str	r0, [r6, #0]
 800636c:	6918      	ldr	r0, [r3, #16]
 800636e:	f7ff fd37 	bl	8005de0 <__hi0bits>
 8006372:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006376:	e7e2      	b.n	800633e <__d2b+0x6a>
 8006378:	08006c96 	.word	0x08006c96
 800637c:	08006ca7 	.word	0x08006ca7

08006380 <__sfputc_r>:
 8006380:	6893      	ldr	r3, [r2, #8]
 8006382:	b410      	push	{r4}
 8006384:	3b01      	subs	r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	6093      	str	r3, [r2, #8]
 800638a:	da07      	bge.n	800639c <__sfputc_r+0x1c>
 800638c:	6994      	ldr	r4, [r2, #24]
 800638e:	42a3      	cmp	r3, r4
 8006390:	db01      	blt.n	8006396 <__sfputc_r+0x16>
 8006392:	290a      	cmp	r1, #10
 8006394:	d102      	bne.n	800639c <__sfputc_r+0x1c>
 8006396:	bc10      	pop	{r4}
 8006398:	f000 b9de 	b.w	8006758 <__swbuf_r>
 800639c:	6813      	ldr	r3, [r2, #0]
 800639e:	1c58      	adds	r0, r3, #1
 80063a0:	6010      	str	r0, [r2, #0]
 80063a2:	7019      	strb	r1, [r3, #0]
 80063a4:	4608      	mov	r0, r1
 80063a6:	bc10      	pop	{r4}
 80063a8:	4770      	bx	lr

080063aa <__sfputs_r>:
 80063aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ac:	4606      	mov	r6, r0
 80063ae:	460f      	mov	r7, r1
 80063b0:	4614      	mov	r4, r2
 80063b2:	18d5      	adds	r5, r2, r3
 80063b4:	42ac      	cmp	r4, r5
 80063b6:	d101      	bne.n	80063bc <__sfputs_r+0x12>
 80063b8:	2000      	movs	r0, #0
 80063ba:	e007      	b.n	80063cc <__sfputs_r+0x22>
 80063bc:	463a      	mov	r2, r7
 80063be:	4630      	mov	r0, r6
 80063c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063c4:	f7ff ffdc 	bl	8006380 <__sfputc_r>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d1f3      	bne.n	80063b4 <__sfputs_r+0xa>
 80063cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063d0 <_vfiprintf_r>:
 80063d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	460d      	mov	r5, r1
 80063d6:	4614      	mov	r4, r2
 80063d8:	4698      	mov	r8, r3
 80063da:	4606      	mov	r6, r0
 80063dc:	b09d      	sub	sp, #116	; 0x74
 80063de:	b118      	cbz	r0, 80063e8 <_vfiprintf_r+0x18>
 80063e0:	6a03      	ldr	r3, [r0, #32]
 80063e2:	b90b      	cbnz	r3, 80063e8 <_vfiprintf_r+0x18>
 80063e4:	f7fe fbd2 	bl	8004b8c <__sinit>
 80063e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063ea:	07d9      	lsls	r1, r3, #31
 80063ec:	d405      	bmi.n	80063fa <_vfiprintf_r+0x2a>
 80063ee:	89ab      	ldrh	r3, [r5, #12]
 80063f0:	059a      	lsls	r2, r3, #22
 80063f2:	d402      	bmi.n	80063fa <_vfiprintf_r+0x2a>
 80063f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063f6:	f7fe fcd1 	bl	8004d9c <__retarget_lock_acquire_recursive>
 80063fa:	89ab      	ldrh	r3, [r5, #12]
 80063fc:	071b      	lsls	r3, r3, #28
 80063fe:	d501      	bpl.n	8006404 <_vfiprintf_r+0x34>
 8006400:	692b      	ldr	r3, [r5, #16]
 8006402:	b99b      	cbnz	r3, 800642c <_vfiprintf_r+0x5c>
 8006404:	4629      	mov	r1, r5
 8006406:	4630      	mov	r0, r6
 8006408:	f000 f9e4 	bl	80067d4 <__swsetup_r>
 800640c:	b170      	cbz	r0, 800642c <_vfiprintf_r+0x5c>
 800640e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006410:	07dc      	lsls	r4, r3, #31
 8006412:	d504      	bpl.n	800641e <_vfiprintf_r+0x4e>
 8006414:	f04f 30ff 	mov.w	r0, #4294967295
 8006418:	b01d      	add	sp, #116	; 0x74
 800641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641e:	89ab      	ldrh	r3, [r5, #12]
 8006420:	0598      	lsls	r0, r3, #22
 8006422:	d4f7      	bmi.n	8006414 <_vfiprintf_r+0x44>
 8006424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006426:	f7fe fcba 	bl	8004d9e <__retarget_lock_release_recursive>
 800642a:	e7f3      	b.n	8006414 <_vfiprintf_r+0x44>
 800642c:	2300      	movs	r3, #0
 800642e:	9309      	str	r3, [sp, #36]	; 0x24
 8006430:	2320      	movs	r3, #32
 8006432:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006436:	2330      	movs	r3, #48	; 0x30
 8006438:	f04f 0901 	mov.w	r9, #1
 800643c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006440:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80065f0 <_vfiprintf_r+0x220>
 8006444:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006448:	4623      	mov	r3, r4
 800644a:	469a      	mov	sl, r3
 800644c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006450:	b10a      	cbz	r2, 8006456 <_vfiprintf_r+0x86>
 8006452:	2a25      	cmp	r2, #37	; 0x25
 8006454:	d1f9      	bne.n	800644a <_vfiprintf_r+0x7a>
 8006456:	ebba 0b04 	subs.w	fp, sl, r4
 800645a:	d00b      	beq.n	8006474 <_vfiprintf_r+0xa4>
 800645c:	465b      	mov	r3, fp
 800645e:	4622      	mov	r2, r4
 8006460:	4629      	mov	r1, r5
 8006462:	4630      	mov	r0, r6
 8006464:	f7ff ffa1 	bl	80063aa <__sfputs_r>
 8006468:	3001      	adds	r0, #1
 800646a:	f000 80a9 	beq.w	80065c0 <_vfiprintf_r+0x1f0>
 800646e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006470:	445a      	add	r2, fp
 8006472:	9209      	str	r2, [sp, #36]	; 0x24
 8006474:	f89a 3000 	ldrb.w	r3, [sl]
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 80a1 	beq.w	80065c0 <_vfiprintf_r+0x1f0>
 800647e:	2300      	movs	r3, #0
 8006480:	f04f 32ff 	mov.w	r2, #4294967295
 8006484:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006488:	f10a 0a01 	add.w	sl, sl, #1
 800648c:	9304      	str	r3, [sp, #16]
 800648e:	9307      	str	r3, [sp, #28]
 8006490:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006494:	931a      	str	r3, [sp, #104]	; 0x68
 8006496:	4654      	mov	r4, sl
 8006498:	2205      	movs	r2, #5
 800649a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800649e:	4854      	ldr	r0, [pc, #336]	; (80065f0 <_vfiprintf_r+0x220>)
 80064a0:	f7fe fc7e 	bl	8004da0 <memchr>
 80064a4:	9a04      	ldr	r2, [sp, #16]
 80064a6:	b9d8      	cbnz	r0, 80064e0 <_vfiprintf_r+0x110>
 80064a8:	06d1      	lsls	r1, r2, #27
 80064aa:	bf44      	itt	mi
 80064ac:	2320      	movmi	r3, #32
 80064ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064b2:	0713      	lsls	r3, r2, #28
 80064b4:	bf44      	itt	mi
 80064b6:	232b      	movmi	r3, #43	; 0x2b
 80064b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064bc:	f89a 3000 	ldrb.w	r3, [sl]
 80064c0:	2b2a      	cmp	r3, #42	; 0x2a
 80064c2:	d015      	beq.n	80064f0 <_vfiprintf_r+0x120>
 80064c4:	4654      	mov	r4, sl
 80064c6:	2000      	movs	r0, #0
 80064c8:	f04f 0c0a 	mov.w	ip, #10
 80064cc:	9a07      	ldr	r2, [sp, #28]
 80064ce:	4621      	mov	r1, r4
 80064d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064d4:	3b30      	subs	r3, #48	; 0x30
 80064d6:	2b09      	cmp	r3, #9
 80064d8:	d94d      	bls.n	8006576 <_vfiprintf_r+0x1a6>
 80064da:	b1b0      	cbz	r0, 800650a <_vfiprintf_r+0x13a>
 80064dc:	9207      	str	r2, [sp, #28]
 80064de:	e014      	b.n	800650a <_vfiprintf_r+0x13a>
 80064e0:	eba0 0308 	sub.w	r3, r0, r8
 80064e4:	fa09 f303 	lsl.w	r3, r9, r3
 80064e8:	4313      	orrs	r3, r2
 80064ea:	46a2      	mov	sl, r4
 80064ec:	9304      	str	r3, [sp, #16]
 80064ee:	e7d2      	b.n	8006496 <_vfiprintf_r+0xc6>
 80064f0:	9b03      	ldr	r3, [sp, #12]
 80064f2:	1d19      	adds	r1, r3, #4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	9103      	str	r1, [sp, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	bfbb      	ittet	lt
 80064fc:	425b      	neglt	r3, r3
 80064fe:	f042 0202 	orrlt.w	r2, r2, #2
 8006502:	9307      	strge	r3, [sp, #28]
 8006504:	9307      	strlt	r3, [sp, #28]
 8006506:	bfb8      	it	lt
 8006508:	9204      	strlt	r2, [sp, #16]
 800650a:	7823      	ldrb	r3, [r4, #0]
 800650c:	2b2e      	cmp	r3, #46	; 0x2e
 800650e:	d10c      	bne.n	800652a <_vfiprintf_r+0x15a>
 8006510:	7863      	ldrb	r3, [r4, #1]
 8006512:	2b2a      	cmp	r3, #42	; 0x2a
 8006514:	d134      	bne.n	8006580 <_vfiprintf_r+0x1b0>
 8006516:	9b03      	ldr	r3, [sp, #12]
 8006518:	3402      	adds	r4, #2
 800651a:	1d1a      	adds	r2, r3, #4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	9203      	str	r2, [sp, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	bfb8      	it	lt
 8006524:	f04f 33ff 	movlt.w	r3, #4294967295
 8006528:	9305      	str	r3, [sp, #20]
 800652a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80065f4 <_vfiprintf_r+0x224>
 800652e:	2203      	movs	r2, #3
 8006530:	4650      	mov	r0, sl
 8006532:	7821      	ldrb	r1, [r4, #0]
 8006534:	f7fe fc34 	bl	8004da0 <memchr>
 8006538:	b138      	cbz	r0, 800654a <_vfiprintf_r+0x17a>
 800653a:	2240      	movs	r2, #64	; 0x40
 800653c:	9b04      	ldr	r3, [sp, #16]
 800653e:	eba0 000a 	sub.w	r0, r0, sl
 8006542:	4082      	lsls	r2, r0
 8006544:	4313      	orrs	r3, r2
 8006546:	3401      	adds	r4, #1
 8006548:	9304      	str	r3, [sp, #16]
 800654a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800654e:	2206      	movs	r2, #6
 8006550:	4829      	ldr	r0, [pc, #164]	; (80065f8 <_vfiprintf_r+0x228>)
 8006552:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006556:	f7fe fc23 	bl	8004da0 <memchr>
 800655a:	2800      	cmp	r0, #0
 800655c:	d03f      	beq.n	80065de <_vfiprintf_r+0x20e>
 800655e:	4b27      	ldr	r3, [pc, #156]	; (80065fc <_vfiprintf_r+0x22c>)
 8006560:	bb1b      	cbnz	r3, 80065aa <_vfiprintf_r+0x1da>
 8006562:	9b03      	ldr	r3, [sp, #12]
 8006564:	3307      	adds	r3, #7
 8006566:	f023 0307 	bic.w	r3, r3, #7
 800656a:	3308      	adds	r3, #8
 800656c:	9303      	str	r3, [sp, #12]
 800656e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006570:	443b      	add	r3, r7
 8006572:	9309      	str	r3, [sp, #36]	; 0x24
 8006574:	e768      	b.n	8006448 <_vfiprintf_r+0x78>
 8006576:	460c      	mov	r4, r1
 8006578:	2001      	movs	r0, #1
 800657a:	fb0c 3202 	mla	r2, ip, r2, r3
 800657e:	e7a6      	b.n	80064ce <_vfiprintf_r+0xfe>
 8006580:	2300      	movs	r3, #0
 8006582:	f04f 0c0a 	mov.w	ip, #10
 8006586:	4619      	mov	r1, r3
 8006588:	3401      	adds	r4, #1
 800658a:	9305      	str	r3, [sp, #20]
 800658c:	4620      	mov	r0, r4
 800658e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006592:	3a30      	subs	r2, #48	; 0x30
 8006594:	2a09      	cmp	r2, #9
 8006596:	d903      	bls.n	80065a0 <_vfiprintf_r+0x1d0>
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0c6      	beq.n	800652a <_vfiprintf_r+0x15a>
 800659c:	9105      	str	r1, [sp, #20]
 800659e:	e7c4      	b.n	800652a <_vfiprintf_r+0x15a>
 80065a0:	4604      	mov	r4, r0
 80065a2:	2301      	movs	r3, #1
 80065a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80065a8:	e7f0      	b.n	800658c <_vfiprintf_r+0x1bc>
 80065aa:	ab03      	add	r3, sp, #12
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	462a      	mov	r2, r5
 80065b0:	4630      	mov	r0, r6
 80065b2:	4b13      	ldr	r3, [pc, #76]	; (8006600 <_vfiprintf_r+0x230>)
 80065b4:	a904      	add	r1, sp, #16
 80065b6:	f7fd fead 	bl	8004314 <_printf_float>
 80065ba:	4607      	mov	r7, r0
 80065bc:	1c78      	adds	r0, r7, #1
 80065be:	d1d6      	bne.n	800656e <_vfiprintf_r+0x19e>
 80065c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065c2:	07d9      	lsls	r1, r3, #31
 80065c4:	d405      	bmi.n	80065d2 <_vfiprintf_r+0x202>
 80065c6:	89ab      	ldrh	r3, [r5, #12]
 80065c8:	059a      	lsls	r2, r3, #22
 80065ca:	d402      	bmi.n	80065d2 <_vfiprintf_r+0x202>
 80065cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065ce:	f7fe fbe6 	bl	8004d9e <__retarget_lock_release_recursive>
 80065d2:	89ab      	ldrh	r3, [r5, #12]
 80065d4:	065b      	lsls	r3, r3, #25
 80065d6:	f53f af1d 	bmi.w	8006414 <_vfiprintf_r+0x44>
 80065da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065dc:	e71c      	b.n	8006418 <_vfiprintf_r+0x48>
 80065de:	ab03      	add	r3, sp, #12
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	462a      	mov	r2, r5
 80065e4:	4630      	mov	r0, r6
 80065e6:	4b06      	ldr	r3, [pc, #24]	; (8006600 <_vfiprintf_r+0x230>)
 80065e8:	a904      	add	r1, sp, #16
 80065ea:	f7fe f933 	bl	8004854 <_printf_i>
 80065ee:	e7e4      	b.n	80065ba <_vfiprintf_r+0x1ea>
 80065f0:	08006dfc 	.word	0x08006dfc
 80065f4:	08006e02 	.word	0x08006e02
 80065f8:	08006e06 	.word	0x08006e06
 80065fc:	08004315 	.word	0x08004315
 8006600:	080063ab 	.word	0x080063ab

08006604 <__sflush_r>:
 8006604:	898a      	ldrh	r2, [r1, #12]
 8006606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006608:	4605      	mov	r5, r0
 800660a:	0710      	lsls	r0, r2, #28
 800660c:	460c      	mov	r4, r1
 800660e:	d457      	bmi.n	80066c0 <__sflush_r+0xbc>
 8006610:	684b      	ldr	r3, [r1, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	dc04      	bgt.n	8006620 <__sflush_r+0x1c>
 8006616:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006618:	2b00      	cmp	r3, #0
 800661a:	dc01      	bgt.n	8006620 <__sflush_r+0x1c>
 800661c:	2000      	movs	r0, #0
 800661e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006622:	2e00      	cmp	r6, #0
 8006624:	d0fa      	beq.n	800661c <__sflush_r+0x18>
 8006626:	2300      	movs	r3, #0
 8006628:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800662c:	682f      	ldr	r7, [r5, #0]
 800662e:	6a21      	ldr	r1, [r4, #32]
 8006630:	602b      	str	r3, [r5, #0]
 8006632:	d032      	beq.n	800669a <__sflush_r+0x96>
 8006634:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	075a      	lsls	r2, r3, #29
 800663a:	d505      	bpl.n	8006648 <__sflush_r+0x44>
 800663c:	6863      	ldr	r3, [r4, #4]
 800663e:	1ac0      	subs	r0, r0, r3
 8006640:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006642:	b10b      	cbz	r3, 8006648 <__sflush_r+0x44>
 8006644:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006646:	1ac0      	subs	r0, r0, r3
 8006648:	2300      	movs	r3, #0
 800664a:	4602      	mov	r2, r0
 800664c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800664e:	4628      	mov	r0, r5
 8006650:	6a21      	ldr	r1, [r4, #32]
 8006652:	47b0      	blx	r6
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	89a3      	ldrh	r3, [r4, #12]
 8006658:	d106      	bne.n	8006668 <__sflush_r+0x64>
 800665a:	6829      	ldr	r1, [r5, #0]
 800665c:	291d      	cmp	r1, #29
 800665e:	d82b      	bhi.n	80066b8 <__sflush_r+0xb4>
 8006660:	4a28      	ldr	r2, [pc, #160]	; (8006704 <__sflush_r+0x100>)
 8006662:	410a      	asrs	r2, r1
 8006664:	07d6      	lsls	r6, r2, #31
 8006666:	d427      	bmi.n	80066b8 <__sflush_r+0xb4>
 8006668:	2200      	movs	r2, #0
 800666a:	6062      	str	r2, [r4, #4]
 800666c:	6922      	ldr	r2, [r4, #16]
 800666e:	04d9      	lsls	r1, r3, #19
 8006670:	6022      	str	r2, [r4, #0]
 8006672:	d504      	bpl.n	800667e <__sflush_r+0x7a>
 8006674:	1c42      	adds	r2, r0, #1
 8006676:	d101      	bne.n	800667c <__sflush_r+0x78>
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	b903      	cbnz	r3, 800667e <__sflush_r+0x7a>
 800667c:	6560      	str	r0, [r4, #84]	; 0x54
 800667e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006680:	602f      	str	r7, [r5, #0]
 8006682:	2900      	cmp	r1, #0
 8006684:	d0ca      	beq.n	800661c <__sflush_r+0x18>
 8006686:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800668a:	4299      	cmp	r1, r3
 800668c:	d002      	beq.n	8006694 <__sflush_r+0x90>
 800668e:	4628      	mov	r0, r5
 8006690:	f7ff fa02 	bl	8005a98 <_free_r>
 8006694:	2000      	movs	r0, #0
 8006696:	6360      	str	r0, [r4, #52]	; 0x34
 8006698:	e7c1      	b.n	800661e <__sflush_r+0x1a>
 800669a:	2301      	movs	r3, #1
 800669c:	4628      	mov	r0, r5
 800669e:	47b0      	blx	r6
 80066a0:	1c41      	adds	r1, r0, #1
 80066a2:	d1c8      	bne.n	8006636 <__sflush_r+0x32>
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0c5      	beq.n	8006636 <__sflush_r+0x32>
 80066aa:	2b1d      	cmp	r3, #29
 80066ac:	d001      	beq.n	80066b2 <__sflush_r+0xae>
 80066ae:	2b16      	cmp	r3, #22
 80066b0:	d101      	bne.n	80066b6 <__sflush_r+0xb2>
 80066b2:	602f      	str	r7, [r5, #0]
 80066b4:	e7b2      	b.n	800661c <__sflush_r+0x18>
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066bc:	81a3      	strh	r3, [r4, #12]
 80066be:	e7ae      	b.n	800661e <__sflush_r+0x1a>
 80066c0:	690f      	ldr	r7, [r1, #16]
 80066c2:	2f00      	cmp	r7, #0
 80066c4:	d0aa      	beq.n	800661c <__sflush_r+0x18>
 80066c6:	0793      	lsls	r3, r2, #30
 80066c8:	bf18      	it	ne
 80066ca:	2300      	movne	r3, #0
 80066cc:	680e      	ldr	r6, [r1, #0]
 80066ce:	bf08      	it	eq
 80066d0:	694b      	ldreq	r3, [r1, #20]
 80066d2:	1bf6      	subs	r6, r6, r7
 80066d4:	600f      	str	r7, [r1, #0]
 80066d6:	608b      	str	r3, [r1, #8]
 80066d8:	2e00      	cmp	r6, #0
 80066da:	dd9f      	ble.n	800661c <__sflush_r+0x18>
 80066dc:	4633      	mov	r3, r6
 80066de:	463a      	mov	r2, r7
 80066e0:	4628      	mov	r0, r5
 80066e2:	6a21      	ldr	r1, [r4, #32]
 80066e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80066e8:	47e0      	blx	ip
 80066ea:	2800      	cmp	r0, #0
 80066ec:	dc06      	bgt.n	80066fc <__sflush_r+0xf8>
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	f04f 30ff 	mov.w	r0, #4294967295
 80066f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066f8:	81a3      	strh	r3, [r4, #12]
 80066fa:	e790      	b.n	800661e <__sflush_r+0x1a>
 80066fc:	4407      	add	r7, r0
 80066fe:	1a36      	subs	r6, r6, r0
 8006700:	e7ea      	b.n	80066d8 <__sflush_r+0xd4>
 8006702:	bf00      	nop
 8006704:	dfbffffe 	.word	0xdfbffffe

08006708 <_fflush_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	690b      	ldr	r3, [r1, #16]
 800670c:	4605      	mov	r5, r0
 800670e:	460c      	mov	r4, r1
 8006710:	b913      	cbnz	r3, 8006718 <_fflush_r+0x10>
 8006712:	2500      	movs	r5, #0
 8006714:	4628      	mov	r0, r5
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	b118      	cbz	r0, 8006722 <_fflush_r+0x1a>
 800671a:	6a03      	ldr	r3, [r0, #32]
 800671c:	b90b      	cbnz	r3, 8006722 <_fflush_r+0x1a>
 800671e:	f7fe fa35 	bl	8004b8c <__sinit>
 8006722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0f3      	beq.n	8006712 <_fflush_r+0xa>
 800672a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800672c:	07d0      	lsls	r0, r2, #31
 800672e:	d404      	bmi.n	800673a <_fflush_r+0x32>
 8006730:	0599      	lsls	r1, r3, #22
 8006732:	d402      	bmi.n	800673a <_fflush_r+0x32>
 8006734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006736:	f7fe fb31 	bl	8004d9c <__retarget_lock_acquire_recursive>
 800673a:	4628      	mov	r0, r5
 800673c:	4621      	mov	r1, r4
 800673e:	f7ff ff61 	bl	8006604 <__sflush_r>
 8006742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006744:	4605      	mov	r5, r0
 8006746:	07da      	lsls	r2, r3, #31
 8006748:	d4e4      	bmi.n	8006714 <_fflush_r+0xc>
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	059b      	lsls	r3, r3, #22
 800674e:	d4e1      	bmi.n	8006714 <_fflush_r+0xc>
 8006750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006752:	f7fe fb24 	bl	8004d9e <__retarget_lock_release_recursive>
 8006756:	e7dd      	b.n	8006714 <_fflush_r+0xc>

08006758 <__swbuf_r>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	460e      	mov	r6, r1
 800675c:	4614      	mov	r4, r2
 800675e:	4605      	mov	r5, r0
 8006760:	b118      	cbz	r0, 800676a <__swbuf_r+0x12>
 8006762:	6a03      	ldr	r3, [r0, #32]
 8006764:	b90b      	cbnz	r3, 800676a <__swbuf_r+0x12>
 8006766:	f7fe fa11 	bl	8004b8c <__sinit>
 800676a:	69a3      	ldr	r3, [r4, #24]
 800676c:	60a3      	str	r3, [r4, #8]
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	071a      	lsls	r2, r3, #28
 8006772:	d525      	bpl.n	80067c0 <__swbuf_r+0x68>
 8006774:	6923      	ldr	r3, [r4, #16]
 8006776:	b31b      	cbz	r3, 80067c0 <__swbuf_r+0x68>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	6922      	ldr	r2, [r4, #16]
 800677c:	b2f6      	uxtb	r6, r6
 800677e:	1a98      	subs	r0, r3, r2
 8006780:	6963      	ldr	r3, [r4, #20]
 8006782:	4637      	mov	r7, r6
 8006784:	4283      	cmp	r3, r0
 8006786:	dc04      	bgt.n	8006792 <__swbuf_r+0x3a>
 8006788:	4621      	mov	r1, r4
 800678a:	4628      	mov	r0, r5
 800678c:	f7ff ffbc 	bl	8006708 <_fflush_r>
 8006790:	b9e0      	cbnz	r0, 80067cc <__swbuf_r+0x74>
 8006792:	68a3      	ldr	r3, [r4, #8]
 8006794:	3b01      	subs	r3, #1
 8006796:	60a3      	str	r3, [r4, #8]
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	6022      	str	r2, [r4, #0]
 800679e:	701e      	strb	r6, [r3, #0]
 80067a0:	6962      	ldr	r2, [r4, #20]
 80067a2:	1c43      	adds	r3, r0, #1
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d004      	beq.n	80067b2 <__swbuf_r+0x5a>
 80067a8:	89a3      	ldrh	r3, [r4, #12]
 80067aa:	07db      	lsls	r3, r3, #31
 80067ac:	d506      	bpl.n	80067bc <__swbuf_r+0x64>
 80067ae:	2e0a      	cmp	r6, #10
 80067b0:	d104      	bne.n	80067bc <__swbuf_r+0x64>
 80067b2:	4621      	mov	r1, r4
 80067b4:	4628      	mov	r0, r5
 80067b6:	f7ff ffa7 	bl	8006708 <_fflush_r>
 80067ba:	b938      	cbnz	r0, 80067cc <__swbuf_r+0x74>
 80067bc:	4638      	mov	r0, r7
 80067be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067c0:	4621      	mov	r1, r4
 80067c2:	4628      	mov	r0, r5
 80067c4:	f000 f806 	bl	80067d4 <__swsetup_r>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d0d5      	beq.n	8006778 <__swbuf_r+0x20>
 80067cc:	f04f 37ff 	mov.w	r7, #4294967295
 80067d0:	e7f4      	b.n	80067bc <__swbuf_r+0x64>
	...

080067d4 <__swsetup_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	4b2a      	ldr	r3, [pc, #168]	; (8006880 <__swsetup_r+0xac>)
 80067d8:	4605      	mov	r5, r0
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	460c      	mov	r4, r1
 80067de:	b118      	cbz	r0, 80067e8 <__swsetup_r+0x14>
 80067e0:	6a03      	ldr	r3, [r0, #32]
 80067e2:	b90b      	cbnz	r3, 80067e8 <__swsetup_r+0x14>
 80067e4:	f7fe f9d2 	bl	8004b8c <__sinit>
 80067e8:	89a3      	ldrh	r3, [r4, #12]
 80067ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067ee:	0718      	lsls	r0, r3, #28
 80067f0:	d422      	bmi.n	8006838 <__swsetup_r+0x64>
 80067f2:	06d9      	lsls	r1, r3, #27
 80067f4:	d407      	bmi.n	8006806 <__swsetup_r+0x32>
 80067f6:	2309      	movs	r3, #9
 80067f8:	602b      	str	r3, [r5, #0]
 80067fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006802:	81a3      	strh	r3, [r4, #12]
 8006804:	e034      	b.n	8006870 <__swsetup_r+0x9c>
 8006806:	0758      	lsls	r0, r3, #29
 8006808:	d512      	bpl.n	8006830 <__swsetup_r+0x5c>
 800680a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800680c:	b141      	cbz	r1, 8006820 <__swsetup_r+0x4c>
 800680e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006812:	4299      	cmp	r1, r3
 8006814:	d002      	beq.n	800681c <__swsetup_r+0x48>
 8006816:	4628      	mov	r0, r5
 8006818:	f7ff f93e 	bl	8005a98 <_free_r>
 800681c:	2300      	movs	r3, #0
 800681e:	6363      	str	r3, [r4, #52]	; 0x34
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006826:	81a3      	strh	r3, [r4, #12]
 8006828:	2300      	movs	r3, #0
 800682a:	6063      	str	r3, [r4, #4]
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	6023      	str	r3, [r4, #0]
 8006830:	89a3      	ldrh	r3, [r4, #12]
 8006832:	f043 0308 	orr.w	r3, r3, #8
 8006836:	81a3      	strh	r3, [r4, #12]
 8006838:	6923      	ldr	r3, [r4, #16]
 800683a:	b94b      	cbnz	r3, 8006850 <__swsetup_r+0x7c>
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006846:	d003      	beq.n	8006850 <__swsetup_r+0x7c>
 8006848:	4621      	mov	r1, r4
 800684a:	4628      	mov	r0, r5
 800684c:	f000 f8c1 	bl	80069d2 <__smakebuf_r>
 8006850:	89a0      	ldrh	r0, [r4, #12]
 8006852:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006856:	f010 0301 	ands.w	r3, r0, #1
 800685a:	d00a      	beq.n	8006872 <__swsetup_r+0x9e>
 800685c:	2300      	movs	r3, #0
 800685e:	60a3      	str	r3, [r4, #8]
 8006860:	6963      	ldr	r3, [r4, #20]
 8006862:	425b      	negs	r3, r3
 8006864:	61a3      	str	r3, [r4, #24]
 8006866:	6923      	ldr	r3, [r4, #16]
 8006868:	b943      	cbnz	r3, 800687c <__swsetup_r+0xa8>
 800686a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800686e:	d1c4      	bne.n	80067fa <__swsetup_r+0x26>
 8006870:	bd38      	pop	{r3, r4, r5, pc}
 8006872:	0781      	lsls	r1, r0, #30
 8006874:	bf58      	it	pl
 8006876:	6963      	ldrpl	r3, [r4, #20]
 8006878:	60a3      	str	r3, [r4, #8]
 800687a:	e7f4      	b.n	8006866 <__swsetup_r+0x92>
 800687c:	2000      	movs	r0, #0
 800687e:	e7f7      	b.n	8006870 <__swsetup_r+0x9c>
 8006880:	20000064 	.word	0x20000064

08006884 <_sbrk_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	2300      	movs	r3, #0
 8006888:	4d05      	ldr	r5, [pc, #20]	; (80068a0 <_sbrk_r+0x1c>)
 800688a:	4604      	mov	r4, r0
 800688c:	4608      	mov	r0, r1
 800688e:	602b      	str	r3, [r5, #0]
 8006890:	f7fa ffc0 	bl	8001814 <_sbrk>
 8006894:	1c43      	adds	r3, r0, #1
 8006896:	d102      	bne.n	800689e <_sbrk_r+0x1a>
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	b103      	cbz	r3, 800689e <_sbrk_r+0x1a>
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	bd38      	pop	{r3, r4, r5, pc}
 80068a0:	20000528 	.word	0x20000528

080068a4 <memcpy>:
 80068a4:	440a      	add	r2, r1
 80068a6:	4291      	cmp	r1, r2
 80068a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80068ac:	d100      	bne.n	80068b0 <memcpy+0xc>
 80068ae:	4770      	bx	lr
 80068b0:	b510      	push	{r4, lr}
 80068b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068b6:	4291      	cmp	r1, r2
 80068b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068bc:	d1f9      	bne.n	80068b2 <memcpy+0xe>
 80068be:	bd10      	pop	{r4, pc}

080068c0 <__assert_func>:
 80068c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068c2:	4614      	mov	r4, r2
 80068c4:	461a      	mov	r2, r3
 80068c6:	4b09      	ldr	r3, [pc, #36]	; (80068ec <__assert_func+0x2c>)
 80068c8:	4605      	mov	r5, r0
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68d8      	ldr	r0, [r3, #12]
 80068ce:	b14c      	cbz	r4, 80068e4 <__assert_func+0x24>
 80068d0:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <__assert_func+0x30>)
 80068d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068d6:	9100      	str	r1, [sp, #0]
 80068d8:	462b      	mov	r3, r5
 80068da:	4906      	ldr	r1, [pc, #24]	; (80068f4 <__assert_func+0x34>)
 80068dc:	f000 f842 	bl	8006964 <fiprintf>
 80068e0:	f000 f8d6 	bl	8006a90 <abort>
 80068e4:	4b04      	ldr	r3, [pc, #16]	; (80068f8 <__assert_func+0x38>)
 80068e6:	461c      	mov	r4, r3
 80068e8:	e7f3      	b.n	80068d2 <__assert_func+0x12>
 80068ea:	bf00      	nop
 80068ec:	20000064 	.word	0x20000064
 80068f0:	08006e17 	.word	0x08006e17
 80068f4:	08006e24 	.word	0x08006e24
 80068f8:	08006e52 	.word	0x08006e52

080068fc <_calloc_r>:
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	fba1 5402 	umull	r5, r4, r1, r2
 8006902:	b934      	cbnz	r4, 8006912 <_calloc_r+0x16>
 8006904:	4629      	mov	r1, r5
 8006906:	f7ff f937 	bl	8005b78 <_malloc_r>
 800690a:	4606      	mov	r6, r0
 800690c:	b928      	cbnz	r0, 800691a <_calloc_r+0x1e>
 800690e:	4630      	mov	r0, r6
 8006910:	bd70      	pop	{r4, r5, r6, pc}
 8006912:	220c      	movs	r2, #12
 8006914:	2600      	movs	r6, #0
 8006916:	6002      	str	r2, [r0, #0]
 8006918:	e7f9      	b.n	800690e <_calloc_r+0x12>
 800691a:	462a      	mov	r2, r5
 800691c:	4621      	mov	r1, r4
 800691e:	f7fe f9c0 	bl	8004ca2 <memset>
 8006922:	e7f4      	b.n	800690e <_calloc_r+0x12>

08006924 <__ascii_mbtowc>:
 8006924:	b082      	sub	sp, #8
 8006926:	b901      	cbnz	r1, 800692a <__ascii_mbtowc+0x6>
 8006928:	a901      	add	r1, sp, #4
 800692a:	b142      	cbz	r2, 800693e <__ascii_mbtowc+0x1a>
 800692c:	b14b      	cbz	r3, 8006942 <__ascii_mbtowc+0x1e>
 800692e:	7813      	ldrb	r3, [r2, #0]
 8006930:	600b      	str	r3, [r1, #0]
 8006932:	7812      	ldrb	r2, [r2, #0]
 8006934:	1e10      	subs	r0, r2, #0
 8006936:	bf18      	it	ne
 8006938:	2001      	movne	r0, #1
 800693a:	b002      	add	sp, #8
 800693c:	4770      	bx	lr
 800693e:	4610      	mov	r0, r2
 8006940:	e7fb      	b.n	800693a <__ascii_mbtowc+0x16>
 8006942:	f06f 0001 	mvn.w	r0, #1
 8006946:	e7f8      	b.n	800693a <__ascii_mbtowc+0x16>

08006948 <__ascii_wctomb>:
 8006948:	4603      	mov	r3, r0
 800694a:	4608      	mov	r0, r1
 800694c:	b141      	cbz	r1, 8006960 <__ascii_wctomb+0x18>
 800694e:	2aff      	cmp	r2, #255	; 0xff
 8006950:	d904      	bls.n	800695c <__ascii_wctomb+0x14>
 8006952:	228a      	movs	r2, #138	; 0x8a
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	4770      	bx	lr
 800695c:	2001      	movs	r0, #1
 800695e:	700a      	strb	r2, [r1, #0]
 8006960:	4770      	bx	lr
	...

08006964 <fiprintf>:
 8006964:	b40e      	push	{r1, r2, r3}
 8006966:	b503      	push	{r0, r1, lr}
 8006968:	4601      	mov	r1, r0
 800696a:	ab03      	add	r3, sp, #12
 800696c:	4805      	ldr	r0, [pc, #20]	; (8006984 <fiprintf+0x20>)
 800696e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006972:	6800      	ldr	r0, [r0, #0]
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	f7ff fd2b 	bl	80063d0 <_vfiprintf_r>
 800697a:	b002      	add	sp, #8
 800697c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006980:	b003      	add	sp, #12
 8006982:	4770      	bx	lr
 8006984:	20000064 	.word	0x20000064

08006988 <__swhatbuf_r>:
 8006988:	b570      	push	{r4, r5, r6, lr}
 800698a:	460c      	mov	r4, r1
 800698c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006990:	4615      	mov	r5, r2
 8006992:	2900      	cmp	r1, #0
 8006994:	461e      	mov	r6, r3
 8006996:	b096      	sub	sp, #88	; 0x58
 8006998:	da0c      	bge.n	80069b4 <__swhatbuf_r+0x2c>
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	2100      	movs	r1, #0
 800699e:	f013 0f80 	tst.w	r3, #128	; 0x80
 80069a2:	bf0c      	ite	eq
 80069a4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80069a8:	2340      	movne	r3, #64	; 0x40
 80069aa:	2000      	movs	r0, #0
 80069ac:	6031      	str	r1, [r6, #0]
 80069ae:	602b      	str	r3, [r5, #0]
 80069b0:	b016      	add	sp, #88	; 0x58
 80069b2:	bd70      	pop	{r4, r5, r6, pc}
 80069b4:	466a      	mov	r2, sp
 80069b6:	f000 f849 	bl	8006a4c <_fstat_r>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	dbed      	blt.n	800699a <__swhatbuf_r+0x12>
 80069be:	9901      	ldr	r1, [sp, #4]
 80069c0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80069c4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80069c8:	4259      	negs	r1, r3
 80069ca:	4159      	adcs	r1, r3
 80069cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069d0:	e7eb      	b.n	80069aa <__swhatbuf_r+0x22>

080069d2 <__smakebuf_r>:
 80069d2:	898b      	ldrh	r3, [r1, #12]
 80069d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069d6:	079d      	lsls	r5, r3, #30
 80069d8:	4606      	mov	r6, r0
 80069da:	460c      	mov	r4, r1
 80069dc:	d507      	bpl.n	80069ee <__smakebuf_r+0x1c>
 80069de:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069e2:	6023      	str	r3, [r4, #0]
 80069e4:	6123      	str	r3, [r4, #16]
 80069e6:	2301      	movs	r3, #1
 80069e8:	6163      	str	r3, [r4, #20]
 80069ea:	b002      	add	sp, #8
 80069ec:	bd70      	pop	{r4, r5, r6, pc}
 80069ee:	466a      	mov	r2, sp
 80069f0:	ab01      	add	r3, sp, #4
 80069f2:	f7ff ffc9 	bl	8006988 <__swhatbuf_r>
 80069f6:	9900      	ldr	r1, [sp, #0]
 80069f8:	4605      	mov	r5, r0
 80069fa:	4630      	mov	r0, r6
 80069fc:	f7ff f8bc 	bl	8005b78 <_malloc_r>
 8006a00:	b948      	cbnz	r0, 8006a16 <__smakebuf_r+0x44>
 8006a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a06:	059a      	lsls	r2, r3, #22
 8006a08:	d4ef      	bmi.n	80069ea <__smakebuf_r+0x18>
 8006a0a:	f023 0303 	bic.w	r3, r3, #3
 8006a0e:	f043 0302 	orr.w	r3, r3, #2
 8006a12:	81a3      	strh	r3, [r4, #12]
 8006a14:	e7e3      	b.n	80069de <__smakebuf_r+0xc>
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	6020      	str	r0, [r4, #0]
 8006a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1e:	81a3      	strh	r3, [r4, #12]
 8006a20:	9b00      	ldr	r3, [sp, #0]
 8006a22:	6120      	str	r0, [r4, #16]
 8006a24:	6163      	str	r3, [r4, #20]
 8006a26:	9b01      	ldr	r3, [sp, #4]
 8006a28:	b15b      	cbz	r3, 8006a42 <__smakebuf_r+0x70>
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a30:	f000 f81e 	bl	8006a70 <_isatty_r>
 8006a34:	b128      	cbz	r0, 8006a42 <__smakebuf_r+0x70>
 8006a36:	89a3      	ldrh	r3, [r4, #12]
 8006a38:	f023 0303 	bic.w	r3, r3, #3
 8006a3c:	f043 0301 	orr.w	r3, r3, #1
 8006a40:	81a3      	strh	r3, [r4, #12]
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	431d      	orrs	r5, r3
 8006a46:	81a5      	strh	r5, [r4, #12]
 8006a48:	e7cf      	b.n	80069ea <__smakebuf_r+0x18>
	...

08006a4c <_fstat_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	2300      	movs	r3, #0
 8006a50:	4d06      	ldr	r5, [pc, #24]	; (8006a6c <_fstat_r+0x20>)
 8006a52:	4604      	mov	r4, r0
 8006a54:	4608      	mov	r0, r1
 8006a56:	4611      	mov	r1, r2
 8006a58:	602b      	str	r3, [r5, #0]
 8006a5a:	f7fa feb6 	bl	80017ca <_fstat>
 8006a5e:	1c43      	adds	r3, r0, #1
 8006a60:	d102      	bne.n	8006a68 <_fstat_r+0x1c>
 8006a62:	682b      	ldr	r3, [r5, #0]
 8006a64:	b103      	cbz	r3, 8006a68 <_fstat_r+0x1c>
 8006a66:	6023      	str	r3, [r4, #0]
 8006a68:	bd38      	pop	{r3, r4, r5, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000528 	.word	0x20000528

08006a70 <_isatty_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	2300      	movs	r3, #0
 8006a74:	4d05      	ldr	r5, [pc, #20]	; (8006a8c <_isatty_r+0x1c>)
 8006a76:	4604      	mov	r4, r0
 8006a78:	4608      	mov	r0, r1
 8006a7a:	602b      	str	r3, [r5, #0]
 8006a7c:	f7fa feb4 	bl	80017e8 <_isatty>
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	d102      	bne.n	8006a8a <_isatty_r+0x1a>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	b103      	cbz	r3, 8006a8a <_isatty_r+0x1a>
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	20000528 	.word	0x20000528

08006a90 <abort>:
 8006a90:	2006      	movs	r0, #6
 8006a92:	b508      	push	{r3, lr}
 8006a94:	f000 f82c 	bl	8006af0 <raise>
 8006a98:	2001      	movs	r0, #1
 8006a9a:	f7fa fe48 	bl	800172e <_exit>

08006a9e <_raise_r>:
 8006a9e:	291f      	cmp	r1, #31
 8006aa0:	b538      	push	{r3, r4, r5, lr}
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	460d      	mov	r5, r1
 8006aa6:	d904      	bls.n	8006ab2 <_raise_r+0x14>
 8006aa8:	2316      	movs	r3, #22
 8006aaa:	6003      	str	r3, [r0, #0]
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab0:	bd38      	pop	{r3, r4, r5, pc}
 8006ab2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006ab4:	b112      	cbz	r2, 8006abc <_raise_r+0x1e>
 8006ab6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006aba:	b94b      	cbnz	r3, 8006ad0 <_raise_r+0x32>
 8006abc:	4620      	mov	r0, r4
 8006abe:	f000 f831 	bl	8006b24 <_getpid_r>
 8006ac2:	462a      	mov	r2, r5
 8006ac4:	4601      	mov	r1, r0
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006acc:	f000 b818 	b.w	8006b00 <_kill_r>
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d00a      	beq.n	8006aea <_raise_r+0x4c>
 8006ad4:	1c59      	adds	r1, r3, #1
 8006ad6:	d103      	bne.n	8006ae0 <_raise_r+0x42>
 8006ad8:	2316      	movs	r3, #22
 8006ada:	6003      	str	r3, [r0, #0]
 8006adc:	2001      	movs	r0, #1
 8006ade:	e7e7      	b.n	8006ab0 <_raise_r+0x12>
 8006ae0:	2400      	movs	r4, #0
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ae8:	4798      	blx	r3
 8006aea:	2000      	movs	r0, #0
 8006aec:	e7e0      	b.n	8006ab0 <_raise_r+0x12>
	...

08006af0 <raise>:
 8006af0:	4b02      	ldr	r3, [pc, #8]	; (8006afc <raise+0xc>)
 8006af2:	4601      	mov	r1, r0
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	f7ff bfd2 	b.w	8006a9e <_raise_r>
 8006afa:	bf00      	nop
 8006afc:	20000064 	.word	0x20000064

08006b00 <_kill_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	2300      	movs	r3, #0
 8006b04:	4d06      	ldr	r5, [pc, #24]	; (8006b20 <_kill_r+0x20>)
 8006b06:	4604      	mov	r4, r0
 8006b08:	4608      	mov	r0, r1
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	602b      	str	r3, [r5, #0]
 8006b0e:	f7fa fdfe 	bl	800170e <_kill>
 8006b12:	1c43      	adds	r3, r0, #1
 8006b14:	d102      	bne.n	8006b1c <_kill_r+0x1c>
 8006b16:	682b      	ldr	r3, [r5, #0]
 8006b18:	b103      	cbz	r3, 8006b1c <_kill_r+0x1c>
 8006b1a:	6023      	str	r3, [r4, #0]
 8006b1c:	bd38      	pop	{r3, r4, r5, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000528 	.word	0x20000528

08006b24 <_getpid_r>:
 8006b24:	f7fa bdec 	b.w	8001700 <_getpid>

08006b28 <_init>:
 8006b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2a:	bf00      	nop
 8006b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2e:	bc08      	pop	{r3}
 8006b30:	469e      	mov	lr, r3
 8006b32:	4770      	bx	lr

08006b34 <_fini>:
 8006b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b36:	bf00      	nop
 8006b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3a:	bc08      	pop	{r3}
 8006b3c:	469e      	mov	lr, r3
 8006b3e:	4770      	bx	lr
