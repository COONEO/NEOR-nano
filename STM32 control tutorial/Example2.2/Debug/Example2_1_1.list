
Example2_1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008230  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08008418  08008418  00018418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088a8  080088a8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  080088a8  080088a8  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088a8  080088a8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a8  080088a8  000188a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088ac  080088ac  000188ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080088b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200001d4  08008a84  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08008a84  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c734  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020d0  00000000  00000000  0002c974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  0002ea48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2b  00000000  00000000  0002f760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa79  00000000  00000000  0003018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f362  00000000  00000000  0004ac04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a2da  00000000  00000000  00059f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004af4  00000000  00000000  000f4240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000f8d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	08008400 	.word	0x08008400

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	08008400 	.word	0x08008400

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4605      	mov	r5, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	f7ff ff21 	bl	8000a94 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x20>
 8000c54:	4628      	mov	r0, r5
 8000c56:	4621      	mov	r1, r4
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4628      	mov	r0, r5
 8000c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc97 	bl	80005b0 <__aeabi_dmul>
 8000c82:	f7ff ff6d 	bl	8000b60 <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fc18 	bl	80004bc <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc8e 	bl	80005b0 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fad0 	bl	8000240 <__aeabi_dsub>
 8000ca0:	f7ff ff5e 	bl	8000b60 <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc4:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <MX_GPIO_Init+0xa4>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a22      	ldr	r2, [pc, #136]	; (8000d54 <MX_GPIO_Init+0xa4>)
 8000cca:	f043 0320 	orr.w	r3, r3, #32
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <MX_GPIO_Init+0xa4>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0320 	and.w	r3, r3, #32
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <MX_GPIO_Init+0xa4>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <MX_GPIO_Init+0xa4>)
 8000ce2:	f043 0310 	orr.w	r3, r3, #16
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_GPIO_Init+0xa4>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0310 	and.w	r3, r3, #16
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_GPIO_Init+0xa4>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a16      	ldr	r2, [pc, #88]	; (8000d54 <MX_GPIO_Init+0xa4>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_GPIO_Init+0xa4>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_GPIO_Init+0xa4>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <MX_GPIO_Init+0xa4>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_GPIO_Init+0xa4>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	210f      	movs	r1, #15
 8000d28:	480b      	ldr	r0, [pc, #44]	; (8000d58 <MX_GPIO_Init+0xa8>)
 8000d2a:	f001 f9cd 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d2e:	230f      	movs	r3, #15
 8000d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4619      	mov	r1, r3
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_GPIO_Init+0xa8>)
 8000d46:	f001 f82b 	bl	8001da0 <HAL_GPIO_Init>

}
 8000d4a:	bf00      	nop
 8000d4c:	3720      	adds	r7, #32
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40011000 	.word	0x40011000

08000d5c <myabs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int myabs(int a)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	int temp;
	if(a<0)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	da03      	bge.n	8000d72 <myabs+0x16>
	  temp=-a;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	425b      	negs	r3, r3
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	e001      	b.n	8000d76 <myabs+0x1a>
	else
	  temp=a;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60fb      	str	r3, [r7, #12]
	return temp;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
	...

08000d84 <Left_Go>:

void Left_Go()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(m_DirPort,AIN1,GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <Left_Go+0x1c>)
 8000d8e:	f001 f99b 	bl	80020c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m_DirPort,AIN2,GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2102      	movs	r1, #2
 8000d96:	4802      	ldr	r0, [pc, #8]	; (8000da0 <Left_Go+0x1c>)
 8000d98:	f001 f996 	bl	80020c8 <HAL_GPIO_WritePin>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40011000 	.word	0x40011000

08000da4 <Right_Go>:

void Right_Go()
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(m_DirPort,BIN1,GPIO_PIN_SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2104      	movs	r1, #4
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <Right_Go+0x1c>)
 8000dae:	f001 f98b 	bl	80020c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m_DirPort,BIN2,GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2108      	movs	r1, #8
 8000db6:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <Right_Go+0x1c>)
 8000db8:	f001 f986 	bl	80020c8 <HAL_GPIO_WritePin>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40011000 	.word	0x40011000

08000dc4 <Left_Back>:

void Left_Back()
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(m_DirPort,AIN1,GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4804      	ldr	r0, [pc, #16]	; (8000de0 <Left_Back+0x1c>)
 8000dce:	f001 f97b 	bl	80020c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m_DirPort,AIN2,GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	4802      	ldr	r0, [pc, #8]	; (8000de0 <Left_Back+0x1c>)
 8000dd8:	f001 f976 	bl	80020c8 <HAL_GPIO_WritePin>
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40011000 	.word	0x40011000

08000de4 <Right_Back>:

void Right_Back()
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(m_DirPort,BIN1,GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2104      	movs	r1, #4
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <Right_Back+0x1c>)
 8000dee:	f001 f96b 	bl	80020c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m_DirPort,BIN2,GPIO_PIN_SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	2108      	movs	r1, #8
 8000df6:	4802      	ldr	r0, [pc, #8]	; (8000e00 <Right_Back+0x1c>)
 8000df8:	f001 f966 	bl	80020c8 <HAL_GPIO_WritePin>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40011000 	.word	0x40011000

08000e04 <Left_Stop>:
		HAL_GPIO_WritePin(m_DirPort,BIN1,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(m_DirPort,BIN2,GPIO_PIN_SET);
}

void Left_Stop()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(m_DirPort,AIN1,GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	4804      	ldr	r0, [pc, #16]	; (8000e20 <Left_Stop+0x1c>)
 8000e0e:	f001 f95b 	bl	80020c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m_DirPort,AIN2,GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2102      	movs	r1, #2
 8000e16:	4802      	ldr	r0, [pc, #8]	; (8000e20 <Left_Stop+0x1c>)
 8000e18:	f001 f956 	bl	80020c8 <HAL_GPIO_WritePin>
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40011000 	.word	0x40011000

08000e24 <Right_Stop>:

void Right_Stop()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(m_DirPort,BIN1,GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <Right_Stop+0x1c>)
 8000e2e:	f001 f94b 	bl	80020c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m_DirPort,BIN2,GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2108      	movs	r1, #8
 8000e36:	4802      	ldr	r0, [pc, #8]	; (8000e40 <Right_Stop+0x1c>)
 8000e38:	f001 f946 	bl	80020c8 <HAL_GPIO_WritePin>
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40011000 	.word	0x40011000

08000e44 <MotorControl>:
*	@brief Control Motor Speed
*	@param PWM
*	@retval None
*/
void MotorControl(int leftMotorPWM, int rightMotorPWM)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
		if(leftMotorPWM>=0&&rightMotorPWM>=0)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0f      	blt.n	8000e74 <MotorControl+0x30>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	db0c      	blt.n	8000e74 <MotorControl+0x30>
		{
//			printf("111\r\n");
				Left_Go();
 8000e5a:	f7ff ff93 	bl	8000d84 <Left_Go>
				Right_Go();
 8000e5e:	f7ff ffa1 	bl	8000da4 <Right_Go>
				__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,leftMotorPWM);
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MotorControl+0x90>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,rightMotorPWM);
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MotorControl+0x90>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	639a      	str	r2, [r3, #56]	; 0x38
 8000e72:	e02b      	b.n	8000ecc <MotorControl+0x88>
//		printf("leftPWM is %d\r\n",leftMotorPWM);
//		printf("rightPWM is %d\r\n",rightMotorPWM);
		}

		else if(leftMotorPWM<0&&rightMotorPWM<0)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	da15      	bge.n	8000ea6 <MotorControl+0x62>
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	da12      	bge.n	8000ea6 <MotorControl+0x62>
		{
				Left_Back();
 8000e80:	f7ff ffa0 	bl	8000dc4 <Left_Back>
				Right_Back();
 8000e84:	f7ff ffae 	bl	8000de4 <Right_Back>
				__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,myabs(leftMotorPWM));
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff67 	bl	8000d5c <myabs>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MotorControl+0x90>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,myabs(rightMotorPWM));
 8000e96:	6838      	ldr	r0, [r7, #0]
 8000e98:	f7ff ff60 	bl	8000d5c <myabs>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <MotorControl+0x90>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ea4:	e012      	b.n	8000ecc <MotorControl+0x88>
		}

		else if(leftMotorPWM==0&&rightMotorPWM==0)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10f      	bne.n	8000ecc <MotorControl+0x88>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10c      	bne.n	8000ecc <MotorControl+0x88>
		{
				Left_Stop();
 8000eb2:	f7ff ffa7 	bl	8000e04 <Left_Stop>
				Right_Stop();
 8000eb6:	f7ff ffb5 	bl	8000e24 <Right_Stop>
				__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,0);
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MotorControl+0x90>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <MotorControl+0x90>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	639a      	str	r2, [r3, #56]	; 0x38
		}
}
 8000eca:	e7ff      	b.n	8000ecc <MotorControl+0x88>
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000318 	.word	0x20000318

08000ed8 <GetEncoderPulse>:
		__HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
	}
}

void GetEncoderPulse()
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
	  encoderPulse[0] = -((short)__HAL_TIM_GET_COUNTER(&htim2));
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <GetEncoderPulse+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	425b      	negs	r3, r3
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <GetEncoderPulse+0x44>)
 8000eec:	801a      	strh	r2, [r3, #0]
	  encoderPulse[1] = -((short)__HAL_TIM_GET_COUNTER(&htim3));
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <GetEncoderPulse+0x48>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	425b      	negs	r3, r3
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	b21a      	sxth	r2, r3
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <GetEncoderPulse+0x44>)
 8000efe:	805a      	strh	r2, [r3, #2]

    __HAL_TIM_GET_COUNTER(&htim2) = 0;	 //计数值重新清零
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <GetEncoderPulse+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_GET_COUNTER(&htim3) = 0;
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <GetEncoderPulse+0x48>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	200001f8 	.word	0x200001f8
 8000f1c:	200001f0 	.word	0x200001f0
 8000f20:	20000240 	.word	0x20000240
 8000f24:	00000000 	.word	0x00000000

08000f28 <CalActualSpeed>:

float CalActualSpeed(int pulse)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
    return (float)(0.003092424 * pulse);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fad3 	bl	80004dc <__aeabi_i2d>
 8000f36:	a308      	add	r3, pc, #32	; (adr r3, 8000f58 <CalActualSpeed+0x30>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff fb38 	bl	80005b0 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	f7ff fe2a 	bl	8000ba0 <__aeabi_d2f>
 8000f4c:	4603      	mov	r3, r0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	7e406f28 	.word	0x7e406f28
 8000f5c:	3f695548 	.word	0x3f695548

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f64:	f000 fdac 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f68:	f000 f83e 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6c:	f7ff fea0 	bl	8000cb0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f70:	f000 f9ea 	bl	8001348 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f74:	f000 fa3c 	bl	80013f0 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000f78:	f000 fae8 	bl	800154c <MX_TIM6_Init>
  MX_TIM8_Init();
 8000f7c:	f000 fb1c 	bl	80015b8 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000f80:	f000 fd02 	bl	8001988 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000f84:	f000 fa88 	bl	8001498 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);  //使能定时器6中断
 8000f88:	4812      	ldr	r0, [pc, #72]	; (8000fd4 <main+0x74>)
 8000f8a:	f001 fd15 	bl	80029b8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4811      	ldr	r0, [pc, #68]	; (8000fd8 <main+0x78>)
 8000f92:	f001 fdc1 	bl	8002b18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8000f96:	2104      	movs	r1, #4
 8000f98:	480f      	ldr	r0, [pc, #60]	; (8000fd8 <main+0x78>)
 8000f9a:	f001 fdbd 	bl	8002b18 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);  //启动定时�??4的PWM模式
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	480e      	ldr	r0, [pc, #56]	; (8000fdc <main+0x7c>)
 8000fa2:	f001 fdb9 	bl	8002b18 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1);  //启动定时器2的编码器模式
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <main+0x80>)
 8000faa:	f001 ff11 	bl	8002dd0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_2);
 8000fae:	2104      	movs	r1, #4
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <main+0x80>)
 8000fb2:	f001 ff0d 	bl	8002dd0 <HAL_TIM_Encoder_Start>

  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);  //启动定时器3的编码器模式
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	480a      	ldr	r0, [pc, #40]	; (8000fe4 <main+0x84>)
 8000fba:	f001 ff09 	bl	8002dd0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <main+0x84>)
 8000fc2:	f001 ff05 	bl	8002dd0 <HAL_TIM_Encoder_Start>

  MotorControl(500,500); //设定电机初始速度
 8000fc6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000fca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fce:	f7ff ff39 	bl	8000e44 <MotorControl>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <main+0x72>
 8000fd4:	200002d0 	.word	0x200002d0
 8000fd8:	20000318 	.word	0x20000318
 8000fdc:	20000288 	.word	0x20000288
 8000fe0:	200001f8 	.word	0x200001f8
 8000fe4:	20000240 	.word	0x20000240

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b090      	sub	sp, #64	; 0x40
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	2228      	movs	r2, #40	; 0x28
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 fddf 	bl	8004bba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800100a:	2301      	movs	r3, #1
 800100c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800100e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001012:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001018:	2301      	movs	r3, #1
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101c:	2302      	movs	r3, #2
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001024:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001026:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	f107 0318 	add.w	r3, r7, #24
 8001030:	4618      	mov	r0, r3
 8001032:	f001 f861 	bl	80020f8 <HAL_RCC_OscConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800103c:	f000 f854 	bl	80010e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001040:	230f      	movs	r3, #15
 8001042:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001044:	2302      	movs	r3, #2
 8001046:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800104c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001050:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2102      	movs	r1, #2
 800105a:	4618      	mov	r0, r3
 800105c:	f001 face 	bl	80025fc <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001066:	f000 f83f 	bl	80010e8 <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3740      	adds	r7, #64	; 0x40
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  //定时器6中断回调函数，每50ms调用一次
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  float c_leftSpeed,c_rightSpeed;
  if(htim==(&htim6))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d125      	bne.n	80010d0 <HAL_TIM_PeriodElapsedCallback+0x5c>
  {
	    MotorControl(500,500); //设定电机初始速度
 8001084:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001088:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800108c:	f7ff feda 	bl	8000e44 <MotorControl>
		GetEncoderPulse();
 8001090:	f7ff ff22 	bl	8000ed8 <GetEncoderPulse>
		c_leftSpeed = CalActualSpeed(encoderPulse[0]);   //获得当前的速度值
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff44 	bl	8000f28 <CalActualSpeed>
 80010a0:	60f8      	str	r0, [r7, #12]
		c_rightSpeed = CalActualSpeed(encoderPulse[1]);
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x68>)
 80010a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff3d 	bl	8000f28 <CalActualSpeed>
 80010ae:	60b8      	str	r0, [r7, #8]
		printf("{left speed is: %.2f m/s}\r\n",c_leftSpeed);
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f7ff fa25 	bl	8000500 <__aeabi_f2d>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4809      	ldr	r0, [pc, #36]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80010bc:	f003 fd08 	bl	8004ad0 <iprintf>
		printf("{right speed is: %.2f m/s}\r\n",c_rightSpeed);
 80010c0:	68b8      	ldr	r0, [r7, #8]
 80010c2:	f7ff fa1d 	bl	8000500 <__aeabi_f2d>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010cc:	f003 fd00 	bl	8004ad0 <iprintf>
  }
}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200002d0 	.word	0x200002d0
 80010dc:	200001f0 	.word	0x200001f0
 80010e0:	08008418 	.word	0x08008418
 80010e4:	08008434 	.word	0x08008434

080010e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
}
 80010ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <Error_Handler+0x8>
	...

080010f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_MspInit+0x5c>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_MspInit+0x5c>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6193      	str	r3, [r2, #24]
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_MspInit+0x5c>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_MspInit+0x5c>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_MspInit+0x5c>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	61d3      	str	r3, [r2, #28]
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_MspInit+0x5c>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_MspInit+0x60>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_MspInit+0x60>)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	40021000 	.word	0x40021000
 8001154:	40010000 	.word	0x40010000

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119e:	f000 fcd5 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <TIM6_IRQHandler+0x10>)
 80011ae:	f001 fe9d 	bl	8002eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200002d0 	.word	0x200002d0

080011bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return 1;
 80011c0:	2301      	movs	r3, #1
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <_kill>:

int _kill(int pid, int sig)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011d4:	f003 fd44 	bl	8004c60 <__errno>
 80011d8:	4603      	mov	r3, r0
 80011da:	2216      	movs	r2, #22
 80011dc:	601a      	str	r2, [r3, #0]
  return -1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_exit>:

void _exit (int status)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011f2:	f04f 31ff 	mov.w	r1, #4294967295
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffe7 	bl	80011ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80011fc:	e7fe      	b.n	80011fc <_exit+0x12>

080011fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	e00a      	b.n	8001226 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001210:	f3af 8000 	nop.w
 8001214:	4601      	mov	r1, r0
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	1c5a      	adds	r2, r3, #1
 800121a:	60ba      	str	r2, [r7, #8]
 800121c:	b2ca      	uxtb	r2, r1
 800121e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	dbf0      	blt.n	8001210 <_read+0x12>
  }

  return len;
 800122e:	687b      	ldr	r3, [r7, #4]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	e009      	b.n	800125e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	60ba      	str	r2, [r7, #8]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fb86 	bl	8001964 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3301      	adds	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	429a      	cmp	r2, r3
 8001264:	dbf1      	blt.n	800124a <_write+0x12>
  }
  return len;
 8001266:	687b      	ldr	r3, [r7, #4]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <_close>:

int _close(int file)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001296:	605a      	str	r2, [r3, #4]
  return 0;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <_isatty>:

int _isatty(int file)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ac:	2301      	movs	r3, #1
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d8:	4a14      	ldr	r2, [pc, #80]	; (800132c <_sbrk+0x5c>)
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <_sbrk+0x60>)
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <_sbrk+0x64>)
 80012ee:	4a12      	ldr	r2, [pc, #72]	; (8001338 <_sbrk+0x68>)
 80012f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d207      	bcs.n	8001310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001300:	f003 fcae 	bl	8004c60 <__errno>
 8001304:	4603      	mov	r3, r0
 8001306:	220c      	movs	r2, #12
 8001308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e009      	b.n	8001324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001316:	4b07      	ldr	r3, [pc, #28]	; (8001334 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <_sbrk+0x64>)
 8001320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000c000 	.word	0x2000c000
 8001330:	00000400 	.word	0x00000400
 8001334:	200001f4 	.word	0x200001f4
 8001338:	200004f8 	.word	0x200004f8

0800133c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	; 0x30
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	2224      	movs	r2, #36	; 0x24
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f003 fc2f 	bl	8004bba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_TIM2_Init+0xa4>)
 8001366:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800136a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_TIM2_Init+0xa4>)
 800136e:	2200      	movs	r2, #0
 8001370:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_TIM2_Init+0xa4>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_TIM2_Init+0xa4>)
 800137a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800137e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_TIM2_Init+0xa4>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_TIM2_Init+0xa4>)
 8001388:	2280      	movs	r2, #128	; 0x80
 800138a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800138c:	2303      	movs	r3, #3
 800138e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001394:	2301      	movs	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013a4:	2301      	movs	r3, #1
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4619      	mov	r1, r3
 80013b6:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_TIM2_Init+0xa4>)
 80013b8:	f001 fc68 	bl	8002c8c <HAL_TIM_Encoder_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013c2:	f7ff fe91 	bl	80010e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <MX_TIM2_Init+0xa4>)
 80013d4:	f002 f9c2 	bl	800375c <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80013de:	f7ff fe83 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	3730      	adds	r7, #48	; 0x30
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200001f8 	.word	0x200001f8

080013f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08c      	sub	sp, #48	; 0x30
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	2224      	movs	r2, #36	; 0x24
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fbdb 	bl	8004bba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800140c:	4b20      	ldr	r3, [pc, #128]	; (8001490 <MX_TIM3_Init+0xa0>)
 800140e:	4a21      	ldr	r2, [pc, #132]	; (8001494 <MX_TIM3_Init+0xa4>)
 8001410:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001412:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <MX_TIM3_Init+0xa0>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <MX_TIM3_Init+0xa0>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MX_TIM3_Init+0xa0>)
 8001420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001424:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <MX_TIM3_Init+0xa0>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <MX_TIM3_Init+0xa0>)
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001432:	2303      	movs	r3, #3
 8001434:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800143a:	2301      	movs	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800144a:	2301      	movs	r3, #1
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	4619      	mov	r1, r3
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <MX_TIM3_Init+0xa0>)
 800145e:	f001 fc15 	bl	8002c8c <HAL_TIM_Encoder_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001468:	f7ff fe3e 	bl	80010e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_TIM3_Init+0xa0>)
 800147a:	f002 f96f 	bl	800375c <HAL_TIMEx_MasterConfigSynchronization>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001484:	f7ff fe30 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	3730      	adds	r7, #48	; 0x30
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000240 	.word	0x20000240
 8001494:	40000400 	.word	0x40000400

08001498 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149e:	f107 0320 	add.w	r3, r7, #32
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]
 80014b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <MX_TIM4_Init+0xac>)
 80014bc:	4a22      	ldr	r2, [pc, #136]	; (8001548 <MX_TIM4_Init+0xb0>)
 80014be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <MX_TIM4_Init+0xac>)
 80014c2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80014c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <MX_TIM4_Init+0xac>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_TIM4_Init+0xac>)
 80014d0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80014d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MX_TIM4_Init+0xac>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <MX_TIM4_Init+0xac>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014e2:	4818      	ldr	r0, [pc, #96]	; (8001544 <MX_TIM4_Init+0xac>)
 80014e4:	f001 fac8 	bl	8002a78 <HAL_TIM_PWM_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80014ee:	f7ff fdfb 	bl	80010e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014fa:	f107 0320 	add.w	r3, r7, #32
 80014fe:	4619      	mov	r1, r3
 8001500:	4810      	ldr	r0, [pc, #64]	; (8001544 <MX_TIM4_Init+0xac>)
 8001502:	f002 f92b 	bl	800375c <HAL_TIMEx_MasterConfigSynchronization>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800150c:	f7ff fdec 	bl	80010e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001510:	2360      	movs	r3, #96	; 0x60
 8001512:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2208      	movs	r2, #8
 8001524:	4619      	mov	r1, r3
 8001526:	4807      	ldr	r0, [pc, #28]	; (8001544 <MX_TIM4_Init+0xac>)
 8001528:	f001 fde8 	bl	80030fc <HAL_TIM_PWM_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001532:	f7ff fdd9 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001536:	4803      	ldr	r0, [pc, #12]	; (8001544 <MX_TIM4_Init+0xac>)
 8001538:	f000 f9be 	bl	80018b8 <HAL_TIM_MspPostInit>

}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000288 	.word	0x20000288
 8001548:	40000800 	.word	0x40000800

0800154c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001552:	463b      	mov	r3, r7
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <MX_TIM6_Init+0x64>)
 800155c:	4a15      	ldr	r2, [pc, #84]	; (80015b4 <MX_TIM6_Init+0x68>)
 800155e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 499;
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <MX_TIM6_Init+0x64>)
 8001562:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001566:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_TIM6_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7199;
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <MX_TIM6_Init+0x64>)
 8001570:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001574:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_TIM6_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <MX_TIM6_Init+0x64>)
 800157e:	f001 f9cb 	bl	8002918 <HAL_TIM_Base_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001588:	f7ff fdae 	bl	80010e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001594:	463b      	mov	r3, r7
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_TIM6_Init+0x64>)
 800159a:	f002 f8df 	bl	800375c <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80015a4:	f7ff fda0 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200002d0 	.word	0x200002d0
 80015b4:	40001000 	.word	0x40001000

080015b8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b092      	sub	sp, #72	; 0x48
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2220      	movs	r2, #32
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 fae9 	bl	8004bba <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015e8:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <MX_TIM8_Init+0x118>)
 80015ea:	4a3a      	ldr	r2, [pc, #232]	; (80016d4 <MX_TIM8_Init+0x11c>)
 80015ec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <MX_TIM8_Init+0x118>)
 80015f0:	2203      	movs	r2, #3
 80015f2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <MX_TIM8_Init+0x118>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <MX_TIM8_Init+0x118>)
 80015fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001600:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001602:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <MX_TIM8_Init+0x118>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001608:	4b31      	ldr	r3, [pc, #196]	; (80016d0 <MX_TIM8_Init+0x118>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160e:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <MX_TIM8_Init+0x118>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001614:	482e      	ldr	r0, [pc, #184]	; (80016d0 <MX_TIM8_Init+0x118>)
 8001616:	f001 fa2f 	bl	8002a78 <HAL_TIM_PWM_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001620:	f7ff fd62 	bl	80010e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800162c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001630:	4619      	mov	r1, r3
 8001632:	4827      	ldr	r0, [pc, #156]	; (80016d0 <MX_TIM8_Init+0x118>)
 8001634:	f002 f892 	bl	800375c <HAL_TIMEx_MasterConfigSynchronization>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800163e:	f7ff fd53 	bl	80010e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001642:	2360      	movs	r3, #96	; 0x60
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800164e:	2300      	movs	r3, #0
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800165e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001662:	2200      	movs	r2, #0
 8001664:	4619      	mov	r1, r3
 8001666:	481a      	ldr	r0, [pc, #104]	; (80016d0 <MX_TIM8_Init+0x118>)
 8001668:	f001 fd48 	bl	80030fc <HAL_TIM_PWM_ConfigChannel>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001672:	f7ff fd39 	bl	80010e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167a:	2204      	movs	r2, #4
 800167c:	4619      	mov	r1, r3
 800167e:	4814      	ldr	r0, [pc, #80]	; (80016d0 <MX_TIM8_Init+0x118>)
 8001680:	f001 fd3c 	bl	80030fc <HAL_TIM_PWM_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800168a:	f7ff fd2d 	bl	80010e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	4619      	mov	r1, r3
 80016b0:	4807      	ldr	r0, [pc, #28]	; (80016d0 <MX_TIM8_Init+0x118>)
 80016b2:	f002 f8bf 	bl	8003834 <HAL_TIMEx_ConfigBreakDeadTime>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80016bc:	f7ff fd14 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <MX_TIM8_Init+0x118>)
 80016c2:	f000 f8f9 	bl	80018b8 <HAL_TIM_MspPostInit>

}
 80016c6:	bf00      	nop
 80016c8:	3748      	adds	r7, #72	; 0x48
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000318 	.word	0x20000318
 80016d4:	40013400 	.word	0x40013400

080016d8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08c      	sub	sp, #48	; 0x30
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 031c 	add.w	r3, r7, #28
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f6:	d14f      	bne.n	8001798 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f8:	4b3e      	ldr	r3, [pc, #248]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	4a3d      	ldr	r2, [pc, #244]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	61d3      	str	r3, [r2, #28]
 8001704:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a37      	ldr	r2, [pc, #220]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b35      	ldr	r3, [pc, #212]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x11c>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x11c>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a31      	ldr	r2, [pc, #196]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x11c>)
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	4828      	ldr	r0, [pc, #160]	; (80017f8 <HAL_TIM_Encoder_MspInit+0x120>)
 8001756:	f000 fb23 	bl	8001da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800175a:	2308      	movs	r3, #8
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	4823      	ldr	r0, [pc, #140]	; (80017fc <HAL_TIM_Encoder_MspInit+0x124>)
 800176e:	f000 fb17 	bl	8001da0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_TIM_Encoder_MspInit+0x128>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001782:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001790:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <HAL_TIM_Encoder_MspInit+0x128>)
 8001792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001794:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001796:	e028      	b.n	80017ea <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM3)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_TIM_Encoder_MspInit+0x12c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d123      	bne.n	80017ea <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	61d3      	str	r3, [r2, #28]
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6193      	str	r3, [r2, #24]
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_TIM_Encoder_MspInit+0x11c>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017d2:	23c0      	movs	r3, #192	; 0xc0
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <HAL_TIM_Encoder_MspInit+0x120>)
 80017e6:	f000 fadb 	bl	8001da0 <HAL_GPIO_Init>
}
 80017ea:	bf00      	nop
 80017ec:	3730      	adds	r7, #48	; 0x30
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010800 	.word	0x40010800
 80017fc:	40010c00 	.word	0x40010c00
 8001800:	40010000 	.word	0x40010000
 8001804:	40000400 	.word	0x40000400

08001808 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a12      	ldr	r2, [pc, #72]	; (8001860 <HAL_TIM_PWM_MspInit+0x58>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d10c      	bne.n	8001834 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_TIM_PWM_MspInit+0x5c>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	4a11      	ldr	r2, [pc, #68]	; (8001864 <HAL_TIM_PWM_MspInit+0x5c>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	61d3      	str	r3, [r2, #28]
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_TIM_PWM_MspInit+0x5c>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001832:	e010      	b.n	8001856 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM8)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <HAL_TIM_PWM_MspInit+0x60>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d10b      	bne.n	8001856 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_TIM_PWM_MspInit+0x5c>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	4a08      	ldr	r2, [pc, #32]	; (8001864 <HAL_TIM_PWM_MspInit+0x5c>)
 8001844:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001848:	6193      	str	r3, [r2, #24]
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_TIM_PWM_MspInit+0x5c>)
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	40000800 	.word	0x40000800
 8001864:	40021000 	.word	0x40021000
 8001868:	40013400 	.word	0x40013400

0800186c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <HAL_TIM_Base_MspInit+0x44>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d113      	bne.n	80018a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_TIM_Base_MspInit+0x48>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a0c      	ldr	r2, [pc, #48]	; (80018b4 <HAL_TIM_Base_MspInit+0x48>)
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	61d3      	str	r3, [r2, #28]
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_TIM_Base_MspInit+0x48>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	2036      	movs	r0, #54	; 0x36
 800189c:	f000 fa49 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80018a0:	2036      	movs	r0, #54	; 0x36
 80018a2:	f000 fa62 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40001000 	.word	0x40001000
 80018b4:	40021000 	.word	0x40021000

080018b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a1f      	ldr	r2, [pc, #124]	; (8001950 <HAL_TIM_MspPostInit+0x98>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d119      	bne.n	800190c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <HAL_TIM_MspPostInit+0x9c>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <HAL_TIM_MspPostInit+0x9c>)
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_TIM_MspPostInit+0x9c>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 0310 	add.w	r3, r7, #16
 8001902:	4619      	mov	r1, r3
 8001904:	4814      	ldr	r0, [pc, #80]	; (8001958 <HAL_TIM_MspPostInit+0xa0>)
 8001906:	f000 fa4b 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800190a:	e01c      	b.n	8001946 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM8)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a12      	ldr	r2, [pc, #72]	; (800195c <HAL_TIM_MspPostInit+0xa4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d117      	bne.n	8001946 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_TIM_MspPostInit+0x9c>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <HAL_TIM_MspPostInit+0x9c>)
 800191c:	f043 0310 	orr.w	r3, r3, #16
 8001920:	6193      	str	r3, [r2, #24]
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <HAL_TIM_MspPostInit+0x9c>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800192e:	23c0      	movs	r3, #192	; 0xc0
 8001930:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2302      	movs	r3, #2
 8001938:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	4619      	mov	r1, r3
 8001940:	4807      	ldr	r0, [pc, #28]	; (8001960 <HAL_TIM_MspPostInit+0xa8>)
 8001942:	f000 fa2d 	bl	8001da0 <HAL_GPIO_Init>
}
 8001946:	bf00      	nop
 8001948:	3720      	adds	r7, #32
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40000800 	.word	0x40000800
 8001954:	40021000 	.word	0x40021000
 8001958:	40010c00 	.word	0x40010c00
 800195c:	40013400 	.word	0x40013400
 8001960:	40011000 	.word	0x40011000

08001964 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 800196c:	1d39      	adds	r1, r7, #4
 800196e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001972:	2201      	movs	r2, #1
 8001974:	4803      	ldr	r0, [pc, #12]	; (8001984 <__io_putchar+0x20>)
 8001976:	f002 f810 	bl	800399a <HAL_UART_Transmit>
	return ch;
 800197a:	687b      	ldr	r3, [r7, #4]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000360 	.word	0x20000360

08001988 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <MX_USART1_UART_Init+0x4c>)
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <MX_USART1_UART_Init+0x50>)
 8001990:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <MX_USART1_UART_Init+0x4c>)
 8001994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001998:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <MX_USART1_UART_Init+0x4c>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_USART1_UART_Init+0x4c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <MX_USART1_UART_Init+0x4c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_USART1_UART_Init+0x4c>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <MX_USART1_UART_Init+0x4c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_USART1_UART_Init+0x4c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_USART1_UART_Init+0x4c>)
 80019c0:	f001 ff9b 	bl	80038fa <HAL_UART_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019ca:	f7ff fb8d 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000360 	.word	0x20000360
 80019d8:	40013800 	.word	0x40013800

080019dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <HAL_UART_MspInit+0x8c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d131      	bne.n	8001a60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_UART_MspInit+0x90>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a1a      	ldr	r2, [pc, #104]	; (8001a6c <HAL_UART_MspInit+0x90>)
 8001a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_UART_MspInit+0x90>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_UART_MspInit+0x90>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <HAL_UART_MspInit+0x90>)
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_UART_MspInit+0x90>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a36:	2303      	movs	r3, #3
 8001a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3a:	f107 0310 	add.w	r3, r7, #16
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480b      	ldr	r0, [pc, #44]	; (8001a70 <HAL_UART_MspInit+0x94>)
 8001a42:	f000 f9ad 	bl	8001da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <HAL_UART_MspInit+0x94>)
 8001a5c:	f000 f9a0 	bl	8001da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a60:	bf00      	nop
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40010800 	.word	0x40010800

08001a74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a74:	f7ff fc62 	bl	800133c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a78:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a7a:	490c      	ldr	r1, [pc, #48]	; (8001aac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a7c:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a80:	e002      	b.n	8001a88 <LoopCopyDataInit>

08001a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a86:	3304      	adds	r3, #4

08001a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a8c:	d3f9      	bcc.n	8001a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8e:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a90:	4c09      	ldr	r4, [pc, #36]	; (8001ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a94:	e001      	b.n	8001a9a <LoopFillZerobss>

08001a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a98:	3204      	adds	r2, #4

08001a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a9c:	d3fb      	bcc.n	8001a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9e:	f003 f8e5 	bl	8004c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aa2:	f7ff fa5d 	bl	8000f60 <main>
  bx lr
 8001aa6:	4770      	bx	lr
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ab0:	080088b0 	.word	0x080088b0
  ldr r2, =_sbss
 8001ab4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ab8:	200004f8 	.word	0x200004f8

08001abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_2_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_Init+0x28>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_Init+0x28>)
 8001aca:	f043 0310 	orr.w	r3, r3, #16
 8001ace:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f923 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad6:	200f      	movs	r0, #15
 8001ad8:	f000 f808 	bl	8001aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fb0a 	bl	80010f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40022000 	.word	0x40022000

08001aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x54>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x58>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f93b 	bl	8001d86 <HAL_SYSTICK_Config>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00e      	b.n	8001b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	d80a      	bhi.n	8001b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b20:	2200      	movs	r2, #0
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f000 f903 	bl	8001d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b2c:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <HAL_InitTick+0x5c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000008 	.word	0x20000008
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_IncTick+0x1c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x20>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a03      	ldr	r2, [pc, #12]	; (8001b6c <HAL_IncTick+0x20>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	200003a8 	.word	0x200003a8

08001b70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b02      	ldr	r3, [pc, #8]	; (8001b80 <HAL_GetTick+0x10>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	200003a8 	.word	0x200003a8

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4906      	ldr	r1, [pc, #24]	; (8001c1c <__NVIC_EnableIRQ+0x34>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100

08001c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	db0a      	blt.n	8001c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	490c      	ldr	r1, [pc, #48]	; (8001c6c <__NVIC_SetPriority+0x4c>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c48:	e00a      	b.n	8001c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4908      	ldr	r1, [pc, #32]	; (8001c70 <__NVIC_SetPriority+0x50>)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	3b04      	subs	r3, #4
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f1c3 0307 	rsb	r3, r3, #7
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf28      	it	cs
 8001c92:	2304      	movcs	r3, #4
 8001c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d902      	bls.n	8001ca4 <NVIC_EncodePriority+0x30>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3b03      	subs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <NVIC_EncodePriority+0x32>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	4313      	orrs	r3, r2
         );
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff ff90 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff2d 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff42 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff90 	bl	8001c74 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5f 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff35 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffa2 	bl	8001cd8 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b08b      	sub	sp, #44	; 0x2c
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db2:	e179      	b.n	80020a8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001db4:	2201      	movs	r2, #1
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	f040 8168 	bne.w	80020a2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	4a96      	ldr	r2, [pc, #600]	; (8002030 <HAL_GPIO_Init+0x290>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d05e      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
 8001ddc:	4a94      	ldr	r2, [pc, #592]	; (8002030 <HAL_GPIO_Init+0x290>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d875      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001de2:	4a94      	ldr	r2, [pc, #592]	; (8002034 <HAL_GPIO_Init+0x294>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d058      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
 8001de8:	4a92      	ldr	r2, [pc, #584]	; (8002034 <HAL_GPIO_Init+0x294>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d86f      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001dee:	4a92      	ldr	r2, [pc, #584]	; (8002038 <HAL_GPIO_Init+0x298>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d052      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
 8001df4:	4a90      	ldr	r2, [pc, #576]	; (8002038 <HAL_GPIO_Init+0x298>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d869      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001dfa:	4a90      	ldr	r2, [pc, #576]	; (800203c <HAL_GPIO_Init+0x29c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d04c      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
 8001e00:	4a8e      	ldr	r2, [pc, #568]	; (800203c <HAL_GPIO_Init+0x29c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d863      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001e06:	4a8e      	ldr	r2, [pc, #568]	; (8002040 <HAL_GPIO_Init+0x2a0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d046      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
 8001e0c:	4a8c      	ldr	r2, [pc, #560]	; (8002040 <HAL_GPIO_Init+0x2a0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d85d      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001e12:	2b12      	cmp	r3, #18
 8001e14:	d82a      	bhi.n	8001e6c <HAL_GPIO_Init+0xcc>
 8001e16:	2b12      	cmp	r3, #18
 8001e18:	d859      	bhi.n	8001ece <HAL_GPIO_Init+0x12e>
 8001e1a:	a201      	add	r2, pc, #4	; (adr r2, 8001e20 <HAL_GPIO_Init+0x80>)
 8001e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e20:	08001e9b 	.word	0x08001e9b
 8001e24:	08001e75 	.word	0x08001e75
 8001e28:	08001e87 	.word	0x08001e87
 8001e2c:	08001ec9 	.word	0x08001ec9
 8001e30:	08001ecf 	.word	0x08001ecf
 8001e34:	08001ecf 	.word	0x08001ecf
 8001e38:	08001ecf 	.word	0x08001ecf
 8001e3c:	08001ecf 	.word	0x08001ecf
 8001e40:	08001ecf 	.word	0x08001ecf
 8001e44:	08001ecf 	.word	0x08001ecf
 8001e48:	08001ecf 	.word	0x08001ecf
 8001e4c:	08001ecf 	.word	0x08001ecf
 8001e50:	08001ecf 	.word	0x08001ecf
 8001e54:	08001ecf 	.word	0x08001ecf
 8001e58:	08001ecf 	.word	0x08001ecf
 8001e5c:	08001ecf 	.word	0x08001ecf
 8001e60:	08001ecf 	.word	0x08001ecf
 8001e64:	08001e7d 	.word	0x08001e7d
 8001e68:	08001e91 	.word	0x08001e91
 8001e6c:	4a75      	ldr	r2, [pc, #468]	; (8002044 <HAL_GPIO_Init+0x2a4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e72:	e02c      	b.n	8001ece <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	623b      	str	r3, [r7, #32]
          break;
 8001e7a:	e029      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	3304      	adds	r3, #4
 8001e82:	623b      	str	r3, [r7, #32]
          break;
 8001e84:	e024      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	3308      	adds	r3, #8
 8001e8c:	623b      	str	r3, [r7, #32]
          break;
 8001e8e:	e01f      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	330c      	adds	r3, #12
 8001e96:	623b      	str	r3, [r7, #32]
          break;
 8001e98:	e01a      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d102      	bne.n	8001ea8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	623b      	str	r3, [r7, #32]
          break;
 8001ea6:	e013      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d105      	bne.n	8001ebc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	611a      	str	r2, [r3, #16]
          break;
 8001eba:	e009      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ebc:	2308      	movs	r3, #8
 8001ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	615a      	str	r2, [r3, #20]
          break;
 8001ec6:	e003      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
          break;
 8001ecc:	e000      	b.n	8001ed0 <HAL_GPIO_Init+0x130>
          break;
 8001ece:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2bff      	cmp	r3, #255	; 0xff
 8001ed4:	d801      	bhi.n	8001eda <HAL_GPIO_Init+0x13a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	e001      	b.n	8001ede <HAL_GPIO_Init+0x13e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3304      	adds	r3, #4
 8001ede:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2bff      	cmp	r3, #255	; 0xff
 8001ee4:	d802      	bhi.n	8001eec <HAL_GPIO_Init+0x14c>
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	e002      	b.n	8001ef2 <HAL_GPIO_Init+0x152>
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	3b08      	subs	r3, #8
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	210f      	movs	r1, #15
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	401a      	ands	r2, r3
 8001f04:	6a39      	ldr	r1, [r7, #32]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 80c1 	beq.w	80020a2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f20:	4b49      	ldr	r3, [pc, #292]	; (8002048 <HAL_GPIO_Init+0x2a8>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a48      	ldr	r2, [pc, #288]	; (8002048 <HAL_GPIO_Init+0x2a8>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b46      	ldr	r3, [pc, #280]	; (8002048 <HAL_GPIO_Init+0x2a8>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f38:	4a44      	ldr	r2, [pc, #272]	; (800204c <HAL_GPIO_Init+0x2ac>)
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3c      	ldr	r2, [pc, #240]	; (8002050 <HAL_GPIO_Init+0x2b0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d01f      	beq.n	8001fa4 <HAL_GPIO_Init+0x204>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3b      	ldr	r2, [pc, #236]	; (8002054 <HAL_GPIO_Init+0x2b4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d019      	beq.n	8001fa0 <HAL_GPIO_Init+0x200>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a3a      	ldr	r2, [pc, #232]	; (8002058 <HAL_GPIO_Init+0x2b8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d013      	beq.n	8001f9c <HAL_GPIO_Init+0x1fc>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a39      	ldr	r2, [pc, #228]	; (800205c <HAL_GPIO_Init+0x2bc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00d      	beq.n	8001f98 <HAL_GPIO_Init+0x1f8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a38      	ldr	r2, [pc, #224]	; (8002060 <HAL_GPIO_Init+0x2c0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <HAL_GPIO_Init+0x1f4>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a37      	ldr	r2, [pc, #220]	; (8002064 <HAL_GPIO_Init+0x2c4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_GPIO_Init+0x1f0>
 8001f8c:	2305      	movs	r3, #5
 8001f8e:	e00a      	b.n	8001fa6 <HAL_GPIO_Init+0x206>
 8001f90:	2306      	movs	r3, #6
 8001f92:	e008      	b.n	8001fa6 <HAL_GPIO_Init+0x206>
 8001f94:	2304      	movs	r3, #4
 8001f96:	e006      	b.n	8001fa6 <HAL_GPIO_Init+0x206>
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e004      	b.n	8001fa6 <HAL_GPIO_Init+0x206>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e002      	b.n	8001fa6 <HAL_GPIO_Init+0x206>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <HAL_GPIO_Init+0x206>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa8:	f002 0203 	and.w	r2, r2, #3
 8001fac:	0092      	lsls	r2, r2, #2
 8001fae:	4093      	lsls	r3, r2
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fb6:	4925      	ldr	r1, [pc, #148]	; (800204c <HAL_GPIO_Init+0x2ac>)
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fd0:	4b25      	ldr	r3, [pc, #148]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	4924      	ldr	r1, [pc, #144]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fde:	4b22      	ldr	r3, [pc, #136]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4920      	ldr	r1, [pc, #128]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	491a      	ldr	r1, [pc, #104]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	60cb      	str	r3, [r1, #12]
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	43db      	mvns	r3, r3
 800200e:	4916      	ldr	r1, [pc, #88]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8002010:	4013      	ands	r3, r2
 8002012:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d025      	beq.n	800206c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	4910      	ldr	r1, [pc, #64]	; (8002068 <HAL_GPIO_Init+0x2c8>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
 800202c:	e025      	b.n	800207a <HAL_GPIO_Init+0x2da>
 800202e:	bf00      	nop
 8002030:	10320000 	.word	0x10320000
 8002034:	10310000 	.word	0x10310000
 8002038:	10220000 	.word	0x10220000
 800203c:	10210000 	.word	0x10210000
 8002040:	10120000 	.word	0x10120000
 8002044:	10110000 	.word	0x10110000
 8002048:	40021000 	.word	0x40021000
 800204c:	40010000 	.word	0x40010000
 8002050:	40010800 	.word	0x40010800
 8002054:	40010c00 	.word	0x40010c00
 8002058:	40011000 	.word	0x40011000
 800205c:	40011400 	.word	0x40011400
 8002060:	40011800 	.word	0x40011800
 8002064:	40011c00 	.word	0x40011c00
 8002068:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_GPIO_Init+0x324>)
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	43db      	mvns	r3, r3
 8002074:	4913      	ldr	r1, [pc, #76]	; (80020c4 <HAL_GPIO_Init+0x324>)
 8002076:	4013      	ands	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d006      	beq.n	8002094 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002086:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <HAL_GPIO_Init+0x324>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	490e      	ldr	r1, [pc, #56]	; (80020c4 <HAL_GPIO_Init+0x324>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
 8002092:	e006      	b.n	80020a2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_GPIO_Init+0x324>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	43db      	mvns	r3, r3
 800209c:	4909      	ldr	r1, [pc, #36]	; (80020c4 <HAL_GPIO_Init+0x324>)
 800209e:	4013      	ands	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	3301      	adds	r3, #1
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	fa22 f303 	lsr.w	r3, r2, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f47f ae7e 	bne.w	8001db4 <HAL_GPIO_Init+0x14>
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	372c      	adds	r7, #44	; 0x2c
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	40010400 	.word	0x40010400

080020c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	807b      	strh	r3, [r7, #2]
 80020d4:	4613      	mov	r3, r2
 80020d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d8:	787b      	ldrb	r3, [r7, #1]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020de:	887a      	ldrh	r2, [r7, #2]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020e4:	e003      	b.n	80020ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020e6:	887b      	ldrh	r3, [r7, #2]
 80020e8:	041a      	lsls	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	611a      	str	r2, [r3, #16]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e272      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8087 	beq.w	8002226 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002118:	4b92      	ldr	r3, [pc, #584]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b04      	cmp	r3, #4
 8002122:	d00c      	beq.n	800213e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002124:	4b8f      	ldr	r3, [pc, #572]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	2b08      	cmp	r3, #8
 800212e:	d112      	bne.n	8002156 <HAL_RCC_OscConfig+0x5e>
 8002130:	4b8c      	ldr	r3, [pc, #560]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213c:	d10b      	bne.n	8002156 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213e:	4b89      	ldr	r3, [pc, #548]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d06c      	beq.n	8002224 <HAL_RCC_OscConfig+0x12c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d168      	bne.n	8002224 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e24c      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x76>
 8002160:	4b80      	ldr	r3, [pc, #512]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a7f      	ldr	r2, [pc, #508]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	e02e      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x98>
 8002176:	4b7b      	ldr	r3, [pc, #492]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a7a      	ldr	r2, [pc, #488]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800217c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b78      	ldr	r3, [pc, #480]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a77      	ldr	r2, [pc, #476]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e01d      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0xbc>
 800219a:	4b72      	ldr	r3, [pc, #456]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a71      	ldr	r2, [pc, #452]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b6f      	ldr	r3, [pc, #444]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a6e      	ldr	r2, [pc, #440]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 80021b4:	4b6b      	ldr	r3, [pc, #428]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a6a      	ldr	r2, [pc, #424]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b68      	ldr	r3, [pc, #416]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a67      	ldr	r2, [pc, #412]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff fccc 	bl	8001b70 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff fcc8 	bl	8001b70 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e200      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4b5d      	ldr	r3, [pc, #372]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0xe4>
 80021fa:	e014      	b.n	8002226 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7ff fcb8 	bl	8001b70 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002204:	f7ff fcb4 	bl	8001b70 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1ec      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002216:	4b53      	ldr	r3, [pc, #332]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x10c>
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d063      	beq.n	80022fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002232:	4b4c      	ldr	r3, [pc, #304]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800223e:	4b49      	ldr	r3, [pc, #292]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b08      	cmp	r3, #8
 8002248:	d11c      	bne.n	8002284 <HAL_RCC_OscConfig+0x18c>
 800224a:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d116      	bne.n	8002284 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	4b43      	ldr	r3, [pc, #268]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_RCC_OscConfig+0x176>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d001      	beq.n	800226e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e1c0      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	4b3d      	ldr	r3, [pc, #244]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4939      	ldr	r1, [pc, #228]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002282:	e03a      	b.n	80022fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d020      	beq.n	80022ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800228c:	4b36      	ldr	r3, [pc, #216]	; (8002368 <HAL_RCC_OscConfig+0x270>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7ff fc6d 	bl	8001b70 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229a:	f7ff fc69 	bl	8001b70 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e1a1      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b8:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4927      	ldr	r1, [pc, #156]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]
 80022cc:	e015      	b.n	80022fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <HAL_RCC_OscConfig+0x270>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff fc4c 	bl	8001b70 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022dc:	f7ff fc48 	bl	8001b70 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e180      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d03a      	beq.n	800237c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d019      	beq.n	8002342 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <HAL_RCC_OscConfig+0x274>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002314:	f7ff fc2c 	bl	8001b70 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231c:	f7ff fc28 	bl	8001b70 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e160      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800233a:	2001      	movs	r0, #1
 800233c:	f000 face 	bl	80028dc <RCC_Delay>
 8002340:	e01c      	b.n	800237c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_RCC_OscConfig+0x274>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002348:	f7ff fc12 	bl	8001b70 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234e:	e00f      	b.n	8002370 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002350:	f7ff fc0e 	bl	8001b70 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d908      	bls.n	8002370 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e146      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000
 8002368:	42420000 	.word	0x42420000
 800236c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002370:	4b92      	ldr	r3, [pc, #584]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1e9      	bne.n	8002350 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80a6 	beq.w	80024d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238e:	4b8b      	ldr	r3, [pc, #556]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10d      	bne.n	80023b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	4b88      	ldr	r3, [pc, #544]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a87      	ldr	r2, [pc, #540]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]
 80023a6:	4b85      	ldr	r3, [pc, #532]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b82      	ldr	r3, [pc, #520]	; (80025c0 <HAL_RCC_OscConfig+0x4c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d118      	bne.n	80023f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c2:	4b7f      	ldr	r3, [pc, #508]	; (80025c0 <HAL_RCC_OscConfig+0x4c8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7e      	ldr	r2, [pc, #504]	; (80025c0 <HAL_RCC_OscConfig+0x4c8>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ce:	f7ff fbcf 	bl	8001b70 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d6:	f7ff fbcb 	bl	8001b70 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b64      	cmp	r3, #100	; 0x64
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e103      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	4b75      	ldr	r3, [pc, #468]	; (80025c0 <HAL_RCC_OscConfig+0x4c8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x312>
 80023fc:	4b6f      	ldr	r3, [pc, #444]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4a6e      	ldr	r2, [pc, #440]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	e02d      	b.n	8002466 <HAL_RCC_OscConfig+0x36e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10c      	bne.n	800242c <HAL_RCC_OscConfig+0x334>
 8002412:	4b6a      	ldr	r3, [pc, #424]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a69      	ldr	r2, [pc, #420]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	6213      	str	r3, [r2, #32]
 800241e:	4b67      	ldr	r3, [pc, #412]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a66      	ldr	r2, [pc, #408]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	6213      	str	r3, [r2, #32]
 800242a:	e01c      	b.n	8002466 <HAL_RCC_OscConfig+0x36e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b05      	cmp	r3, #5
 8002432:	d10c      	bne.n	800244e <HAL_RCC_OscConfig+0x356>
 8002434:	4b61      	ldr	r3, [pc, #388]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a60      	ldr	r2, [pc, #384]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	4b5e      	ldr	r3, [pc, #376]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4a5d      	ldr	r2, [pc, #372]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6213      	str	r3, [r2, #32]
 800244c:	e00b      	b.n	8002466 <HAL_RCC_OscConfig+0x36e>
 800244e:	4b5b      	ldr	r3, [pc, #364]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a5a      	ldr	r2, [pc, #360]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	4b58      	ldr	r3, [pc, #352]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a57      	ldr	r2, [pc, #348]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d015      	beq.n	800249a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7ff fb7f 	bl	8001b70 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7ff fb7b 	bl	8001b70 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	; 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e0b1      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248c:	4b4b      	ldr	r3, [pc, #300]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0ee      	beq.n	8002476 <HAL_RCC_OscConfig+0x37e>
 8002498:	e014      	b.n	80024c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249a:	f7ff fb69 	bl	8001b70 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7ff fb65 	bl	8001b70 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e09b      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b8:	4b40      	ldr	r3, [pc, #256]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1ee      	bne.n	80024a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d105      	bne.n	80024d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ca:	4b3c      	ldr	r3, [pc, #240]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a3b      	ldr	r2, [pc, #236]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8087 	beq.w	80025ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e0:	4b36      	ldr	r3, [pc, #216]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d061      	beq.n	80025b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d146      	bne.n	8002582 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f4:	4b33      	ldr	r3, [pc, #204]	; (80025c4 <HAL_RCC_OscConfig+0x4cc>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7ff fb39 	bl	8001b70 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002502:	f7ff fb35 	bl	8001b70 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e06d      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002514:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f0      	bne.n	8002502 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002528:	d108      	bne.n	800253c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800252a:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	4921      	ldr	r1, [pc, #132]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800253c:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a19      	ldr	r1, [r3, #32]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	430b      	orrs	r3, r1
 800254e:	491b      	ldr	r1, [pc, #108]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_RCC_OscConfig+0x4cc>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7ff fb09 	bl	8001b70 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002562:	f7ff fb05 	bl	8001b70 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e03d      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002574:	4b11      	ldr	r3, [pc, #68]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x46a>
 8002580:	e035      	b.n	80025ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_RCC_OscConfig+0x4cc>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff faf2 	bl	8001b70 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002590:	f7ff faee 	bl	8001b70 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e026      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x498>
 80025ae:	e01e      	b.n	80025ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e019      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40007000 	.word	0x40007000
 80025c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_RCC_OscConfig+0x500>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000

080025fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0d0      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002610:	4b6a      	ldr	r3, [pc, #424]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d910      	bls.n	8002640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b67      	ldr	r3, [pc, #412]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 0207 	bic.w	r2, r3, #7
 8002626:	4965      	ldr	r1, [pc, #404]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b63      	ldr	r3, [pc, #396]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0b8      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002658:	4b59      	ldr	r3, [pc, #356]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4a58      	ldr	r2, [pc, #352]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002662:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002670:	4b53      	ldr	r3, [pc, #332]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a52      	ldr	r2, [pc, #328]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800267a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267c:	4b50      	ldr	r3, [pc, #320]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	494d      	ldr	r1, [pc, #308]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d040      	beq.n	800271c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d115      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e07f      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ba:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e073      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e06b      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026da:	4b39      	ldr	r3, [pc, #228]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f023 0203 	bic.w	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4936      	ldr	r1, [pc, #216]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ec:	f7ff fa40 	bl	8001b70 <HAL_GetTick>
 80026f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	e00a      	b.n	800270a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f4:	f7ff fa3c 	bl	8001b70 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e053      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 020c 	and.w	r2, r3, #12
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	429a      	cmp	r2, r3
 800271a:	d1eb      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800271c:	4b27      	ldr	r3, [pc, #156]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d210      	bcs.n	800274c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b24      	ldr	r3, [pc, #144]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 0207 	bic.w	r2, r3, #7
 8002732:	4922      	ldr	r1, [pc, #136]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e032      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4916      	ldr	r1, [pc, #88]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	490e      	ldr	r1, [pc, #56]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800278a:	f000 f821 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 800278e:	4602      	mov	r2, r0
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	490a      	ldr	r1, [pc, #40]	; (80027c4 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	5ccb      	ldrb	r3, [r1, r3]
 800279e:	fa22 f303 	lsr.w	r3, r2, r3
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_RCC_ClockConfig+0x1cc>)
 80027a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_ClockConfig+0x1d0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff f99e 	bl	8001aec <HAL_InitTick>

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40022000 	.word	0x40022000
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08008454 	.word	0x08008454
 80027c8:	20000000 	.word	0x20000000
 80027cc:	20000004 	.word	0x20000004

080027d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ea:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <HAL_RCC_GetSysClockFreq+0x94>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d002      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x30>
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d003      	beq.n	8002806 <HAL_RCC_GetSysClockFreq+0x36>
 80027fe:	e027      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_RCC_GetSysClockFreq+0x98>)
 8002802:	613b      	str	r3, [r7, #16]
      break;
 8002804:	e027      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	0c9b      	lsrs	r3, r3, #18
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	4a17      	ldr	r2, [pc, #92]	; (800286c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002810:	5cd3      	ldrb	r3, [r2, r3]
 8002812:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d010      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <HAL_RCC_GetSysClockFreq+0x94>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	0c5b      	lsrs	r3, r3, #17
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	4a11      	ldr	r2, [pc, #68]	; (8002870 <HAL_RCC_GetSysClockFreq+0xa0>)
 800282a:	5cd3      	ldrb	r3, [r2, r3]
 800282c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <HAL_RCC_GetSysClockFreq+0x98>)
 8002832:	fb03 f202 	mul.w	r2, r3, r2
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	e004      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002844:	fb02 f303 	mul.w	r3, r2, r3
 8002848:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	613b      	str	r3, [r7, #16]
      break;
 800284e:	e002      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_GetSysClockFreq+0x98>)
 8002852:	613b      	str	r3, [r7, #16]
      break;
 8002854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002856:	693b      	ldr	r3, [r7, #16]
}
 8002858:	4618      	mov	r0, r3
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
 8002868:	007a1200 	.word	0x007a1200
 800286c:	0800846c 	.word	0x0800846c
 8002870:	0800847c 	.word	0x0800847c
 8002874:	003d0900 	.word	0x003d0900

08002878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <HAL_RCC_GetHCLKFreq+0x10>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	20000000 	.word	0x20000000

0800288c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002890:	f7ff fff2 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4903      	ldr	r1, [pc, #12]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	08008464 	.word	0x08008464

080028b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b8:	f7ff ffde 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	0adb      	lsrs	r3, r3, #11
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4903      	ldr	r1, [pc, #12]	; (80028d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	08008464 	.word	0x08008464

080028dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <RCC_Delay+0x34>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <RCC_Delay+0x38>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	0a5b      	lsrs	r3, r3, #9
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028f8:	bf00      	nop
  }
  while (Delay --);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	60fa      	str	r2, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f9      	bne.n	80028f8 <RCC_Delay+0x1c>
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	20000000 	.word	0x20000000
 8002914:	10624dd3 	.word	0x10624dd3

08002918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e041      	b.n	80029ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe ff94 	bl	800186c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3304      	adds	r3, #4
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f000 fcb6 	bl	80032c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d001      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e044      	b.n	8002a5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <HAL_TIM_Base_Start_IT+0xac>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d018      	beq.n	8002a24 <HAL_TIM_Base_Start_IT+0x6c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <HAL_TIM_Base_Start_IT+0xb0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d013      	beq.n	8002a24 <HAL_TIM_Base_Start_IT+0x6c>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a04:	d00e      	beq.n	8002a24 <HAL_TIM_Base_Start_IT+0x6c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <HAL_TIM_Base_Start_IT+0xb4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d009      	beq.n	8002a24 <HAL_TIM_Base_Start_IT+0x6c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a16      	ldr	r2, [pc, #88]	; (8002a70 <HAL_TIM_Base_Start_IT+0xb8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d004      	beq.n	8002a24 <HAL_TIM_Base_Start_IT+0x6c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <HAL_TIM_Base_Start_IT+0xbc>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d111      	bne.n	8002a48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d010      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0201 	orr.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a46:	e007      	b.n	8002a58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40013400 	.word	0x40013400
 8002a6c:	40000400 	.word	0x40000400
 8002a70:	40000800 	.word	0x40000800
 8002a74:	40000c00 	.word	0x40000c00

08002a78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e041      	b.n	8002b0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe feb2 	bl	8001808 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	f000 fc06 	bl	80032c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <HAL_TIM_PWM_Start+0x24>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	bf14      	ite	ne
 8002b34:	2301      	movne	r3, #1
 8002b36:	2300      	moveq	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e022      	b.n	8002b82 <HAL_TIM_PWM_Start+0x6a>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d109      	bne.n	8002b56 <HAL_TIM_PWM_Start+0x3e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	bf14      	ite	ne
 8002b4e:	2301      	movne	r3, #1
 8002b50:	2300      	moveq	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	e015      	b.n	8002b82 <HAL_TIM_PWM_Start+0x6a>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d109      	bne.n	8002b70 <HAL_TIM_PWM_Start+0x58>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	bf14      	ite	ne
 8002b68:	2301      	movne	r3, #1
 8002b6a:	2300      	moveq	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	e008      	b.n	8002b82 <HAL_TIM_PWM_Start+0x6a>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e072      	b.n	8002c70 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d104      	bne.n	8002b9a <HAL_TIM_PWM_Start+0x82>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b98:	e013      	b.n	8002bc2 <HAL_TIM_PWM_Start+0xaa>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d104      	bne.n	8002baa <HAL_TIM_PWM_Start+0x92>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba8:	e00b      	b.n	8002bc2 <HAL_TIM_PWM_Start+0xaa>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d104      	bne.n	8002bba <HAL_TIM_PWM_Start+0xa2>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb8:	e003      	b.n	8002bc2 <HAL_TIM_PWM_Start+0xaa>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	6839      	ldr	r1, [r7, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fda2 	bl	8003714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a28      	ldr	r2, [pc, #160]	; (8002c78 <HAL_TIM_PWM_Start+0x160>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d004      	beq.n	8002be4 <HAL_TIM_PWM_Start+0xcc>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a27      	ldr	r2, [pc, #156]	; (8002c7c <HAL_TIM_PWM_Start+0x164>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d101      	bne.n	8002be8 <HAL_TIM_PWM_Start+0xd0>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <HAL_TIM_PWM_Start+0xd2>
 8002be8:	2300      	movs	r3, #0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <HAL_TIM_PWM_Start+0x160>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d018      	beq.n	8002c3a <HAL_TIM_PWM_Start+0x122>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1b      	ldr	r2, [pc, #108]	; (8002c7c <HAL_TIM_PWM_Start+0x164>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <HAL_TIM_PWM_Start+0x122>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1a:	d00e      	beq.n	8002c3a <HAL_TIM_PWM_Start+0x122>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a17      	ldr	r2, [pc, #92]	; (8002c80 <HAL_TIM_PWM_Start+0x168>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d009      	beq.n	8002c3a <HAL_TIM_PWM_Start+0x122>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a16      	ldr	r2, [pc, #88]	; (8002c84 <HAL_TIM_PWM_Start+0x16c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d004      	beq.n	8002c3a <HAL_TIM_PWM_Start+0x122>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <HAL_TIM_PWM_Start+0x170>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d111      	bne.n	8002c5e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b06      	cmp	r3, #6
 8002c4a:	d010      	beq.n	8002c6e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5c:	e007      	b.n	8002c6e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0201 	orr.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40012c00 	.word	0x40012c00
 8002c7c:	40013400 	.word	0x40013400
 8002c80:	40000400 	.word	0x40000400
 8002c84:	40000800 	.word	0x40000800
 8002c88:	40000c00 	.word	0x40000c00

08002c8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e093      	b.n	8002dc8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7fe fd0f 	bl	80016d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cd0:	f023 0307 	bic.w	r3, r3, #7
 8002cd4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	f000 faf1 	bl	80032c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0e:	f023 0303 	bic.w	r3, r3, #3
 8002d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002d2c:	f023 030c 	bic.w	r3, r3, #12
 8002d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	011a      	lsls	r2, r3, #4
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	031b      	lsls	r3, r3, #12
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002d6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	4313      	orrs	r3, r2
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002de8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002df0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002df8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d110      	bne.n	8002e22 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d102      	bne.n	8002e0c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e06:	7b7b      	ldrb	r3, [r7, #13]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d001      	beq.n	8002e10 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e069      	b.n	8002ee4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e20:	e031      	b.n	8002e86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d110      	bne.n	8002e4a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e28:	7bbb      	ldrb	r3, [r7, #14]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d102      	bne.n	8002e34 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e2e:	7b3b      	ldrb	r3, [r7, #12]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d001      	beq.n	8002e38 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e055      	b.n	8002ee4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e48:	e01d      	b.n	8002e86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d108      	bne.n	8002e62 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e50:	7bbb      	ldrb	r3, [r7, #14]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d105      	bne.n	8002e62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e56:	7b7b      	ldrb	r3, [r7, #13]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d102      	bne.n	8002e62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e5c:	7b3b      	ldrb	r3, [r7, #12]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d001      	beq.n	8002e66 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e03e      	b.n	8002ee4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_TIM_Encoder_Start+0xc4>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d008      	beq.n	8002ea4 <HAL_TIM_Encoder_Start+0xd4>
 8002e92:	e00f      	b.n	8002eb4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fc39 	bl	8003714 <TIM_CCxChannelCmd>
      break;
 8002ea2:	e016      	b.n	8002ed2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	2104      	movs	r1, #4
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fc31 	bl	8003714 <TIM_CCxChannelCmd>
      break;
 8002eb2:	e00e      	b.n	8002ed2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	2100      	movs	r1, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fc29 	bl	8003714 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	2104      	movs	r1, #4
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fc22 	bl	8003714 <TIM_CCxChannelCmd>
      break;
 8002ed0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d122      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d11b      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0202 	mvn.w	r2, #2
 8002f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f9af 	bl	8003292 <HAL_TIM_IC_CaptureCallback>
 8002f34:	e005      	b.n	8002f42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f9a2 	bl	8003280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f9b1 	bl	80032a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d122      	bne.n	8002f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d11b      	bne.n	8002f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0204 	mvn.w	r2, #4
 8002f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f985 	bl	8003292 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f978 	bl	8003280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f987 	bl	80032a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d122      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0208 	mvn.w	r2, #8
 8002fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f95b 	bl	8003292 <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e005      	b.n	8002fea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f94e 	bl	8003280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f95d 	bl	80032a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d122      	bne.n	8003044 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b10      	cmp	r3, #16
 800300a:	d11b      	bne.n	8003044 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0210 	mvn.w	r2, #16
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2208      	movs	r2, #8
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f931 	bl	8003292 <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f924 	bl	8003280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f933 	bl	80032a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b01      	cmp	r3, #1
 8003050:	d10e      	bne.n	8003070 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d107      	bne.n	8003070 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0201 	mvn.w	r2, #1
 8003068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fe f802 	bl	8001074 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	2b80      	cmp	r3, #128	; 0x80
 800307c:	d10e      	bne.n	800309c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003088:	2b80      	cmp	r3, #128	; 0x80
 800308a:	d107      	bne.n	800309c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fc26 	bl	80038e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a6:	2b40      	cmp	r3, #64	; 0x40
 80030a8:	d10e      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b4:	2b40      	cmp	r3, #64	; 0x40
 80030b6:	d107      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f8f7 	bl	80032b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d10e      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d107      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0220 	mvn.w	r2, #32
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fbf1 	bl	80038d6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003116:	2302      	movs	r3, #2
 8003118:	e0ae      	b.n	8003278 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b0c      	cmp	r3, #12
 8003126:	f200 809f 	bhi.w	8003268 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800312a:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800312c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003130:	08003165 	.word	0x08003165
 8003134:	08003269 	.word	0x08003269
 8003138:	08003269 	.word	0x08003269
 800313c:	08003269 	.word	0x08003269
 8003140:	080031a5 	.word	0x080031a5
 8003144:	08003269 	.word	0x08003269
 8003148:	08003269 	.word	0x08003269
 800314c:	08003269 	.word	0x08003269
 8003150:	080031e7 	.word	0x080031e7
 8003154:	08003269 	.word	0x08003269
 8003158:	08003269 	.word	0x08003269
 800315c:	08003269 	.word	0x08003269
 8003160:	08003227 	.word	0x08003227
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f926 	bl	80033bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0208 	orr.w	r2, r2, #8
 800317e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0204 	bic.w	r2, r2, #4
 800318e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6999      	ldr	r1, [r3, #24]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	619a      	str	r2, [r3, #24]
      break;
 80031a2:	e064      	b.n	800326e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f976 	bl	800349c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6999      	ldr	r1, [r3, #24]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	021a      	lsls	r2, r3, #8
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	619a      	str	r2, [r3, #24]
      break;
 80031e4:	e043      	b.n	800326e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f9c9 	bl	8003584 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0208 	orr.w	r2, r2, #8
 8003200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0204 	bic.w	r2, r2, #4
 8003210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69d9      	ldr	r1, [r3, #28]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	61da      	str	r2, [r3, #28]
      break;
 8003224:	e023      	b.n	800326e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fa1d 	bl	800366c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69d9      	ldr	r1, [r3, #28]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	021a      	lsls	r2, r3, #8
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	61da      	str	r2, [r3, #28]
      break;
 8003266:	e002      	b.n	800326e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	75fb      	strb	r3, [r7, #23]
      break;
 800326c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr

080032b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a33      	ldr	r2, [pc, #204]	; (80033a8 <TIM_Base_SetConfig+0xe0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d013      	beq.n	8003308 <TIM_Base_SetConfig+0x40>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a32      	ldr	r2, [pc, #200]	; (80033ac <TIM_Base_SetConfig+0xe4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00f      	beq.n	8003308 <TIM_Base_SetConfig+0x40>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ee:	d00b      	beq.n	8003308 <TIM_Base_SetConfig+0x40>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a2f      	ldr	r2, [pc, #188]	; (80033b0 <TIM_Base_SetConfig+0xe8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d007      	beq.n	8003308 <TIM_Base_SetConfig+0x40>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a2e      	ldr	r2, [pc, #184]	; (80033b4 <TIM_Base_SetConfig+0xec>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d003      	beq.n	8003308 <TIM_Base_SetConfig+0x40>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a2d      	ldr	r2, [pc, #180]	; (80033b8 <TIM_Base_SetConfig+0xf0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d108      	bne.n	800331a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <TIM_Base_SetConfig+0xe0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <TIM_Base_SetConfig+0x82>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a21      	ldr	r2, [pc, #132]	; (80033ac <TIM_Base_SetConfig+0xe4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00f      	beq.n	800334a <TIM_Base_SetConfig+0x82>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003330:	d00b      	beq.n	800334a <TIM_Base_SetConfig+0x82>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <TIM_Base_SetConfig+0xe8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d007      	beq.n	800334a <TIM_Base_SetConfig+0x82>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1d      	ldr	r2, [pc, #116]	; (80033b4 <TIM_Base_SetConfig+0xec>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d003      	beq.n	800334a <TIM_Base_SetConfig+0x82>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <TIM_Base_SetConfig+0xf0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d108      	bne.n	800335c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <TIM_Base_SetConfig+0xe0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d003      	beq.n	8003390 <TIM_Base_SetConfig+0xc8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a08      	ldr	r2, [pc, #32]	; (80033ac <TIM_Base_SetConfig+0xe4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d103      	bne.n	8003398 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	615a      	str	r2, [r3, #20]
}
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr
 80033a8:	40012c00 	.word	0x40012c00
 80033ac:	40013400 	.word	0x40013400
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40000800 	.word	0x40000800
 80033b8:	40000c00 	.word	0x40000c00

080033bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f023 0201 	bic.w	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0303 	bic.w	r3, r3, #3
 80033f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f023 0302 	bic.w	r3, r3, #2
 8003404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a20      	ldr	r2, [pc, #128]	; (8003494 <TIM_OC1_SetConfig+0xd8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <TIM_OC1_SetConfig+0x64>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a1f      	ldr	r2, [pc, #124]	; (8003498 <TIM_OC1_SetConfig+0xdc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d10c      	bne.n	800343a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f023 0308 	bic.w	r3, r3, #8
 8003426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f023 0304 	bic.w	r3, r3, #4
 8003438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a15      	ldr	r2, [pc, #84]	; (8003494 <TIM_OC1_SetConfig+0xd8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d003      	beq.n	800344a <TIM_OC1_SetConfig+0x8e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a14      	ldr	r2, [pc, #80]	; (8003498 <TIM_OC1_SetConfig+0xdc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d111      	bne.n	800346e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	621a      	str	r2, [r3, #32]
}
 8003488:	bf00      	nop
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40013400 	.word	0x40013400

0800349c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f023 0210 	bic.w	r2, r3, #16
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f023 0320 	bic.w	r3, r3, #32
 80034e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a21      	ldr	r2, [pc, #132]	; (800357c <TIM_OC2_SetConfig+0xe0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d003      	beq.n	8003504 <TIM_OC2_SetConfig+0x68>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a20      	ldr	r2, [pc, #128]	; (8003580 <TIM_OC2_SetConfig+0xe4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d10d      	bne.n	8003520 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800350a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800351e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a16      	ldr	r2, [pc, #88]	; (800357c <TIM_OC2_SetConfig+0xe0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d003      	beq.n	8003530 <TIM_OC2_SetConfig+0x94>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a15      	ldr	r2, [pc, #84]	; (8003580 <TIM_OC2_SetConfig+0xe4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d113      	bne.n	8003558 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800353e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	621a      	str	r2, [r3, #32]
}
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40013400 	.word	0x40013400

08003584 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a21      	ldr	r2, [pc, #132]	; (8003664 <TIM_OC3_SetConfig+0xe0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d003      	beq.n	80035ea <TIM_OC3_SetConfig+0x66>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a20      	ldr	r2, [pc, #128]	; (8003668 <TIM_OC3_SetConfig+0xe4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d10d      	bne.n	8003606 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a16      	ldr	r2, [pc, #88]	; (8003664 <TIM_OC3_SetConfig+0xe0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <TIM_OC3_SetConfig+0x92>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a15      	ldr	r2, [pc, #84]	; (8003668 <TIM_OC3_SetConfig+0xe4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d113      	bne.n	800363e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800361c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40013400 	.word	0x40013400

0800366c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	031b      	lsls	r3, r3, #12
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a11      	ldr	r2, [pc, #68]	; (800370c <TIM_OC4_SetConfig+0xa0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_OC4_SetConfig+0x68>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a10      	ldr	r2, [pc, #64]	; (8003710 <TIM_OC4_SetConfig+0xa4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d109      	bne.n	80036e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	019b      	lsls	r3, r3, #6
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40013400 	.word	0x40013400

08003714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	2201      	movs	r2, #1
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a1a      	ldr	r2, [r3, #32]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	43db      	mvns	r3, r3
 8003736:	401a      	ands	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a1a      	ldr	r2, [r3, #32]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 031f 	and.w	r3, r3, #31
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	431a      	orrs	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	621a      	str	r2, [r3, #32]
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr

0800375c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003770:	2302      	movs	r3, #2
 8003772:	e050      	b.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1b      	ldr	r2, [pc, #108]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d018      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a19      	ldr	r2, [pc, #100]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ca:	d00e      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a15      	ldr	r2, [pc, #84]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d009      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a14      	ldr	r2, [pc, #80]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a12      	ldr	r2, [pc, #72]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d10c      	bne.n	8003804 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	40012c00 	.word	0x40012c00
 8003824:	40013400 	.word	0x40013400
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800
 8003830:	40000c00 	.word	0x40000c00

08003834 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800384c:	2302      	movs	r3, #2
 800384e:	e03d      	b.n	80038cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4313      	orrs	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr

080038d6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr

080038fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e042      	b.n	8003992 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7fe f85b 	bl	80019dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2224      	movs	r2, #36	; 0x24
 800392a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800393c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f91c 	bl	8003b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003952:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003962:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003972:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b08a      	sub	sp, #40	; 0x28
 800399e:	af02      	add	r7, sp, #8
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	603b      	str	r3, [r7, #0]
 80039a6:	4613      	mov	r3, r2
 80039a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	d16d      	bne.n	8003a96 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HAL_UART_Transmit+0x2c>
 80039c0:	88fb      	ldrh	r3, [r7, #6]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e066      	b.n	8003a98 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2221      	movs	r2, #33	; 0x21
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039d8:	f7fe f8ca 	bl	8001b70 <HAL_GetTick>
 80039dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	88fa      	ldrh	r2, [r7, #6]
 80039e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f2:	d108      	bne.n	8003a06 <HAL_UART_Transmit+0x6c>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d104      	bne.n	8003a06 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	61bb      	str	r3, [r7, #24]
 8003a04:	e003      	b.n	8003a0e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a0e:	e02a      	b.n	8003a66 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2200      	movs	r2, #0
 8003a18:	2180      	movs	r1, #128	; 0x80
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f840 	bl	8003aa0 <UART_WaitOnFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e036      	b.n	8003a98 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	461a      	mov	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a3e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	3302      	adds	r3, #2
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e007      	b.n	8003a58 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3301      	adds	r3, #1
 8003a56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1cf      	bne.n	8003a10 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2200      	movs	r2, #0
 8003a78:	2140      	movs	r1, #64	; 0x40
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f810 	bl	8003aa0 <UART_WaitOnFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e006      	b.n	8003a98 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	e000      	b.n	8003a98 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a96:	2302      	movs	r3, #2
  }
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3720      	adds	r7, #32
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b090      	sub	sp, #64	; 0x40
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab0:	e050      	b.n	8003b54 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d04c      	beq.n	8003b54 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d007      	beq.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ac0:	f7fe f856 	bl	8001b70 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d241      	bcs.n	8003b54 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	330c      	adds	r3, #12
 8003aee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003af0:	637a      	str	r2, [r7, #52]	; 0x34
 8003af2:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e5      	bne.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3314      	adds	r3, #20
 8003b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	613b      	str	r3, [r7, #16]
   return(result);
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f023 0301 	bic.w	r3, r3, #1
 8003b1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3314      	adds	r3, #20
 8003b22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b24:	623a      	str	r2, [r7, #32]
 8003b26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	69f9      	ldr	r1, [r7, #28]
 8003b2a:	6a3a      	ldr	r2, [r7, #32]
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e5      	bne.n	8003b04 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e00f      	b.n	8003b74 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	bf0c      	ite	eq
 8003b64:	2301      	moveq	r3, #1
 8003b66:	2300      	movne	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d09f      	beq.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3740      	adds	r7, #64	; 0x40
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bb6:	f023 030c 	bic.w	r3, r3, #12
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a2c      	ldr	r2, [pc, #176]	; (8003c90 <UART_SetConfig+0x114>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d103      	bne.n	8003bec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003be4:	f7fe fe66 	bl	80028b4 <HAL_RCC_GetPCLK2Freq>
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	e002      	b.n	8003bf2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bec:	f7fe fe4e 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 8003bf0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009a      	lsls	r2, r3, #2
 8003bfc:	441a      	add	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <UART_SetConfig+0x118>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	0119      	lsls	r1, r3, #4
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	009a      	lsls	r2, r3, #2
 8003c1c:	441a      	add	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c28:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <UART_SetConfig+0x118>)
 8003c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2064      	movs	r0, #100	; 0x64
 8003c32:	fb00 f303 	mul.w	r3, r0, r3
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	3332      	adds	r3, #50	; 0x32
 8003c3c:	4a15      	ldr	r2, [pc, #84]	; (8003c94 <UART_SetConfig+0x118>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c48:	4419      	add	r1, r3
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	009a      	lsls	r2, r3, #2
 8003c54:	441a      	add	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <UART_SetConfig+0x118>)
 8003c62:	fba3 0302 	umull	r0, r3, r3, r2
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	2064      	movs	r0, #100	; 0x64
 8003c6a:	fb00 f303 	mul.w	r3, r0, r3
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	3332      	adds	r3, #50	; 0x32
 8003c74:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <UART_SetConfig+0x118>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	f003 020f 	and.w	r2, r3, #15
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	440a      	add	r2, r1
 8003c86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c88:	bf00      	nop
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40013800 	.word	0x40013800
 8003c94:	51eb851f 	.word	0x51eb851f

08003c98 <__cvt>:
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c9e:	461f      	mov	r7, r3
 8003ca0:	bfbb      	ittet	lt
 8003ca2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003ca6:	461f      	movlt	r7, r3
 8003ca8:	2300      	movge	r3, #0
 8003caa:	232d      	movlt	r3, #45	; 0x2d
 8003cac:	b088      	sub	sp, #32
 8003cae:	4614      	mov	r4, r2
 8003cb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003cb2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003cb4:	7013      	strb	r3, [r2, #0]
 8003cb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003cb8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003cbc:	f023 0820 	bic.w	r8, r3, #32
 8003cc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cc4:	d005      	beq.n	8003cd2 <__cvt+0x3a>
 8003cc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003cca:	d100      	bne.n	8003cce <__cvt+0x36>
 8003ccc:	3501      	adds	r5, #1
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e000      	b.n	8003cd4 <__cvt+0x3c>
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	aa07      	add	r2, sp, #28
 8003cd6:	9204      	str	r2, [sp, #16]
 8003cd8:	aa06      	add	r2, sp, #24
 8003cda:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003cde:	e9cd 3500 	strd	r3, r5, [sp]
 8003ce2:	4622      	mov	r2, r4
 8003ce4:	463b      	mov	r3, r7
 8003ce6:	f001 f883 	bl	8004df0 <_dtoa_r>
 8003cea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003cee:	4606      	mov	r6, r0
 8003cf0:	d102      	bne.n	8003cf8 <__cvt+0x60>
 8003cf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003cf4:	07db      	lsls	r3, r3, #31
 8003cf6:	d522      	bpl.n	8003d3e <__cvt+0xa6>
 8003cf8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cfc:	eb06 0905 	add.w	r9, r6, r5
 8003d00:	d110      	bne.n	8003d24 <__cvt+0x8c>
 8003d02:	7833      	ldrb	r3, [r6, #0]
 8003d04:	2b30      	cmp	r3, #48	; 0x30
 8003d06:	d10a      	bne.n	8003d1e <__cvt+0x86>
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	4639      	mov	r1, r7
 8003d10:	f7fc feb6 	bl	8000a80 <__aeabi_dcmpeq>
 8003d14:	b918      	cbnz	r0, 8003d1e <__cvt+0x86>
 8003d16:	f1c5 0501 	rsb	r5, r5, #1
 8003d1a:	f8ca 5000 	str.w	r5, [sl]
 8003d1e:	f8da 3000 	ldr.w	r3, [sl]
 8003d22:	4499      	add	r9, r3
 8003d24:	2200      	movs	r2, #0
 8003d26:	2300      	movs	r3, #0
 8003d28:	4620      	mov	r0, r4
 8003d2a:	4639      	mov	r1, r7
 8003d2c:	f7fc fea8 	bl	8000a80 <__aeabi_dcmpeq>
 8003d30:	b108      	cbz	r0, 8003d36 <__cvt+0x9e>
 8003d32:	f8cd 901c 	str.w	r9, [sp, #28]
 8003d36:	2230      	movs	r2, #48	; 0x30
 8003d38:	9b07      	ldr	r3, [sp, #28]
 8003d3a:	454b      	cmp	r3, r9
 8003d3c:	d307      	bcc.n	8003d4e <__cvt+0xb6>
 8003d3e:	4630      	mov	r0, r6
 8003d40:	9b07      	ldr	r3, [sp, #28]
 8003d42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003d44:	1b9b      	subs	r3, r3, r6
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	b008      	add	sp, #32
 8003d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d4e:	1c59      	adds	r1, r3, #1
 8003d50:	9107      	str	r1, [sp, #28]
 8003d52:	701a      	strb	r2, [r3, #0]
 8003d54:	e7f0      	b.n	8003d38 <__cvt+0xa0>

08003d56 <__exponent>:
 8003d56:	4603      	mov	r3, r0
 8003d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d5a:	2900      	cmp	r1, #0
 8003d5c:	f803 2b02 	strb.w	r2, [r3], #2
 8003d60:	bfb6      	itet	lt
 8003d62:	222d      	movlt	r2, #45	; 0x2d
 8003d64:	222b      	movge	r2, #43	; 0x2b
 8003d66:	4249      	neglt	r1, r1
 8003d68:	2909      	cmp	r1, #9
 8003d6a:	7042      	strb	r2, [r0, #1]
 8003d6c:	dd2a      	ble.n	8003dc4 <__exponent+0x6e>
 8003d6e:	f10d 0207 	add.w	r2, sp, #7
 8003d72:	4617      	mov	r7, r2
 8003d74:	260a      	movs	r6, #10
 8003d76:	fb91 f5f6 	sdiv	r5, r1, r6
 8003d7a:	4694      	mov	ip, r2
 8003d7c:	fb06 1415 	mls	r4, r6, r5, r1
 8003d80:	3430      	adds	r4, #48	; 0x30
 8003d82:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003d86:	460c      	mov	r4, r1
 8003d88:	2c63      	cmp	r4, #99	; 0x63
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	f102 32ff 	add.w	r2, r2, #4294967295
 8003d90:	dcf1      	bgt.n	8003d76 <__exponent+0x20>
 8003d92:	3130      	adds	r1, #48	; 0x30
 8003d94:	f1ac 0402 	sub.w	r4, ip, #2
 8003d98:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003d9c:	4622      	mov	r2, r4
 8003d9e:	1c41      	adds	r1, r0, #1
 8003da0:	42ba      	cmp	r2, r7
 8003da2:	d30a      	bcc.n	8003dba <__exponent+0x64>
 8003da4:	f10d 0209 	add.w	r2, sp, #9
 8003da8:	eba2 020c 	sub.w	r2, r2, ip
 8003dac:	42bc      	cmp	r4, r7
 8003dae:	bf88      	it	hi
 8003db0:	2200      	movhi	r2, #0
 8003db2:	4413      	add	r3, r2
 8003db4:	1a18      	subs	r0, r3, r0
 8003db6:	b003      	add	sp, #12
 8003db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dba:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003dbe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003dc2:	e7ed      	b.n	8003da0 <__exponent+0x4a>
 8003dc4:	2330      	movs	r3, #48	; 0x30
 8003dc6:	3130      	adds	r1, #48	; 0x30
 8003dc8:	7083      	strb	r3, [r0, #2]
 8003dca:	70c1      	strb	r1, [r0, #3]
 8003dcc:	1d03      	adds	r3, r0, #4
 8003dce:	e7f1      	b.n	8003db4 <__exponent+0x5e>

08003dd0 <_printf_float>:
 8003dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd4:	b091      	sub	sp, #68	; 0x44
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003ddc:	4616      	mov	r6, r2
 8003dde:	461f      	mov	r7, r3
 8003de0:	4605      	mov	r5, r0
 8003de2:	f000 fef3 	bl	8004bcc <_localeconv_r>
 8003de6:	6803      	ldr	r3, [r0, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	9309      	str	r3, [sp, #36]	; 0x24
 8003dec:	f7fc fa1c 	bl	8000228 <strlen>
 8003df0:	2300      	movs	r3, #0
 8003df2:	930e      	str	r3, [sp, #56]	; 0x38
 8003df4:	f8d8 3000 	ldr.w	r3, [r8]
 8003df8:	900a      	str	r0, [sp, #40]	; 0x28
 8003dfa:	3307      	adds	r3, #7
 8003dfc:	f023 0307 	bic.w	r3, r3, #7
 8003e00:	f103 0208 	add.w	r2, r3, #8
 8003e04:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003e08:	f8d4 b000 	ldr.w	fp, [r4]
 8003e0c:	f8c8 2000 	str.w	r2, [r8]
 8003e10:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003e14:	4652      	mov	r2, sl
 8003e16:	4643      	mov	r3, r8
 8003e18:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e1c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003e20:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e22:	f04f 32ff 	mov.w	r2, #4294967295
 8003e26:	4650      	mov	r0, sl
 8003e28:	4b9c      	ldr	r3, [pc, #624]	; (800409c <_printf_float+0x2cc>)
 8003e2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e2c:	f7fc fe5a 	bl	8000ae4 <__aeabi_dcmpun>
 8003e30:	bb70      	cbnz	r0, 8003e90 <_printf_float+0xc0>
 8003e32:	f04f 32ff 	mov.w	r2, #4294967295
 8003e36:	4650      	mov	r0, sl
 8003e38:	4b98      	ldr	r3, [pc, #608]	; (800409c <_printf_float+0x2cc>)
 8003e3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e3c:	f7fc fe34 	bl	8000aa8 <__aeabi_dcmple>
 8003e40:	bb30      	cbnz	r0, 8003e90 <_printf_float+0xc0>
 8003e42:	2200      	movs	r2, #0
 8003e44:	2300      	movs	r3, #0
 8003e46:	4650      	mov	r0, sl
 8003e48:	4641      	mov	r1, r8
 8003e4a:	f7fc fe23 	bl	8000a94 <__aeabi_dcmplt>
 8003e4e:	b110      	cbz	r0, 8003e56 <_printf_float+0x86>
 8003e50:	232d      	movs	r3, #45	; 0x2d
 8003e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e56:	4a92      	ldr	r2, [pc, #584]	; (80040a0 <_printf_float+0x2d0>)
 8003e58:	4b92      	ldr	r3, [pc, #584]	; (80040a4 <_printf_float+0x2d4>)
 8003e5a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003e5e:	bf94      	ite	ls
 8003e60:	4690      	movls	r8, r2
 8003e62:	4698      	movhi	r8, r3
 8003e64:	2303      	movs	r3, #3
 8003e66:	f04f 0a00 	mov.w	sl, #0
 8003e6a:	6123      	str	r3, [r4, #16]
 8003e6c:	f02b 0304 	bic.w	r3, fp, #4
 8003e70:	6023      	str	r3, [r4, #0]
 8003e72:	4633      	mov	r3, r6
 8003e74:	4621      	mov	r1, r4
 8003e76:	4628      	mov	r0, r5
 8003e78:	9700      	str	r7, [sp, #0]
 8003e7a:	aa0f      	add	r2, sp, #60	; 0x3c
 8003e7c:	f000 f9d6 	bl	800422c <_printf_common>
 8003e80:	3001      	adds	r0, #1
 8003e82:	f040 8090 	bne.w	8003fa6 <_printf_float+0x1d6>
 8003e86:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8a:	b011      	add	sp, #68	; 0x44
 8003e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e90:	4652      	mov	r2, sl
 8003e92:	4643      	mov	r3, r8
 8003e94:	4650      	mov	r0, sl
 8003e96:	4641      	mov	r1, r8
 8003e98:	f7fc fe24 	bl	8000ae4 <__aeabi_dcmpun>
 8003e9c:	b148      	cbz	r0, 8003eb2 <_printf_float+0xe2>
 8003e9e:	f1b8 0f00 	cmp.w	r8, #0
 8003ea2:	bfb8      	it	lt
 8003ea4:	232d      	movlt	r3, #45	; 0x2d
 8003ea6:	4a80      	ldr	r2, [pc, #512]	; (80040a8 <_printf_float+0x2d8>)
 8003ea8:	bfb8      	it	lt
 8003eaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003eae:	4b7f      	ldr	r3, [pc, #508]	; (80040ac <_printf_float+0x2dc>)
 8003eb0:	e7d3      	b.n	8003e5a <_printf_float+0x8a>
 8003eb2:	6863      	ldr	r3, [r4, #4]
 8003eb4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	d142      	bne.n	8003f42 <_printf_float+0x172>
 8003ebc:	2306      	movs	r3, #6
 8003ebe:	6063      	str	r3, [r4, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	9206      	str	r2, [sp, #24]
 8003ec4:	aa0e      	add	r2, sp, #56	; 0x38
 8003ec6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003eca:	aa0d      	add	r2, sp, #52	; 0x34
 8003ecc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003ed0:	9203      	str	r2, [sp, #12]
 8003ed2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003ed6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003eda:	6023      	str	r3, [r4, #0]
 8003edc:	6863      	ldr	r3, [r4, #4]
 8003ede:	4652      	mov	r2, sl
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	4643      	mov	r3, r8
 8003ee6:	910b      	str	r1, [sp, #44]	; 0x2c
 8003ee8:	f7ff fed6 	bl	8003c98 <__cvt>
 8003eec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003eee:	4680      	mov	r8, r0
 8003ef0:	2947      	cmp	r1, #71	; 0x47
 8003ef2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ef4:	d108      	bne.n	8003f08 <_printf_float+0x138>
 8003ef6:	1cc8      	adds	r0, r1, #3
 8003ef8:	db02      	blt.n	8003f00 <_printf_float+0x130>
 8003efa:	6863      	ldr	r3, [r4, #4]
 8003efc:	4299      	cmp	r1, r3
 8003efe:	dd40      	ble.n	8003f82 <_printf_float+0x1b2>
 8003f00:	f1a9 0902 	sub.w	r9, r9, #2
 8003f04:	fa5f f989 	uxtb.w	r9, r9
 8003f08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003f0c:	d81f      	bhi.n	8003f4e <_printf_float+0x17e>
 8003f0e:	464a      	mov	r2, r9
 8003f10:	3901      	subs	r1, #1
 8003f12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f16:	910d      	str	r1, [sp, #52]	; 0x34
 8003f18:	f7ff ff1d 	bl	8003d56 <__exponent>
 8003f1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f1e:	4682      	mov	sl, r0
 8003f20:	1813      	adds	r3, r2, r0
 8003f22:	2a01      	cmp	r2, #1
 8003f24:	6123      	str	r3, [r4, #16]
 8003f26:	dc02      	bgt.n	8003f2e <_printf_float+0x15e>
 8003f28:	6822      	ldr	r2, [r4, #0]
 8003f2a:	07d2      	lsls	r2, r2, #31
 8003f2c:	d501      	bpl.n	8003f32 <_printf_float+0x162>
 8003f2e:	3301      	adds	r3, #1
 8003f30:	6123      	str	r3, [r4, #16]
 8003f32:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d09b      	beq.n	8003e72 <_printf_float+0xa2>
 8003f3a:	232d      	movs	r3, #45	; 0x2d
 8003f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f40:	e797      	b.n	8003e72 <_printf_float+0xa2>
 8003f42:	2947      	cmp	r1, #71	; 0x47
 8003f44:	d1bc      	bne.n	8003ec0 <_printf_float+0xf0>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1ba      	bne.n	8003ec0 <_printf_float+0xf0>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e7b7      	b.n	8003ebe <_printf_float+0xee>
 8003f4e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003f52:	d118      	bne.n	8003f86 <_printf_float+0x1b6>
 8003f54:	2900      	cmp	r1, #0
 8003f56:	6863      	ldr	r3, [r4, #4]
 8003f58:	dd0b      	ble.n	8003f72 <_printf_float+0x1a2>
 8003f5a:	6121      	str	r1, [r4, #16]
 8003f5c:	b913      	cbnz	r3, 8003f64 <_printf_float+0x194>
 8003f5e:	6822      	ldr	r2, [r4, #0]
 8003f60:	07d0      	lsls	r0, r2, #31
 8003f62:	d502      	bpl.n	8003f6a <_printf_float+0x19a>
 8003f64:	3301      	adds	r3, #1
 8003f66:	440b      	add	r3, r1
 8003f68:	6123      	str	r3, [r4, #16]
 8003f6a:	f04f 0a00 	mov.w	sl, #0
 8003f6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003f70:	e7df      	b.n	8003f32 <_printf_float+0x162>
 8003f72:	b913      	cbnz	r3, 8003f7a <_printf_float+0x1aa>
 8003f74:	6822      	ldr	r2, [r4, #0]
 8003f76:	07d2      	lsls	r2, r2, #31
 8003f78:	d501      	bpl.n	8003f7e <_printf_float+0x1ae>
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	e7f4      	b.n	8003f68 <_printf_float+0x198>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e7f2      	b.n	8003f68 <_printf_float+0x198>
 8003f82:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f88:	4299      	cmp	r1, r3
 8003f8a:	db05      	blt.n	8003f98 <_printf_float+0x1c8>
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	6121      	str	r1, [r4, #16]
 8003f90:	07d8      	lsls	r0, r3, #31
 8003f92:	d5ea      	bpl.n	8003f6a <_printf_float+0x19a>
 8003f94:	1c4b      	adds	r3, r1, #1
 8003f96:	e7e7      	b.n	8003f68 <_printf_float+0x198>
 8003f98:	2900      	cmp	r1, #0
 8003f9a:	bfcc      	ite	gt
 8003f9c:	2201      	movgt	r2, #1
 8003f9e:	f1c1 0202 	rsble	r2, r1, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	e7e0      	b.n	8003f68 <_printf_float+0x198>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	055a      	lsls	r2, r3, #21
 8003faa:	d407      	bmi.n	8003fbc <_printf_float+0x1ec>
 8003fac:	6923      	ldr	r3, [r4, #16]
 8003fae:	4642      	mov	r2, r8
 8003fb0:	4631      	mov	r1, r6
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	47b8      	blx	r7
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	d12b      	bne.n	8004012 <_printf_float+0x242>
 8003fba:	e764      	b.n	8003e86 <_printf_float+0xb6>
 8003fbc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003fc0:	f240 80dd 	bls.w	800417e <_printf_float+0x3ae>
 8003fc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f7fc fd58 	bl	8000a80 <__aeabi_dcmpeq>
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	d033      	beq.n	800403c <_printf_float+0x26c>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	4631      	mov	r1, r6
 8003fd8:	4628      	mov	r0, r5
 8003fda:	4a35      	ldr	r2, [pc, #212]	; (80040b0 <_printf_float+0x2e0>)
 8003fdc:	47b8      	blx	r7
 8003fde:	3001      	adds	r0, #1
 8003fe0:	f43f af51 	beq.w	8003e86 <_printf_float+0xb6>
 8003fe4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	db02      	blt.n	8003ff2 <_printf_float+0x222>
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	07d8      	lsls	r0, r3, #31
 8003ff0:	d50f      	bpl.n	8004012 <_printf_float+0x242>
 8003ff2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ff6:	4631      	mov	r1, r6
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	47b8      	blx	r7
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	f43f af42 	beq.w	8003e86 <_printf_float+0xb6>
 8004002:	f04f 0800 	mov.w	r8, #0
 8004006:	f104 091a 	add.w	r9, r4, #26
 800400a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800400c:	3b01      	subs	r3, #1
 800400e:	4543      	cmp	r3, r8
 8004010:	dc09      	bgt.n	8004026 <_printf_float+0x256>
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	079b      	lsls	r3, r3, #30
 8004016:	f100 8104 	bmi.w	8004222 <_printf_float+0x452>
 800401a:	68e0      	ldr	r0, [r4, #12]
 800401c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800401e:	4298      	cmp	r0, r3
 8004020:	bfb8      	it	lt
 8004022:	4618      	movlt	r0, r3
 8004024:	e731      	b.n	8003e8a <_printf_float+0xba>
 8004026:	2301      	movs	r3, #1
 8004028:	464a      	mov	r2, r9
 800402a:	4631      	mov	r1, r6
 800402c:	4628      	mov	r0, r5
 800402e:	47b8      	blx	r7
 8004030:	3001      	adds	r0, #1
 8004032:	f43f af28 	beq.w	8003e86 <_printf_float+0xb6>
 8004036:	f108 0801 	add.w	r8, r8, #1
 800403a:	e7e6      	b.n	800400a <_printf_float+0x23a>
 800403c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800403e:	2b00      	cmp	r3, #0
 8004040:	dc38      	bgt.n	80040b4 <_printf_float+0x2e4>
 8004042:	2301      	movs	r3, #1
 8004044:	4631      	mov	r1, r6
 8004046:	4628      	mov	r0, r5
 8004048:	4a19      	ldr	r2, [pc, #100]	; (80040b0 <_printf_float+0x2e0>)
 800404a:	47b8      	blx	r7
 800404c:	3001      	adds	r0, #1
 800404e:	f43f af1a 	beq.w	8003e86 <_printf_float+0xb6>
 8004052:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004056:	4313      	orrs	r3, r2
 8004058:	d102      	bne.n	8004060 <_printf_float+0x290>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	07d9      	lsls	r1, r3, #31
 800405e:	d5d8      	bpl.n	8004012 <_printf_float+0x242>
 8004060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004064:	4631      	mov	r1, r6
 8004066:	4628      	mov	r0, r5
 8004068:	47b8      	blx	r7
 800406a:	3001      	adds	r0, #1
 800406c:	f43f af0b 	beq.w	8003e86 <_printf_float+0xb6>
 8004070:	f04f 0900 	mov.w	r9, #0
 8004074:	f104 0a1a 	add.w	sl, r4, #26
 8004078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800407a:	425b      	negs	r3, r3
 800407c:	454b      	cmp	r3, r9
 800407e:	dc01      	bgt.n	8004084 <_printf_float+0x2b4>
 8004080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004082:	e794      	b.n	8003fae <_printf_float+0x1de>
 8004084:	2301      	movs	r3, #1
 8004086:	4652      	mov	r2, sl
 8004088:	4631      	mov	r1, r6
 800408a:	4628      	mov	r0, r5
 800408c:	47b8      	blx	r7
 800408e:	3001      	adds	r0, #1
 8004090:	f43f aef9 	beq.w	8003e86 <_printf_float+0xb6>
 8004094:	f109 0901 	add.w	r9, r9, #1
 8004098:	e7ee      	b.n	8004078 <_printf_float+0x2a8>
 800409a:	bf00      	nop
 800409c:	7fefffff 	.word	0x7fefffff
 80040a0:	0800847e 	.word	0x0800847e
 80040a4:	08008482 	.word	0x08008482
 80040a8:	08008486 	.word	0x08008486
 80040ac:	0800848a 	.word	0x0800848a
 80040b0:	0800848e 	.word	0x0800848e
 80040b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040b8:	429a      	cmp	r2, r3
 80040ba:	bfa8      	it	ge
 80040bc:	461a      	movge	r2, r3
 80040be:	2a00      	cmp	r2, #0
 80040c0:	4691      	mov	r9, r2
 80040c2:	dc37      	bgt.n	8004134 <_printf_float+0x364>
 80040c4:	f04f 0b00 	mov.w	fp, #0
 80040c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040cc:	f104 021a 	add.w	r2, r4, #26
 80040d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80040d4:	ebaa 0309 	sub.w	r3, sl, r9
 80040d8:	455b      	cmp	r3, fp
 80040da:	dc33      	bgt.n	8004144 <_printf_float+0x374>
 80040dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80040e0:	429a      	cmp	r2, r3
 80040e2:	db3b      	blt.n	800415c <_printf_float+0x38c>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	07da      	lsls	r2, r3, #31
 80040e8:	d438      	bmi.n	800415c <_printf_float+0x38c>
 80040ea:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80040ee:	eba2 0903 	sub.w	r9, r2, r3
 80040f2:	eba2 020a 	sub.w	r2, r2, sl
 80040f6:	4591      	cmp	r9, r2
 80040f8:	bfa8      	it	ge
 80040fa:	4691      	movge	r9, r2
 80040fc:	f1b9 0f00 	cmp.w	r9, #0
 8004100:	dc34      	bgt.n	800416c <_printf_float+0x39c>
 8004102:	f04f 0800 	mov.w	r8, #0
 8004106:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800410a:	f104 0a1a 	add.w	sl, r4, #26
 800410e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	eba3 0309 	sub.w	r3, r3, r9
 8004118:	4543      	cmp	r3, r8
 800411a:	f77f af7a 	ble.w	8004012 <_printf_float+0x242>
 800411e:	2301      	movs	r3, #1
 8004120:	4652      	mov	r2, sl
 8004122:	4631      	mov	r1, r6
 8004124:	4628      	mov	r0, r5
 8004126:	47b8      	blx	r7
 8004128:	3001      	adds	r0, #1
 800412a:	f43f aeac 	beq.w	8003e86 <_printf_float+0xb6>
 800412e:	f108 0801 	add.w	r8, r8, #1
 8004132:	e7ec      	b.n	800410e <_printf_float+0x33e>
 8004134:	4613      	mov	r3, r2
 8004136:	4631      	mov	r1, r6
 8004138:	4642      	mov	r2, r8
 800413a:	4628      	mov	r0, r5
 800413c:	47b8      	blx	r7
 800413e:	3001      	adds	r0, #1
 8004140:	d1c0      	bne.n	80040c4 <_printf_float+0x2f4>
 8004142:	e6a0      	b.n	8003e86 <_printf_float+0xb6>
 8004144:	2301      	movs	r3, #1
 8004146:	4631      	mov	r1, r6
 8004148:	4628      	mov	r0, r5
 800414a:	920b      	str	r2, [sp, #44]	; 0x2c
 800414c:	47b8      	blx	r7
 800414e:	3001      	adds	r0, #1
 8004150:	f43f ae99 	beq.w	8003e86 <_printf_float+0xb6>
 8004154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004156:	f10b 0b01 	add.w	fp, fp, #1
 800415a:	e7b9      	b.n	80040d0 <_printf_float+0x300>
 800415c:	4631      	mov	r1, r6
 800415e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004162:	4628      	mov	r0, r5
 8004164:	47b8      	blx	r7
 8004166:	3001      	adds	r0, #1
 8004168:	d1bf      	bne.n	80040ea <_printf_float+0x31a>
 800416a:	e68c      	b.n	8003e86 <_printf_float+0xb6>
 800416c:	464b      	mov	r3, r9
 800416e:	4631      	mov	r1, r6
 8004170:	4628      	mov	r0, r5
 8004172:	eb08 020a 	add.w	r2, r8, sl
 8004176:	47b8      	blx	r7
 8004178:	3001      	adds	r0, #1
 800417a:	d1c2      	bne.n	8004102 <_printf_float+0x332>
 800417c:	e683      	b.n	8003e86 <_printf_float+0xb6>
 800417e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004180:	2a01      	cmp	r2, #1
 8004182:	dc01      	bgt.n	8004188 <_printf_float+0x3b8>
 8004184:	07db      	lsls	r3, r3, #31
 8004186:	d539      	bpl.n	80041fc <_printf_float+0x42c>
 8004188:	2301      	movs	r3, #1
 800418a:	4642      	mov	r2, r8
 800418c:	4631      	mov	r1, r6
 800418e:	4628      	mov	r0, r5
 8004190:	47b8      	blx	r7
 8004192:	3001      	adds	r0, #1
 8004194:	f43f ae77 	beq.w	8003e86 <_printf_float+0xb6>
 8004198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800419c:	4631      	mov	r1, r6
 800419e:	4628      	mov	r0, r5
 80041a0:	47b8      	blx	r7
 80041a2:	3001      	adds	r0, #1
 80041a4:	f43f ae6f 	beq.w	8003e86 <_printf_float+0xb6>
 80041a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041ac:	2200      	movs	r2, #0
 80041ae:	2300      	movs	r3, #0
 80041b0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80041b4:	f7fc fc64 	bl	8000a80 <__aeabi_dcmpeq>
 80041b8:	b9d8      	cbnz	r0, 80041f2 <_printf_float+0x422>
 80041ba:	f109 33ff 	add.w	r3, r9, #4294967295
 80041be:	f108 0201 	add.w	r2, r8, #1
 80041c2:	4631      	mov	r1, r6
 80041c4:	4628      	mov	r0, r5
 80041c6:	47b8      	blx	r7
 80041c8:	3001      	adds	r0, #1
 80041ca:	d10e      	bne.n	80041ea <_printf_float+0x41a>
 80041cc:	e65b      	b.n	8003e86 <_printf_float+0xb6>
 80041ce:	2301      	movs	r3, #1
 80041d0:	464a      	mov	r2, r9
 80041d2:	4631      	mov	r1, r6
 80041d4:	4628      	mov	r0, r5
 80041d6:	47b8      	blx	r7
 80041d8:	3001      	adds	r0, #1
 80041da:	f43f ae54 	beq.w	8003e86 <_printf_float+0xb6>
 80041de:	f108 0801 	add.w	r8, r8, #1
 80041e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041e4:	3b01      	subs	r3, #1
 80041e6:	4543      	cmp	r3, r8
 80041e8:	dcf1      	bgt.n	80041ce <_printf_float+0x3fe>
 80041ea:	4653      	mov	r3, sl
 80041ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80041f0:	e6de      	b.n	8003fb0 <_printf_float+0x1e0>
 80041f2:	f04f 0800 	mov.w	r8, #0
 80041f6:	f104 091a 	add.w	r9, r4, #26
 80041fa:	e7f2      	b.n	80041e2 <_printf_float+0x412>
 80041fc:	2301      	movs	r3, #1
 80041fe:	4642      	mov	r2, r8
 8004200:	e7df      	b.n	80041c2 <_printf_float+0x3f2>
 8004202:	2301      	movs	r3, #1
 8004204:	464a      	mov	r2, r9
 8004206:	4631      	mov	r1, r6
 8004208:	4628      	mov	r0, r5
 800420a:	47b8      	blx	r7
 800420c:	3001      	adds	r0, #1
 800420e:	f43f ae3a 	beq.w	8003e86 <_printf_float+0xb6>
 8004212:	f108 0801 	add.w	r8, r8, #1
 8004216:	68e3      	ldr	r3, [r4, #12]
 8004218:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800421a:	1a5b      	subs	r3, r3, r1
 800421c:	4543      	cmp	r3, r8
 800421e:	dcf0      	bgt.n	8004202 <_printf_float+0x432>
 8004220:	e6fb      	b.n	800401a <_printf_float+0x24a>
 8004222:	f04f 0800 	mov.w	r8, #0
 8004226:	f104 0919 	add.w	r9, r4, #25
 800422a:	e7f4      	b.n	8004216 <_printf_float+0x446>

0800422c <_printf_common>:
 800422c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004230:	4616      	mov	r6, r2
 8004232:	4699      	mov	r9, r3
 8004234:	688a      	ldr	r2, [r1, #8]
 8004236:	690b      	ldr	r3, [r1, #16]
 8004238:	4607      	mov	r7, r0
 800423a:	4293      	cmp	r3, r2
 800423c:	bfb8      	it	lt
 800423e:	4613      	movlt	r3, r2
 8004240:	6033      	str	r3, [r6, #0]
 8004242:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004246:	460c      	mov	r4, r1
 8004248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800424c:	b10a      	cbz	r2, 8004252 <_printf_common+0x26>
 800424e:	3301      	adds	r3, #1
 8004250:	6033      	str	r3, [r6, #0]
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	0699      	lsls	r1, r3, #26
 8004256:	bf42      	ittt	mi
 8004258:	6833      	ldrmi	r3, [r6, #0]
 800425a:	3302      	addmi	r3, #2
 800425c:	6033      	strmi	r3, [r6, #0]
 800425e:	6825      	ldr	r5, [r4, #0]
 8004260:	f015 0506 	ands.w	r5, r5, #6
 8004264:	d106      	bne.n	8004274 <_printf_common+0x48>
 8004266:	f104 0a19 	add.w	sl, r4, #25
 800426a:	68e3      	ldr	r3, [r4, #12]
 800426c:	6832      	ldr	r2, [r6, #0]
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	42ab      	cmp	r3, r5
 8004272:	dc2b      	bgt.n	80042cc <_printf_common+0xa0>
 8004274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004278:	1e13      	subs	r3, r2, #0
 800427a:	6822      	ldr	r2, [r4, #0]
 800427c:	bf18      	it	ne
 800427e:	2301      	movne	r3, #1
 8004280:	0692      	lsls	r2, r2, #26
 8004282:	d430      	bmi.n	80042e6 <_printf_common+0xba>
 8004284:	4649      	mov	r1, r9
 8004286:	4638      	mov	r0, r7
 8004288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800428c:	47c0      	blx	r8
 800428e:	3001      	adds	r0, #1
 8004290:	d023      	beq.n	80042da <_printf_common+0xae>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	6922      	ldr	r2, [r4, #16]
 8004296:	f003 0306 	and.w	r3, r3, #6
 800429a:	2b04      	cmp	r3, #4
 800429c:	bf14      	ite	ne
 800429e:	2500      	movne	r5, #0
 80042a0:	6833      	ldreq	r3, [r6, #0]
 80042a2:	f04f 0600 	mov.w	r6, #0
 80042a6:	bf08      	it	eq
 80042a8:	68e5      	ldreq	r5, [r4, #12]
 80042aa:	f104 041a 	add.w	r4, r4, #26
 80042ae:	bf08      	it	eq
 80042b0:	1aed      	subeq	r5, r5, r3
 80042b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80042b6:	bf08      	it	eq
 80042b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042bc:	4293      	cmp	r3, r2
 80042be:	bfc4      	itt	gt
 80042c0:	1a9b      	subgt	r3, r3, r2
 80042c2:	18ed      	addgt	r5, r5, r3
 80042c4:	42b5      	cmp	r5, r6
 80042c6:	d11a      	bne.n	80042fe <_printf_common+0xd2>
 80042c8:	2000      	movs	r0, #0
 80042ca:	e008      	b.n	80042de <_printf_common+0xb2>
 80042cc:	2301      	movs	r3, #1
 80042ce:	4652      	mov	r2, sl
 80042d0:	4649      	mov	r1, r9
 80042d2:	4638      	mov	r0, r7
 80042d4:	47c0      	blx	r8
 80042d6:	3001      	adds	r0, #1
 80042d8:	d103      	bne.n	80042e2 <_printf_common+0xb6>
 80042da:	f04f 30ff 	mov.w	r0, #4294967295
 80042de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e2:	3501      	adds	r5, #1
 80042e4:	e7c1      	b.n	800426a <_printf_common+0x3e>
 80042e6:	2030      	movs	r0, #48	; 0x30
 80042e8:	18e1      	adds	r1, r4, r3
 80042ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042f4:	4422      	add	r2, r4
 80042f6:	3302      	adds	r3, #2
 80042f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042fc:	e7c2      	b.n	8004284 <_printf_common+0x58>
 80042fe:	2301      	movs	r3, #1
 8004300:	4622      	mov	r2, r4
 8004302:	4649      	mov	r1, r9
 8004304:	4638      	mov	r0, r7
 8004306:	47c0      	blx	r8
 8004308:	3001      	adds	r0, #1
 800430a:	d0e6      	beq.n	80042da <_printf_common+0xae>
 800430c:	3601      	adds	r6, #1
 800430e:	e7d9      	b.n	80042c4 <_printf_common+0x98>

08004310 <_printf_i>:
 8004310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004314:	7e0f      	ldrb	r7, [r1, #24]
 8004316:	4691      	mov	r9, r2
 8004318:	2f78      	cmp	r7, #120	; 0x78
 800431a:	4680      	mov	r8, r0
 800431c:	460c      	mov	r4, r1
 800431e:	469a      	mov	sl, r3
 8004320:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004322:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004326:	d807      	bhi.n	8004338 <_printf_i+0x28>
 8004328:	2f62      	cmp	r7, #98	; 0x62
 800432a:	d80a      	bhi.n	8004342 <_printf_i+0x32>
 800432c:	2f00      	cmp	r7, #0
 800432e:	f000 80d5 	beq.w	80044dc <_printf_i+0x1cc>
 8004332:	2f58      	cmp	r7, #88	; 0x58
 8004334:	f000 80c1 	beq.w	80044ba <_printf_i+0x1aa>
 8004338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800433c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004340:	e03a      	b.n	80043b8 <_printf_i+0xa8>
 8004342:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004346:	2b15      	cmp	r3, #21
 8004348:	d8f6      	bhi.n	8004338 <_printf_i+0x28>
 800434a:	a101      	add	r1, pc, #4	; (adr r1, 8004350 <_printf_i+0x40>)
 800434c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004350:	080043a9 	.word	0x080043a9
 8004354:	080043bd 	.word	0x080043bd
 8004358:	08004339 	.word	0x08004339
 800435c:	08004339 	.word	0x08004339
 8004360:	08004339 	.word	0x08004339
 8004364:	08004339 	.word	0x08004339
 8004368:	080043bd 	.word	0x080043bd
 800436c:	08004339 	.word	0x08004339
 8004370:	08004339 	.word	0x08004339
 8004374:	08004339 	.word	0x08004339
 8004378:	08004339 	.word	0x08004339
 800437c:	080044c3 	.word	0x080044c3
 8004380:	080043e9 	.word	0x080043e9
 8004384:	0800447d 	.word	0x0800447d
 8004388:	08004339 	.word	0x08004339
 800438c:	08004339 	.word	0x08004339
 8004390:	080044e5 	.word	0x080044e5
 8004394:	08004339 	.word	0x08004339
 8004398:	080043e9 	.word	0x080043e9
 800439c:	08004339 	.word	0x08004339
 80043a0:	08004339 	.word	0x08004339
 80043a4:	08004485 	.word	0x08004485
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	1d1a      	adds	r2, r3, #4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	602a      	str	r2, [r5, #0]
 80043b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0a0      	b.n	80044fe <_printf_i+0x1ee>
 80043bc:	6820      	ldr	r0, [r4, #0]
 80043be:	682b      	ldr	r3, [r5, #0]
 80043c0:	0607      	lsls	r7, r0, #24
 80043c2:	f103 0104 	add.w	r1, r3, #4
 80043c6:	6029      	str	r1, [r5, #0]
 80043c8:	d501      	bpl.n	80043ce <_printf_i+0xbe>
 80043ca:	681e      	ldr	r6, [r3, #0]
 80043cc:	e003      	b.n	80043d6 <_printf_i+0xc6>
 80043ce:	0646      	lsls	r6, r0, #25
 80043d0:	d5fb      	bpl.n	80043ca <_printf_i+0xba>
 80043d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80043d6:	2e00      	cmp	r6, #0
 80043d8:	da03      	bge.n	80043e2 <_printf_i+0xd2>
 80043da:	232d      	movs	r3, #45	; 0x2d
 80043dc:	4276      	negs	r6, r6
 80043de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e2:	230a      	movs	r3, #10
 80043e4:	4859      	ldr	r0, [pc, #356]	; (800454c <_printf_i+0x23c>)
 80043e6:	e012      	b.n	800440e <_printf_i+0xfe>
 80043e8:	682b      	ldr	r3, [r5, #0]
 80043ea:	6820      	ldr	r0, [r4, #0]
 80043ec:	1d19      	adds	r1, r3, #4
 80043ee:	6029      	str	r1, [r5, #0]
 80043f0:	0605      	lsls	r5, r0, #24
 80043f2:	d501      	bpl.n	80043f8 <_printf_i+0xe8>
 80043f4:	681e      	ldr	r6, [r3, #0]
 80043f6:	e002      	b.n	80043fe <_printf_i+0xee>
 80043f8:	0641      	lsls	r1, r0, #25
 80043fa:	d5fb      	bpl.n	80043f4 <_printf_i+0xe4>
 80043fc:	881e      	ldrh	r6, [r3, #0]
 80043fe:	2f6f      	cmp	r7, #111	; 0x6f
 8004400:	bf0c      	ite	eq
 8004402:	2308      	moveq	r3, #8
 8004404:	230a      	movne	r3, #10
 8004406:	4851      	ldr	r0, [pc, #324]	; (800454c <_printf_i+0x23c>)
 8004408:	2100      	movs	r1, #0
 800440a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800440e:	6865      	ldr	r5, [r4, #4]
 8004410:	2d00      	cmp	r5, #0
 8004412:	bfa8      	it	ge
 8004414:	6821      	ldrge	r1, [r4, #0]
 8004416:	60a5      	str	r5, [r4, #8]
 8004418:	bfa4      	itt	ge
 800441a:	f021 0104 	bicge.w	r1, r1, #4
 800441e:	6021      	strge	r1, [r4, #0]
 8004420:	b90e      	cbnz	r6, 8004426 <_printf_i+0x116>
 8004422:	2d00      	cmp	r5, #0
 8004424:	d04b      	beq.n	80044be <_printf_i+0x1ae>
 8004426:	4615      	mov	r5, r2
 8004428:	fbb6 f1f3 	udiv	r1, r6, r3
 800442c:	fb03 6711 	mls	r7, r3, r1, r6
 8004430:	5dc7      	ldrb	r7, [r0, r7]
 8004432:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004436:	4637      	mov	r7, r6
 8004438:	42bb      	cmp	r3, r7
 800443a:	460e      	mov	r6, r1
 800443c:	d9f4      	bls.n	8004428 <_printf_i+0x118>
 800443e:	2b08      	cmp	r3, #8
 8004440:	d10b      	bne.n	800445a <_printf_i+0x14a>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	07de      	lsls	r6, r3, #31
 8004446:	d508      	bpl.n	800445a <_printf_i+0x14a>
 8004448:	6923      	ldr	r3, [r4, #16]
 800444a:	6861      	ldr	r1, [r4, #4]
 800444c:	4299      	cmp	r1, r3
 800444e:	bfde      	ittt	le
 8004450:	2330      	movle	r3, #48	; 0x30
 8004452:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004456:	f105 35ff 	addle.w	r5, r5, #4294967295
 800445a:	1b52      	subs	r2, r2, r5
 800445c:	6122      	str	r2, [r4, #16]
 800445e:	464b      	mov	r3, r9
 8004460:	4621      	mov	r1, r4
 8004462:	4640      	mov	r0, r8
 8004464:	f8cd a000 	str.w	sl, [sp]
 8004468:	aa03      	add	r2, sp, #12
 800446a:	f7ff fedf 	bl	800422c <_printf_common>
 800446e:	3001      	adds	r0, #1
 8004470:	d14a      	bne.n	8004508 <_printf_i+0x1f8>
 8004472:	f04f 30ff 	mov.w	r0, #4294967295
 8004476:	b004      	add	sp, #16
 8004478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	f043 0320 	orr.w	r3, r3, #32
 8004482:	6023      	str	r3, [r4, #0]
 8004484:	2778      	movs	r7, #120	; 0x78
 8004486:	4832      	ldr	r0, [pc, #200]	; (8004550 <_printf_i+0x240>)
 8004488:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	6829      	ldr	r1, [r5, #0]
 8004490:	061f      	lsls	r7, r3, #24
 8004492:	f851 6b04 	ldr.w	r6, [r1], #4
 8004496:	d402      	bmi.n	800449e <_printf_i+0x18e>
 8004498:	065f      	lsls	r7, r3, #25
 800449a:	bf48      	it	mi
 800449c:	b2b6      	uxthmi	r6, r6
 800449e:	07df      	lsls	r7, r3, #31
 80044a0:	bf48      	it	mi
 80044a2:	f043 0320 	orrmi.w	r3, r3, #32
 80044a6:	6029      	str	r1, [r5, #0]
 80044a8:	bf48      	it	mi
 80044aa:	6023      	strmi	r3, [r4, #0]
 80044ac:	b91e      	cbnz	r6, 80044b6 <_printf_i+0x1a6>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	f023 0320 	bic.w	r3, r3, #32
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	2310      	movs	r3, #16
 80044b8:	e7a6      	b.n	8004408 <_printf_i+0xf8>
 80044ba:	4824      	ldr	r0, [pc, #144]	; (800454c <_printf_i+0x23c>)
 80044bc:	e7e4      	b.n	8004488 <_printf_i+0x178>
 80044be:	4615      	mov	r5, r2
 80044c0:	e7bd      	b.n	800443e <_printf_i+0x12e>
 80044c2:	682b      	ldr	r3, [r5, #0]
 80044c4:	6826      	ldr	r6, [r4, #0]
 80044c6:	1d18      	adds	r0, r3, #4
 80044c8:	6961      	ldr	r1, [r4, #20]
 80044ca:	6028      	str	r0, [r5, #0]
 80044cc:	0635      	lsls	r5, r6, #24
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	d501      	bpl.n	80044d6 <_printf_i+0x1c6>
 80044d2:	6019      	str	r1, [r3, #0]
 80044d4:	e002      	b.n	80044dc <_printf_i+0x1cc>
 80044d6:	0670      	lsls	r0, r6, #25
 80044d8:	d5fb      	bpl.n	80044d2 <_printf_i+0x1c2>
 80044da:	8019      	strh	r1, [r3, #0]
 80044dc:	2300      	movs	r3, #0
 80044de:	4615      	mov	r5, r2
 80044e0:	6123      	str	r3, [r4, #16]
 80044e2:	e7bc      	b.n	800445e <_printf_i+0x14e>
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	2100      	movs	r1, #0
 80044e8:	1d1a      	adds	r2, r3, #4
 80044ea:	602a      	str	r2, [r5, #0]
 80044ec:	681d      	ldr	r5, [r3, #0]
 80044ee:	6862      	ldr	r2, [r4, #4]
 80044f0:	4628      	mov	r0, r5
 80044f2:	f000 fbe1 	bl	8004cb8 <memchr>
 80044f6:	b108      	cbz	r0, 80044fc <_printf_i+0x1ec>
 80044f8:	1b40      	subs	r0, r0, r5
 80044fa:	6060      	str	r0, [r4, #4]
 80044fc:	6863      	ldr	r3, [r4, #4]
 80044fe:	6123      	str	r3, [r4, #16]
 8004500:	2300      	movs	r3, #0
 8004502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004506:	e7aa      	b.n	800445e <_printf_i+0x14e>
 8004508:	462a      	mov	r2, r5
 800450a:	4649      	mov	r1, r9
 800450c:	4640      	mov	r0, r8
 800450e:	6923      	ldr	r3, [r4, #16]
 8004510:	47d0      	blx	sl
 8004512:	3001      	adds	r0, #1
 8004514:	d0ad      	beq.n	8004472 <_printf_i+0x162>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	079b      	lsls	r3, r3, #30
 800451a:	d413      	bmi.n	8004544 <_printf_i+0x234>
 800451c:	68e0      	ldr	r0, [r4, #12]
 800451e:	9b03      	ldr	r3, [sp, #12]
 8004520:	4298      	cmp	r0, r3
 8004522:	bfb8      	it	lt
 8004524:	4618      	movlt	r0, r3
 8004526:	e7a6      	b.n	8004476 <_printf_i+0x166>
 8004528:	2301      	movs	r3, #1
 800452a:	4632      	mov	r2, r6
 800452c:	4649      	mov	r1, r9
 800452e:	4640      	mov	r0, r8
 8004530:	47d0      	blx	sl
 8004532:	3001      	adds	r0, #1
 8004534:	d09d      	beq.n	8004472 <_printf_i+0x162>
 8004536:	3501      	adds	r5, #1
 8004538:	68e3      	ldr	r3, [r4, #12]
 800453a:	9903      	ldr	r1, [sp, #12]
 800453c:	1a5b      	subs	r3, r3, r1
 800453e:	42ab      	cmp	r3, r5
 8004540:	dcf2      	bgt.n	8004528 <_printf_i+0x218>
 8004542:	e7eb      	b.n	800451c <_printf_i+0x20c>
 8004544:	2500      	movs	r5, #0
 8004546:	f104 0619 	add.w	r6, r4, #25
 800454a:	e7f5      	b.n	8004538 <_printf_i+0x228>
 800454c:	08008490 	.word	0x08008490
 8004550:	080084a1 	.word	0x080084a1

08004554 <_scanf_float>:
 8004554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004558:	b087      	sub	sp, #28
 800455a:	9303      	str	r3, [sp, #12]
 800455c:	688b      	ldr	r3, [r1, #8]
 800455e:	4617      	mov	r7, r2
 8004560:	1e5a      	subs	r2, r3, #1
 8004562:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004566:	bf85      	ittet	hi
 8004568:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800456c:	195b      	addhi	r3, r3, r5
 800456e:	2300      	movls	r3, #0
 8004570:	9302      	strhi	r3, [sp, #8]
 8004572:	bf88      	it	hi
 8004574:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004578:	468b      	mov	fp, r1
 800457a:	f04f 0500 	mov.w	r5, #0
 800457e:	bf8c      	ite	hi
 8004580:	608b      	strhi	r3, [r1, #8]
 8004582:	9302      	strls	r3, [sp, #8]
 8004584:	680b      	ldr	r3, [r1, #0]
 8004586:	4680      	mov	r8, r0
 8004588:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800458c:	f84b 3b1c 	str.w	r3, [fp], #28
 8004590:	460c      	mov	r4, r1
 8004592:	465e      	mov	r6, fp
 8004594:	46aa      	mov	sl, r5
 8004596:	46a9      	mov	r9, r5
 8004598:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800459c:	9501      	str	r5, [sp, #4]
 800459e:	68a2      	ldr	r2, [r4, #8]
 80045a0:	b152      	cbz	r2, 80045b8 <_scanf_float+0x64>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b4e      	cmp	r3, #78	; 0x4e
 80045a8:	d864      	bhi.n	8004674 <_scanf_float+0x120>
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d83c      	bhi.n	8004628 <_scanf_float+0xd4>
 80045ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80045b2:	b2c8      	uxtb	r0, r1
 80045b4:	280e      	cmp	r0, #14
 80045b6:	d93a      	bls.n	800462e <_scanf_float+0xda>
 80045b8:	f1b9 0f00 	cmp.w	r9, #0
 80045bc:	d003      	beq.n	80045c6 <_scanf_float+0x72>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c4:	6023      	str	r3, [r4, #0]
 80045c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045ca:	f1ba 0f01 	cmp.w	sl, #1
 80045ce:	f200 8113 	bhi.w	80047f8 <_scanf_float+0x2a4>
 80045d2:	455e      	cmp	r6, fp
 80045d4:	f200 8105 	bhi.w	80047e2 <_scanf_float+0x28e>
 80045d8:	2501      	movs	r5, #1
 80045da:	4628      	mov	r0, r5
 80045dc:	b007      	add	sp, #28
 80045de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80045e6:	2a0d      	cmp	r2, #13
 80045e8:	d8e6      	bhi.n	80045b8 <_scanf_float+0x64>
 80045ea:	a101      	add	r1, pc, #4	; (adr r1, 80045f0 <_scanf_float+0x9c>)
 80045ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80045f0:	0800472f 	.word	0x0800472f
 80045f4:	080045b9 	.word	0x080045b9
 80045f8:	080045b9 	.word	0x080045b9
 80045fc:	080045b9 	.word	0x080045b9
 8004600:	0800478f 	.word	0x0800478f
 8004604:	08004767 	.word	0x08004767
 8004608:	080045b9 	.word	0x080045b9
 800460c:	080045b9 	.word	0x080045b9
 8004610:	0800473d 	.word	0x0800473d
 8004614:	080045b9 	.word	0x080045b9
 8004618:	080045b9 	.word	0x080045b9
 800461c:	080045b9 	.word	0x080045b9
 8004620:	080045b9 	.word	0x080045b9
 8004624:	080046f5 	.word	0x080046f5
 8004628:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800462c:	e7db      	b.n	80045e6 <_scanf_float+0x92>
 800462e:	290e      	cmp	r1, #14
 8004630:	d8c2      	bhi.n	80045b8 <_scanf_float+0x64>
 8004632:	a001      	add	r0, pc, #4	; (adr r0, 8004638 <_scanf_float+0xe4>)
 8004634:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004638:	080046e7 	.word	0x080046e7
 800463c:	080045b9 	.word	0x080045b9
 8004640:	080046e7 	.word	0x080046e7
 8004644:	0800477b 	.word	0x0800477b
 8004648:	080045b9 	.word	0x080045b9
 800464c:	08004695 	.word	0x08004695
 8004650:	080046d1 	.word	0x080046d1
 8004654:	080046d1 	.word	0x080046d1
 8004658:	080046d1 	.word	0x080046d1
 800465c:	080046d1 	.word	0x080046d1
 8004660:	080046d1 	.word	0x080046d1
 8004664:	080046d1 	.word	0x080046d1
 8004668:	080046d1 	.word	0x080046d1
 800466c:	080046d1 	.word	0x080046d1
 8004670:	080046d1 	.word	0x080046d1
 8004674:	2b6e      	cmp	r3, #110	; 0x6e
 8004676:	d809      	bhi.n	800468c <_scanf_float+0x138>
 8004678:	2b60      	cmp	r3, #96	; 0x60
 800467a:	d8b2      	bhi.n	80045e2 <_scanf_float+0x8e>
 800467c:	2b54      	cmp	r3, #84	; 0x54
 800467e:	d077      	beq.n	8004770 <_scanf_float+0x21c>
 8004680:	2b59      	cmp	r3, #89	; 0x59
 8004682:	d199      	bne.n	80045b8 <_scanf_float+0x64>
 8004684:	2d07      	cmp	r5, #7
 8004686:	d197      	bne.n	80045b8 <_scanf_float+0x64>
 8004688:	2508      	movs	r5, #8
 800468a:	e029      	b.n	80046e0 <_scanf_float+0x18c>
 800468c:	2b74      	cmp	r3, #116	; 0x74
 800468e:	d06f      	beq.n	8004770 <_scanf_float+0x21c>
 8004690:	2b79      	cmp	r3, #121	; 0x79
 8004692:	e7f6      	b.n	8004682 <_scanf_float+0x12e>
 8004694:	6821      	ldr	r1, [r4, #0]
 8004696:	05c8      	lsls	r0, r1, #23
 8004698:	d51a      	bpl.n	80046d0 <_scanf_float+0x17c>
 800469a:	9b02      	ldr	r3, [sp, #8]
 800469c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80046a0:	6021      	str	r1, [r4, #0]
 80046a2:	f109 0901 	add.w	r9, r9, #1
 80046a6:	b11b      	cbz	r3, 80046b0 <_scanf_float+0x15c>
 80046a8:	3b01      	subs	r3, #1
 80046aa:	3201      	adds	r2, #1
 80046ac:	9302      	str	r3, [sp, #8]
 80046ae:	60a2      	str	r2, [r4, #8]
 80046b0:	68a3      	ldr	r3, [r4, #8]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	60a3      	str	r3, [r4, #8]
 80046b6:	6923      	ldr	r3, [r4, #16]
 80046b8:	3301      	adds	r3, #1
 80046ba:	6123      	str	r3, [r4, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3b01      	subs	r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	607b      	str	r3, [r7, #4]
 80046c4:	f340 8084 	ble.w	80047d0 <_scanf_float+0x27c>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	3301      	adds	r3, #1
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	e766      	b.n	800459e <_scanf_float+0x4a>
 80046d0:	eb1a 0f05 	cmn.w	sl, r5
 80046d4:	f47f af70 	bne.w	80045b8 <_scanf_float+0x64>
 80046d8:	6822      	ldr	r2, [r4, #0]
 80046da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80046de:	6022      	str	r2, [r4, #0]
 80046e0:	f806 3b01 	strb.w	r3, [r6], #1
 80046e4:	e7e4      	b.n	80046b0 <_scanf_float+0x15c>
 80046e6:	6822      	ldr	r2, [r4, #0]
 80046e8:	0610      	lsls	r0, r2, #24
 80046ea:	f57f af65 	bpl.w	80045b8 <_scanf_float+0x64>
 80046ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f2:	e7f4      	b.n	80046de <_scanf_float+0x18a>
 80046f4:	f1ba 0f00 	cmp.w	sl, #0
 80046f8:	d10e      	bne.n	8004718 <_scanf_float+0x1c4>
 80046fa:	f1b9 0f00 	cmp.w	r9, #0
 80046fe:	d10e      	bne.n	800471e <_scanf_float+0x1ca>
 8004700:	6822      	ldr	r2, [r4, #0]
 8004702:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004706:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800470a:	d108      	bne.n	800471e <_scanf_float+0x1ca>
 800470c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004710:	f04f 0a01 	mov.w	sl, #1
 8004714:	6022      	str	r2, [r4, #0]
 8004716:	e7e3      	b.n	80046e0 <_scanf_float+0x18c>
 8004718:	f1ba 0f02 	cmp.w	sl, #2
 800471c:	d055      	beq.n	80047ca <_scanf_float+0x276>
 800471e:	2d01      	cmp	r5, #1
 8004720:	d002      	beq.n	8004728 <_scanf_float+0x1d4>
 8004722:	2d04      	cmp	r5, #4
 8004724:	f47f af48 	bne.w	80045b8 <_scanf_float+0x64>
 8004728:	3501      	adds	r5, #1
 800472a:	b2ed      	uxtb	r5, r5
 800472c:	e7d8      	b.n	80046e0 <_scanf_float+0x18c>
 800472e:	f1ba 0f01 	cmp.w	sl, #1
 8004732:	f47f af41 	bne.w	80045b8 <_scanf_float+0x64>
 8004736:	f04f 0a02 	mov.w	sl, #2
 800473a:	e7d1      	b.n	80046e0 <_scanf_float+0x18c>
 800473c:	b97d      	cbnz	r5, 800475e <_scanf_float+0x20a>
 800473e:	f1b9 0f00 	cmp.w	r9, #0
 8004742:	f47f af3c 	bne.w	80045be <_scanf_float+0x6a>
 8004746:	6822      	ldr	r2, [r4, #0]
 8004748:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800474c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004750:	f47f af39 	bne.w	80045c6 <_scanf_float+0x72>
 8004754:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004758:	2501      	movs	r5, #1
 800475a:	6022      	str	r2, [r4, #0]
 800475c:	e7c0      	b.n	80046e0 <_scanf_float+0x18c>
 800475e:	2d03      	cmp	r5, #3
 8004760:	d0e2      	beq.n	8004728 <_scanf_float+0x1d4>
 8004762:	2d05      	cmp	r5, #5
 8004764:	e7de      	b.n	8004724 <_scanf_float+0x1d0>
 8004766:	2d02      	cmp	r5, #2
 8004768:	f47f af26 	bne.w	80045b8 <_scanf_float+0x64>
 800476c:	2503      	movs	r5, #3
 800476e:	e7b7      	b.n	80046e0 <_scanf_float+0x18c>
 8004770:	2d06      	cmp	r5, #6
 8004772:	f47f af21 	bne.w	80045b8 <_scanf_float+0x64>
 8004776:	2507      	movs	r5, #7
 8004778:	e7b2      	b.n	80046e0 <_scanf_float+0x18c>
 800477a:	6822      	ldr	r2, [r4, #0]
 800477c:	0591      	lsls	r1, r2, #22
 800477e:	f57f af1b 	bpl.w	80045b8 <_scanf_float+0x64>
 8004782:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004786:	6022      	str	r2, [r4, #0]
 8004788:	f8cd 9004 	str.w	r9, [sp, #4]
 800478c:	e7a8      	b.n	80046e0 <_scanf_float+0x18c>
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004794:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004798:	d006      	beq.n	80047a8 <_scanf_float+0x254>
 800479a:	0550      	lsls	r0, r2, #21
 800479c:	f57f af0c 	bpl.w	80045b8 <_scanf_float+0x64>
 80047a0:	f1b9 0f00 	cmp.w	r9, #0
 80047a4:	f43f af0f 	beq.w	80045c6 <_scanf_float+0x72>
 80047a8:	0591      	lsls	r1, r2, #22
 80047aa:	bf58      	it	pl
 80047ac:	9901      	ldrpl	r1, [sp, #4]
 80047ae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80047b2:	bf58      	it	pl
 80047b4:	eba9 0101 	subpl.w	r1, r9, r1
 80047b8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80047bc:	f04f 0900 	mov.w	r9, #0
 80047c0:	bf58      	it	pl
 80047c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80047c6:	6022      	str	r2, [r4, #0]
 80047c8:	e78a      	b.n	80046e0 <_scanf_float+0x18c>
 80047ca:	f04f 0a03 	mov.w	sl, #3
 80047ce:	e787      	b.n	80046e0 <_scanf_float+0x18c>
 80047d0:	4639      	mov	r1, r7
 80047d2:	4640      	mov	r0, r8
 80047d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80047d8:	4798      	blx	r3
 80047da:	2800      	cmp	r0, #0
 80047dc:	f43f aedf 	beq.w	800459e <_scanf_float+0x4a>
 80047e0:	e6ea      	b.n	80045b8 <_scanf_float+0x64>
 80047e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047e6:	463a      	mov	r2, r7
 80047e8:	4640      	mov	r0, r8
 80047ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047ee:	4798      	blx	r3
 80047f0:	6923      	ldr	r3, [r4, #16]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	6123      	str	r3, [r4, #16]
 80047f6:	e6ec      	b.n	80045d2 <_scanf_float+0x7e>
 80047f8:	1e6b      	subs	r3, r5, #1
 80047fa:	2b06      	cmp	r3, #6
 80047fc:	d825      	bhi.n	800484a <_scanf_float+0x2f6>
 80047fe:	2d02      	cmp	r5, #2
 8004800:	d836      	bhi.n	8004870 <_scanf_float+0x31c>
 8004802:	455e      	cmp	r6, fp
 8004804:	f67f aee8 	bls.w	80045d8 <_scanf_float+0x84>
 8004808:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800480c:	463a      	mov	r2, r7
 800480e:	4640      	mov	r0, r8
 8004810:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004814:	4798      	blx	r3
 8004816:	6923      	ldr	r3, [r4, #16]
 8004818:	3b01      	subs	r3, #1
 800481a:	6123      	str	r3, [r4, #16]
 800481c:	e7f1      	b.n	8004802 <_scanf_float+0x2ae>
 800481e:	9802      	ldr	r0, [sp, #8]
 8004820:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004824:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004828:	463a      	mov	r2, r7
 800482a:	9002      	str	r0, [sp, #8]
 800482c:	4640      	mov	r0, r8
 800482e:	4798      	blx	r3
 8004830:	6923      	ldr	r3, [r4, #16]
 8004832:	3b01      	subs	r3, #1
 8004834:	6123      	str	r3, [r4, #16]
 8004836:	f10a 3aff 	add.w	sl, sl, #4294967295
 800483a:	fa5f fa8a 	uxtb.w	sl, sl
 800483e:	f1ba 0f02 	cmp.w	sl, #2
 8004842:	d1ec      	bne.n	800481e <_scanf_float+0x2ca>
 8004844:	3d03      	subs	r5, #3
 8004846:	b2ed      	uxtb	r5, r5
 8004848:	1b76      	subs	r6, r6, r5
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	05da      	lsls	r2, r3, #23
 800484e:	d52f      	bpl.n	80048b0 <_scanf_float+0x35c>
 8004850:	055b      	lsls	r3, r3, #21
 8004852:	d510      	bpl.n	8004876 <_scanf_float+0x322>
 8004854:	455e      	cmp	r6, fp
 8004856:	f67f aebf 	bls.w	80045d8 <_scanf_float+0x84>
 800485a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800485e:	463a      	mov	r2, r7
 8004860:	4640      	mov	r0, r8
 8004862:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004866:	4798      	blx	r3
 8004868:	6923      	ldr	r3, [r4, #16]
 800486a:	3b01      	subs	r3, #1
 800486c:	6123      	str	r3, [r4, #16]
 800486e:	e7f1      	b.n	8004854 <_scanf_float+0x300>
 8004870:	46aa      	mov	sl, r5
 8004872:	9602      	str	r6, [sp, #8]
 8004874:	e7df      	b.n	8004836 <_scanf_float+0x2e2>
 8004876:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800487a:	6923      	ldr	r3, [r4, #16]
 800487c:	2965      	cmp	r1, #101	; 0x65
 800487e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004882:	f106 35ff 	add.w	r5, r6, #4294967295
 8004886:	6123      	str	r3, [r4, #16]
 8004888:	d00c      	beq.n	80048a4 <_scanf_float+0x350>
 800488a:	2945      	cmp	r1, #69	; 0x45
 800488c:	d00a      	beq.n	80048a4 <_scanf_float+0x350>
 800488e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004892:	463a      	mov	r2, r7
 8004894:	4640      	mov	r0, r8
 8004896:	4798      	blx	r3
 8004898:	6923      	ldr	r3, [r4, #16]
 800489a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800489e:	3b01      	subs	r3, #1
 80048a0:	1eb5      	subs	r5, r6, #2
 80048a2:	6123      	str	r3, [r4, #16]
 80048a4:	463a      	mov	r2, r7
 80048a6:	4640      	mov	r0, r8
 80048a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048ac:	4798      	blx	r3
 80048ae:	462e      	mov	r6, r5
 80048b0:	6825      	ldr	r5, [r4, #0]
 80048b2:	f015 0510 	ands.w	r5, r5, #16
 80048b6:	d155      	bne.n	8004964 <_scanf_float+0x410>
 80048b8:	7035      	strb	r5, [r6, #0]
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c4:	d11d      	bne.n	8004902 <_scanf_float+0x3ae>
 80048c6:	9b01      	ldr	r3, [sp, #4]
 80048c8:	454b      	cmp	r3, r9
 80048ca:	eba3 0209 	sub.w	r2, r3, r9
 80048ce:	d125      	bne.n	800491c <_scanf_float+0x3c8>
 80048d0:	2200      	movs	r2, #0
 80048d2:	4659      	mov	r1, fp
 80048d4:	4640      	mov	r0, r8
 80048d6:	f002 fc1f 	bl	8007118 <_strtod_r>
 80048da:	9b03      	ldr	r3, [sp, #12]
 80048dc:	f8d4 c000 	ldr.w	ip, [r4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f01c 0f02 	tst.w	ip, #2
 80048e6:	4606      	mov	r6, r0
 80048e8:	460f      	mov	r7, r1
 80048ea:	f103 0204 	add.w	r2, r3, #4
 80048ee:	d020      	beq.n	8004932 <_scanf_float+0x3de>
 80048f0:	9903      	ldr	r1, [sp, #12]
 80048f2:	600a      	str	r2, [r1, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	e9c3 6700 	strd	r6, r7, [r3]
 80048fa:	68e3      	ldr	r3, [r4, #12]
 80048fc:	3301      	adds	r3, #1
 80048fe:	60e3      	str	r3, [r4, #12]
 8004900:	e66b      	b.n	80045da <_scanf_float+0x86>
 8004902:	9b04      	ldr	r3, [sp, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0e3      	beq.n	80048d0 <_scanf_float+0x37c>
 8004908:	9905      	ldr	r1, [sp, #20]
 800490a:	230a      	movs	r3, #10
 800490c:	462a      	mov	r2, r5
 800490e:	4640      	mov	r0, r8
 8004910:	3101      	adds	r1, #1
 8004912:	f002 fc85 	bl	8007220 <_strtol_r>
 8004916:	9b04      	ldr	r3, [sp, #16]
 8004918:	9e05      	ldr	r6, [sp, #20]
 800491a:	1ac2      	subs	r2, r0, r3
 800491c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004920:	429e      	cmp	r6, r3
 8004922:	bf28      	it	cs
 8004924:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004928:	4630      	mov	r0, r6
 800492a:	490f      	ldr	r1, [pc, #60]	; (8004968 <_scanf_float+0x414>)
 800492c:	f000 f8e2 	bl	8004af4 <siprintf>
 8004930:	e7ce      	b.n	80048d0 <_scanf_float+0x37c>
 8004932:	f01c 0f04 	tst.w	ip, #4
 8004936:	d1db      	bne.n	80048f0 <_scanf_float+0x39c>
 8004938:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800493c:	f8cc 2000 	str.w	r2, [ip]
 8004940:	f8d3 8000 	ldr.w	r8, [r3]
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	f7fc f8cc 	bl	8000ae4 <__aeabi_dcmpun>
 800494c:	b128      	cbz	r0, 800495a <_scanf_float+0x406>
 800494e:	4807      	ldr	r0, [pc, #28]	; (800496c <_scanf_float+0x418>)
 8004950:	f000 f9c0 	bl	8004cd4 <nanf>
 8004954:	f8c8 0000 	str.w	r0, [r8]
 8004958:	e7cf      	b.n	80048fa <_scanf_float+0x3a6>
 800495a:	4630      	mov	r0, r6
 800495c:	4639      	mov	r1, r7
 800495e:	f7fc f91f 	bl	8000ba0 <__aeabi_d2f>
 8004962:	e7f7      	b.n	8004954 <_scanf_float+0x400>
 8004964:	2500      	movs	r5, #0
 8004966:	e638      	b.n	80045da <_scanf_float+0x86>
 8004968:	080084b2 	.word	0x080084b2
 800496c:	08008845 	.word	0x08008845

08004970 <std>:
 8004970:	2300      	movs	r3, #0
 8004972:	b510      	push	{r4, lr}
 8004974:	4604      	mov	r4, r0
 8004976:	e9c0 3300 	strd	r3, r3, [r0]
 800497a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800497e:	6083      	str	r3, [r0, #8]
 8004980:	8181      	strh	r1, [r0, #12]
 8004982:	6643      	str	r3, [r0, #100]	; 0x64
 8004984:	81c2      	strh	r2, [r0, #14]
 8004986:	6183      	str	r3, [r0, #24]
 8004988:	4619      	mov	r1, r3
 800498a:	2208      	movs	r2, #8
 800498c:	305c      	adds	r0, #92	; 0x5c
 800498e:	f000 f914 	bl	8004bba <memset>
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <std+0x38>)
 8004994:	6224      	str	r4, [r4, #32]
 8004996:	6263      	str	r3, [r4, #36]	; 0x24
 8004998:	4b04      	ldr	r3, [pc, #16]	; (80049ac <std+0x3c>)
 800499a:	62a3      	str	r3, [r4, #40]	; 0x28
 800499c:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <std+0x40>)
 800499e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049a0:	4b04      	ldr	r3, [pc, #16]	; (80049b4 <std+0x44>)
 80049a2:	6323      	str	r3, [r4, #48]	; 0x30
 80049a4:	bd10      	pop	{r4, pc}
 80049a6:	bf00      	nop
 80049a8:	08004b35 	.word	0x08004b35
 80049ac:	08004b57 	.word	0x08004b57
 80049b0:	08004b8f 	.word	0x08004b8f
 80049b4:	08004bb3 	.word	0x08004bb3

080049b8 <stdio_exit_handler>:
 80049b8:	4a02      	ldr	r2, [pc, #8]	; (80049c4 <stdio_exit_handler+0xc>)
 80049ba:	4903      	ldr	r1, [pc, #12]	; (80049c8 <stdio_exit_handler+0x10>)
 80049bc:	4803      	ldr	r0, [pc, #12]	; (80049cc <stdio_exit_handler+0x14>)
 80049be:	f000 b869 	b.w	8004a94 <_fwalk_sglue>
 80049c2:	bf00      	nop
 80049c4:	2000000c 	.word	0x2000000c
 80049c8:	0800785d 	.word	0x0800785d
 80049cc:	20000018 	.word	0x20000018

080049d0 <cleanup_stdio>:
 80049d0:	6841      	ldr	r1, [r0, #4]
 80049d2:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <cleanup_stdio+0x34>)
 80049d4:	b510      	push	{r4, lr}
 80049d6:	4299      	cmp	r1, r3
 80049d8:	4604      	mov	r4, r0
 80049da:	d001      	beq.n	80049e0 <cleanup_stdio+0x10>
 80049dc:	f002 ff3e 	bl	800785c <_fflush_r>
 80049e0:	68a1      	ldr	r1, [r4, #8]
 80049e2:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <cleanup_stdio+0x38>)
 80049e4:	4299      	cmp	r1, r3
 80049e6:	d002      	beq.n	80049ee <cleanup_stdio+0x1e>
 80049e8:	4620      	mov	r0, r4
 80049ea:	f002 ff37 	bl	800785c <_fflush_r>
 80049ee:	68e1      	ldr	r1, [r4, #12]
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <cleanup_stdio+0x3c>)
 80049f2:	4299      	cmp	r1, r3
 80049f4:	d004      	beq.n	8004a00 <cleanup_stdio+0x30>
 80049f6:	4620      	mov	r0, r4
 80049f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049fc:	f002 bf2e 	b.w	800785c <_fflush_r>
 8004a00:	bd10      	pop	{r4, pc}
 8004a02:	bf00      	nop
 8004a04:	200003ac 	.word	0x200003ac
 8004a08:	20000414 	.word	0x20000414
 8004a0c:	2000047c 	.word	0x2000047c

08004a10 <global_stdio_init.part.0>:
 8004a10:	b510      	push	{r4, lr}
 8004a12:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <global_stdio_init.part.0+0x30>)
 8004a14:	4c0b      	ldr	r4, [pc, #44]	; (8004a44 <global_stdio_init.part.0+0x34>)
 8004a16:	4a0c      	ldr	r2, [pc, #48]	; (8004a48 <global_stdio_init.part.0+0x38>)
 8004a18:	4620      	mov	r0, r4
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	2104      	movs	r1, #4
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f7ff ffa6 	bl	8004970 <std>
 8004a24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a28:	2201      	movs	r2, #1
 8004a2a:	2109      	movs	r1, #9
 8004a2c:	f7ff ffa0 	bl	8004970 <std>
 8004a30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a34:	2202      	movs	r2, #2
 8004a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a3a:	2112      	movs	r1, #18
 8004a3c:	f7ff bf98 	b.w	8004970 <std>
 8004a40:	200004e4 	.word	0x200004e4
 8004a44:	200003ac 	.word	0x200003ac
 8004a48:	080049b9 	.word	0x080049b9

08004a4c <__sfp_lock_acquire>:
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <__sfp_lock_acquire+0x8>)
 8004a4e:	f000 b931 	b.w	8004cb4 <__retarget_lock_acquire_recursive>
 8004a52:	bf00      	nop
 8004a54:	200004ed 	.word	0x200004ed

08004a58 <__sfp_lock_release>:
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <__sfp_lock_release+0x8>)
 8004a5a:	f000 b92c 	b.w	8004cb6 <__retarget_lock_release_recursive>
 8004a5e:	bf00      	nop
 8004a60:	200004ed 	.word	0x200004ed

08004a64 <__sinit>:
 8004a64:	b510      	push	{r4, lr}
 8004a66:	4604      	mov	r4, r0
 8004a68:	f7ff fff0 	bl	8004a4c <__sfp_lock_acquire>
 8004a6c:	6a23      	ldr	r3, [r4, #32]
 8004a6e:	b11b      	cbz	r3, 8004a78 <__sinit+0x14>
 8004a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a74:	f7ff bff0 	b.w	8004a58 <__sfp_lock_release>
 8004a78:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <__sinit+0x28>)
 8004a7a:	6223      	str	r3, [r4, #32]
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <__sinit+0x2c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f5      	bne.n	8004a70 <__sinit+0xc>
 8004a84:	f7ff ffc4 	bl	8004a10 <global_stdio_init.part.0>
 8004a88:	e7f2      	b.n	8004a70 <__sinit+0xc>
 8004a8a:	bf00      	nop
 8004a8c:	080049d1 	.word	0x080049d1
 8004a90:	200004e4 	.word	0x200004e4

08004a94 <_fwalk_sglue>:
 8004a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a98:	4607      	mov	r7, r0
 8004a9a:	4688      	mov	r8, r1
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	2600      	movs	r6, #0
 8004aa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004aa4:	f1b9 0901 	subs.w	r9, r9, #1
 8004aa8:	d505      	bpl.n	8004ab6 <_fwalk_sglue+0x22>
 8004aaa:	6824      	ldr	r4, [r4, #0]
 8004aac:	2c00      	cmp	r4, #0
 8004aae:	d1f7      	bne.n	8004aa0 <_fwalk_sglue+0xc>
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ab6:	89ab      	ldrh	r3, [r5, #12]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d907      	bls.n	8004acc <_fwalk_sglue+0x38>
 8004abc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	d003      	beq.n	8004acc <_fwalk_sglue+0x38>
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	47c0      	blx	r8
 8004aca:	4306      	orrs	r6, r0
 8004acc:	3568      	adds	r5, #104	; 0x68
 8004ace:	e7e9      	b.n	8004aa4 <_fwalk_sglue+0x10>

08004ad0 <iprintf>:
 8004ad0:	b40f      	push	{r0, r1, r2, r3}
 8004ad2:	b507      	push	{r0, r1, r2, lr}
 8004ad4:	4906      	ldr	r1, [pc, #24]	; (8004af0 <iprintf+0x20>)
 8004ad6:	ab04      	add	r3, sp, #16
 8004ad8:	6808      	ldr	r0, [r1, #0]
 8004ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ade:	6881      	ldr	r1, [r0, #8]
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	f002 fd1f 	bl	8007524 <_vfiprintf_r>
 8004ae6:	b003      	add	sp, #12
 8004ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004aec:	b004      	add	sp, #16
 8004aee:	4770      	bx	lr
 8004af0:	20000064 	.word	0x20000064

08004af4 <siprintf>:
 8004af4:	b40e      	push	{r1, r2, r3}
 8004af6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004afa:	b500      	push	{lr}
 8004afc:	b09c      	sub	sp, #112	; 0x70
 8004afe:	ab1d      	add	r3, sp, #116	; 0x74
 8004b00:	9002      	str	r0, [sp, #8]
 8004b02:	9006      	str	r0, [sp, #24]
 8004b04:	9107      	str	r1, [sp, #28]
 8004b06:	9104      	str	r1, [sp, #16]
 8004b08:	4808      	ldr	r0, [pc, #32]	; (8004b2c <siprintf+0x38>)
 8004b0a:	4909      	ldr	r1, [pc, #36]	; (8004b30 <siprintf+0x3c>)
 8004b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b10:	9105      	str	r1, [sp, #20]
 8004b12:	6800      	ldr	r0, [r0, #0]
 8004b14:	a902      	add	r1, sp, #8
 8004b16:	9301      	str	r3, [sp, #4]
 8004b18:	f002 fbde 	bl	80072d8 <_svfiprintf_r>
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	9b02      	ldr	r3, [sp, #8]
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	b01c      	add	sp, #112	; 0x70
 8004b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b28:	b003      	add	sp, #12
 8004b2a:	4770      	bx	lr
 8004b2c:	20000064 	.word	0x20000064
 8004b30:	ffff0208 	.word	0xffff0208

08004b34 <__sread>:
 8004b34:	b510      	push	{r4, lr}
 8004b36:	460c      	mov	r4, r1
 8004b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b3c:	f000 f86c 	bl	8004c18 <_read_r>
 8004b40:	2800      	cmp	r0, #0
 8004b42:	bfab      	itete	ge
 8004b44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b46:	89a3      	ldrhlt	r3, [r4, #12]
 8004b48:	181b      	addge	r3, r3, r0
 8004b4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b4e:	bfac      	ite	ge
 8004b50:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b52:	81a3      	strhlt	r3, [r4, #12]
 8004b54:	bd10      	pop	{r4, pc}

08004b56 <__swrite>:
 8004b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b5a:	461f      	mov	r7, r3
 8004b5c:	898b      	ldrh	r3, [r1, #12]
 8004b5e:	4605      	mov	r5, r0
 8004b60:	05db      	lsls	r3, r3, #23
 8004b62:	460c      	mov	r4, r1
 8004b64:	4616      	mov	r6, r2
 8004b66:	d505      	bpl.n	8004b74 <__swrite+0x1e>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b70:	f000 f840 	bl	8004bf4 <_lseek_r>
 8004b74:	89a3      	ldrh	r3, [r4, #12]
 8004b76:	4632      	mov	r2, r6
 8004b78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b7c:	81a3      	strh	r3, [r4, #12]
 8004b7e:	4628      	mov	r0, r5
 8004b80:	463b      	mov	r3, r7
 8004b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b8a:	f000 b857 	b.w	8004c3c <_write_r>

08004b8e <__sseek>:
 8004b8e:	b510      	push	{r4, lr}
 8004b90:	460c      	mov	r4, r1
 8004b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b96:	f000 f82d 	bl	8004bf4 <_lseek_r>
 8004b9a:	1c43      	adds	r3, r0, #1
 8004b9c:	89a3      	ldrh	r3, [r4, #12]
 8004b9e:	bf15      	itete	ne
 8004ba0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ba2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ba6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004baa:	81a3      	strheq	r3, [r4, #12]
 8004bac:	bf18      	it	ne
 8004bae:	81a3      	strhne	r3, [r4, #12]
 8004bb0:	bd10      	pop	{r4, pc}

08004bb2 <__sclose>:
 8004bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb6:	f000 b80d 	b.w	8004bd4 <_close_r>

08004bba <memset>:
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4402      	add	r2, r0
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d100      	bne.n	8004bc4 <memset+0xa>
 8004bc2:	4770      	bx	lr
 8004bc4:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc8:	e7f9      	b.n	8004bbe <memset+0x4>
	...

08004bcc <_localeconv_r>:
 8004bcc:	4800      	ldr	r0, [pc, #0]	; (8004bd0 <_localeconv_r+0x4>)
 8004bce:	4770      	bx	lr
 8004bd0:	20000158 	.word	0x20000158

08004bd4 <_close_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	4d05      	ldr	r5, [pc, #20]	; (8004bf0 <_close_r+0x1c>)
 8004bda:	4604      	mov	r4, r0
 8004bdc:	4608      	mov	r0, r1
 8004bde:	602b      	str	r3, [r5, #0]
 8004be0:	f7fc fb46 	bl	8001270 <_close>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d102      	bne.n	8004bee <_close_r+0x1a>
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	b103      	cbz	r3, 8004bee <_close_r+0x1a>
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	200004e8 	.word	0x200004e8

08004bf4 <_lseek_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	4608      	mov	r0, r1
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	4d05      	ldr	r5, [pc, #20]	; (8004c14 <_lseek_r+0x20>)
 8004c00:	602a      	str	r2, [r5, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f7fc fb58 	bl	80012b8 <_lseek>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d102      	bne.n	8004c12 <_lseek_r+0x1e>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	b103      	cbz	r3, 8004c12 <_lseek_r+0x1e>
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	200004e8 	.word	0x200004e8

08004c18 <_read_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	4608      	mov	r0, r1
 8004c1e:	4611      	mov	r1, r2
 8004c20:	2200      	movs	r2, #0
 8004c22:	4d05      	ldr	r5, [pc, #20]	; (8004c38 <_read_r+0x20>)
 8004c24:	602a      	str	r2, [r5, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	f7fc fae9 	bl	80011fe <_read>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d102      	bne.n	8004c36 <_read_r+0x1e>
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	b103      	cbz	r3, 8004c36 <_read_r+0x1e>
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	200004e8 	.word	0x200004e8

08004c3c <_write_r>:
 8004c3c:	b538      	push	{r3, r4, r5, lr}
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4608      	mov	r0, r1
 8004c42:	4611      	mov	r1, r2
 8004c44:	2200      	movs	r2, #0
 8004c46:	4d05      	ldr	r5, [pc, #20]	; (8004c5c <_write_r+0x20>)
 8004c48:	602a      	str	r2, [r5, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f7fc faf4 	bl	8001238 <_write>
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	d102      	bne.n	8004c5a <_write_r+0x1e>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	b103      	cbz	r3, 8004c5a <_write_r+0x1e>
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}
 8004c5c:	200004e8 	.word	0x200004e8

08004c60 <__errno>:
 8004c60:	4b01      	ldr	r3, [pc, #4]	; (8004c68 <__errno+0x8>)
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	20000064 	.word	0x20000064

08004c6c <__libc_init_array>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	2600      	movs	r6, #0
 8004c70:	4d0c      	ldr	r5, [pc, #48]	; (8004ca4 <__libc_init_array+0x38>)
 8004c72:	4c0d      	ldr	r4, [pc, #52]	; (8004ca8 <__libc_init_array+0x3c>)
 8004c74:	1b64      	subs	r4, r4, r5
 8004c76:	10a4      	asrs	r4, r4, #2
 8004c78:	42a6      	cmp	r6, r4
 8004c7a:	d109      	bne.n	8004c90 <__libc_init_array+0x24>
 8004c7c:	f003 fbc0 	bl	8008400 <_init>
 8004c80:	2600      	movs	r6, #0
 8004c82:	4d0a      	ldr	r5, [pc, #40]	; (8004cac <__libc_init_array+0x40>)
 8004c84:	4c0a      	ldr	r4, [pc, #40]	; (8004cb0 <__libc_init_array+0x44>)
 8004c86:	1b64      	subs	r4, r4, r5
 8004c88:	10a4      	asrs	r4, r4, #2
 8004c8a:	42a6      	cmp	r6, r4
 8004c8c:	d105      	bne.n	8004c9a <__libc_init_array+0x2e>
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
 8004c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c94:	4798      	blx	r3
 8004c96:	3601      	adds	r6, #1
 8004c98:	e7ee      	b.n	8004c78 <__libc_init_array+0xc>
 8004c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9e:	4798      	blx	r3
 8004ca0:	3601      	adds	r6, #1
 8004ca2:	e7f2      	b.n	8004c8a <__libc_init_array+0x1e>
 8004ca4:	080088a8 	.word	0x080088a8
 8004ca8:	080088a8 	.word	0x080088a8
 8004cac:	080088a8 	.word	0x080088a8
 8004cb0:	080088ac 	.word	0x080088ac

08004cb4 <__retarget_lock_acquire_recursive>:
 8004cb4:	4770      	bx	lr

08004cb6 <__retarget_lock_release_recursive>:
 8004cb6:	4770      	bx	lr

08004cb8 <memchr>:
 8004cb8:	4603      	mov	r3, r0
 8004cba:	b510      	push	{r4, lr}
 8004cbc:	b2c9      	uxtb	r1, r1
 8004cbe:	4402      	add	r2, r0
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	d101      	bne.n	8004cca <memchr+0x12>
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	e003      	b.n	8004cd2 <memchr+0x1a>
 8004cca:	7804      	ldrb	r4, [r0, #0]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	428c      	cmp	r4, r1
 8004cd0:	d1f6      	bne.n	8004cc0 <memchr+0x8>
 8004cd2:	bd10      	pop	{r4, pc}

08004cd4 <nanf>:
 8004cd4:	4800      	ldr	r0, [pc, #0]	; (8004cd8 <nanf+0x4>)
 8004cd6:	4770      	bx	lr
 8004cd8:	7fc00000 	.word	0x7fc00000

08004cdc <quorem>:
 8004cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce0:	6903      	ldr	r3, [r0, #16]
 8004ce2:	690c      	ldr	r4, [r1, #16]
 8004ce4:	4607      	mov	r7, r0
 8004ce6:	42a3      	cmp	r3, r4
 8004ce8:	db7f      	blt.n	8004dea <quorem+0x10e>
 8004cea:	3c01      	subs	r4, #1
 8004cec:	f100 0514 	add.w	r5, r0, #20
 8004cf0:	f101 0814 	add.w	r8, r1, #20
 8004cf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004cfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d02:	3301      	adds	r3, #1
 8004d04:	429a      	cmp	r2, r3
 8004d06:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d0a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d0e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d12:	d331      	bcc.n	8004d78 <quorem+0x9c>
 8004d14:	f04f 0e00 	mov.w	lr, #0
 8004d18:	4640      	mov	r0, r8
 8004d1a:	46ac      	mov	ip, r5
 8004d1c:	46f2      	mov	sl, lr
 8004d1e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d22:	b293      	uxth	r3, r2
 8004d24:	fb06 e303 	mla	r3, r6, r3, lr
 8004d28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d2c:	0c1a      	lsrs	r2, r3, #16
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	fb06 220e 	mla	r2, r6, lr, r2
 8004d34:	ebaa 0303 	sub.w	r3, sl, r3
 8004d38:	f8dc a000 	ldr.w	sl, [ip]
 8004d3c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d40:	fa1f fa8a 	uxth.w	sl, sl
 8004d44:	4453      	add	r3, sl
 8004d46:	f8dc a000 	ldr.w	sl, [ip]
 8004d4a:	b292      	uxth	r2, r2
 8004d4c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004d50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d5a:	4581      	cmp	r9, r0
 8004d5c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004d60:	f84c 3b04 	str.w	r3, [ip], #4
 8004d64:	d2db      	bcs.n	8004d1e <quorem+0x42>
 8004d66:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d6a:	b92b      	cbnz	r3, 8004d78 <quorem+0x9c>
 8004d6c:	9b01      	ldr	r3, [sp, #4]
 8004d6e:	3b04      	subs	r3, #4
 8004d70:	429d      	cmp	r5, r3
 8004d72:	461a      	mov	r2, r3
 8004d74:	d32d      	bcc.n	8004dd2 <quorem+0xf6>
 8004d76:	613c      	str	r4, [r7, #16]
 8004d78:	4638      	mov	r0, r7
 8004d7a:	f001 f9dd 	bl	8006138 <__mcmp>
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	db23      	blt.n	8004dca <quorem+0xee>
 8004d82:	4629      	mov	r1, r5
 8004d84:	2000      	movs	r0, #0
 8004d86:	3601      	adds	r6, #1
 8004d88:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d8c:	f8d1 c000 	ldr.w	ip, [r1]
 8004d90:	b293      	uxth	r3, r2
 8004d92:	1ac3      	subs	r3, r0, r3
 8004d94:	0c12      	lsrs	r2, r2, #16
 8004d96:	fa1f f08c 	uxth.w	r0, ip
 8004d9a:	4403      	add	r3, r0
 8004d9c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004da0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004daa:	45c1      	cmp	r9, r8
 8004dac:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004db0:	f841 3b04 	str.w	r3, [r1], #4
 8004db4:	d2e8      	bcs.n	8004d88 <quorem+0xac>
 8004db6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004dba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004dbe:	b922      	cbnz	r2, 8004dca <quorem+0xee>
 8004dc0:	3b04      	subs	r3, #4
 8004dc2:	429d      	cmp	r5, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	d30a      	bcc.n	8004dde <quorem+0x102>
 8004dc8:	613c      	str	r4, [r7, #16]
 8004dca:	4630      	mov	r0, r6
 8004dcc:	b003      	add	sp, #12
 8004dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	3b04      	subs	r3, #4
 8004dd6:	2a00      	cmp	r2, #0
 8004dd8:	d1cd      	bne.n	8004d76 <quorem+0x9a>
 8004dda:	3c01      	subs	r4, #1
 8004ddc:	e7c8      	b.n	8004d70 <quorem+0x94>
 8004dde:	6812      	ldr	r2, [r2, #0]
 8004de0:	3b04      	subs	r3, #4
 8004de2:	2a00      	cmp	r2, #0
 8004de4:	d1f0      	bne.n	8004dc8 <quorem+0xec>
 8004de6:	3c01      	subs	r4, #1
 8004de8:	e7eb      	b.n	8004dc2 <quorem+0xe6>
 8004dea:	2000      	movs	r0, #0
 8004dec:	e7ee      	b.n	8004dcc <quorem+0xf0>
	...

08004df0 <_dtoa_r>:
 8004df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df4:	4616      	mov	r6, r2
 8004df6:	461f      	mov	r7, r3
 8004df8:	69c4      	ldr	r4, [r0, #28]
 8004dfa:	b099      	sub	sp, #100	; 0x64
 8004dfc:	4605      	mov	r5, r0
 8004dfe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e02:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004e06:	b974      	cbnz	r4, 8004e26 <_dtoa_r+0x36>
 8004e08:	2010      	movs	r0, #16
 8004e0a:	f000 fe1d 	bl	8005a48 <malloc>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	61e8      	str	r0, [r5, #28]
 8004e12:	b920      	cbnz	r0, 8004e1e <_dtoa_r+0x2e>
 8004e14:	21ef      	movs	r1, #239	; 0xef
 8004e16:	4bac      	ldr	r3, [pc, #688]	; (80050c8 <_dtoa_r+0x2d8>)
 8004e18:	48ac      	ldr	r0, [pc, #688]	; (80050cc <_dtoa_r+0x2dc>)
 8004e1a:	f002 fe2d 	bl	8007a78 <__assert_func>
 8004e1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e22:	6004      	str	r4, [r0, #0]
 8004e24:	60c4      	str	r4, [r0, #12]
 8004e26:	69eb      	ldr	r3, [r5, #28]
 8004e28:	6819      	ldr	r1, [r3, #0]
 8004e2a:	b151      	cbz	r1, 8004e42 <_dtoa_r+0x52>
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	2301      	movs	r3, #1
 8004e30:	4093      	lsls	r3, r2
 8004e32:	604a      	str	r2, [r1, #4]
 8004e34:	608b      	str	r3, [r1, #8]
 8004e36:	4628      	mov	r0, r5
 8004e38:	f000 fefa 	bl	8005c30 <_Bfree>
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	69eb      	ldr	r3, [r5, #28]
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	1e3b      	subs	r3, r7, #0
 8004e44:	bfaf      	iteee	ge
 8004e46:	2300      	movge	r3, #0
 8004e48:	2201      	movlt	r2, #1
 8004e4a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004e4e:	9305      	strlt	r3, [sp, #20]
 8004e50:	bfa8      	it	ge
 8004e52:	f8c8 3000 	strge.w	r3, [r8]
 8004e56:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004e5a:	4b9d      	ldr	r3, [pc, #628]	; (80050d0 <_dtoa_r+0x2e0>)
 8004e5c:	bfb8      	it	lt
 8004e5e:	f8c8 2000 	strlt.w	r2, [r8]
 8004e62:	ea33 0309 	bics.w	r3, r3, r9
 8004e66:	d119      	bne.n	8004e9c <_dtoa_r+0xac>
 8004e68:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e74:	4333      	orrs	r3, r6
 8004e76:	f000 8589 	beq.w	800598c <_dtoa_r+0xb9c>
 8004e7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e7c:	b953      	cbnz	r3, 8004e94 <_dtoa_r+0xa4>
 8004e7e:	4b95      	ldr	r3, [pc, #596]	; (80050d4 <_dtoa_r+0x2e4>)
 8004e80:	e023      	b.n	8004eca <_dtoa_r+0xda>
 8004e82:	4b95      	ldr	r3, [pc, #596]	; (80050d8 <_dtoa_r+0x2e8>)
 8004e84:	9303      	str	r3, [sp, #12]
 8004e86:	3308      	adds	r3, #8
 8004e88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	9803      	ldr	r0, [sp, #12]
 8004e8e:	b019      	add	sp, #100	; 0x64
 8004e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e94:	4b8f      	ldr	r3, [pc, #572]	; (80050d4 <_dtoa_r+0x2e4>)
 8004e96:	9303      	str	r3, [sp, #12]
 8004e98:	3303      	adds	r3, #3
 8004e9a:	e7f5      	b.n	8004e88 <_dtoa_r+0x98>
 8004e9c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004ea0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004ea4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f7fb fde8 	bl	8000a80 <__aeabi_dcmpeq>
 8004eb0:	4680      	mov	r8, r0
 8004eb2:	b160      	cbz	r0, 8004ece <_dtoa_r+0xde>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 8562 	beq.w	8005986 <_dtoa_r+0xb96>
 8004ec2:	4b86      	ldr	r3, [pc, #536]	; (80050dc <_dtoa_r+0x2ec>)
 8004ec4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	9303      	str	r3, [sp, #12]
 8004ecc:	e7de      	b.n	8004e8c <_dtoa_r+0x9c>
 8004ece:	ab16      	add	r3, sp, #88	; 0x58
 8004ed0:	9301      	str	r3, [sp, #4]
 8004ed2:	ab17      	add	r3, sp, #92	; 0x5c
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004edc:	f001 fa3c 	bl	8006358 <__d2b>
 8004ee0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004ee4:	4682      	mov	sl, r0
 8004ee6:	2c00      	cmp	r4, #0
 8004ee8:	d07e      	beq.n	8004fe8 <_dtoa_r+0x1f8>
 8004eea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ef0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ef8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004efc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004f00:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004f04:	4619      	mov	r1, r3
 8004f06:	2200      	movs	r2, #0
 8004f08:	4b75      	ldr	r3, [pc, #468]	; (80050e0 <_dtoa_r+0x2f0>)
 8004f0a:	f7fb f999 	bl	8000240 <__aeabi_dsub>
 8004f0e:	a368      	add	r3, pc, #416	; (adr r3, 80050b0 <_dtoa_r+0x2c0>)
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f7fb fb4c 	bl	80005b0 <__aeabi_dmul>
 8004f18:	a367      	add	r3, pc, #412	; (adr r3, 80050b8 <_dtoa_r+0x2c8>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f7fb f991 	bl	8000244 <__adddf3>
 8004f22:	4606      	mov	r6, r0
 8004f24:	4620      	mov	r0, r4
 8004f26:	460f      	mov	r7, r1
 8004f28:	f7fb fad8 	bl	80004dc <__aeabi_i2d>
 8004f2c:	a364      	add	r3, pc, #400	; (adr r3, 80050c0 <_dtoa_r+0x2d0>)
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	f7fb fb3d 	bl	80005b0 <__aeabi_dmul>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4630      	mov	r0, r6
 8004f3c:	4639      	mov	r1, r7
 8004f3e:	f7fb f981 	bl	8000244 <__adddf3>
 8004f42:	4606      	mov	r6, r0
 8004f44:	460f      	mov	r7, r1
 8004f46:	f7fb fde3 	bl	8000b10 <__aeabi_d2iz>
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	4683      	mov	fp, r0
 8004f4e:	2300      	movs	r3, #0
 8004f50:	4630      	mov	r0, r6
 8004f52:	4639      	mov	r1, r7
 8004f54:	f7fb fd9e 	bl	8000a94 <__aeabi_dcmplt>
 8004f58:	b148      	cbz	r0, 8004f6e <_dtoa_r+0x17e>
 8004f5a:	4658      	mov	r0, fp
 8004f5c:	f7fb fabe 	bl	80004dc <__aeabi_i2d>
 8004f60:	4632      	mov	r2, r6
 8004f62:	463b      	mov	r3, r7
 8004f64:	f7fb fd8c 	bl	8000a80 <__aeabi_dcmpeq>
 8004f68:	b908      	cbnz	r0, 8004f6e <_dtoa_r+0x17e>
 8004f6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f6e:	f1bb 0f16 	cmp.w	fp, #22
 8004f72:	d857      	bhi.n	8005024 <_dtoa_r+0x234>
 8004f74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f78:	4b5a      	ldr	r3, [pc, #360]	; (80050e4 <_dtoa_r+0x2f4>)
 8004f7a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	f7fb fd87 	bl	8000a94 <__aeabi_dcmplt>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d04e      	beq.n	8005028 <_dtoa_r+0x238>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f90:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f92:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004f94:	1b1b      	subs	r3, r3, r4
 8004f96:	1e5a      	subs	r2, r3, #1
 8004f98:	bf46      	itte	mi
 8004f9a:	f1c3 0901 	rsbmi	r9, r3, #1
 8004f9e:	2300      	movmi	r3, #0
 8004fa0:	f04f 0900 	movpl.w	r9, #0
 8004fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8004fa6:	bf48      	it	mi
 8004fa8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004faa:	f1bb 0f00 	cmp.w	fp, #0
 8004fae:	db3d      	blt.n	800502c <_dtoa_r+0x23c>
 8004fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004fb6:	445b      	add	r3, fp
 8004fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8004fba:	2300      	movs	r3, #0
 8004fbc:	930a      	str	r3, [sp, #40]	; 0x28
 8004fbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fc0:	2b09      	cmp	r3, #9
 8004fc2:	d867      	bhi.n	8005094 <_dtoa_r+0x2a4>
 8004fc4:	2b05      	cmp	r3, #5
 8004fc6:	bfc4      	itt	gt
 8004fc8:	3b04      	subgt	r3, #4
 8004fca:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004fcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fce:	bfc8      	it	gt
 8004fd0:	2400      	movgt	r4, #0
 8004fd2:	f1a3 0302 	sub.w	r3, r3, #2
 8004fd6:	bfd8      	it	le
 8004fd8:	2401      	movle	r4, #1
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	f200 8086 	bhi.w	80050ec <_dtoa_r+0x2fc>
 8004fe0:	e8df f003 	tbb	[pc, r3]
 8004fe4:	5637392c 	.word	0x5637392c
 8004fe8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004fec:	441c      	add	r4, r3
 8004fee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	bfc1      	itttt	gt
 8004ff6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ffa:	fa09 f903 	lslgt.w	r9, r9, r3
 8004ffe:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005002:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005006:	bfd6      	itet	le
 8005008:	f1c3 0320 	rsble	r3, r3, #32
 800500c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005010:	fa06 f003 	lslle.w	r0, r6, r3
 8005014:	f7fb fa52 	bl	80004bc <__aeabi_ui2d>
 8005018:	2201      	movs	r2, #1
 800501a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800501e:	3c01      	subs	r4, #1
 8005020:	9213      	str	r2, [sp, #76]	; 0x4c
 8005022:	e76f      	b.n	8004f04 <_dtoa_r+0x114>
 8005024:	2301      	movs	r3, #1
 8005026:	e7b3      	b.n	8004f90 <_dtoa_r+0x1a0>
 8005028:	900f      	str	r0, [sp, #60]	; 0x3c
 800502a:	e7b2      	b.n	8004f92 <_dtoa_r+0x1a2>
 800502c:	f1cb 0300 	rsb	r3, fp, #0
 8005030:	930a      	str	r3, [sp, #40]	; 0x28
 8005032:	2300      	movs	r3, #0
 8005034:	eba9 090b 	sub.w	r9, r9, fp
 8005038:	930e      	str	r3, [sp, #56]	; 0x38
 800503a:	e7c0      	b.n	8004fbe <_dtoa_r+0x1ce>
 800503c:	2300      	movs	r3, #0
 800503e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005040:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005042:	2b00      	cmp	r3, #0
 8005044:	dc55      	bgt.n	80050f2 <_dtoa_r+0x302>
 8005046:	2301      	movs	r3, #1
 8005048:	461a      	mov	r2, r3
 800504a:	9306      	str	r3, [sp, #24]
 800504c:	9308      	str	r3, [sp, #32]
 800504e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005050:	e00b      	b.n	800506a <_dtoa_r+0x27a>
 8005052:	2301      	movs	r3, #1
 8005054:	e7f3      	b.n	800503e <_dtoa_r+0x24e>
 8005056:	2300      	movs	r3, #0
 8005058:	930b      	str	r3, [sp, #44]	; 0x2c
 800505a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800505c:	445b      	add	r3, fp
 800505e:	9306      	str	r3, [sp, #24]
 8005060:	3301      	adds	r3, #1
 8005062:	2b01      	cmp	r3, #1
 8005064:	9308      	str	r3, [sp, #32]
 8005066:	bfb8      	it	lt
 8005068:	2301      	movlt	r3, #1
 800506a:	2100      	movs	r1, #0
 800506c:	2204      	movs	r2, #4
 800506e:	69e8      	ldr	r0, [r5, #28]
 8005070:	f102 0614 	add.w	r6, r2, #20
 8005074:	429e      	cmp	r6, r3
 8005076:	d940      	bls.n	80050fa <_dtoa_r+0x30a>
 8005078:	6041      	str	r1, [r0, #4]
 800507a:	4628      	mov	r0, r5
 800507c:	f000 fd98 	bl	8005bb0 <_Balloc>
 8005080:	9003      	str	r0, [sp, #12]
 8005082:	2800      	cmp	r0, #0
 8005084:	d13c      	bne.n	8005100 <_dtoa_r+0x310>
 8005086:	4602      	mov	r2, r0
 8005088:	f240 11af 	movw	r1, #431	; 0x1af
 800508c:	4b16      	ldr	r3, [pc, #88]	; (80050e8 <_dtoa_r+0x2f8>)
 800508e:	e6c3      	b.n	8004e18 <_dtoa_r+0x28>
 8005090:	2301      	movs	r3, #1
 8005092:	e7e1      	b.n	8005058 <_dtoa_r+0x268>
 8005094:	2401      	movs	r4, #1
 8005096:	2300      	movs	r3, #0
 8005098:	940b      	str	r4, [sp, #44]	; 0x2c
 800509a:	9322      	str	r3, [sp, #136]	; 0x88
 800509c:	f04f 33ff 	mov.w	r3, #4294967295
 80050a0:	2200      	movs	r2, #0
 80050a2:	9306      	str	r3, [sp, #24]
 80050a4:	9308      	str	r3, [sp, #32]
 80050a6:	2312      	movs	r3, #18
 80050a8:	e7d1      	b.n	800504e <_dtoa_r+0x25e>
 80050aa:	bf00      	nop
 80050ac:	f3af 8000 	nop.w
 80050b0:	636f4361 	.word	0x636f4361
 80050b4:	3fd287a7 	.word	0x3fd287a7
 80050b8:	8b60c8b3 	.word	0x8b60c8b3
 80050bc:	3fc68a28 	.word	0x3fc68a28
 80050c0:	509f79fb 	.word	0x509f79fb
 80050c4:	3fd34413 	.word	0x3fd34413
 80050c8:	080084c4 	.word	0x080084c4
 80050cc:	080084db 	.word	0x080084db
 80050d0:	7ff00000 	.word	0x7ff00000
 80050d4:	080084c0 	.word	0x080084c0
 80050d8:	080084b7 	.word	0x080084b7
 80050dc:	0800848f 	.word	0x0800848f
 80050e0:	3ff80000 	.word	0x3ff80000
 80050e4:	080085c8 	.word	0x080085c8
 80050e8:	08008533 	.word	0x08008533
 80050ec:	2301      	movs	r3, #1
 80050ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80050f0:	e7d4      	b.n	800509c <_dtoa_r+0x2ac>
 80050f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050f4:	9306      	str	r3, [sp, #24]
 80050f6:	9308      	str	r3, [sp, #32]
 80050f8:	e7b7      	b.n	800506a <_dtoa_r+0x27a>
 80050fa:	3101      	adds	r1, #1
 80050fc:	0052      	lsls	r2, r2, #1
 80050fe:	e7b7      	b.n	8005070 <_dtoa_r+0x280>
 8005100:	69eb      	ldr	r3, [r5, #28]
 8005102:	9a03      	ldr	r2, [sp, #12]
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	9b08      	ldr	r3, [sp, #32]
 8005108:	2b0e      	cmp	r3, #14
 800510a:	f200 80a8 	bhi.w	800525e <_dtoa_r+0x46e>
 800510e:	2c00      	cmp	r4, #0
 8005110:	f000 80a5 	beq.w	800525e <_dtoa_r+0x46e>
 8005114:	f1bb 0f00 	cmp.w	fp, #0
 8005118:	dd34      	ble.n	8005184 <_dtoa_r+0x394>
 800511a:	4b9a      	ldr	r3, [pc, #616]	; (8005384 <_dtoa_r+0x594>)
 800511c:	f00b 020f 	and.w	r2, fp, #15
 8005120:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005124:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005128:	e9d3 3400 	ldrd	r3, r4, [r3]
 800512c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005130:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005134:	d016      	beq.n	8005164 <_dtoa_r+0x374>
 8005136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800513a:	4b93      	ldr	r3, [pc, #588]	; (8005388 <_dtoa_r+0x598>)
 800513c:	2703      	movs	r7, #3
 800513e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005142:	f7fb fb5f 	bl	8000804 <__aeabi_ddiv>
 8005146:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800514a:	f004 040f 	and.w	r4, r4, #15
 800514e:	4e8e      	ldr	r6, [pc, #568]	; (8005388 <_dtoa_r+0x598>)
 8005150:	b954      	cbnz	r4, 8005168 <_dtoa_r+0x378>
 8005152:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005156:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800515a:	f7fb fb53 	bl	8000804 <__aeabi_ddiv>
 800515e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005162:	e029      	b.n	80051b8 <_dtoa_r+0x3c8>
 8005164:	2702      	movs	r7, #2
 8005166:	e7f2      	b.n	800514e <_dtoa_r+0x35e>
 8005168:	07e1      	lsls	r1, r4, #31
 800516a:	d508      	bpl.n	800517e <_dtoa_r+0x38e>
 800516c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005170:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005174:	f7fb fa1c 	bl	80005b0 <__aeabi_dmul>
 8005178:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800517c:	3701      	adds	r7, #1
 800517e:	1064      	asrs	r4, r4, #1
 8005180:	3608      	adds	r6, #8
 8005182:	e7e5      	b.n	8005150 <_dtoa_r+0x360>
 8005184:	f000 80a5 	beq.w	80052d2 <_dtoa_r+0x4e2>
 8005188:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800518c:	f1cb 0400 	rsb	r4, fp, #0
 8005190:	4b7c      	ldr	r3, [pc, #496]	; (8005384 <_dtoa_r+0x594>)
 8005192:	f004 020f 	and.w	r2, r4, #15
 8005196:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519e:	f7fb fa07 	bl	80005b0 <__aeabi_dmul>
 80051a2:	2702      	movs	r7, #2
 80051a4:	2300      	movs	r3, #0
 80051a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051aa:	4e77      	ldr	r6, [pc, #476]	; (8005388 <_dtoa_r+0x598>)
 80051ac:	1124      	asrs	r4, r4, #4
 80051ae:	2c00      	cmp	r4, #0
 80051b0:	f040 8084 	bne.w	80052bc <_dtoa_r+0x4cc>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1d2      	bne.n	800515e <_dtoa_r+0x36e>
 80051b8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80051bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80051c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 8087 	beq.w	80052d6 <_dtoa_r+0x4e6>
 80051c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051cc:	2200      	movs	r2, #0
 80051ce:	4b6f      	ldr	r3, [pc, #444]	; (800538c <_dtoa_r+0x59c>)
 80051d0:	f7fb fc60 	bl	8000a94 <__aeabi_dcmplt>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d07e      	beq.n	80052d6 <_dtoa_r+0x4e6>
 80051d8:	9b08      	ldr	r3, [sp, #32]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d07b      	beq.n	80052d6 <_dtoa_r+0x4e6>
 80051de:	9b06      	ldr	r3, [sp, #24]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	dd38      	ble.n	8005256 <_dtoa_r+0x466>
 80051e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051e8:	2200      	movs	r2, #0
 80051ea:	4b69      	ldr	r3, [pc, #420]	; (8005390 <_dtoa_r+0x5a0>)
 80051ec:	f7fb f9e0 	bl	80005b0 <__aeabi_dmul>
 80051f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051f4:	9c06      	ldr	r4, [sp, #24]
 80051f6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80051fa:	3701      	adds	r7, #1
 80051fc:	4638      	mov	r0, r7
 80051fe:	f7fb f96d 	bl	80004dc <__aeabi_i2d>
 8005202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005206:	f7fb f9d3 	bl	80005b0 <__aeabi_dmul>
 800520a:	2200      	movs	r2, #0
 800520c:	4b61      	ldr	r3, [pc, #388]	; (8005394 <_dtoa_r+0x5a4>)
 800520e:	f7fb f819 	bl	8000244 <__adddf3>
 8005212:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005216:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800521a:	9611      	str	r6, [sp, #68]	; 0x44
 800521c:	2c00      	cmp	r4, #0
 800521e:	d15d      	bne.n	80052dc <_dtoa_r+0x4ec>
 8005220:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005224:	2200      	movs	r2, #0
 8005226:	4b5c      	ldr	r3, [pc, #368]	; (8005398 <_dtoa_r+0x5a8>)
 8005228:	f7fb f80a 	bl	8000240 <__aeabi_dsub>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005234:	4633      	mov	r3, r6
 8005236:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005238:	f7fb fc4a 	bl	8000ad0 <__aeabi_dcmpgt>
 800523c:	2800      	cmp	r0, #0
 800523e:	f040 8295 	bne.w	800576c <_dtoa_r+0x97c>
 8005242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005246:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005248:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800524c:	f7fb fc22 	bl	8000a94 <__aeabi_dcmplt>
 8005250:	2800      	cmp	r0, #0
 8005252:	f040 8289 	bne.w	8005768 <_dtoa_r+0x978>
 8005256:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800525a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800525e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005260:	2b00      	cmp	r3, #0
 8005262:	f2c0 8151 	blt.w	8005508 <_dtoa_r+0x718>
 8005266:	f1bb 0f0e 	cmp.w	fp, #14
 800526a:	f300 814d 	bgt.w	8005508 <_dtoa_r+0x718>
 800526e:	4b45      	ldr	r3, [pc, #276]	; (8005384 <_dtoa_r+0x594>)
 8005270:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005274:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005278:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800527c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800527e:	2b00      	cmp	r3, #0
 8005280:	f280 80da 	bge.w	8005438 <_dtoa_r+0x648>
 8005284:	9b08      	ldr	r3, [sp, #32]
 8005286:	2b00      	cmp	r3, #0
 8005288:	f300 80d6 	bgt.w	8005438 <_dtoa_r+0x648>
 800528c:	f040 826b 	bne.w	8005766 <_dtoa_r+0x976>
 8005290:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005294:	2200      	movs	r2, #0
 8005296:	4b40      	ldr	r3, [pc, #256]	; (8005398 <_dtoa_r+0x5a8>)
 8005298:	f7fb f98a 	bl	80005b0 <__aeabi_dmul>
 800529c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052a0:	f7fb fc0c 	bl	8000abc <__aeabi_dcmpge>
 80052a4:	9c08      	ldr	r4, [sp, #32]
 80052a6:	4626      	mov	r6, r4
 80052a8:	2800      	cmp	r0, #0
 80052aa:	f040 8241 	bne.w	8005730 <_dtoa_r+0x940>
 80052ae:	2331      	movs	r3, #49	; 0x31
 80052b0:	9f03      	ldr	r7, [sp, #12]
 80052b2:	f10b 0b01 	add.w	fp, fp, #1
 80052b6:	f807 3b01 	strb.w	r3, [r7], #1
 80052ba:	e23d      	b.n	8005738 <_dtoa_r+0x948>
 80052bc:	07e2      	lsls	r2, r4, #31
 80052be:	d505      	bpl.n	80052cc <_dtoa_r+0x4dc>
 80052c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80052c4:	f7fb f974 	bl	80005b0 <__aeabi_dmul>
 80052c8:	2301      	movs	r3, #1
 80052ca:	3701      	adds	r7, #1
 80052cc:	1064      	asrs	r4, r4, #1
 80052ce:	3608      	adds	r6, #8
 80052d0:	e76d      	b.n	80051ae <_dtoa_r+0x3be>
 80052d2:	2702      	movs	r7, #2
 80052d4:	e770      	b.n	80051b8 <_dtoa_r+0x3c8>
 80052d6:	46d8      	mov	r8, fp
 80052d8:	9c08      	ldr	r4, [sp, #32]
 80052da:	e78f      	b.n	80051fc <_dtoa_r+0x40c>
 80052dc:	9903      	ldr	r1, [sp, #12]
 80052de:	4b29      	ldr	r3, [pc, #164]	; (8005384 <_dtoa_r+0x594>)
 80052e0:	4421      	add	r1, r4
 80052e2:	9112      	str	r1, [sp, #72]	; 0x48
 80052e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052ea:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80052ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80052f2:	2900      	cmp	r1, #0
 80052f4:	d054      	beq.n	80053a0 <_dtoa_r+0x5b0>
 80052f6:	2000      	movs	r0, #0
 80052f8:	4928      	ldr	r1, [pc, #160]	; (800539c <_dtoa_r+0x5ac>)
 80052fa:	f7fb fa83 	bl	8000804 <__aeabi_ddiv>
 80052fe:	463b      	mov	r3, r7
 8005300:	4632      	mov	r2, r6
 8005302:	f7fa ff9d 	bl	8000240 <__aeabi_dsub>
 8005306:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800530a:	9f03      	ldr	r7, [sp, #12]
 800530c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005310:	f7fb fbfe 	bl	8000b10 <__aeabi_d2iz>
 8005314:	4604      	mov	r4, r0
 8005316:	f7fb f8e1 	bl	80004dc <__aeabi_i2d>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005322:	f7fa ff8d 	bl	8000240 <__aeabi_dsub>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	3430      	adds	r4, #48	; 0x30
 800532c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005330:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005334:	f807 4b01 	strb.w	r4, [r7], #1
 8005338:	f7fb fbac 	bl	8000a94 <__aeabi_dcmplt>
 800533c:	2800      	cmp	r0, #0
 800533e:	d173      	bne.n	8005428 <_dtoa_r+0x638>
 8005340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005344:	2000      	movs	r0, #0
 8005346:	4911      	ldr	r1, [pc, #68]	; (800538c <_dtoa_r+0x59c>)
 8005348:	f7fa ff7a 	bl	8000240 <__aeabi_dsub>
 800534c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005350:	f7fb fba0 	bl	8000a94 <__aeabi_dcmplt>
 8005354:	2800      	cmp	r0, #0
 8005356:	f040 80b6 	bne.w	80054c6 <_dtoa_r+0x6d6>
 800535a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800535c:	429f      	cmp	r7, r3
 800535e:	f43f af7a 	beq.w	8005256 <_dtoa_r+0x466>
 8005362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005366:	2200      	movs	r2, #0
 8005368:	4b09      	ldr	r3, [pc, #36]	; (8005390 <_dtoa_r+0x5a0>)
 800536a:	f7fb f921 	bl	80005b0 <__aeabi_dmul>
 800536e:	2200      	movs	r2, #0
 8005370:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005374:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <_dtoa_r+0x5a0>)
 800537a:	f7fb f919 	bl	80005b0 <__aeabi_dmul>
 800537e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005382:	e7c3      	b.n	800530c <_dtoa_r+0x51c>
 8005384:	080085c8 	.word	0x080085c8
 8005388:	080085a0 	.word	0x080085a0
 800538c:	3ff00000 	.word	0x3ff00000
 8005390:	40240000 	.word	0x40240000
 8005394:	401c0000 	.word	0x401c0000
 8005398:	40140000 	.word	0x40140000
 800539c:	3fe00000 	.word	0x3fe00000
 80053a0:	4630      	mov	r0, r6
 80053a2:	4639      	mov	r1, r7
 80053a4:	f7fb f904 	bl	80005b0 <__aeabi_dmul>
 80053a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053ae:	9c03      	ldr	r4, [sp, #12]
 80053b0:	9314      	str	r3, [sp, #80]	; 0x50
 80053b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053b6:	f7fb fbab 	bl	8000b10 <__aeabi_d2iz>
 80053ba:	9015      	str	r0, [sp, #84]	; 0x54
 80053bc:	f7fb f88e 	bl	80004dc <__aeabi_i2d>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053c8:	f7fa ff3a 	bl	8000240 <__aeabi_dsub>
 80053cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80053ce:	4606      	mov	r6, r0
 80053d0:	3330      	adds	r3, #48	; 0x30
 80053d2:	f804 3b01 	strb.w	r3, [r4], #1
 80053d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053d8:	460f      	mov	r7, r1
 80053da:	429c      	cmp	r4, r3
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	d124      	bne.n	800542c <_dtoa_r+0x63c>
 80053e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053e6:	4baf      	ldr	r3, [pc, #700]	; (80056a4 <_dtoa_r+0x8b4>)
 80053e8:	f7fa ff2c 	bl	8000244 <__adddf3>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4630      	mov	r0, r6
 80053f2:	4639      	mov	r1, r7
 80053f4:	f7fb fb6c 	bl	8000ad0 <__aeabi_dcmpgt>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d163      	bne.n	80054c4 <_dtoa_r+0x6d4>
 80053fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005400:	2000      	movs	r0, #0
 8005402:	49a8      	ldr	r1, [pc, #672]	; (80056a4 <_dtoa_r+0x8b4>)
 8005404:	f7fa ff1c 	bl	8000240 <__aeabi_dsub>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4630      	mov	r0, r6
 800540e:	4639      	mov	r1, r7
 8005410:	f7fb fb40 	bl	8000a94 <__aeabi_dcmplt>
 8005414:	2800      	cmp	r0, #0
 8005416:	f43f af1e 	beq.w	8005256 <_dtoa_r+0x466>
 800541a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800541c:	1e7b      	subs	r3, r7, #1
 800541e:	9314      	str	r3, [sp, #80]	; 0x50
 8005420:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005424:	2b30      	cmp	r3, #48	; 0x30
 8005426:	d0f8      	beq.n	800541a <_dtoa_r+0x62a>
 8005428:	46c3      	mov	fp, r8
 800542a:	e03b      	b.n	80054a4 <_dtoa_r+0x6b4>
 800542c:	4b9e      	ldr	r3, [pc, #632]	; (80056a8 <_dtoa_r+0x8b8>)
 800542e:	f7fb f8bf 	bl	80005b0 <__aeabi_dmul>
 8005432:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005436:	e7bc      	b.n	80053b2 <_dtoa_r+0x5c2>
 8005438:	9f03      	ldr	r7, [sp, #12]
 800543a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800543e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005442:	4640      	mov	r0, r8
 8005444:	4649      	mov	r1, r9
 8005446:	f7fb f9dd 	bl	8000804 <__aeabi_ddiv>
 800544a:	f7fb fb61 	bl	8000b10 <__aeabi_d2iz>
 800544e:	4604      	mov	r4, r0
 8005450:	f7fb f844 	bl	80004dc <__aeabi_i2d>
 8005454:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005458:	f7fb f8aa 	bl	80005b0 <__aeabi_dmul>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4640      	mov	r0, r8
 8005462:	4649      	mov	r1, r9
 8005464:	f7fa feec 	bl	8000240 <__aeabi_dsub>
 8005468:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800546c:	f807 6b01 	strb.w	r6, [r7], #1
 8005470:	9e03      	ldr	r6, [sp, #12]
 8005472:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005476:	1bbe      	subs	r6, r7, r6
 8005478:	45b4      	cmp	ip, r6
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	d136      	bne.n	80054ee <_dtoa_r+0x6fe>
 8005480:	f7fa fee0 	bl	8000244 <__adddf3>
 8005484:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005488:	4680      	mov	r8, r0
 800548a:	4689      	mov	r9, r1
 800548c:	f7fb fb20 	bl	8000ad0 <__aeabi_dcmpgt>
 8005490:	bb58      	cbnz	r0, 80054ea <_dtoa_r+0x6fa>
 8005492:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005496:	4640      	mov	r0, r8
 8005498:	4649      	mov	r1, r9
 800549a:	f7fb faf1 	bl	8000a80 <__aeabi_dcmpeq>
 800549e:	b108      	cbz	r0, 80054a4 <_dtoa_r+0x6b4>
 80054a0:	07e3      	lsls	r3, r4, #31
 80054a2:	d422      	bmi.n	80054ea <_dtoa_r+0x6fa>
 80054a4:	4651      	mov	r1, sl
 80054a6:	4628      	mov	r0, r5
 80054a8:	f000 fbc2 	bl	8005c30 <_Bfree>
 80054ac:	2300      	movs	r3, #0
 80054ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80054b0:	703b      	strb	r3, [r7, #0]
 80054b2:	f10b 0301 	add.w	r3, fp, #1
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f43f ace6 	beq.w	8004e8c <_dtoa_r+0x9c>
 80054c0:	601f      	str	r7, [r3, #0]
 80054c2:	e4e3      	b.n	8004e8c <_dtoa_r+0x9c>
 80054c4:	4627      	mov	r7, r4
 80054c6:	463b      	mov	r3, r7
 80054c8:	461f      	mov	r7, r3
 80054ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054ce:	2a39      	cmp	r2, #57	; 0x39
 80054d0:	d107      	bne.n	80054e2 <_dtoa_r+0x6f2>
 80054d2:	9a03      	ldr	r2, [sp, #12]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d1f7      	bne.n	80054c8 <_dtoa_r+0x6d8>
 80054d8:	2230      	movs	r2, #48	; 0x30
 80054da:	9903      	ldr	r1, [sp, #12]
 80054dc:	f108 0801 	add.w	r8, r8, #1
 80054e0:	700a      	strb	r2, [r1, #0]
 80054e2:	781a      	ldrb	r2, [r3, #0]
 80054e4:	3201      	adds	r2, #1
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	e79e      	b.n	8005428 <_dtoa_r+0x638>
 80054ea:	46d8      	mov	r8, fp
 80054ec:	e7eb      	b.n	80054c6 <_dtoa_r+0x6d6>
 80054ee:	2200      	movs	r2, #0
 80054f0:	4b6d      	ldr	r3, [pc, #436]	; (80056a8 <_dtoa_r+0x8b8>)
 80054f2:	f7fb f85d 	bl	80005b0 <__aeabi_dmul>
 80054f6:	2200      	movs	r2, #0
 80054f8:	2300      	movs	r3, #0
 80054fa:	4680      	mov	r8, r0
 80054fc:	4689      	mov	r9, r1
 80054fe:	f7fb fabf 	bl	8000a80 <__aeabi_dcmpeq>
 8005502:	2800      	cmp	r0, #0
 8005504:	d09b      	beq.n	800543e <_dtoa_r+0x64e>
 8005506:	e7cd      	b.n	80054a4 <_dtoa_r+0x6b4>
 8005508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800550a:	2a00      	cmp	r2, #0
 800550c:	f000 80c4 	beq.w	8005698 <_dtoa_r+0x8a8>
 8005510:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005512:	2a01      	cmp	r2, #1
 8005514:	f300 80a8 	bgt.w	8005668 <_dtoa_r+0x878>
 8005518:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800551a:	2a00      	cmp	r2, #0
 800551c:	f000 80a0 	beq.w	8005660 <_dtoa_r+0x870>
 8005520:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005524:	464f      	mov	r7, r9
 8005526:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800552a:	2101      	movs	r1, #1
 800552c:	441a      	add	r2, r3
 800552e:	4628      	mov	r0, r5
 8005530:	4499      	add	r9, r3
 8005532:	9209      	str	r2, [sp, #36]	; 0x24
 8005534:	f000 fc7c 	bl	8005e30 <__i2b>
 8005538:	4606      	mov	r6, r0
 800553a:	b15f      	cbz	r7, 8005554 <_dtoa_r+0x764>
 800553c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800553e:	2b00      	cmp	r3, #0
 8005540:	dd08      	ble.n	8005554 <_dtoa_r+0x764>
 8005542:	42bb      	cmp	r3, r7
 8005544:	bfa8      	it	ge
 8005546:	463b      	movge	r3, r7
 8005548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800554a:	eba9 0903 	sub.w	r9, r9, r3
 800554e:	1aff      	subs	r7, r7, r3
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	9309      	str	r3, [sp, #36]	; 0x24
 8005554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005556:	b1f3      	cbz	r3, 8005596 <_dtoa_r+0x7a6>
 8005558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 80a0 	beq.w	80056a0 <_dtoa_r+0x8b0>
 8005560:	2c00      	cmp	r4, #0
 8005562:	dd10      	ble.n	8005586 <_dtoa_r+0x796>
 8005564:	4631      	mov	r1, r6
 8005566:	4622      	mov	r2, r4
 8005568:	4628      	mov	r0, r5
 800556a:	f000 fd1f 	bl	8005fac <__pow5mult>
 800556e:	4652      	mov	r2, sl
 8005570:	4601      	mov	r1, r0
 8005572:	4606      	mov	r6, r0
 8005574:	4628      	mov	r0, r5
 8005576:	f000 fc71 	bl	8005e5c <__multiply>
 800557a:	4680      	mov	r8, r0
 800557c:	4651      	mov	r1, sl
 800557e:	4628      	mov	r0, r5
 8005580:	f000 fb56 	bl	8005c30 <_Bfree>
 8005584:	46c2      	mov	sl, r8
 8005586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005588:	1b1a      	subs	r2, r3, r4
 800558a:	d004      	beq.n	8005596 <_dtoa_r+0x7a6>
 800558c:	4651      	mov	r1, sl
 800558e:	4628      	mov	r0, r5
 8005590:	f000 fd0c 	bl	8005fac <__pow5mult>
 8005594:	4682      	mov	sl, r0
 8005596:	2101      	movs	r1, #1
 8005598:	4628      	mov	r0, r5
 800559a:	f000 fc49 	bl	8005e30 <__i2b>
 800559e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055a0:	4604      	mov	r4, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f340 8082 	ble.w	80056ac <_dtoa_r+0x8bc>
 80055a8:	461a      	mov	r2, r3
 80055aa:	4601      	mov	r1, r0
 80055ac:	4628      	mov	r0, r5
 80055ae:	f000 fcfd 	bl	8005fac <__pow5mult>
 80055b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055b4:	4604      	mov	r4, r0
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	dd7b      	ble.n	80056b2 <_dtoa_r+0x8c2>
 80055ba:	f04f 0800 	mov.w	r8, #0
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80055c4:	6918      	ldr	r0, [r3, #16]
 80055c6:	f000 fbe5 	bl	8005d94 <__hi0bits>
 80055ca:	f1c0 0020 	rsb	r0, r0, #32
 80055ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d0:	4418      	add	r0, r3
 80055d2:	f010 001f 	ands.w	r0, r0, #31
 80055d6:	f000 8092 	beq.w	80056fe <_dtoa_r+0x90e>
 80055da:	f1c0 0320 	rsb	r3, r0, #32
 80055de:	2b04      	cmp	r3, #4
 80055e0:	f340 8085 	ble.w	80056ee <_dtoa_r+0x8fe>
 80055e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055e6:	f1c0 001c 	rsb	r0, r0, #28
 80055ea:	4403      	add	r3, r0
 80055ec:	4481      	add	r9, r0
 80055ee:	4407      	add	r7, r0
 80055f0:	9309      	str	r3, [sp, #36]	; 0x24
 80055f2:	f1b9 0f00 	cmp.w	r9, #0
 80055f6:	dd05      	ble.n	8005604 <_dtoa_r+0x814>
 80055f8:	4651      	mov	r1, sl
 80055fa:	464a      	mov	r2, r9
 80055fc:	4628      	mov	r0, r5
 80055fe:	f000 fd2f 	bl	8006060 <__lshift>
 8005602:	4682      	mov	sl, r0
 8005604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005606:	2b00      	cmp	r3, #0
 8005608:	dd05      	ble.n	8005616 <_dtoa_r+0x826>
 800560a:	4621      	mov	r1, r4
 800560c:	461a      	mov	r2, r3
 800560e:	4628      	mov	r0, r5
 8005610:	f000 fd26 	bl	8006060 <__lshift>
 8005614:	4604      	mov	r4, r0
 8005616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d072      	beq.n	8005702 <_dtoa_r+0x912>
 800561c:	4621      	mov	r1, r4
 800561e:	4650      	mov	r0, sl
 8005620:	f000 fd8a 	bl	8006138 <__mcmp>
 8005624:	2800      	cmp	r0, #0
 8005626:	da6c      	bge.n	8005702 <_dtoa_r+0x912>
 8005628:	2300      	movs	r3, #0
 800562a:	4651      	mov	r1, sl
 800562c:	220a      	movs	r2, #10
 800562e:	4628      	mov	r0, r5
 8005630:	f000 fb20 	bl	8005c74 <__multadd>
 8005634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005636:	4682      	mov	sl, r0
 8005638:	f10b 3bff 	add.w	fp, fp, #4294967295
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 81ac 	beq.w	800599a <_dtoa_r+0xbaa>
 8005642:	2300      	movs	r3, #0
 8005644:	4631      	mov	r1, r6
 8005646:	220a      	movs	r2, #10
 8005648:	4628      	mov	r0, r5
 800564a:	f000 fb13 	bl	8005c74 <__multadd>
 800564e:	9b06      	ldr	r3, [sp, #24]
 8005650:	4606      	mov	r6, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	f300 8093 	bgt.w	800577e <_dtoa_r+0x98e>
 8005658:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800565a:	2b02      	cmp	r3, #2
 800565c:	dc59      	bgt.n	8005712 <_dtoa_r+0x922>
 800565e:	e08e      	b.n	800577e <_dtoa_r+0x98e>
 8005660:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005662:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005666:	e75d      	b.n	8005524 <_dtoa_r+0x734>
 8005668:	9b08      	ldr	r3, [sp, #32]
 800566a:	1e5c      	subs	r4, r3, #1
 800566c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800566e:	42a3      	cmp	r3, r4
 8005670:	bfbf      	itttt	lt
 8005672:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005674:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005676:	1ae3      	sublt	r3, r4, r3
 8005678:	18d2      	addlt	r2, r2, r3
 800567a:	bfa8      	it	ge
 800567c:	1b1c      	subge	r4, r3, r4
 800567e:	9b08      	ldr	r3, [sp, #32]
 8005680:	bfbe      	ittt	lt
 8005682:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005684:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005686:	2400      	movlt	r4, #0
 8005688:	2b00      	cmp	r3, #0
 800568a:	bfb5      	itete	lt
 800568c:	eba9 0703 	sublt.w	r7, r9, r3
 8005690:	464f      	movge	r7, r9
 8005692:	2300      	movlt	r3, #0
 8005694:	9b08      	ldrge	r3, [sp, #32]
 8005696:	e747      	b.n	8005528 <_dtoa_r+0x738>
 8005698:	464f      	mov	r7, r9
 800569a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800569c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800569e:	e74c      	b.n	800553a <_dtoa_r+0x74a>
 80056a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056a2:	e773      	b.n	800558c <_dtoa_r+0x79c>
 80056a4:	3fe00000 	.word	0x3fe00000
 80056a8:	40240000 	.word	0x40240000
 80056ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	dc18      	bgt.n	80056e4 <_dtoa_r+0x8f4>
 80056b2:	9b04      	ldr	r3, [sp, #16]
 80056b4:	b9b3      	cbnz	r3, 80056e4 <_dtoa_r+0x8f4>
 80056b6:	9b05      	ldr	r3, [sp, #20]
 80056b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056bc:	b993      	cbnz	r3, 80056e4 <_dtoa_r+0x8f4>
 80056be:	9b05      	ldr	r3, [sp, #20]
 80056c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056c4:	0d1b      	lsrs	r3, r3, #20
 80056c6:	051b      	lsls	r3, r3, #20
 80056c8:	b17b      	cbz	r3, 80056ea <_dtoa_r+0x8fa>
 80056ca:	f04f 0801 	mov.w	r8, #1
 80056ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d0:	f109 0901 	add.w	r9, r9, #1
 80056d4:	3301      	adds	r3, #1
 80056d6:	9309      	str	r3, [sp, #36]	; 0x24
 80056d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f47f af6f 	bne.w	80055be <_dtoa_r+0x7ce>
 80056e0:	2001      	movs	r0, #1
 80056e2:	e774      	b.n	80055ce <_dtoa_r+0x7de>
 80056e4:	f04f 0800 	mov.w	r8, #0
 80056e8:	e7f6      	b.n	80056d8 <_dtoa_r+0x8e8>
 80056ea:	4698      	mov	r8, r3
 80056ec:	e7f4      	b.n	80056d8 <_dtoa_r+0x8e8>
 80056ee:	d080      	beq.n	80055f2 <_dtoa_r+0x802>
 80056f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056f2:	331c      	adds	r3, #28
 80056f4:	441a      	add	r2, r3
 80056f6:	4499      	add	r9, r3
 80056f8:	441f      	add	r7, r3
 80056fa:	9209      	str	r2, [sp, #36]	; 0x24
 80056fc:	e779      	b.n	80055f2 <_dtoa_r+0x802>
 80056fe:	4603      	mov	r3, r0
 8005700:	e7f6      	b.n	80056f0 <_dtoa_r+0x900>
 8005702:	9b08      	ldr	r3, [sp, #32]
 8005704:	2b00      	cmp	r3, #0
 8005706:	dc34      	bgt.n	8005772 <_dtoa_r+0x982>
 8005708:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800570a:	2b02      	cmp	r3, #2
 800570c:	dd31      	ble.n	8005772 <_dtoa_r+0x982>
 800570e:	9b08      	ldr	r3, [sp, #32]
 8005710:	9306      	str	r3, [sp, #24]
 8005712:	9b06      	ldr	r3, [sp, #24]
 8005714:	b963      	cbnz	r3, 8005730 <_dtoa_r+0x940>
 8005716:	4621      	mov	r1, r4
 8005718:	2205      	movs	r2, #5
 800571a:	4628      	mov	r0, r5
 800571c:	f000 faaa 	bl	8005c74 <__multadd>
 8005720:	4601      	mov	r1, r0
 8005722:	4604      	mov	r4, r0
 8005724:	4650      	mov	r0, sl
 8005726:	f000 fd07 	bl	8006138 <__mcmp>
 800572a:	2800      	cmp	r0, #0
 800572c:	f73f adbf 	bgt.w	80052ae <_dtoa_r+0x4be>
 8005730:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005732:	9f03      	ldr	r7, [sp, #12]
 8005734:	ea6f 0b03 	mvn.w	fp, r3
 8005738:	f04f 0800 	mov.w	r8, #0
 800573c:	4621      	mov	r1, r4
 800573e:	4628      	mov	r0, r5
 8005740:	f000 fa76 	bl	8005c30 <_Bfree>
 8005744:	2e00      	cmp	r6, #0
 8005746:	f43f aead 	beq.w	80054a4 <_dtoa_r+0x6b4>
 800574a:	f1b8 0f00 	cmp.w	r8, #0
 800574e:	d005      	beq.n	800575c <_dtoa_r+0x96c>
 8005750:	45b0      	cmp	r8, r6
 8005752:	d003      	beq.n	800575c <_dtoa_r+0x96c>
 8005754:	4641      	mov	r1, r8
 8005756:	4628      	mov	r0, r5
 8005758:	f000 fa6a 	bl	8005c30 <_Bfree>
 800575c:	4631      	mov	r1, r6
 800575e:	4628      	mov	r0, r5
 8005760:	f000 fa66 	bl	8005c30 <_Bfree>
 8005764:	e69e      	b.n	80054a4 <_dtoa_r+0x6b4>
 8005766:	2400      	movs	r4, #0
 8005768:	4626      	mov	r6, r4
 800576a:	e7e1      	b.n	8005730 <_dtoa_r+0x940>
 800576c:	46c3      	mov	fp, r8
 800576e:	4626      	mov	r6, r4
 8005770:	e59d      	b.n	80052ae <_dtoa_r+0x4be>
 8005772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80c8 	beq.w	800590a <_dtoa_r+0xb1a>
 800577a:	9b08      	ldr	r3, [sp, #32]
 800577c:	9306      	str	r3, [sp, #24]
 800577e:	2f00      	cmp	r7, #0
 8005780:	dd05      	ble.n	800578e <_dtoa_r+0x99e>
 8005782:	4631      	mov	r1, r6
 8005784:	463a      	mov	r2, r7
 8005786:	4628      	mov	r0, r5
 8005788:	f000 fc6a 	bl	8006060 <__lshift>
 800578c:	4606      	mov	r6, r0
 800578e:	f1b8 0f00 	cmp.w	r8, #0
 8005792:	d05b      	beq.n	800584c <_dtoa_r+0xa5c>
 8005794:	4628      	mov	r0, r5
 8005796:	6871      	ldr	r1, [r6, #4]
 8005798:	f000 fa0a 	bl	8005bb0 <_Balloc>
 800579c:	4607      	mov	r7, r0
 800579e:	b928      	cbnz	r0, 80057ac <_dtoa_r+0x9bc>
 80057a0:	4602      	mov	r2, r0
 80057a2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80057a6:	4b81      	ldr	r3, [pc, #516]	; (80059ac <_dtoa_r+0xbbc>)
 80057a8:	f7ff bb36 	b.w	8004e18 <_dtoa_r+0x28>
 80057ac:	6932      	ldr	r2, [r6, #16]
 80057ae:	f106 010c 	add.w	r1, r6, #12
 80057b2:	3202      	adds	r2, #2
 80057b4:	0092      	lsls	r2, r2, #2
 80057b6:	300c      	adds	r0, #12
 80057b8:	f002 f94a 	bl	8007a50 <memcpy>
 80057bc:	2201      	movs	r2, #1
 80057be:	4639      	mov	r1, r7
 80057c0:	4628      	mov	r0, r5
 80057c2:	f000 fc4d 	bl	8006060 <__lshift>
 80057c6:	46b0      	mov	r8, r6
 80057c8:	4606      	mov	r6, r0
 80057ca:	9b03      	ldr	r3, [sp, #12]
 80057cc:	9a03      	ldr	r2, [sp, #12]
 80057ce:	3301      	adds	r3, #1
 80057d0:	9308      	str	r3, [sp, #32]
 80057d2:	9b06      	ldr	r3, [sp, #24]
 80057d4:	4413      	add	r3, r2
 80057d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80057d8:	9b04      	ldr	r3, [sp, #16]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	930a      	str	r3, [sp, #40]	; 0x28
 80057e0:	9b08      	ldr	r3, [sp, #32]
 80057e2:	4621      	mov	r1, r4
 80057e4:	3b01      	subs	r3, #1
 80057e6:	4650      	mov	r0, sl
 80057e8:	9304      	str	r3, [sp, #16]
 80057ea:	f7ff fa77 	bl	8004cdc <quorem>
 80057ee:	4641      	mov	r1, r8
 80057f0:	9006      	str	r0, [sp, #24]
 80057f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80057f6:	4650      	mov	r0, sl
 80057f8:	f000 fc9e 	bl	8006138 <__mcmp>
 80057fc:	4632      	mov	r2, r6
 80057fe:	9009      	str	r0, [sp, #36]	; 0x24
 8005800:	4621      	mov	r1, r4
 8005802:	4628      	mov	r0, r5
 8005804:	f000 fcb4 	bl	8006170 <__mdiff>
 8005808:	68c2      	ldr	r2, [r0, #12]
 800580a:	4607      	mov	r7, r0
 800580c:	bb02      	cbnz	r2, 8005850 <_dtoa_r+0xa60>
 800580e:	4601      	mov	r1, r0
 8005810:	4650      	mov	r0, sl
 8005812:	f000 fc91 	bl	8006138 <__mcmp>
 8005816:	4602      	mov	r2, r0
 8005818:	4639      	mov	r1, r7
 800581a:	4628      	mov	r0, r5
 800581c:	920c      	str	r2, [sp, #48]	; 0x30
 800581e:	f000 fa07 	bl	8005c30 <_Bfree>
 8005822:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005824:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005826:	9f08      	ldr	r7, [sp, #32]
 8005828:	ea43 0102 	orr.w	r1, r3, r2
 800582c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800582e:	4319      	orrs	r1, r3
 8005830:	d110      	bne.n	8005854 <_dtoa_r+0xa64>
 8005832:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005836:	d029      	beq.n	800588c <_dtoa_r+0xa9c>
 8005838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583a:	2b00      	cmp	r3, #0
 800583c:	dd02      	ble.n	8005844 <_dtoa_r+0xa54>
 800583e:	9b06      	ldr	r3, [sp, #24]
 8005840:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005844:	9b04      	ldr	r3, [sp, #16]
 8005846:	f883 9000 	strb.w	r9, [r3]
 800584a:	e777      	b.n	800573c <_dtoa_r+0x94c>
 800584c:	4630      	mov	r0, r6
 800584e:	e7ba      	b.n	80057c6 <_dtoa_r+0x9d6>
 8005850:	2201      	movs	r2, #1
 8005852:	e7e1      	b.n	8005818 <_dtoa_r+0xa28>
 8005854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005856:	2b00      	cmp	r3, #0
 8005858:	db04      	blt.n	8005864 <_dtoa_r+0xa74>
 800585a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800585c:	430b      	orrs	r3, r1
 800585e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005860:	430b      	orrs	r3, r1
 8005862:	d120      	bne.n	80058a6 <_dtoa_r+0xab6>
 8005864:	2a00      	cmp	r2, #0
 8005866:	dded      	ble.n	8005844 <_dtoa_r+0xa54>
 8005868:	4651      	mov	r1, sl
 800586a:	2201      	movs	r2, #1
 800586c:	4628      	mov	r0, r5
 800586e:	f000 fbf7 	bl	8006060 <__lshift>
 8005872:	4621      	mov	r1, r4
 8005874:	4682      	mov	sl, r0
 8005876:	f000 fc5f 	bl	8006138 <__mcmp>
 800587a:	2800      	cmp	r0, #0
 800587c:	dc03      	bgt.n	8005886 <_dtoa_r+0xa96>
 800587e:	d1e1      	bne.n	8005844 <_dtoa_r+0xa54>
 8005880:	f019 0f01 	tst.w	r9, #1
 8005884:	d0de      	beq.n	8005844 <_dtoa_r+0xa54>
 8005886:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800588a:	d1d8      	bne.n	800583e <_dtoa_r+0xa4e>
 800588c:	2339      	movs	r3, #57	; 0x39
 800588e:	9a04      	ldr	r2, [sp, #16]
 8005890:	7013      	strb	r3, [r2, #0]
 8005892:	463b      	mov	r3, r7
 8005894:	461f      	mov	r7, r3
 8005896:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800589a:	3b01      	subs	r3, #1
 800589c:	2a39      	cmp	r2, #57	; 0x39
 800589e:	d06b      	beq.n	8005978 <_dtoa_r+0xb88>
 80058a0:	3201      	adds	r2, #1
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e74a      	b.n	800573c <_dtoa_r+0x94c>
 80058a6:	2a00      	cmp	r2, #0
 80058a8:	dd07      	ble.n	80058ba <_dtoa_r+0xaca>
 80058aa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80058ae:	d0ed      	beq.n	800588c <_dtoa_r+0xa9c>
 80058b0:	9a04      	ldr	r2, [sp, #16]
 80058b2:	f109 0301 	add.w	r3, r9, #1
 80058b6:	7013      	strb	r3, [r2, #0]
 80058b8:	e740      	b.n	800573c <_dtoa_r+0x94c>
 80058ba:	9b08      	ldr	r3, [sp, #32]
 80058bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058be:	f803 9c01 	strb.w	r9, [r3, #-1]
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d042      	beq.n	800594c <_dtoa_r+0xb5c>
 80058c6:	4651      	mov	r1, sl
 80058c8:	2300      	movs	r3, #0
 80058ca:	220a      	movs	r2, #10
 80058cc:	4628      	mov	r0, r5
 80058ce:	f000 f9d1 	bl	8005c74 <__multadd>
 80058d2:	45b0      	cmp	r8, r6
 80058d4:	4682      	mov	sl, r0
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	f04f 020a 	mov.w	r2, #10
 80058de:	4641      	mov	r1, r8
 80058e0:	4628      	mov	r0, r5
 80058e2:	d107      	bne.n	80058f4 <_dtoa_r+0xb04>
 80058e4:	f000 f9c6 	bl	8005c74 <__multadd>
 80058e8:	4680      	mov	r8, r0
 80058ea:	4606      	mov	r6, r0
 80058ec:	9b08      	ldr	r3, [sp, #32]
 80058ee:	3301      	adds	r3, #1
 80058f0:	9308      	str	r3, [sp, #32]
 80058f2:	e775      	b.n	80057e0 <_dtoa_r+0x9f0>
 80058f4:	f000 f9be 	bl	8005c74 <__multadd>
 80058f8:	4631      	mov	r1, r6
 80058fa:	4680      	mov	r8, r0
 80058fc:	2300      	movs	r3, #0
 80058fe:	220a      	movs	r2, #10
 8005900:	4628      	mov	r0, r5
 8005902:	f000 f9b7 	bl	8005c74 <__multadd>
 8005906:	4606      	mov	r6, r0
 8005908:	e7f0      	b.n	80058ec <_dtoa_r+0xafc>
 800590a:	9b08      	ldr	r3, [sp, #32]
 800590c:	9306      	str	r3, [sp, #24]
 800590e:	9f03      	ldr	r7, [sp, #12]
 8005910:	4621      	mov	r1, r4
 8005912:	4650      	mov	r0, sl
 8005914:	f7ff f9e2 	bl	8004cdc <quorem>
 8005918:	9b03      	ldr	r3, [sp, #12]
 800591a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800591e:	f807 9b01 	strb.w	r9, [r7], #1
 8005922:	1afa      	subs	r2, r7, r3
 8005924:	9b06      	ldr	r3, [sp, #24]
 8005926:	4293      	cmp	r3, r2
 8005928:	dd07      	ble.n	800593a <_dtoa_r+0xb4a>
 800592a:	4651      	mov	r1, sl
 800592c:	2300      	movs	r3, #0
 800592e:	220a      	movs	r2, #10
 8005930:	4628      	mov	r0, r5
 8005932:	f000 f99f 	bl	8005c74 <__multadd>
 8005936:	4682      	mov	sl, r0
 8005938:	e7ea      	b.n	8005910 <_dtoa_r+0xb20>
 800593a:	9b06      	ldr	r3, [sp, #24]
 800593c:	f04f 0800 	mov.w	r8, #0
 8005940:	2b00      	cmp	r3, #0
 8005942:	bfcc      	ite	gt
 8005944:	461f      	movgt	r7, r3
 8005946:	2701      	movle	r7, #1
 8005948:	9b03      	ldr	r3, [sp, #12]
 800594a:	441f      	add	r7, r3
 800594c:	4651      	mov	r1, sl
 800594e:	2201      	movs	r2, #1
 8005950:	4628      	mov	r0, r5
 8005952:	f000 fb85 	bl	8006060 <__lshift>
 8005956:	4621      	mov	r1, r4
 8005958:	4682      	mov	sl, r0
 800595a:	f000 fbed 	bl	8006138 <__mcmp>
 800595e:	2800      	cmp	r0, #0
 8005960:	dc97      	bgt.n	8005892 <_dtoa_r+0xaa2>
 8005962:	d102      	bne.n	800596a <_dtoa_r+0xb7a>
 8005964:	f019 0f01 	tst.w	r9, #1
 8005968:	d193      	bne.n	8005892 <_dtoa_r+0xaa2>
 800596a:	463b      	mov	r3, r7
 800596c:	461f      	mov	r7, r3
 800596e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005972:	2a30      	cmp	r2, #48	; 0x30
 8005974:	d0fa      	beq.n	800596c <_dtoa_r+0xb7c>
 8005976:	e6e1      	b.n	800573c <_dtoa_r+0x94c>
 8005978:	9a03      	ldr	r2, [sp, #12]
 800597a:	429a      	cmp	r2, r3
 800597c:	d18a      	bne.n	8005894 <_dtoa_r+0xaa4>
 800597e:	2331      	movs	r3, #49	; 0x31
 8005980:	f10b 0b01 	add.w	fp, fp, #1
 8005984:	e797      	b.n	80058b6 <_dtoa_r+0xac6>
 8005986:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <_dtoa_r+0xbc0>)
 8005988:	f7ff ba9f 	b.w	8004eca <_dtoa_r+0xda>
 800598c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800598e:	2b00      	cmp	r3, #0
 8005990:	f47f aa77 	bne.w	8004e82 <_dtoa_r+0x92>
 8005994:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <_dtoa_r+0xbc4>)
 8005996:	f7ff ba98 	b.w	8004eca <_dtoa_r+0xda>
 800599a:	9b06      	ldr	r3, [sp, #24]
 800599c:	2b00      	cmp	r3, #0
 800599e:	dcb6      	bgt.n	800590e <_dtoa_r+0xb1e>
 80059a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	f73f aeb5 	bgt.w	8005712 <_dtoa_r+0x922>
 80059a8:	e7b1      	b.n	800590e <_dtoa_r+0xb1e>
 80059aa:	bf00      	nop
 80059ac:	08008533 	.word	0x08008533
 80059b0:	0800848e 	.word	0x0800848e
 80059b4:	080084b7 	.word	0x080084b7

080059b8 <_free_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4605      	mov	r5, r0
 80059bc:	2900      	cmp	r1, #0
 80059be:	d040      	beq.n	8005a42 <_free_r+0x8a>
 80059c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059c4:	1f0c      	subs	r4, r1, #4
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bfb8      	it	lt
 80059ca:	18e4      	addlt	r4, r4, r3
 80059cc:	f000 f8e4 	bl	8005b98 <__malloc_lock>
 80059d0:	4a1c      	ldr	r2, [pc, #112]	; (8005a44 <_free_r+0x8c>)
 80059d2:	6813      	ldr	r3, [r2, #0]
 80059d4:	b933      	cbnz	r3, 80059e4 <_free_r+0x2c>
 80059d6:	6063      	str	r3, [r4, #4]
 80059d8:	6014      	str	r4, [r2, #0]
 80059da:	4628      	mov	r0, r5
 80059dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059e0:	f000 b8e0 	b.w	8005ba4 <__malloc_unlock>
 80059e4:	42a3      	cmp	r3, r4
 80059e6:	d908      	bls.n	80059fa <_free_r+0x42>
 80059e8:	6820      	ldr	r0, [r4, #0]
 80059ea:	1821      	adds	r1, r4, r0
 80059ec:	428b      	cmp	r3, r1
 80059ee:	bf01      	itttt	eq
 80059f0:	6819      	ldreq	r1, [r3, #0]
 80059f2:	685b      	ldreq	r3, [r3, #4]
 80059f4:	1809      	addeq	r1, r1, r0
 80059f6:	6021      	streq	r1, [r4, #0]
 80059f8:	e7ed      	b.n	80059d6 <_free_r+0x1e>
 80059fa:	461a      	mov	r2, r3
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	b10b      	cbz	r3, 8005a04 <_free_r+0x4c>
 8005a00:	42a3      	cmp	r3, r4
 8005a02:	d9fa      	bls.n	80059fa <_free_r+0x42>
 8005a04:	6811      	ldr	r1, [r2, #0]
 8005a06:	1850      	adds	r0, r2, r1
 8005a08:	42a0      	cmp	r0, r4
 8005a0a:	d10b      	bne.n	8005a24 <_free_r+0x6c>
 8005a0c:	6820      	ldr	r0, [r4, #0]
 8005a0e:	4401      	add	r1, r0
 8005a10:	1850      	adds	r0, r2, r1
 8005a12:	4283      	cmp	r3, r0
 8005a14:	6011      	str	r1, [r2, #0]
 8005a16:	d1e0      	bne.n	80059da <_free_r+0x22>
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	4408      	add	r0, r1
 8005a1e:	6010      	str	r0, [r2, #0]
 8005a20:	6053      	str	r3, [r2, #4]
 8005a22:	e7da      	b.n	80059da <_free_r+0x22>
 8005a24:	d902      	bls.n	8005a2c <_free_r+0x74>
 8005a26:	230c      	movs	r3, #12
 8005a28:	602b      	str	r3, [r5, #0]
 8005a2a:	e7d6      	b.n	80059da <_free_r+0x22>
 8005a2c:	6820      	ldr	r0, [r4, #0]
 8005a2e:	1821      	adds	r1, r4, r0
 8005a30:	428b      	cmp	r3, r1
 8005a32:	bf01      	itttt	eq
 8005a34:	6819      	ldreq	r1, [r3, #0]
 8005a36:	685b      	ldreq	r3, [r3, #4]
 8005a38:	1809      	addeq	r1, r1, r0
 8005a3a:	6021      	streq	r1, [r4, #0]
 8005a3c:	6063      	str	r3, [r4, #4]
 8005a3e:	6054      	str	r4, [r2, #4]
 8005a40:	e7cb      	b.n	80059da <_free_r+0x22>
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	200004f0 	.word	0x200004f0

08005a48 <malloc>:
 8005a48:	4b02      	ldr	r3, [pc, #8]	; (8005a54 <malloc+0xc>)
 8005a4a:	4601      	mov	r1, r0
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	f000 b823 	b.w	8005a98 <_malloc_r>
 8005a52:	bf00      	nop
 8005a54:	20000064 	.word	0x20000064

08005a58 <sbrk_aligned>:
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	4e0e      	ldr	r6, [pc, #56]	; (8005a94 <sbrk_aligned+0x3c>)
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	6831      	ldr	r1, [r6, #0]
 8005a60:	4605      	mov	r5, r0
 8005a62:	b911      	cbnz	r1, 8005a6a <sbrk_aligned+0x12>
 8005a64:	f001 ffe4 	bl	8007a30 <_sbrk_r>
 8005a68:	6030      	str	r0, [r6, #0]
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	f001 ffdf 	bl	8007a30 <_sbrk_r>
 8005a72:	1c43      	adds	r3, r0, #1
 8005a74:	d00a      	beq.n	8005a8c <sbrk_aligned+0x34>
 8005a76:	1cc4      	adds	r4, r0, #3
 8005a78:	f024 0403 	bic.w	r4, r4, #3
 8005a7c:	42a0      	cmp	r0, r4
 8005a7e:	d007      	beq.n	8005a90 <sbrk_aligned+0x38>
 8005a80:	1a21      	subs	r1, r4, r0
 8005a82:	4628      	mov	r0, r5
 8005a84:	f001 ffd4 	bl	8007a30 <_sbrk_r>
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d101      	bne.n	8005a90 <sbrk_aligned+0x38>
 8005a8c:	f04f 34ff 	mov.w	r4, #4294967295
 8005a90:	4620      	mov	r0, r4
 8005a92:	bd70      	pop	{r4, r5, r6, pc}
 8005a94:	200004f4 	.word	0x200004f4

08005a98 <_malloc_r>:
 8005a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a9c:	1ccd      	adds	r5, r1, #3
 8005a9e:	f025 0503 	bic.w	r5, r5, #3
 8005aa2:	3508      	adds	r5, #8
 8005aa4:	2d0c      	cmp	r5, #12
 8005aa6:	bf38      	it	cc
 8005aa8:	250c      	movcc	r5, #12
 8005aaa:	2d00      	cmp	r5, #0
 8005aac:	4607      	mov	r7, r0
 8005aae:	db01      	blt.n	8005ab4 <_malloc_r+0x1c>
 8005ab0:	42a9      	cmp	r1, r5
 8005ab2:	d905      	bls.n	8005ac0 <_malloc_r+0x28>
 8005ab4:	230c      	movs	r3, #12
 8005ab6:	2600      	movs	r6, #0
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	4630      	mov	r0, r6
 8005abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ac0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005b94 <_malloc_r+0xfc>
 8005ac4:	f000 f868 	bl	8005b98 <__malloc_lock>
 8005ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8005acc:	461c      	mov	r4, r3
 8005ace:	bb5c      	cbnz	r4, 8005b28 <_malloc_r+0x90>
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	4638      	mov	r0, r7
 8005ad4:	f7ff ffc0 	bl	8005a58 <sbrk_aligned>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	4604      	mov	r4, r0
 8005adc:	d155      	bne.n	8005b8a <_malloc_r+0xf2>
 8005ade:	f8d8 4000 	ldr.w	r4, [r8]
 8005ae2:	4626      	mov	r6, r4
 8005ae4:	2e00      	cmp	r6, #0
 8005ae6:	d145      	bne.n	8005b74 <_malloc_r+0xdc>
 8005ae8:	2c00      	cmp	r4, #0
 8005aea:	d048      	beq.n	8005b7e <_malloc_r+0xe6>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	4631      	mov	r1, r6
 8005af0:	4638      	mov	r0, r7
 8005af2:	eb04 0903 	add.w	r9, r4, r3
 8005af6:	f001 ff9b 	bl	8007a30 <_sbrk_r>
 8005afa:	4581      	cmp	r9, r0
 8005afc:	d13f      	bne.n	8005b7e <_malloc_r+0xe6>
 8005afe:	6821      	ldr	r1, [r4, #0]
 8005b00:	4638      	mov	r0, r7
 8005b02:	1a6d      	subs	r5, r5, r1
 8005b04:	4629      	mov	r1, r5
 8005b06:	f7ff ffa7 	bl	8005a58 <sbrk_aligned>
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d037      	beq.n	8005b7e <_malloc_r+0xe6>
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	442b      	add	r3, r5
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	f8d8 3000 	ldr.w	r3, [r8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d038      	beq.n	8005b8e <_malloc_r+0xf6>
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	42a2      	cmp	r2, r4
 8005b20:	d12b      	bne.n	8005b7a <_malloc_r+0xe2>
 8005b22:	2200      	movs	r2, #0
 8005b24:	605a      	str	r2, [r3, #4]
 8005b26:	e00f      	b.n	8005b48 <_malloc_r+0xb0>
 8005b28:	6822      	ldr	r2, [r4, #0]
 8005b2a:	1b52      	subs	r2, r2, r5
 8005b2c:	d41f      	bmi.n	8005b6e <_malloc_r+0xd6>
 8005b2e:	2a0b      	cmp	r2, #11
 8005b30:	d917      	bls.n	8005b62 <_malloc_r+0xca>
 8005b32:	1961      	adds	r1, r4, r5
 8005b34:	42a3      	cmp	r3, r4
 8005b36:	6025      	str	r5, [r4, #0]
 8005b38:	bf18      	it	ne
 8005b3a:	6059      	strne	r1, [r3, #4]
 8005b3c:	6863      	ldr	r3, [r4, #4]
 8005b3e:	bf08      	it	eq
 8005b40:	f8c8 1000 	streq.w	r1, [r8]
 8005b44:	5162      	str	r2, [r4, r5]
 8005b46:	604b      	str	r3, [r1, #4]
 8005b48:	4638      	mov	r0, r7
 8005b4a:	f104 060b 	add.w	r6, r4, #11
 8005b4e:	f000 f829 	bl	8005ba4 <__malloc_unlock>
 8005b52:	f026 0607 	bic.w	r6, r6, #7
 8005b56:	1d23      	adds	r3, r4, #4
 8005b58:	1af2      	subs	r2, r6, r3
 8005b5a:	d0ae      	beq.n	8005aba <_malloc_r+0x22>
 8005b5c:	1b9b      	subs	r3, r3, r6
 8005b5e:	50a3      	str	r3, [r4, r2]
 8005b60:	e7ab      	b.n	8005aba <_malloc_r+0x22>
 8005b62:	42a3      	cmp	r3, r4
 8005b64:	6862      	ldr	r2, [r4, #4]
 8005b66:	d1dd      	bne.n	8005b24 <_malloc_r+0x8c>
 8005b68:	f8c8 2000 	str.w	r2, [r8]
 8005b6c:	e7ec      	b.n	8005b48 <_malloc_r+0xb0>
 8005b6e:	4623      	mov	r3, r4
 8005b70:	6864      	ldr	r4, [r4, #4]
 8005b72:	e7ac      	b.n	8005ace <_malloc_r+0x36>
 8005b74:	4634      	mov	r4, r6
 8005b76:	6876      	ldr	r6, [r6, #4]
 8005b78:	e7b4      	b.n	8005ae4 <_malloc_r+0x4c>
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	e7cc      	b.n	8005b18 <_malloc_r+0x80>
 8005b7e:	230c      	movs	r3, #12
 8005b80:	4638      	mov	r0, r7
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	f000 f80e 	bl	8005ba4 <__malloc_unlock>
 8005b88:	e797      	b.n	8005aba <_malloc_r+0x22>
 8005b8a:	6025      	str	r5, [r4, #0]
 8005b8c:	e7dc      	b.n	8005b48 <_malloc_r+0xb0>
 8005b8e:	605b      	str	r3, [r3, #4]
 8005b90:	deff      	udf	#255	; 0xff
 8005b92:	bf00      	nop
 8005b94:	200004f0 	.word	0x200004f0

08005b98 <__malloc_lock>:
 8005b98:	4801      	ldr	r0, [pc, #4]	; (8005ba0 <__malloc_lock+0x8>)
 8005b9a:	f7ff b88b 	b.w	8004cb4 <__retarget_lock_acquire_recursive>
 8005b9e:	bf00      	nop
 8005ba0:	200004ec 	.word	0x200004ec

08005ba4 <__malloc_unlock>:
 8005ba4:	4801      	ldr	r0, [pc, #4]	; (8005bac <__malloc_unlock+0x8>)
 8005ba6:	f7ff b886 	b.w	8004cb6 <__retarget_lock_release_recursive>
 8005baa:	bf00      	nop
 8005bac:	200004ec 	.word	0x200004ec

08005bb0 <_Balloc>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	69c6      	ldr	r6, [r0, #28]
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	460d      	mov	r5, r1
 8005bb8:	b976      	cbnz	r6, 8005bd8 <_Balloc+0x28>
 8005bba:	2010      	movs	r0, #16
 8005bbc:	f7ff ff44 	bl	8005a48 <malloc>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	61e0      	str	r0, [r4, #28]
 8005bc4:	b920      	cbnz	r0, 8005bd0 <_Balloc+0x20>
 8005bc6:	216b      	movs	r1, #107	; 0x6b
 8005bc8:	4b17      	ldr	r3, [pc, #92]	; (8005c28 <_Balloc+0x78>)
 8005bca:	4818      	ldr	r0, [pc, #96]	; (8005c2c <_Balloc+0x7c>)
 8005bcc:	f001 ff54 	bl	8007a78 <__assert_func>
 8005bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bd4:	6006      	str	r6, [r0, #0]
 8005bd6:	60c6      	str	r6, [r0, #12]
 8005bd8:	69e6      	ldr	r6, [r4, #28]
 8005bda:	68f3      	ldr	r3, [r6, #12]
 8005bdc:	b183      	cbz	r3, 8005c00 <_Balloc+0x50>
 8005bde:	69e3      	ldr	r3, [r4, #28]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005be6:	b9b8      	cbnz	r0, 8005c18 <_Balloc+0x68>
 8005be8:	2101      	movs	r1, #1
 8005bea:	fa01 f605 	lsl.w	r6, r1, r5
 8005bee:	1d72      	adds	r2, r6, #5
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	0092      	lsls	r2, r2, #2
 8005bf4:	f001 ff5e 	bl	8007ab4 <_calloc_r>
 8005bf8:	b160      	cbz	r0, 8005c14 <_Balloc+0x64>
 8005bfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005bfe:	e00e      	b.n	8005c1e <_Balloc+0x6e>
 8005c00:	2221      	movs	r2, #33	; 0x21
 8005c02:	2104      	movs	r1, #4
 8005c04:	4620      	mov	r0, r4
 8005c06:	f001 ff55 	bl	8007ab4 <_calloc_r>
 8005c0a:	69e3      	ldr	r3, [r4, #28]
 8005c0c:	60f0      	str	r0, [r6, #12]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e4      	bne.n	8005bde <_Balloc+0x2e>
 8005c14:	2000      	movs	r0, #0
 8005c16:	bd70      	pop	{r4, r5, r6, pc}
 8005c18:	6802      	ldr	r2, [r0, #0]
 8005c1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c24:	e7f7      	b.n	8005c16 <_Balloc+0x66>
 8005c26:	bf00      	nop
 8005c28:	080084c4 	.word	0x080084c4
 8005c2c:	08008544 	.word	0x08008544

08005c30 <_Bfree>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	69c6      	ldr	r6, [r0, #28]
 8005c34:	4605      	mov	r5, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	b976      	cbnz	r6, 8005c58 <_Bfree+0x28>
 8005c3a:	2010      	movs	r0, #16
 8005c3c:	f7ff ff04 	bl	8005a48 <malloc>
 8005c40:	4602      	mov	r2, r0
 8005c42:	61e8      	str	r0, [r5, #28]
 8005c44:	b920      	cbnz	r0, 8005c50 <_Bfree+0x20>
 8005c46:	218f      	movs	r1, #143	; 0x8f
 8005c48:	4b08      	ldr	r3, [pc, #32]	; (8005c6c <_Bfree+0x3c>)
 8005c4a:	4809      	ldr	r0, [pc, #36]	; (8005c70 <_Bfree+0x40>)
 8005c4c:	f001 ff14 	bl	8007a78 <__assert_func>
 8005c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c54:	6006      	str	r6, [r0, #0]
 8005c56:	60c6      	str	r6, [r0, #12]
 8005c58:	b13c      	cbz	r4, 8005c6a <_Bfree+0x3a>
 8005c5a:	69eb      	ldr	r3, [r5, #28]
 8005c5c:	6862      	ldr	r2, [r4, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c64:	6021      	str	r1, [r4, #0]
 8005c66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}
 8005c6c:	080084c4 	.word	0x080084c4
 8005c70:	08008544 	.word	0x08008544

08005c74 <__multadd>:
 8005c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c78:	4607      	mov	r7, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	461e      	mov	r6, r3
 8005c7e:	2000      	movs	r0, #0
 8005c80:	690d      	ldr	r5, [r1, #16]
 8005c82:	f101 0c14 	add.w	ip, r1, #20
 8005c86:	f8dc 3000 	ldr.w	r3, [ip]
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	b299      	uxth	r1, r3
 8005c8e:	fb02 6101 	mla	r1, r2, r1, r6
 8005c92:	0c1e      	lsrs	r6, r3, #16
 8005c94:	0c0b      	lsrs	r3, r1, #16
 8005c96:	fb02 3306 	mla	r3, r2, r6, r3
 8005c9a:	b289      	uxth	r1, r1
 8005c9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ca0:	4285      	cmp	r5, r0
 8005ca2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ca6:	f84c 1b04 	str.w	r1, [ip], #4
 8005caa:	dcec      	bgt.n	8005c86 <__multadd+0x12>
 8005cac:	b30e      	cbz	r6, 8005cf2 <__multadd+0x7e>
 8005cae:	68a3      	ldr	r3, [r4, #8]
 8005cb0:	42ab      	cmp	r3, r5
 8005cb2:	dc19      	bgt.n	8005ce8 <__multadd+0x74>
 8005cb4:	6861      	ldr	r1, [r4, #4]
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	3101      	adds	r1, #1
 8005cba:	f7ff ff79 	bl	8005bb0 <_Balloc>
 8005cbe:	4680      	mov	r8, r0
 8005cc0:	b928      	cbnz	r0, 8005cce <__multadd+0x5a>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	21ba      	movs	r1, #186	; 0xba
 8005cc6:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <__multadd+0x84>)
 8005cc8:	480c      	ldr	r0, [pc, #48]	; (8005cfc <__multadd+0x88>)
 8005cca:	f001 fed5 	bl	8007a78 <__assert_func>
 8005cce:	6922      	ldr	r2, [r4, #16]
 8005cd0:	f104 010c 	add.w	r1, r4, #12
 8005cd4:	3202      	adds	r2, #2
 8005cd6:	0092      	lsls	r2, r2, #2
 8005cd8:	300c      	adds	r0, #12
 8005cda:	f001 feb9 	bl	8007a50 <memcpy>
 8005cde:	4621      	mov	r1, r4
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	f7ff ffa5 	bl	8005c30 <_Bfree>
 8005ce6:	4644      	mov	r4, r8
 8005ce8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005cec:	3501      	adds	r5, #1
 8005cee:	615e      	str	r6, [r3, #20]
 8005cf0:	6125      	str	r5, [r4, #16]
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf8:	08008533 	.word	0x08008533
 8005cfc:	08008544 	.word	0x08008544

08005d00 <__s2b>:
 8005d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d04:	4615      	mov	r5, r2
 8005d06:	2209      	movs	r2, #9
 8005d08:	461f      	mov	r7, r3
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d12:	4606      	mov	r6, r0
 8005d14:	2201      	movs	r2, #1
 8005d16:	2100      	movs	r1, #0
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	db09      	blt.n	8005d30 <__s2b+0x30>
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	f7ff ff47 	bl	8005bb0 <_Balloc>
 8005d22:	b940      	cbnz	r0, 8005d36 <__s2b+0x36>
 8005d24:	4602      	mov	r2, r0
 8005d26:	21d3      	movs	r1, #211	; 0xd3
 8005d28:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <__s2b+0x8c>)
 8005d2a:	4819      	ldr	r0, [pc, #100]	; (8005d90 <__s2b+0x90>)
 8005d2c:	f001 fea4 	bl	8007a78 <__assert_func>
 8005d30:	0052      	lsls	r2, r2, #1
 8005d32:	3101      	adds	r1, #1
 8005d34:	e7f0      	b.n	8005d18 <__s2b+0x18>
 8005d36:	9b08      	ldr	r3, [sp, #32]
 8005d38:	2d09      	cmp	r5, #9
 8005d3a:	6143      	str	r3, [r0, #20]
 8005d3c:	f04f 0301 	mov.w	r3, #1
 8005d40:	6103      	str	r3, [r0, #16]
 8005d42:	dd16      	ble.n	8005d72 <__s2b+0x72>
 8005d44:	f104 0909 	add.w	r9, r4, #9
 8005d48:	46c8      	mov	r8, r9
 8005d4a:	442c      	add	r4, r5
 8005d4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005d50:	4601      	mov	r1, r0
 8005d52:	220a      	movs	r2, #10
 8005d54:	4630      	mov	r0, r6
 8005d56:	3b30      	subs	r3, #48	; 0x30
 8005d58:	f7ff ff8c 	bl	8005c74 <__multadd>
 8005d5c:	45a0      	cmp	r8, r4
 8005d5e:	d1f5      	bne.n	8005d4c <__s2b+0x4c>
 8005d60:	f1a5 0408 	sub.w	r4, r5, #8
 8005d64:	444c      	add	r4, r9
 8005d66:	1b2d      	subs	r5, r5, r4
 8005d68:	1963      	adds	r3, r4, r5
 8005d6a:	42bb      	cmp	r3, r7
 8005d6c:	db04      	blt.n	8005d78 <__s2b+0x78>
 8005d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d72:	2509      	movs	r5, #9
 8005d74:	340a      	adds	r4, #10
 8005d76:	e7f6      	b.n	8005d66 <__s2b+0x66>
 8005d78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005d7c:	4601      	mov	r1, r0
 8005d7e:	220a      	movs	r2, #10
 8005d80:	4630      	mov	r0, r6
 8005d82:	3b30      	subs	r3, #48	; 0x30
 8005d84:	f7ff ff76 	bl	8005c74 <__multadd>
 8005d88:	e7ee      	b.n	8005d68 <__s2b+0x68>
 8005d8a:	bf00      	nop
 8005d8c:	08008533 	.word	0x08008533
 8005d90:	08008544 	.word	0x08008544

08005d94 <__hi0bits>:
 8005d94:	0c02      	lsrs	r2, r0, #16
 8005d96:	0412      	lsls	r2, r2, #16
 8005d98:	4603      	mov	r3, r0
 8005d9a:	b9ca      	cbnz	r2, 8005dd0 <__hi0bits+0x3c>
 8005d9c:	0403      	lsls	r3, r0, #16
 8005d9e:	2010      	movs	r0, #16
 8005da0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005da4:	bf04      	itt	eq
 8005da6:	021b      	lsleq	r3, r3, #8
 8005da8:	3008      	addeq	r0, #8
 8005daa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005dae:	bf04      	itt	eq
 8005db0:	011b      	lsleq	r3, r3, #4
 8005db2:	3004      	addeq	r0, #4
 8005db4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005db8:	bf04      	itt	eq
 8005dba:	009b      	lsleq	r3, r3, #2
 8005dbc:	3002      	addeq	r0, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	db05      	blt.n	8005dce <__hi0bits+0x3a>
 8005dc2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005dc6:	f100 0001 	add.w	r0, r0, #1
 8005dca:	bf08      	it	eq
 8005dcc:	2020      	moveq	r0, #32
 8005dce:	4770      	bx	lr
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	e7e5      	b.n	8005da0 <__hi0bits+0xc>

08005dd4 <__lo0bits>:
 8005dd4:	6803      	ldr	r3, [r0, #0]
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	f013 0007 	ands.w	r0, r3, #7
 8005ddc:	d00b      	beq.n	8005df6 <__lo0bits+0x22>
 8005dde:	07d9      	lsls	r1, r3, #31
 8005de0:	d421      	bmi.n	8005e26 <__lo0bits+0x52>
 8005de2:	0798      	lsls	r0, r3, #30
 8005de4:	bf49      	itett	mi
 8005de6:	085b      	lsrmi	r3, r3, #1
 8005de8:	089b      	lsrpl	r3, r3, #2
 8005dea:	2001      	movmi	r0, #1
 8005dec:	6013      	strmi	r3, [r2, #0]
 8005dee:	bf5c      	itt	pl
 8005df0:	2002      	movpl	r0, #2
 8005df2:	6013      	strpl	r3, [r2, #0]
 8005df4:	4770      	bx	lr
 8005df6:	b299      	uxth	r1, r3
 8005df8:	b909      	cbnz	r1, 8005dfe <__lo0bits+0x2a>
 8005dfa:	2010      	movs	r0, #16
 8005dfc:	0c1b      	lsrs	r3, r3, #16
 8005dfe:	b2d9      	uxtb	r1, r3
 8005e00:	b909      	cbnz	r1, 8005e06 <__lo0bits+0x32>
 8005e02:	3008      	adds	r0, #8
 8005e04:	0a1b      	lsrs	r3, r3, #8
 8005e06:	0719      	lsls	r1, r3, #28
 8005e08:	bf04      	itt	eq
 8005e0a:	091b      	lsreq	r3, r3, #4
 8005e0c:	3004      	addeq	r0, #4
 8005e0e:	0799      	lsls	r1, r3, #30
 8005e10:	bf04      	itt	eq
 8005e12:	089b      	lsreq	r3, r3, #2
 8005e14:	3002      	addeq	r0, #2
 8005e16:	07d9      	lsls	r1, r3, #31
 8005e18:	d403      	bmi.n	8005e22 <__lo0bits+0x4e>
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	f100 0001 	add.w	r0, r0, #1
 8005e20:	d003      	beq.n	8005e2a <__lo0bits+0x56>
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	4770      	bx	lr
 8005e26:	2000      	movs	r0, #0
 8005e28:	4770      	bx	lr
 8005e2a:	2020      	movs	r0, #32
 8005e2c:	4770      	bx	lr
	...

08005e30 <__i2b>:
 8005e30:	b510      	push	{r4, lr}
 8005e32:	460c      	mov	r4, r1
 8005e34:	2101      	movs	r1, #1
 8005e36:	f7ff febb 	bl	8005bb0 <_Balloc>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	b928      	cbnz	r0, 8005e4a <__i2b+0x1a>
 8005e3e:	f240 1145 	movw	r1, #325	; 0x145
 8005e42:	4b04      	ldr	r3, [pc, #16]	; (8005e54 <__i2b+0x24>)
 8005e44:	4804      	ldr	r0, [pc, #16]	; (8005e58 <__i2b+0x28>)
 8005e46:	f001 fe17 	bl	8007a78 <__assert_func>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	6144      	str	r4, [r0, #20]
 8005e4e:	6103      	str	r3, [r0, #16]
 8005e50:	bd10      	pop	{r4, pc}
 8005e52:	bf00      	nop
 8005e54:	08008533 	.word	0x08008533
 8005e58:	08008544 	.word	0x08008544

08005e5c <__multiply>:
 8005e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e60:	4691      	mov	r9, r2
 8005e62:	690a      	ldr	r2, [r1, #16]
 8005e64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e68:	460c      	mov	r4, r1
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	bfbe      	ittt	lt
 8005e6e:	460b      	movlt	r3, r1
 8005e70:	464c      	movlt	r4, r9
 8005e72:	4699      	movlt	r9, r3
 8005e74:	6927      	ldr	r7, [r4, #16]
 8005e76:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e7a:	68a3      	ldr	r3, [r4, #8]
 8005e7c:	6861      	ldr	r1, [r4, #4]
 8005e7e:	eb07 060a 	add.w	r6, r7, sl
 8005e82:	42b3      	cmp	r3, r6
 8005e84:	b085      	sub	sp, #20
 8005e86:	bfb8      	it	lt
 8005e88:	3101      	addlt	r1, #1
 8005e8a:	f7ff fe91 	bl	8005bb0 <_Balloc>
 8005e8e:	b930      	cbnz	r0, 8005e9e <__multiply+0x42>
 8005e90:	4602      	mov	r2, r0
 8005e92:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005e96:	4b43      	ldr	r3, [pc, #268]	; (8005fa4 <__multiply+0x148>)
 8005e98:	4843      	ldr	r0, [pc, #268]	; (8005fa8 <__multiply+0x14c>)
 8005e9a:	f001 fded 	bl	8007a78 <__assert_func>
 8005e9e:	f100 0514 	add.w	r5, r0, #20
 8005ea2:	462b      	mov	r3, r5
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005eaa:	4543      	cmp	r3, r8
 8005eac:	d321      	bcc.n	8005ef2 <__multiply+0x96>
 8005eae:	f104 0314 	add.w	r3, r4, #20
 8005eb2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005eb6:	f109 0314 	add.w	r3, r9, #20
 8005eba:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ebe:	9202      	str	r2, [sp, #8]
 8005ec0:	1b3a      	subs	r2, r7, r4
 8005ec2:	3a15      	subs	r2, #21
 8005ec4:	f022 0203 	bic.w	r2, r2, #3
 8005ec8:	3204      	adds	r2, #4
 8005eca:	f104 0115 	add.w	r1, r4, #21
 8005ece:	428f      	cmp	r7, r1
 8005ed0:	bf38      	it	cc
 8005ed2:	2204      	movcc	r2, #4
 8005ed4:	9201      	str	r2, [sp, #4]
 8005ed6:	9a02      	ldr	r2, [sp, #8]
 8005ed8:	9303      	str	r3, [sp, #12]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d80c      	bhi.n	8005ef8 <__multiply+0x9c>
 8005ede:	2e00      	cmp	r6, #0
 8005ee0:	dd03      	ble.n	8005eea <__multiply+0x8e>
 8005ee2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d05a      	beq.n	8005fa0 <__multiply+0x144>
 8005eea:	6106      	str	r6, [r0, #16]
 8005eec:	b005      	add	sp, #20
 8005eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef2:	f843 2b04 	str.w	r2, [r3], #4
 8005ef6:	e7d8      	b.n	8005eaa <__multiply+0x4e>
 8005ef8:	f8b3 a000 	ldrh.w	sl, [r3]
 8005efc:	f1ba 0f00 	cmp.w	sl, #0
 8005f00:	d023      	beq.n	8005f4a <__multiply+0xee>
 8005f02:	46a9      	mov	r9, r5
 8005f04:	f04f 0c00 	mov.w	ip, #0
 8005f08:	f104 0e14 	add.w	lr, r4, #20
 8005f0c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f10:	f8d9 1000 	ldr.w	r1, [r9]
 8005f14:	fa1f fb82 	uxth.w	fp, r2
 8005f18:	b289      	uxth	r1, r1
 8005f1a:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f1e:	4461      	add	r1, ip
 8005f20:	f8d9 c000 	ldr.w	ip, [r9]
 8005f24:	0c12      	lsrs	r2, r2, #16
 8005f26:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005f2a:	fb0a c202 	mla	r2, sl, r2, ip
 8005f2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f32:	b289      	uxth	r1, r1
 8005f34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f38:	4577      	cmp	r7, lr
 8005f3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f3e:	f849 1b04 	str.w	r1, [r9], #4
 8005f42:	d8e3      	bhi.n	8005f0c <__multiply+0xb0>
 8005f44:	9a01      	ldr	r2, [sp, #4]
 8005f46:	f845 c002 	str.w	ip, [r5, r2]
 8005f4a:	9a03      	ldr	r2, [sp, #12]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f52:	f1b9 0f00 	cmp.w	r9, #0
 8005f56:	d021      	beq.n	8005f9c <__multiply+0x140>
 8005f58:	46ae      	mov	lr, r5
 8005f5a:	f04f 0a00 	mov.w	sl, #0
 8005f5e:	6829      	ldr	r1, [r5, #0]
 8005f60:	f104 0c14 	add.w	ip, r4, #20
 8005f64:	f8bc b000 	ldrh.w	fp, [ip]
 8005f68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005f6c:	b289      	uxth	r1, r1
 8005f6e:	fb09 220b 	mla	r2, r9, fp, r2
 8005f72:	4452      	add	r2, sl
 8005f74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f78:	f84e 1b04 	str.w	r1, [lr], #4
 8005f7c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005f80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f84:	f8be 1000 	ldrh.w	r1, [lr]
 8005f88:	4567      	cmp	r7, ip
 8005f8a:	fb09 110a 	mla	r1, r9, sl, r1
 8005f8e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005f92:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f96:	d8e5      	bhi.n	8005f64 <__multiply+0x108>
 8005f98:	9a01      	ldr	r2, [sp, #4]
 8005f9a:	50a9      	str	r1, [r5, r2]
 8005f9c:	3504      	adds	r5, #4
 8005f9e:	e79a      	b.n	8005ed6 <__multiply+0x7a>
 8005fa0:	3e01      	subs	r6, #1
 8005fa2:	e79c      	b.n	8005ede <__multiply+0x82>
 8005fa4:	08008533 	.word	0x08008533
 8005fa8:	08008544 	.word	0x08008544

08005fac <__pow5mult>:
 8005fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fb0:	4615      	mov	r5, r2
 8005fb2:	f012 0203 	ands.w	r2, r2, #3
 8005fb6:	4606      	mov	r6, r0
 8005fb8:	460f      	mov	r7, r1
 8005fba:	d007      	beq.n	8005fcc <__pow5mult+0x20>
 8005fbc:	4c25      	ldr	r4, [pc, #148]	; (8006054 <__pow5mult+0xa8>)
 8005fbe:	3a01      	subs	r2, #1
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fc6:	f7ff fe55 	bl	8005c74 <__multadd>
 8005fca:	4607      	mov	r7, r0
 8005fcc:	10ad      	asrs	r5, r5, #2
 8005fce:	d03d      	beq.n	800604c <__pow5mult+0xa0>
 8005fd0:	69f4      	ldr	r4, [r6, #28]
 8005fd2:	b97c      	cbnz	r4, 8005ff4 <__pow5mult+0x48>
 8005fd4:	2010      	movs	r0, #16
 8005fd6:	f7ff fd37 	bl	8005a48 <malloc>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	61f0      	str	r0, [r6, #28]
 8005fde:	b928      	cbnz	r0, 8005fec <__pow5mult+0x40>
 8005fe0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005fe4:	4b1c      	ldr	r3, [pc, #112]	; (8006058 <__pow5mult+0xac>)
 8005fe6:	481d      	ldr	r0, [pc, #116]	; (800605c <__pow5mult+0xb0>)
 8005fe8:	f001 fd46 	bl	8007a78 <__assert_func>
 8005fec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ff0:	6004      	str	r4, [r0, #0]
 8005ff2:	60c4      	str	r4, [r0, #12]
 8005ff4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005ff8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ffc:	b94c      	cbnz	r4, 8006012 <__pow5mult+0x66>
 8005ffe:	f240 2171 	movw	r1, #625	; 0x271
 8006002:	4630      	mov	r0, r6
 8006004:	f7ff ff14 	bl	8005e30 <__i2b>
 8006008:	2300      	movs	r3, #0
 800600a:	4604      	mov	r4, r0
 800600c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006010:	6003      	str	r3, [r0, #0]
 8006012:	f04f 0900 	mov.w	r9, #0
 8006016:	07eb      	lsls	r3, r5, #31
 8006018:	d50a      	bpl.n	8006030 <__pow5mult+0x84>
 800601a:	4639      	mov	r1, r7
 800601c:	4622      	mov	r2, r4
 800601e:	4630      	mov	r0, r6
 8006020:	f7ff ff1c 	bl	8005e5c <__multiply>
 8006024:	4680      	mov	r8, r0
 8006026:	4639      	mov	r1, r7
 8006028:	4630      	mov	r0, r6
 800602a:	f7ff fe01 	bl	8005c30 <_Bfree>
 800602e:	4647      	mov	r7, r8
 8006030:	106d      	asrs	r5, r5, #1
 8006032:	d00b      	beq.n	800604c <__pow5mult+0xa0>
 8006034:	6820      	ldr	r0, [r4, #0]
 8006036:	b938      	cbnz	r0, 8006048 <__pow5mult+0x9c>
 8006038:	4622      	mov	r2, r4
 800603a:	4621      	mov	r1, r4
 800603c:	4630      	mov	r0, r6
 800603e:	f7ff ff0d 	bl	8005e5c <__multiply>
 8006042:	6020      	str	r0, [r4, #0]
 8006044:	f8c0 9000 	str.w	r9, [r0]
 8006048:	4604      	mov	r4, r0
 800604a:	e7e4      	b.n	8006016 <__pow5mult+0x6a>
 800604c:	4638      	mov	r0, r7
 800604e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006052:	bf00      	nop
 8006054:	08008690 	.word	0x08008690
 8006058:	080084c4 	.word	0x080084c4
 800605c:	08008544 	.word	0x08008544

08006060 <__lshift>:
 8006060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006064:	460c      	mov	r4, r1
 8006066:	4607      	mov	r7, r0
 8006068:	4691      	mov	r9, r2
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	6849      	ldr	r1, [r1, #4]
 800606e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006072:	68a3      	ldr	r3, [r4, #8]
 8006074:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006078:	f108 0601 	add.w	r6, r8, #1
 800607c:	42b3      	cmp	r3, r6
 800607e:	db0b      	blt.n	8006098 <__lshift+0x38>
 8006080:	4638      	mov	r0, r7
 8006082:	f7ff fd95 	bl	8005bb0 <_Balloc>
 8006086:	4605      	mov	r5, r0
 8006088:	b948      	cbnz	r0, 800609e <__lshift+0x3e>
 800608a:	4602      	mov	r2, r0
 800608c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006090:	4b27      	ldr	r3, [pc, #156]	; (8006130 <__lshift+0xd0>)
 8006092:	4828      	ldr	r0, [pc, #160]	; (8006134 <__lshift+0xd4>)
 8006094:	f001 fcf0 	bl	8007a78 <__assert_func>
 8006098:	3101      	adds	r1, #1
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	e7ee      	b.n	800607c <__lshift+0x1c>
 800609e:	2300      	movs	r3, #0
 80060a0:	f100 0114 	add.w	r1, r0, #20
 80060a4:	f100 0210 	add.w	r2, r0, #16
 80060a8:	4618      	mov	r0, r3
 80060aa:	4553      	cmp	r3, sl
 80060ac:	db33      	blt.n	8006116 <__lshift+0xb6>
 80060ae:	6920      	ldr	r0, [r4, #16]
 80060b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060b4:	f104 0314 	add.w	r3, r4, #20
 80060b8:	f019 091f 	ands.w	r9, r9, #31
 80060bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060c4:	d02b      	beq.n	800611e <__lshift+0xbe>
 80060c6:	468a      	mov	sl, r1
 80060c8:	2200      	movs	r2, #0
 80060ca:	f1c9 0e20 	rsb	lr, r9, #32
 80060ce:	6818      	ldr	r0, [r3, #0]
 80060d0:	fa00 f009 	lsl.w	r0, r0, r9
 80060d4:	4310      	orrs	r0, r2
 80060d6:	f84a 0b04 	str.w	r0, [sl], #4
 80060da:	f853 2b04 	ldr.w	r2, [r3], #4
 80060de:	459c      	cmp	ip, r3
 80060e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80060e4:	d8f3      	bhi.n	80060ce <__lshift+0x6e>
 80060e6:	ebac 0304 	sub.w	r3, ip, r4
 80060ea:	3b15      	subs	r3, #21
 80060ec:	f023 0303 	bic.w	r3, r3, #3
 80060f0:	3304      	adds	r3, #4
 80060f2:	f104 0015 	add.w	r0, r4, #21
 80060f6:	4584      	cmp	ip, r0
 80060f8:	bf38      	it	cc
 80060fa:	2304      	movcc	r3, #4
 80060fc:	50ca      	str	r2, [r1, r3]
 80060fe:	b10a      	cbz	r2, 8006104 <__lshift+0xa4>
 8006100:	f108 0602 	add.w	r6, r8, #2
 8006104:	3e01      	subs	r6, #1
 8006106:	4638      	mov	r0, r7
 8006108:	4621      	mov	r1, r4
 800610a:	612e      	str	r6, [r5, #16]
 800610c:	f7ff fd90 	bl	8005c30 <_Bfree>
 8006110:	4628      	mov	r0, r5
 8006112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006116:	f842 0f04 	str.w	r0, [r2, #4]!
 800611a:	3301      	adds	r3, #1
 800611c:	e7c5      	b.n	80060aa <__lshift+0x4a>
 800611e:	3904      	subs	r1, #4
 8006120:	f853 2b04 	ldr.w	r2, [r3], #4
 8006124:	459c      	cmp	ip, r3
 8006126:	f841 2f04 	str.w	r2, [r1, #4]!
 800612a:	d8f9      	bhi.n	8006120 <__lshift+0xc0>
 800612c:	e7ea      	b.n	8006104 <__lshift+0xa4>
 800612e:	bf00      	nop
 8006130:	08008533 	.word	0x08008533
 8006134:	08008544 	.word	0x08008544

08006138 <__mcmp>:
 8006138:	4603      	mov	r3, r0
 800613a:	690a      	ldr	r2, [r1, #16]
 800613c:	6900      	ldr	r0, [r0, #16]
 800613e:	b530      	push	{r4, r5, lr}
 8006140:	1a80      	subs	r0, r0, r2
 8006142:	d10d      	bne.n	8006160 <__mcmp+0x28>
 8006144:	3314      	adds	r3, #20
 8006146:	3114      	adds	r1, #20
 8006148:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800614c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006150:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006154:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006158:	4295      	cmp	r5, r2
 800615a:	d002      	beq.n	8006162 <__mcmp+0x2a>
 800615c:	d304      	bcc.n	8006168 <__mcmp+0x30>
 800615e:	2001      	movs	r0, #1
 8006160:	bd30      	pop	{r4, r5, pc}
 8006162:	42a3      	cmp	r3, r4
 8006164:	d3f4      	bcc.n	8006150 <__mcmp+0x18>
 8006166:	e7fb      	b.n	8006160 <__mcmp+0x28>
 8006168:	f04f 30ff 	mov.w	r0, #4294967295
 800616c:	e7f8      	b.n	8006160 <__mcmp+0x28>
	...

08006170 <__mdiff>:
 8006170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006174:	460d      	mov	r5, r1
 8006176:	4607      	mov	r7, r0
 8006178:	4611      	mov	r1, r2
 800617a:	4628      	mov	r0, r5
 800617c:	4614      	mov	r4, r2
 800617e:	f7ff ffdb 	bl	8006138 <__mcmp>
 8006182:	1e06      	subs	r6, r0, #0
 8006184:	d111      	bne.n	80061aa <__mdiff+0x3a>
 8006186:	4631      	mov	r1, r6
 8006188:	4638      	mov	r0, r7
 800618a:	f7ff fd11 	bl	8005bb0 <_Balloc>
 800618e:	4602      	mov	r2, r0
 8006190:	b928      	cbnz	r0, 800619e <__mdiff+0x2e>
 8006192:	f240 2137 	movw	r1, #567	; 0x237
 8006196:	4b3a      	ldr	r3, [pc, #232]	; (8006280 <__mdiff+0x110>)
 8006198:	483a      	ldr	r0, [pc, #232]	; (8006284 <__mdiff+0x114>)
 800619a:	f001 fc6d 	bl	8007a78 <__assert_func>
 800619e:	2301      	movs	r3, #1
 80061a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80061a4:	4610      	mov	r0, r2
 80061a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061aa:	bfa4      	itt	ge
 80061ac:	4623      	movge	r3, r4
 80061ae:	462c      	movge	r4, r5
 80061b0:	4638      	mov	r0, r7
 80061b2:	6861      	ldr	r1, [r4, #4]
 80061b4:	bfa6      	itte	ge
 80061b6:	461d      	movge	r5, r3
 80061b8:	2600      	movge	r6, #0
 80061ba:	2601      	movlt	r6, #1
 80061bc:	f7ff fcf8 	bl	8005bb0 <_Balloc>
 80061c0:	4602      	mov	r2, r0
 80061c2:	b918      	cbnz	r0, 80061cc <__mdiff+0x5c>
 80061c4:	f240 2145 	movw	r1, #581	; 0x245
 80061c8:	4b2d      	ldr	r3, [pc, #180]	; (8006280 <__mdiff+0x110>)
 80061ca:	e7e5      	b.n	8006198 <__mdiff+0x28>
 80061cc:	f102 0814 	add.w	r8, r2, #20
 80061d0:	46c2      	mov	sl, r8
 80061d2:	f04f 0c00 	mov.w	ip, #0
 80061d6:	6927      	ldr	r7, [r4, #16]
 80061d8:	60c6      	str	r6, [r0, #12]
 80061da:	692e      	ldr	r6, [r5, #16]
 80061dc:	f104 0014 	add.w	r0, r4, #20
 80061e0:	f105 0914 	add.w	r9, r5, #20
 80061e4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80061e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80061ec:	3410      	adds	r4, #16
 80061ee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80061f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80061f6:	fa1f f18b 	uxth.w	r1, fp
 80061fa:	4461      	add	r1, ip
 80061fc:	fa1f fc83 	uxth.w	ip, r3
 8006200:	0c1b      	lsrs	r3, r3, #16
 8006202:	eba1 010c 	sub.w	r1, r1, ip
 8006206:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800620a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800620e:	b289      	uxth	r1, r1
 8006210:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006214:	454e      	cmp	r6, r9
 8006216:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800621a:	f84a 1b04 	str.w	r1, [sl], #4
 800621e:	d8e6      	bhi.n	80061ee <__mdiff+0x7e>
 8006220:	1b73      	subs	r3, r6, r5
 8006222:	3b15      	subs	r3, #21
 8006224:	f023 0303 	bic.w	r3, r3, #3
 8006228:	3515      	adds	r5, #21
 800622a:	3304      	adds	r3, #4
 800622c:	42ae      	cmp	r6, r5
 800622e:	bf38      	it	cc
 8006230:	2304      	movcc	r3, #4
 8006232:	4418      	add	r0, r3
 8006234:	4443      	add	r3, r8
 8006236:	461e      	mov	r6, r3
 8006238:	4605      	mov	r5, r0
 800623a:	4575      	cmp	r5, lr
 800623c:	d30e      	bcc.n	800625c <__mdiff+0xec>
 800623e:	f10e 0103 	add.w	r1, lr, #3
 8006242:	1a09      	subs	r1, r1, r0
 8006244:	f021 0103 	bic.w	r1, r1, #3
 8006248:	3803      	subs	r0, #3
 800624a:	4586      	cmp	lr, r0
 800624c:	bf38      	it	cc
 800624e:	2100      	movcc	r1, #0
 8006250:	440b      	add	r3, r1
 8006252:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006256:	b189      	cbz	r1, 800627c <__mdiff+0x10c>
 8006258:	6117      	str	r7, [r2, #16]
 800625a:	e7a3      	b.n	80061a4 <__mdiff+0x34>
 800625c:	f855 8b04 	ldr.w	r8, [r5], #4
 8006260:	fa1f f188 	uxth.w	r1, r8
 8006264:	4461      	add	r1, ip
 8006266:	140c      	asrs	r4, r1, #16
 8006268:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800626c:	b289      	uxth	r1, r1
 800626e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006272:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006276:	f846 1b04 	str.w	r1, [r6], #4
 800627a:	e7de      	b.n	800623a <__mdiff+0xca>
 800627c:	3f01      	subs	r7, #1
 800627e:	e7e8      	b.n	8006252 <__mdiff+0xe2>
 8006280:	08008533 	.word	0x08008533
 8006284:	08008544 	.word	0x08008544

08006288 <__ulp>:
 8006288:	4b0e      	ldr	r3, [pc, #56]	; (80062c4 <__ulp+0x3c>)
 800628a:	400b      	ands	r3, r1
 800628c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006290:	2b00      	cmp	r3, #0
 8006292:	dc08      	bgt.n	80062a6 <__ulp+0x1e>
 8006294:	425b      	negs	r3, r3
 8006296:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800629a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800629e:	da04      	bge.n	80062aa <__ulp+0x22>
 80062a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80062a4:	4113      	asrs	r3, r2
 80062a6:	2200      	movs	r2, #0
 80062a8:	e008      	b.n	80062bc <__ulp+0x34>
 80062aa:	f1a2 0314 	sub.w	r3, r2, #20
 80062ae:	2b1e      	cmp	r3, #30
 80062b0:	bfd6      	itet	le
 80062b2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80062b6:	2201      	movgt	r2, #1
 80062b8:	40da      	lsrle	r2, r3
 80062ba:	2300      	movs	r3, #0
 80062bc:	4619      	mov	r1, r3
 80062be:	4610      	mov	r0, r2
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	7ff00000 	.word	0x7ff00000

080062c8 <__b2d>:
 80062c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ca:	6905      	ldr	r5, [r0, #16]
 80062cc:	f100 0714 	add.w	r7, r0, #20
 80062d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80062d4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80062d8:	1f2e      	subs	r6, r5, #4
 80062da:	4620      	mov	r0, r4
 80062dc:	f7ff fd5a 	bl	8005d94 <__hi0bits>
 80062e0:	f1c0 0220 	rsb	r2, r0, #32
 80062e4:	280a      	cmp	r0, #10
 80062e6:	4603      	mov	r3, r0
 80062e8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006354 <__b2d+0x8c>
 80062ec:	600a      	str	r2, [r1, #0]
 80062ee:	dc12      	bgt.n	8006316 <__b2d+0x4e>
 80062f0:	f1c0 0e0b 	rsb	lr, r0, #11
 80062f4:	fa24 f20e 	lsr.w	r2, r4, lr
 80062f8:	42b7      	cmp	r7, r6
 80062fa:	ea42 010c 	orr.w	r1, r2, ip
 80062fe:	bf2c      	ite	cs
 8006300:	2200      	movcs	r2, #0
 8006302:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006306:	3315      	adds	r3, #21
 8006308:	fa04 f303 	lsl.w	r3, r4, r3
 800630c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006310:	431a      	orrs	r2, r3
 8006312:	4610      	mov	r0, r2
 8006314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006316:	42b7      	cmp	r7, r6
 8006318:	bf2e      	itee	cs
 800631a:	2200      	movcs	r2, #0
 800631c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006320:	f1a5 0608 	subcc.w	r6, r5, #8
 8006324:	3b0b      	subs	r3, #11
 8006326:	d012      	beq.n	800634e <__b2d+0x86>
 8006328:	f1c3 0520 	rsb	r5, r3, #32
 800632c:	fa22 f105 	lsr.w	r1, r2, r5
 8006330:	409c      	lsls	r4, r3
 8006332:	430c      	orrs	r4, r1
 8006334:	42be      	cmp	r6, r7
 8006336:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800633a:	bf94      	ite	ls
 800633c:	2400      	movls	r4, #0
 800633e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006342:	409a      	lsls	r2, r3
 8006344:	40ec      	lsrs	r4, r5
 8006346:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800634a:	4322      	orrs	r2, r4
 800634c:	e7e1      	b.n	8006312 <__b2d+0x4a>
 800634e:	ea44 010c 	orr.w	r1, r4, ip
 8006352:	e7de      	b.n	8006312 <__b2d+0x4a>
 8006354:	3ff00000 	.word	0x3ff00000

08006358 <__d2b>:
 8006358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800635a:	2101      	movs	r1, #1
 800635c:	4617      	mov	r7, r2
 800635e:	461c      	mov	r4, r3
 8006360:	9e08      	ldr	r6, [sp, #32]
 8006362:	f7ff fc25 	bl	8005bb0 <_Balloc>
 8006366:	4605      	mov	r5, r0
 8006368:	b930      	cbnz	r0, 8006378 <__d2b+0x20>
 800636a:	4602      	mov	r2, r0
 800636c:	f240 310f 	movw	r1, #783	; 0x30f
 8006370:	4b22      	ldr	r3, [pc, #136]	; (80063fc <__d2b+0xa4>)
 8006372:	4823      	ldr	r0, [pc, #140]	; (8006400 <__d2b+0xa8>)
 8006374:	f001 fb80 	bl	8007a78 <__assert_func>
 8006378:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800637c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006380:	bb24      	cbnz	r4, 80063cc <__d2b+0x74>
 8006382:	2f00      	cmp	r7, #0
 8006384:	9301      	str	r3, [sp, #4]
 8006386:	d026      	beq.n	80063d6 <__d2b+0x7e>
 8006388:	4668      	mov	r0, sp
 800638a:	9700      	str	r7, [sp, #0]
 800638c:	f7ff fd22 	bl	8005dd4 <__lo0bits>
 8006390:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006394:	b1e8      	cbz	r0, 80063d2 <__d2b+0x7a>
 8006396:	f1c0 0320 	rsb	r3, r0, #32
 800639a:	fa02 f303 	lsl.w	r3, r2, r3
 800639e:	430b      	orrs	r3, r1
 80063a0:	40c2      	lsrs	r2, r0
 80063a2:	616b      	str	r3, [r5, #20]
 80063a4:	9201      	str	r2, [sp, #4]
 80063a6:	9b01      	ldr	r3, [sp, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	bf14      	ite	ne
 80063ac:	2102      	movne	r1, #2
 80063ae:	2101      	moveq	r1, #1
 80063b0:	61ab      	str	r3, [r5, #24]
 80063b2:	6129      	str	r1, [r5, #16]
 80063b4:	b1bc      	cbz	r4, 80063e6 <__d2b+0x8e>
 80063b6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80063ba:	4404      	add	r4, r0
 80063bc:	6034      	str	r4, [r6, #0]
 80063be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c4:	6018      	str	r0, [r3, #0]
 80063c6:	4628      	mov	r0, r5
 80063c8:	b003      	add	sp, #12
 80063ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063d0:	e7d7      	b.n	8006382 <__d2b+0x2a>
 80063d2:	6169      	str	r1, [r5, #20]
 80063d4:	e7e7      	b.n	80063a6 <__d2b+0x4e>
 80063d6:	a801      	add	r0, sp, #4
 80063d8:	f7ff fcfc 	bl	8005dd4 <__lo0bits>
 80063dc:	9b01      	ldr	r3, [sp, #4]
 80063de:	2101      	movs	r1, #1
 80063e0:	616b      	str	r3, [r5, #20]
 80063e2:	3020      	adds	r0, #32
 80063e4:	e7e5      	b.n	80063b2 <__d2b+0x5a>
 80063e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063ea:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80063ee:	6030      	str	r0, [r6, #0]
 80063f0:	6918      	ldr	r0, [r3, #16]
 80063f2:	f7ff fccf 	bl	8005d94 <__hi0bits>
 80063f6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80063fa:	e7e2      	b.n	80063c2 <__d2b+0x6a>
 80063fc:	08008533 	.word	0x08008533
 8006400:	08008544 	.word	0x08008544

08006404 <__ratio>:
 8006404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006408:	4688      	mov	r8, r1
 800640a:	4669      	mov	r1, sp
 800640c:	4681      	mov	r9, r0
 800640e:	f7ff ff5b 	bl	80062c8 <__b2d>
 8006412:	460f      	mov	r7, r1
 8006414:	4604      	mov	r4, r0
 8006416:	460d      	mov	r5, r1
 8006418:	4640      	mov	r0, r8
 800641a:	a901      	add	r1, sp, #4
 800641c:	f7ff ff54 	bl	80062c8 <__b2d>
 8006420:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006424:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006428:	468b      	mov	fp, r1
 800642a:	eba3 0c02 	sub.w	ip, r3, r2
 800642e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006432:	1a9b      	subs	r3, r3, r2
 8006434:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006438:	2b00      	cmp	r3, #0
 800643a:	bfd5      	itete	le
 800643c:	460a      	movle	r2, r1
 800643e:	462a      	movgt	r2, r5
 8006440:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006444:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006448:	bfd8      	it	le
 800644a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800644e:	465b      	mov	r3, fp
 8006450:	4602      	mov	r2, r0
 8006452:	4639      	mov	r1, r7
 8006454:	4620      	mov	r0, r4
 8006456:	f7fa f9d5 	bl	8000804 <__aeabi_ddiv>
 800645a:	b003      	add	sp, #12
 800645c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006460 <__copybits>:
 8006460:	3901      	subs	r1, #1
 8006462:	b570      	push	{r4, r5, r6, lr}
 8006464:	1149      	asrs	r1, r1, #5
 8006466:	6914      	ldr	r4, [r2, #16]
 8006468:	3101      	adds	r1, #1
 800646a:	f102 0314 	add.w	r3, r2, #20
 800646e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006472:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006476:	1f05      	subs	r5, r0, #4
 8006478:	42a3      	cmp	r3, r4
 800647a:	d30c      	bcc.n	8006496 <__copybits+0x36>
 800647c:	1aa3      	subs	r3, r4, r2
 800647e:	3b11      	subs	r3, #17
 8006480:	f023 0303 	bic.w	r3, r3, #3
 8006484:	3211      	adds	r2, #17
 8006486:	42a2      	cmp	r2, r4
 8006488:	bf88      	it	hi
 800648a:	2300      	movhi	r3, #0
 800648c:	4418      	add	r0, r3
 800648e:	2300      	movs	r3, #0
 8006490:	4288      	cmp	r0, r1
 8006492:	d305      	bcc.n	80064a0 <__copybits+0x40>
 8006494:	bd70      	pop	{r4, r5, r6, pc}
 8006496:	f853 6b04 	ldr.w	r6, [r3], #4
 800649a:	f845 6f04 	str.w	r6, [r5, #4]!
 800649e:	e7eb      	b.n	8006478 <__copybits+0x18>
 80064a0:	f840 3b04 	str.w	r3, [r0], #4
 80064a4:	e7f4      	b.n	8006490 <__copybits+0x30>

080064a6 <__any_on>:
 80064a6:	f100 0214 	add.w	r2, r0, #20
 80064aa:	6900      	ldr	r0, [r0, #16]
 80064ac:	114b      	asrs	r3, r1, #5
 80064ae:	4298      	cmp	r0, r3
 80064b0:	b510      	push	{r4, lr}
 80064b2:	db11      	blt.n	80064d8 <__any_on+0x32>
 80064b4:	dd0a      	ble.n	80064cc <__any_on+0x26>
 80064b6:	f011 011f 	ands.w	r1, r1, #31
 80064ba:	d007      	beq.n	80064cc <__any_on+0x26>
 80064bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80064c0:	fa24 f001 	lsr.w	r0, r4, r1
 80064c4:	fa00 f101 	lsl.w	r1, r0, r1
 80064c8:	428c      	cmp	r4, r1
 80064ca:	d10b      	bne.n	80064e4 <__any_on+0x3e>
 80064cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d803      	bhi.n	80064dc <__any_on+0x36>
 80064d4:	2000      	movs	r0, #0
 80064d6:	bd10      	pop	{r4, pc}
 80064d8:	4603      	mov	r3, r0
 80064da:	e7f7      	b.n	80064cc <__any_on+0x26>
 80064dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80064e0:	2900      	cmp	r1, #0
 80064e2:	d0f5      	beq.n	80064d0 <__any_on+0x2a>
 80064e4:	2001      	movs	r0, #1
 80064e6:	e7f6      	b.n	80064d6 <__any_on+0x30>

080064e8 <sulp>:
 80064e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ec:	460f      	mov	r7, r1
 80064ee:	4690      	mov	r8, r2
 80064f0:	f7ff feca 	bl	8006288 <__ulp>
 80064f4:	4604      	mov	r4, r0
 80064f6:	460d      	mov	r5, r1
 80064f8:	f1b8 0f00 	cmp.w	r8, #0
 80064fc:	d011      	beq.n	8006522 <sulp+0x3a>
 80064fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006502:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006506:	2b00      	cmp	r3, #0
 8006508:	dd0b      	ble.n	8006522 <sulp+0x3a>
 800650a:	2400      	movs	r4, #0
 800650c:	051b      	lsls	r3, r3, #20
 800650e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006512:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006516:	4622      	mov	r2, r4
 8006518:	462b      	mov	r3, r5
 800651a:	f7fa f849 	bl	80005b0 <__aeabi_dmul>
 800651e:	4604      	mov	r4, r0
 8006520:	460d      	mov	r5, r1
 8006522:	4620      	mov	r0, r4
 8006524:	4629      	mov	r1, r5
 8006526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800652a:	0000      	movs	r0, r0
 800652c:	0000      	movs	r0, r0
	...

08006530 <_strtod_l>:
 8006530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	b09f      	sub	sp, #124	; 0x7c
 8006536:	9217      	str	r2, [sp, #92]	; 0x5c
 8006538:	2200      	movs	r2, #0
 800653a:	4604      	mov	r4, r0
 800653c:	921a      	str	r2, [sp, #104]	; 0x68
 800653e:	460d      	mov	r5, r1
 8006540:	f04f 0800 	mov.w	r8, #0
 8006544:	f04f 0900 	mov.w	r9, #0
 8006548:	460a      	mov	r2, r1
 800654a:	9219      	str	r2, [sp, #100]	; 0x64
 800654c:	7811      	ldrb	r1, [r2, #0]
 800654e:	292b      	cmp	r1, #43	; 0x2b
 8006550:	d04a      	beq.n	80065e8 <_strtod_l+0xb8>
 8006552:	d838      	bhi.n	80065c6 <_strtod_l+0x96>
 8006554:	290d      	cmp	r1, #13
 8006556:	d832      	bhi.n	80065be <_strtod_l+0x8e>
 8006558:	2908      	cmp	r1, #8
 800655a:	d832      	bhi.n	80065c2 <_strtod_l+0x92>
 800655c:	2900      	cmp	r1, #0
 800655e:	d03b      	beq.n	80065d8 <_strtod_l+0xa8>
 8006560:	2200      	movs	r2, #0
 8006562:	920e      	str	r2, [sp, #56]	; 0x38
 8006564:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006566:	7832      	ldrb	r2, [r6, #0]
 8006568:	2a30      	cmp	r2, #48	; 0x30
 800656a:	f040 80b2 	bne.w	80066d2 <_strtod_l+0x1a2>
 800656e:	7872      	ldrb	r2, [r6, #1]
 8006570:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006574:	2a58      	cmp	r2, #88	; 0x58
 8006576:	d16e      	bne.n	8006656 <_strtod_l+0x126>
 8006578:	9302      	str	r3, [sp, #8]
 800657a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800657c:	4620      	mov	r0, r4
 800657e:	9301      	str	r3, [sp, #4]
 8006580:	ab1a      	add	r3, sp, #104	; 0x68
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	4a8c      	ldr	r2, [pc, #560]	; (80067b8 <_strtod_l+0x288>)
 8006586:	ab1b      	add	r3, sp, #108	; 0x6c
 8006588:	a919      	add	r1, sp, #100	; 0x64
 800658a:	f001 fb0f 	bl	8007bac <__gethex>
 800658e:	f010 070f 	ands.w	r7, r0, #15
 8006592:	4605      	mov	r5, r0
 8006594:	d005      	beq.n	80065a2 <_strtod_l+0x72>
 8006596:	2f06      	cmp	r7, #6
 8006598:	d128      	bne.n	80065ec <_strtod_l+0xbc>
 800659a:	2300      	movs	r3, #0
 800659c:	3601      	adds	r6, #1
 800659e:	9619      	str	r6, [sp, #100]	; 0x64
 80065a0:	930e      	str	r3, [sp, #56]	; 0x38
 80065a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f040 85a0 	bne.w	80070ea <_strtod_l+0xbba>
 80065aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065ac:	b1cb      	cbz	r3, 80065e2 <_strtod_l+0xb2>
 80065ae:	4642      	mov	r2, r8
 80065b0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80065b4:	4610      	mov	r0, r2
 80065b6:	4619      	mov	r1, r3
 80065b8:	b01f      	add	sp, #124	; 0x7c
 80065ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065be:	2920      	cmp	r1, #32
 80065c0:	d1ce      	bne.n	8006560 <_strtod_l+0x30>
 80065c2:	3201      	adds	r2, #1
 80065c4:	e7c1      	b.n	800654a <_strtod_l+0x1a>
 80065c6:	292d      	cmp	r1, #45	; 0x2d
 80065c8:	d1ca      	bne.n	8006560 <_strtod_l+0x30>
 80065ca:	2101      	movs	r1, #1
 80065cc:	910e      	str	r1, [sp, #56]	; 0x38
 80065ce:	1c51      	adds	r1, r2, #1
 80065d0:	9119      	str	r1, [sp, #100]	; 0x64
 80065d2:	7852      	ldrb	r2, [r2, #1]
 80065d4:	2a00      	cmp	r2, #0
 80065d6:	d1c5      	bne.n	8006564 <_strtod_l+0x34>
 80065d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065da:	9519      	str	r5, [sp, #100]	; 0x64
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f040 8582 	bne.w	80070e6 <_strtod_l+0xbb6>
 80065e2:	4642      	mov	r2, r8
 80065e4:	464b      	mov	r3, r9
 80065e6:	e7e5      	b.n	80065b4 <_strtod_l+0x84>
 80065e8:	2100      	movs	r1, #0
 80065ea:	e7ef      	b.n	80065cc <_strtod_l+0x9c>
 80065ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80065ee:	b13a      	cbz	r2, 8006600 <_strtod_l+0xd0>
 80065f0:	2135      	movs	r1, #53	; 0x35
 80065f2:	a81c      	add	r0, sp, #112	; 0x70
 80065f4:	f7ff ff34 	bl	8006460 <__copybits>
 80065f8:	4620      	mov	r0, r4
 80065fa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80065fc:	f7ff fb18 	bl	8005c30 <_Bfree>
 8006600:	3f01      	subs	r7, #1
 8006602:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006604:	2f04      	cmp	r7, #4
 8006606:	d806      	bhi.n	8006616 <_strtod_l+0xe6>
 8006608:	e8df f007 	tbb	[pc, r7]
 800660c:	201d0314 	.word	0x201d0314
 8006610:	14          	.byte	0x14
 8006611:	00          	.byte	0x00
 8006612:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006616:	05e9      	lsls	r1, r5, #23
 8006618:	bf48      	it	mi
 800661a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800661e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006622:	0d1b      	lsrs	r3, r3, #20
 8006624:	051b      	lsls	r3, r3, #20
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1bb      	bne.n	80065a2 <_strtod_l+0x72>
 800662a:	f7fe fb19 	bl	8004c60 <__errno>
 800662e:	2322      	movs	r3, #34	; 0x22
 8006630:	6003      	str	r3, [r0, #0]
 8006632:	e7b6      	b.n	80065a2 <_strtod_l+0x72>
 8006634:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006638:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800663c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006640:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006644:	e7e7      	b.n	8006616 <_strtod_l+0xe6>
 8006646:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80067bc <_strtod_l+0x28c>
 800664a:	e7e4      	b.n	8006616 <_strtod_l+0xe6>
 800664c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006650:	f04f 38ff 	mov.w	r8, #4294967295
 8006654:	e7df      	b.n	8006616 <_strtod_l+0xe6>
 8006656:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	9219      	str	r2, [sp, #100]	; 0x64
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	2b30      	cmp	r3, #48	; 0x30
 8006660:	d0f9      	beq.n	8006656 <_strtod_l+0x126>
 8006662:	2b00      	cmp	r3, #0
 8006664:	d09d      	beq.n	80065a2 <_strtod_l+0x72>
 8006666:	2301      	movs	r3, #1
 8006668:	f04f 0a00 	mov.w	sl, #0
 800666c:	220a      	movs	r2, #10
 800666e:	46d3      	mov	fp, sl
 8006670:	9305      	str	r3, [sp, #20]
 8006672:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006674:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006678:	930b      	str	r3, [sp, #44]	; 0x2c
 800667a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800667c:	7806      	ldrb	r6, [r0, #0]
 800667e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006682:	b2d9      	uxtb	r1, r3
 8006684:	2909      	cmp	r1, #9
 8006686:	d926      	bls.n	80066d6 <_strtod_l+0x1a6>
 8006688:	2201      	movs	r2, #1
 800668a:	494d      	ldr	r1, [pc, #308]	; (80067c0 <_strtod_l+0x290>)
 800668c:	f001 f9be 	bl	8007a0c <strncmp>
 8006690:	2800      	cmp	r0, #0
 8006692:	d030      	beq.n	80066f6 <_strtod_l+0x1c6>
 8006694:	2000      	movs	r0, #0
 8006696:	4632      	mov	r2, r6
 8006698:	4603      	mov	r3, r0
 800669a:	465e      	mov	r6, fp
 800669c:	9008      	str	r0, [sp, #32]
 800669e:	2a65      	cmp	r2, #101	; 0x65
 80066a0:	d001      	beq.n	80066a6 <_strtod_l+0x176>
 80066a2:	2a45      	cmp	r2, #69	; 0x45
 80066a4:	d113      	bne.n	80066ce <_strtod_l+0x19e>
 80066a6:	b91e      	cbnz	r6, 80066b0 <_strtod_l+0x180>
 80066a8:	9a05      	ldr	r2, [sp, #20]
 80066aa:	4302      	orrs	r2, r0
 80066ac:	d094      	beq.n	80065d8 <_strtod_l+0xa8>
 80066ae:	2600      	movs	r6, #0
 80066b0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80066b2:	1c6a      	adds	r2, r5, #1
 80066b4:	9219      	str	r2, [sp, #100]	; 0x64
 80066b6:	786a      	ldrb	r2, [r5, #1]
 80066b8:	2a2b      	cmp	r2, #43	; 0x2b
 80066ba:	d074      	beq.n	80067a6 <_strtod_l+0x276>
 80066bc:	2a2d      	cmp	r2, #45	; 0x2d
 80066be:	d078      	beq.n	80067b2 <_strtod_l+0x282>
 80066c0:	f04f 0c00 	mov.w	ip, #0
 80066c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80066c8:	2909      	cmp	r1, #9
 80066ca:	d97f      	bls.n	80067cc <_strtod_l+0x29c>
 80066cc:	9519      	str	r5, [sp, #100]	; 0x64
 80066ce:	2700      	movs	r7, #0
 80066d0:	e09e      	b.n	8006810 <_strtod_l+0x2e0>
 80066d2:	2300      	movs	r3, #0
 80066d4:	e7c8      	b.n	8006668 <_strtod_l+0x138>
 80066d6:	f1bb 0f08 	cmp.w	fp, #8
 80066da:	bfd8      	it	le
 80066dc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80066de:	f100 0001 	add.w	r0, r0, #1
 80066e2:	bfd6      	itet	le
 80066e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80066e8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80066ec:	930a      	strle	r3, [sp, #40]	; 0x28
 80066ee:	f10b 0b01 	add.w	fp, fp, #1
 80066f2:	9019      	str	r0, [sp, #100]	; 0x64
 80066f4:	e7c1      	b.n	800667a <_strtod_l+0x14a>
 80066f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	9219      	str	r2, [sp, #100]	; 0x64
 80066fc:	785a      	ldrb	r2, [r3, #1]
 80066fe:	f1bb 0f00 	cmp.w	fp, #0
 8006702:	d037      	beq.n	8006774 <_strtod_l+0x244>
 8006704:	465e      	mov	r6, fp
 8006706:	9008      	str	r0, [sp, #32]
 8006708:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800670c:	2b09      	cmp	r3, #9
 800670e:	d912      	bls.n	8006736 <_strtod_l+0x206>
 8006710:	2301      	movs	r3, #1
 8006712:	e7c4      	b.n	800669e <_strtod_l+0x16e>
 8006714:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006716:	3001      	adds	r0, #1
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	9219      	str	r2, [sp, #100]	; 0x64
 800671c:	785a      	ldrb	r2, [r3, #1]
 800671e:	2a30      	cmp	r2, #48	; 0x30
 8006720:	d0f8      	beq.n	8006714 <_strtod_l+0x1e4>
 8006722:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006726:	2b08      	cmp	r3, #8
 8006728:	f200 84e4 	bhi.w	80070f4 <_strtod_l+0xbc4>
 800672c:	9008      	str	r0, [sp, #32]
 800672e:	2000      	movs	r0, #0
 8006730:	4606      	mov	r6, r0
 8006732:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006734:	930b      	str	r3, [sp, #44]	; 0x2c
 8006736:	3a30      	subs	r2, #48	; 0x30
 8006738:	f100 0301 	add.w	r3, r0, #1
 800673c:	d014      	beq.n	8006768 <_strtod_l+0x238>
 800673e:	9908      	ldr	r1, [sp, #32]
 8006740:	eb00 0c06 	add.w	ip, r0, r6
 8006744:	4419      	add	r1, r3
 8006746:	9108      	str	r1, [sp, #32]
 8006748:	4633      	mov	r3, r6
 800674a:	210a      	movs	r1, #10
 800674c:	4563      	cmp	r3, ip
 800674e:	d113      	bne.n	8006778 <_strtod_l+0x248>
 8006750:	1833      	adds	r3, r6, r0
 8006752:	2b08      	cmp	r3, #8
 8006754:	f106 0601 	add.w	r6, r6, #1
 8006758:	4406      	add	r6, r0
 800675a:	dc1a      	bgt.n	8006792 <_strtod_l+0x262>
 800675c:	230a      	movs	r3, #10
 800675e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006760:	fb03 2301 	mla	r3, r3, r1, r2
 8006764:	930a      	str	r3, [sp, #40]	; 0x28
 8006766:	2300      	movs	r3, #0
 8006768:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800676a:	4618      	mov	r0, r3
 800676c:	1c51      	adds	r1, r2, #1
 800676e:	9119      	str	r1, [sp, #100]	; 0x64
 8006770:	7852      	ldrb	r2, [r2, #1]
 8006772:	e7c9      	b.n	8006708 <_strtod_l+0x1d8>
 8006774:	4658      	mov	r0, fp
 8006776:	e7d2      	b.n	800671e <_strtod_l+0x1ee>
 8006778:	2b08      	cmp	r3, #8
 800677a:	f103 0301 	add.w	r3, r3, #1
 800677e:	dc03      	bgt.n	8006788 <_strtod_l+0x258>
 8006780:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006782:	434f      	muls	r7, r1
 8006784:	970a      	str	r7, [sp, #40]	; 0x28
 8006786:	e7e1      	b.n	800674c <_strtod_l+0x21c>
 8006788:	2b10      	cmp	r3, #16
 800678a:	bfd8      	it	le
 800678c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006790:	e7dc      	b.n	800674c <_strtod_l+0x21c>
 8006792:	2e10      	cmp	r6, #16
 8006794:	bfdc      	itt	le
 8006796:	230a      	movle	r3, #10
 8006798:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800679c:	e7e3      	b.n	8006766 <_strtod_l+0x236>
 800679e:	2300      	movs	r3, #0
 80067a0:	9308      	str	r3, [sp, #32]
 80067a2:	2301      	movs	r3, #1
 80067a4:	e780      	b.n	80066a8 <_strtod_l+0x178>
 80067a6:	f04f 0c00 	mov.w	ip, #0
 80067aa:	1caa      	adds	r2, r5, #2
 80067ac:	9219      	str	r2, [sp, #100]	; 0x64
 80067ae:	78aa      	ldrb	r2, [r5, #2]
 80067b0:	e788      	b.n	80066c4 <_strtod_l+0x194>
 80067b2:	f04f 0c01 	mov.w	ip, #1
 80067b6:	e7f8      	b.n	80067aa <_strtod_l+0x27a>
 80067b8:	080086a0 	.word	0x080086a0
 80067bc:	7ff00000 	.word	0x7ff00000
 80067c0:	0800869c 	.word	0x0800869c
 80067c4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80067c6:	1c51      	adds	r1, r2, #1
 80067c8:	9119      	str	r1, [sp, #100]	; 0x64
 80067ca:	7852      	ldrb	r2, [r2, #1]
 80067cc:	2a30      	cmp	r2, #48	; 0x30
 80067ce:	d0f9      	beq.n	80067c4 <_strtod_l+0x294>
 80067d0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80067d4:	2908      	cmp	r1, #8
 80067d6:	f63f af7a 	bhi.w	80066ce <_strtod_l+0x19e>
 80067da:	3a30      	subs	r2, #48	; 0x30
 80067dc:	9209      	str	r2, [sp, #36]	; 0x24
 80067de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80067e0:	920c      	str	r2, [sp, #48]	; 0x30
 80067e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80067e4:	1c57      	adds	r7, r2, #1
 80067e6:	9719      	str	r7, [sp, #100]	; 0x64
 80067e8:	7852      	ldrb	r2, [r2, #1]
 80067ea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80067ee:	f1be 0f09 	cmp.w	lr, #9
 80067f2:	d938      	bls.n	8006866 <_strtod_l+0x336>
 80067f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80067f6:	1a7f      	subs	r7, r7, r1
 80067f8:	2f08      	cmp	r7, #8
 80067fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80067fe:	dc03      	bgt.n	8006808 <_strtod_l+0x2d8>
 8006800:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006802:	428f      	cmp	r7, r1
 8006804:	bfa8      	it	ge
 8006806:	460f      	movge	r7, r1
 8006808:	f1bc 0f00 	cmp.w	ip, #0
 800680c:	d000      	beq.n	8006810 <_strtod_l+0x2e0>
 800680e:	427f      	negs	r7, r7
 8006810:	2e00      	cmp	r6, #0
 8006812:	d14f      	bne.n	80068b4 <_strtod_l+0x384>
 8006814:	9905      	ldr	r1, [sp, #20]
 8006816:	4301      	orrs	r1, r0
 8006818:	f47f aec3 	bne.w	80065a2 <_strtod_l+0x72>
 800681c:	2b00      	cmp	r3, #0
 800681e:	f47f aedb 	bne.w	80065d8 <_strtod_l+0xa8>
 8006822:	2a69      	cmp	r2, #105	; 0x69
 8006824:	d029      	beq.n	800687a <_strtod_l+0x34a>
 8006826:	dc26      	bgt.n	8006876 <_strtod_l+0x346>
 8006828:	2a49      	cmp	r2, #73	; 0x49
 800682a:	d026      	beq.n	800687a <_strtod_l+0x34a>
 800682c:	2a4e      	cmp	r2, #78	; 0x4e
 800682e:	f47f aed3 	bne.w	80065d8 <_strtod_l+0xa8>
 8006832:	499a      	ldr	r1, [pc, #616]	; (8006a9c <_strtod_l+0x56c>)
 8006834:	a819      	add	r0, sp, #100	; 0x64
 8006836:	f001 fbfb 	bl	8008030 <__match>
 800683a:	2800      	cmp	r0, #0
 800683c:	f43f aecc 	beq.w	80065d8 <_strtod_l+0xa8>
 8006840:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b28      	cmp	r3, #40	; 0x28
 8006846:	d12f      	bne.n	80068a8 <_strtod_l+0x378>
 8006848:	4995      	ldr	r1, [pc, #596]	; (8006aa0 <_strtod_l+0x570>)
 800684a:	aa1c      	add	r2, sp, #112	; 0x70
 800684c:	a819      	add	r0, sp, #100	; 0x64
 800684e:	f001 fc03 	bl	8008058 <__hexnan>
 8006852:	2805      	cmp	r0, #5
 8006854:	d128      	bne.n	80068a8 <_strtod_l+0x378>
 8006856:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006858:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800685c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006860:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006864:	e69d      	b.n	80065a2 <_strtod_l+0x72>
 8006866:	210a      	movs	r1, #10
 8006868:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800686a:	fb01 2107 	mla	r1, r1, r7, r2
 800686e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006872:	9209      	str	r2, [sp, #36]	; 0x24
 8006874:	e7b5      	b.n	80067e2 <_strtod_l+0x2b2>
 8006876:	2a6e      	cmp	r2, #110	; 0x6e
 8006878:	e7d9      	b.n	800682e <_strtod_l+0x2fe>
 800687a:	498a      	ldr	r1, [pc, #552]	; (8006aa4 <_strtod_l+0x574>)
 800687c:	a819      	add	r0, sp, #100	; 0x64
 800687e:	f001 fbd7 	bl	8008030 <__match>
 8006882:	2800      	cmp	r0, #0
 8006884:	f43f aea8 	beq.w	80065d8 <_strtod_l+0xa8>
 8006888:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800688a:	4987      	ldr	r1, [pc, #540]	; (8006aa8 <_strtod_l+0x578>)
 800688c:	3b01      	subs	r3, #1
 800688e:	a819      	add	r0, sp, #100	; 0x64
 8006890:	9319      	str	r3, [sp, #100]	; 0x64
 8006892:	f001 fbcd 	bl	8008030 <__match>
 8006896:	b910      	cbnz	r0, 800689e <_strtod_l+0x36e>
 8006898:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800689a:	3301      	adds	r3, #1
 800689c:	9319      	str	r3, [sp, #100]	; 0x64
 800689e:	f04f 0800 	mov.w	r8, #0
 80068a2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006aac <_strtod_l+0x57c>
 80068a6:	e67c      	b.n	80065a2 <_strtod_l+0x72>
 80068a8:	4881      	ldr	r0, [pc, #516]	; (8006ab0 <_strtod_l+0x580>)
 80068aa:	f001 f8df 	bl	8007a6c <nan>
 80068ae:	4680      	mov	r8, r0
 80068b0:	4689      	mov	r9, r1
 80068b2:	e676      	b.n	80065a2 <_strtod_l+0x72>
 80068b4:	9b08      	ldr	r3, [sp, #32]
 80068b6:	f1bb 0f00 	cmp.w	fp, #0
 80068ba:	bf08      	it	eq
 80068bc:	46b3      	moveq	fp, r6
 80068be:	1afb      	subs	r3, r7, r3
 80068c0:	2e10      	cmp	r6, #16
 80068c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80068c4:	4635      	mov	r5, r6
 80068c6:	9309      	str	r3, [sp, #36]	; 0x24
 80068c8:	bfa8      	it	ge
 80068ca:	2510      	movge	r5, #16
 80068cc:	f7f9 fdf6 	bl	80004bc <__aeabi_ui2d>
 80068d0:	2e09      	cmp	r6, #9
 80068d2:	4680      	mov	r8, r0
 80068d4:	4689      	mov	r9, r1
 80068d6:	dd13      	ble.n	8006900 <_strtod_l+0x3d0>
 80068d8:	4b76      	ldr	r3, [pc, #472]	; (8006ab4 <_strtod_l+0x584>)
 80068da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80068de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80068e2:	f7f9 fe65 	bl	80005b0 <__aeabi_dmul>
 80068e6:	4680      	mov	r8, r0
 80068e8:	4650      	mov	r0, sl
 80068ea:	4689      	mov	r9, r1
 80068ec:	f7f9 fde6 	bl	80004bc <__aeabi_ui2d>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4640      	mov	r0, r8
 80068f6:	4649      	mov	r1, r9
 80068f8:	f7f9 fca4 	bl	8000244 <__adddf3>
 80068fc:	4680      	mov	r8, r0
 80068fe:	4689      	mov	r9, r1
 8006900:	2e0f      	cmp	r6, #15
 8006902:	dc36      	bgt.n	8006972 <_strtod_l+0x442>
 8006904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006906:	2b00      	cmp	r3, #0
 8006908:	f43f ae4b 	beq.w	80065a2 <_strtod_l+0x72>
 800690c:	dd22      	ble.n	8006954 <_strtod_l+0x424>
 800690e:	2b16      	cmp	r3, #22
 8006910:	dc09      	bgt.n	8006926 <_strtod_l+0x3f6>
 8006912:	4968      	ldr	r1, [pc, #416]	; (8006ab4 <_strtod_l+0x584>)
 8006914:	4642      	mov	r2, r8
 8006916:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800691a:	464b      	mov	r3, r9
 800691c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006920:	f7f9 fe46 	bl	80005b0 <__aeabi_dmul>
 8006924:	e7c3      	b.n	80068ae <_strtod_l+0x37e>
 8006926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006928:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800692c:	4293      	cmp	r3, r2
 800692e:	db20      	blt.n	8006972 <_strtod_l+0x442>
 8006930:	4c60      	ldr	r4, [pc, #384]	; (8006ab4 <_strtod_l+0x584>)
 8006932:	f1c6 060f 	rsb	r6, r6, #15
 8006936:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800693a:	4642      	mov	r2, r8
 800693c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006940:	464b      	mov	r3, r9
 8006942:	f7f9 fe35 	bl	80005b0 <__aeabi_dmul>
 8006946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006948:	1b9e      	subs	r6, r3, r6
 800694a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800694e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006952:	e7e5      	b.n	8006920 <_strtod_l+0x3f0>
 8006954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006956:	3316      	adds	r3, #22
 8006958:	db0b      	blt.n	8006972 <_strtod_l+0x442>
 800695a:	9b08      	ldr	r3, [sp, #32]
 800695c:	4640      	mov	r0, r8
 800695e:	1bdf      	subs	r7, r3, r7
 8006960:	4b54      	ldr	r3, [pc, #336]	; (8006ab4 <_strtod_l+0x584>)
 8006962:	4649      	mov	r1, r9
 8006964:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800696c:	f7f9 ff4a 	bl	8000804 <__aeabi_ddiv>
 8006970:	e79d      	b.n	80068ae <_strtod_l+0x37e>
 8006972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006974:	1b75      	subs	r5, r6, r5
 8006976:	441d      	add	r5, r3
 8006978:	2d00      	cmp	r5, #0
 800697a:	dd70      	ble.n	8006a5e <_strtod_l+0x52e>
 800697c:	f015 030f 	ands.w	r3, r5, #15
 8006980:	d00a      	beq.n	8006998 <_strtod_l+0x468>
 8006982:	494c      	ldr	r1, [pc, #304]	; (8006ab4 <_strtod_l+0x584>)
 8006984:	4642      	mov	r2, r8
 8006986:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800698a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800698e:	464b      	mov	r3, r9
 8006990:	f7f9 fe0e 	bl	80005b0 <__aeabi_dmul>
 8006994:	4680      	mov	r8, r0
 8006996:	4689      	mov	r9, r1
 8006998:	f035 050f 	bics.w	r5, r5, #15
 800699c:	d04d      	beq.n	8006a3a <_strtod_l+0x50a>
 800699e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80069a2:	dd22      	ble.n	80069ea <_strtod_l+0x4ba>
 80069a4:	2600      	movs	r6, #0
 80069a6:	46b3      	mov	fp, r6
 80069a8:	960b      	str	r6, [sp, #44]	; 0x2c
 80069aa:	9608      	str	r6, [sp, #32]
 80069ac:	2322      	movs	r3, #34	; 0x22
 80069ae:	f04f 0800 	mov.w	r8, #0
 80069b2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006aac <_strtod_l+0x57c>
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f43f adf1 	beq.w	80065a2 <_strtod_l+0x72>
 80069c0:	4620      	mov	r0, r4
 80069c2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80069c4:	f7ff f934 	bl	8005c30 <_Bfree>
 80069c8:	4620      	mov	r0, r4
 80069ca:	9908      	ldr	r1, [sp, #32]
 80069cc:	f7ff f930 	bl	8005c30 <_Bfree>
 80069d0:	4659      	mov	r1, fp
 80069d2:	4620      	mov	r0, r4
 80069d4:	f7ff f92c 	bl	8005c30 <_Bfree>
 80069d8:	4620      	mov	r0, r4
 80069da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069dc:	f7ff f928 	bl	8005c30 <_Bfree>
 80069e0:	4631      	mov	r1, r6
 80069e2:	4620      	mov	r0, r4
 80069e4:	f7ff f924 	bl	8005c30 <_Bfree>
 80069e8:	e5db      	b.n	80065a2 <_strtod_l+0x72>
 80069ea:	4b33      	ldr	r3, [pc, #204]	; (8006ab8 <_strtod_l+0x588>)
 80069ec:	4640      	mov	r0, r8
 80069ee:	9305      	str	r3, [sp, #20]
 80069f0:	2300      	movs	r3, #0
 80069f2:	4649      	mov	r1, r9
 80069f4:	469a      	mov	sl, r3
 80069f6:	112d      	asrs	r5, r5, #4
 80069f8:	2d01      	cmp	r5, #1
 80069fa:	dc21      	bgt.n	8006a40 <_strtod_l+0x510>
 80069fc:	b10b      	cbz	r3, 8006a02 <_strtod_l+0x4d2>
 80069fe:	4680      	mov	r8, r0
 8006a00:	4689      	mov	r9, r1
 8006a02:	492d      	ldr	r1, [pc, #180]	; (8006ab8 <_strtod_l+0x588>)
 8006a04:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006a08:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006a0c:	4642      	mov	r2, r8
 8006a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a12:	464b      	mov	r3, r9
 8006a14:	f7f9 fdcc 	bl	80005b0 <__aeabi_dmul>
 8006a18:	4b24      	ldr	r3, [pc, #144]	; (8006aac <_strtod_l+0x57c>)
 8006a1a:	460a      	mov	r2, r1
 8006a1c:	400b      	ands	r3, r1
 8006a1e:	4927      	ldr	r1, [pc, #156]	; (8006abc <_strtod_l+0x58c>)
 8006a20:	4680      	mov	r8, r0
 8006a22:	428b      	cmp	r3, r1
 8006a24:	d8be      	bhi.n	80069a4 <_strtod_l+0x474>
 8006a26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006a2a:	428b      	cmp	r3, r1
 8006a2c:	bf86      	itte	hi
 8006a2e:	f04f 38ff 	movhi.w	r8, #4294967295
 8006a32:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006ac0 <_strtod_l+0x590>
 8006a36:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	9305      	str	r3, [sp, #20]
 8006a3e:	e07b      	b.n	8006b38 <_strtod_l+0x608>
 8006a40:	07ea      	lsls	r2, r5, #31
 8006a42:	d505      	bpl.n	8006a50 <_strtod_l+0x520>
 8006a44:	9b05      	ldr	r3, [sp, #20]
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f7f9 fdb1 	bl	80005b0 <__aeabi_dmul>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	9a05      	ldr	r2, [sp, #20]
 8006a52:	f10a 0a01 	add.w	sl, sl, #1
 8006a56:	3208      	adds	r2, #8
 8006a58:	106d      	asrs	r5, r5, #1
 8006a5a:	9205      	str	r2, [sp, #20]
 8006a5c:	e7cc      	b.n	80069f8 <_strtod_l+0x4c8>
 8006a5e:	d0ec      	beq.n	8006a3a <_strtod_l+0x50a>
 8006a60:	426d      	negs	r5, r5
 8006a62:	f015 020f 	ands.w	r2, r5, #15
 8006a66:	d00a      	beq.n	8006a7e <_strtod_l+0x54e>
 8006a68:	4b12      	ldr	r3, [pc, #72]	; (8006ab4 <_strtod_l+0x584>)
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a70:	4649      	mov	r1, r9
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	f7f9 fec5 	bl	8000804 <__aeabi_ddiv>
 8006a7a:	4680      	mov	r8, r0
 8006a7c:	4689      	mov	r9, r1
 8006a7e:	112d      	asrs	r5, r5, #4
 8006a80:	d0db      	beq.n	8006a3a <_strtod_l+0x50a>
 8006a82:	2d1f      	cmp	r5, #31
 8006a84:	dd1e      	ble.n	8006ac4 <_strtod_l+0x594>
 8006a86:	2600      	movs	r6, #0
 8006a88:	46b3      	mov	fp, r6
 8006a8a:	960b      	str	r6, [sp, #44]	; 0x2c
 8006a8c:	9608      	str	r6, [sp, #32]
 8006a8e:	2322      	movs	r3, #34	; 0x22
 8006a90:	f04f 0800 	mov.w	r8, #0
 8006a94:	f04f 0900 	mov.w	r9, #0
 8006a98:	6023      	str	r3, [r4, #0]
 8006a9a:	e78d      	b.n	80069b8 <_strtod_l+0x488>
 8006a9c:	0800848b 	.word	0x0800848b
 8006aa0:	080086b4 	.word	0x080086b4
 8006aa4:	08008483 	.word	0x08008483
 8006aa8:	080084ba 	.word	0x080084ba
 8006aac:	7ff00000 	.word	0x7ff00000
 8006ab0:	08008845 	.word	0x08008845
 8006ab4:	080085c8 	.word	0x080085c8
 8006ab8:	080085a0 	.word	0x080085a0
 8006abc:	7ca00000 	.word	0x7ca00000
 8006ac0:	7fefffff 	.word	0x7fefffff
 8006ac4:	f015 0310 	ands.w	r3, r5, #16
 8006ac8:	bf18      	it	ne
 8006aca:	236a      	movne	r3, #106	; 0x6a
 8006acc:	4640      	mov	r0, r8
 8006ace:	9305      	str	r3, [sp, #20]
 8006ad0:	4649      	mov	r1, r9
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006da0 <_strtod_l+0x870>
 8006ad8:	07ea      	lsls	r2, r5, #31
 8006ada:	d504      	bpl.n	8006ae6 <_strtod_l+0x5b6>
 8006adc:	e9da 2300 	ldrd	r2, r3, [sl]
 8006ae0:	f7f9 fd66 	bl	80005b0 <__aeabi_dmul>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	106d      	asrs	r5, r5, #1
 8006ae8:	f10a 0a08 	add.w	sl, sl, #8
 8006aec:	d1f4      	bne.n	8006ad8 <_strtod_l+0x5a8>
 8006aee:	b10b      	cbz	r3, 8006af4 <_strtod_l+0x5c4>
 8006af0:	4680      	mov	r8, r0
 8006af2:	4689      	mov	r9, r1
 8006af4:	9b05      	ldr	r3, [sp, #20]
 8006af6:	b1bb      	cbz	r3, 8006b28 <_strtod_l+0x5f8>
 8006af8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006afc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	4649      	mov	r1, r9
 8006b04:	dd10      	ble.n	8006b28 <_strtod_l+0x5f8>
 8006b06:	2b1f      	cmp	r3, #31
 8006b08:	f340 8128 	ble.w	8006d5c <_strtod_l+0x82c>
 8006b0c:	2b34      	cmp	r3, #52	; 0x34
 8006b0e:	bfd8      	it	le
 8006b10:	f04f 33ff 	movle.w	r3, #4294967295
 8006b14:	f04f 0800 	mov.w	r8, #0
 8006b18:	bfcf      	iteee	gt
 8006b1a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006b1e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006b22:	4093      	lslle	r3, r2
 8006b24:	ea03 0901 	andle.w	r9, r3, r1
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	4640      	mov	r0, r8
 8006b2e:	4649      	mov	r1, r9
 8006b30:	f7f9 ffa6 	bl	8000a80 <__aeabi_dcmpeq>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d1a6      	bne.n	8006a86 <_strtod_l+0x556>
 8006b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b3a:	465a      	mov	r2, fp
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	4620      	mov	r0, r4
 8006b40:	4633      	mov	r3, r6
 8006b42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b44:	f7ff f8dc 	bl	8005d00 <__s2b>
 8006b48:	900b      	str	r0, [sp, #44]	; 0x2c
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	f43f af2a 	beq.w	80069a4 <_strtod_l+0x474>
 8006b50:	2600      	movs	r6, #0
 8006b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b54:	9b08      	ldr	r3, [sp, #32]
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	eba3 0307 	sub.w	r3, r3, r7
 8006b5c:	bfa8      	it	ge
 8006b5e:	2300      	movge	r3, #0
 8006b60:	46b3      	mov	fp, r6
 8006b62:	9312      	str	r3, [sp, #72]	; 0x48
 8006b64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006b68:	9316      	str	r3, [sp, #88]	; 0x58
 8006b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	6859      	ldr	r1, [r3, #4]
 8006b70:	f7ff f81e 	bl	8005bb0 <_Balloc>
 8006b74:	9008      	str	r0, [sp, #32]
 8006b76:	2800      	cmp	r0, #0
 8006b78:	f43f af18 	beq.w	80069ac <_strtod_l+0x47c>
 8006b7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b7e:	300c      	adds	r0, #12
 8006b80:	691a      	ldr	r2, [r3, #16]
 8006b82:	f103 010c 	add.w	r1, r3, #12
 8006b86:	3202      	adds	r2, #2
 8006b88:	0092      	lsls	r2, r2, #2
 8006b8a:	f000 ff61 	bl	8007a50 <memcpy>
 8006b8e:	ab1c      	add	r3, sp, #112	; 0x70
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	ab1b      	add	r3, sp, #108	; 0x6c
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	4642      	mov	r2, r8
 8006b98:	464b      	mov	r3, r9
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006ba0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8006ba4:	f7ff fbd8 	bl	8006358 <__d2b>
 8006ba8:	901a      	str	r0, [sp, #104]	; 0x68
 8006baa:	2800      	cmp	r0, #0
 8006bac:	f43f aefe 	beq.w	80069ac <_strtod_l+0x47c>
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f7ff f93c 	bl	8005e30 <__i2b>
 8006bb8:	4683      	mov	fp, r0
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	f43f aef6 	beq.w	80069ac <_strtod_l+0x47c>
 8006bc0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006bc2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006bc4:	2f00      	cmp	r7, #0
 8006bc6:	bfab      	itete	ge
 8006bc8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8006bca:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006bcc:	eb07 0a03 	addge.w	sl, r7, r3
 8006bd0:	1bdd      	sublt	r5, r3, r7
 8006bd2:	9b05      	ldr	r3, [sp, #20]
 8006bd4:	bfa8      	it	ge
 8006bd6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006bd8:	eba7 0703 	sub.w	r7, r7, r3
 8006bdc:	4417      	add	r7, r2
 8006bde:	4b71      	ldr	r3, [pc, #452]	; (8006da4 <_strtod_l+0x874>)
 8006be0:	f107 37ff 	add.w	r7, r7, #4294967295
 8006be4:	bfb8      	it	lt
 8006be6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8006bea:	429f      	cmp	r7, r3
 8006bec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006bf0:	f280 80c7 	bge.w	8006d82 <_strtod_l+0x852>
 8006bf4:	1bdb      	subs	r3, r3, r7
 8006bf6:	2b1f      	cmp	r3, #31
 8006bf8:	f04f 0101 	mov.w	r1, #1
 8006bfc:	eba2 0203 	sub.w	r2, r2, r3
 8006c00:	f300 80b3 	bgt.w	8006d6a <_strtod_l+0x83a>
 8006c04:	fa01 f303 	lsl.w	r3, r1, r3
 8006c08:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	9310      	str	r3, [sp, #64]	; 0x40
 8006c0e:	eb0a 0702 	add.w	r7, sl, r2
 8006c12:	9b05      	ldr	r3, [sp, #20]
 8006c14:	45ba      	cmp	sl, r7
 8006c16:	4415      	add	r5, r2
 8006c18:	441d      	add	r5, r3
 8006c1a:	4653      	mov	r3, sl
 8006c1c:	bfa8      	it	ge
 8006c1e:	463b      	movge	r3, r7
 8006c20:	42ab      	cmp	r3, r5
 8006c22:	bfa8      	it	ge
 8006c24:	462b      	movge	r3, r5
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	bfc2      	ittt	gt
 8006c2a:	1aff      	subgt	r7, r7, r3
 8006c2c:	1aed      	subgt	r5, r5, r3
 8006c2e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006c32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	dd17      	ble.n	8006c68 <_strtod_l+0x738>
 8006c38:	4659      	mov	r1, fp
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f7ff f9b5 	bl	8005fac <__pow5mult>
 8006c42:	4683      	mov	fp, r0
 8006c44:	2800      	cmp	r0, #0
 8006c46:	f43f aeb1 	beq.w	80069ac <_strtod_l+0x47c>
 8006c4a:	4601      	mov	r1, r0
 8006c4c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f7ff f904 	bl	8005e5c <__multiply>
 8006c54:	900a      	str	r0, [sp, #40]	; 0x28
 8006c56:	2800      	cmp	r0, #0
 8006c58:	f43f aea8 	beq.w	80069ac <_strtod_l+0x47c>
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006c60:	f7fe ffe6 	bl	8005c30 <_Bfree>
 8006c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c66:	931a      	str	r3, [sp, #104]	; 0x68
 8006c68:	2f00      	cmp	r7, #0
 8006c6a:	f300 808f 	bgt.w	8006d8c <_strtod_l+0x85c>
 8006c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	dd08      	ble.n	8006c86 <_strtod_l+0x756>
 8006c74:	4620      	mov	r0, r4
 8006c76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006c78:	9908      	ldr	r1, [sp, #32]
 8006c7a:	f7ff f997 	bl	8005fac <__pow5mult>
 8006c7e:	9008      	str	r0, [sp, #32]
 8006c80:	2800      	cmp	r0, #0
 8006c82:	f43f ae93 	beq.w	80069ac <_strtod_l+0x47c>
 8006c86:	2d00      	cmp	r5, #0
 8006c88:	dd08      	ble.n	8006c9c <_strtod_l+0x76c>
 8006c8a:	462a      	mov	r2, r5
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	9908      	ldr	r1, [sp, #32]
 8006c90:	f7ff f9e6 	bl	8006060 <__lshift>
 8006c94:	9008      	str	r0, [sp, #32]
 8006c96:	2800      	cmp	r0, #0
 8006c98:	f43f ae88 	beq.w	80069ac <_strtod_l+0x47c>
 8006c9c:	f1ba 0f00 	cmp.w	sl, #0
 8006ca0:	dd08      	ble.n	8006cb4 <_strtod_l+0x784>
 8006ca2:	4659      	mov	r1, fp
 8006ca4:	4652      	mov	r2, sl
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f7ff f9da 	bl	8006060 <__lshift>
 8006cac:	4683      	mov	fp, r0
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f43f ae7c 	beq.w	80069ac <_strtod_l+0x47c>
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	9a08      	ldr	r2, [sp, #32]
 8006cb8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006cba:	f7ff fa59 	bl	8006170 <__mdiff>
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	f43f ae73 	beq.w	80069ac <_strtod_l+0x47c>
 8006cc6:	2500      	movs	r5, #0
 8006cc8:	68c3      	ldr	r3, [r0, #12]
 8006cca:	4659      	mov	r1, fp
 8006ccc:	60c5      	str	r5, [r0, #12]
 8006cce:	930a      	str	r3, [sp, #40]	; 0x28
 8006cd0:	f7ff fa32 	bl	8006138 <__mcmp>
 8006cd4:	42a8      	cmp	r0, r5
 8006cd6:	da6b      	bge.n	8006db0 <_strtod_l+0x880>
 8006cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cda:	ea53 0308 	orrs.w	r3, r3, r8
 8006cde:	f040 808f 	bne.w	8006e00 <_strtod_l+0x8d0>
 8006ce2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f040 808a 	bne.w	8006e00 <_strtod_l+0x8d0>
 8006cec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006cf0:	0d1b      	lsrs	r3, r3, #20
 8006cf2:	051b      	lsls	r3, r3, #20
 8006cf4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006cf8:	f240 8082 	bls.w	8006e00 <_strtod_l+0x8d0>
 8006cfc:	6973      	ldr	r3, [r6, #20]
 8006cfe:	b913      	cbnz	r3, 8006d06 <_strtod_l+0x7d6>
 8006d00:	6933      	ldr	r3, [r6, #16]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	dd7c      	ble.n	8006e00 <_strtod_l+0x8d0>
 8006d06:	4631      	mov	r1, r6
 8006d08:	2201      	movs	r2, #1
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f7ff f9a8 	bl	8006060 <__lshift>
 8006d10:	4659      	mov	r1, fp
 8006d12:	4606      	mov	r6, r0
 8006d14:	f7ff fa10 	bl	8006138 <__mcmp>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	dd71      	ble.n	8006e00 <_strtod_l+0x8d0>
 8006d1c:	9905      	ldr	r1, [sp, #20]
 8006d1e:	464b      	mov	r3, r9
 8006d20:	4a21      	ldr	r2, [pc, #132]	; (8006da8 <_strtod_l+0x878>)
 8006d22:	2900      	cmp	r1, #0
 8006d24:	f000 808d 	beq.w	8006e42 <_strtod_l+0x912>
 8006d28:	ea02 0109 	and.w	r1, r2, r9
 8006d2c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006d30:	f300 8087 	bgt.w	8006e42 <_strtod_l+0x912>
 8006d34:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006d38:	f77f aea9 	ble.w	8006a8e <_strtod_l+0x55e>
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	4649      	mov	r1, r9
 8006d40:	4b1a      	ldr	r3, [pc, #104]	; (8006dac <_strtod_l+0x87c>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	f7f9 fc34 	bl	80005b0 <__aeabi_dmul>
 8006d48:	4b17      	ldr	r3, [pc, #92]	; (8006da8 <_strtod_l+0x878>)
 8006d4a:	4680      	mov	r8, r0
 8006d4c:	400b      	ands	r3, r1
 8006d4e:	4689      	mov	r9, r1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f47f ae35 	bne.w	80069c0 <_strtod_l+0x490>
 8006d56:	2322      	movs	r3, #34	; 0x22
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	e631      	b.n	80069c0 <_strtod_l+0x490>
 8006d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	ea03 0808 	and.w	r8, r3, r8
 8006d68:	e6de      	b.n	8006b28 <_strtod_l+0x5f8>
 8006d6a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8006d6e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8006d72:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8006d76:	37e2      	adds	r7, #226	; 0xe2
 8006d78:	fa01 f307 	lsl.w	r3, r1, r7
 8006d7c:	9310      	str	r3, [sp, #64]	; 0x40
 8006d7e:	9113      	str	r1, [sp, #76]	; 0x4c
 8006d80:	e745      	b.n	8006c0e <_strtod_l+0x6de>
 8006d82:	2300      	movs	r3, #0
 8006d84:	9310      	str	r3, [sp, #64]	; 0x40
 8006d86:	2301      	movs	r3, #1
 8006d88:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d8a:	e740      	b.n	8006c0e <_strtod_l+0x6de>
 8006d8c:	463a      	mov	r2, r7
 8006d8e:	4620      	mov	r0, r4
 8006d90:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d92:	f7ff f965 	bl	8006060 <__lshift>
 8006d96:	901a      	str	r0, [sp, #104]	; 0x68
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	f47f af68 	bne.w	8006c6e <_strtod_l+0x73e>
 8006d9e:	e605      	b.n	80069ac <_strtod_l+0x47c>
 8006da0:	080086c8 	.word	0x080086c8
 8006da4:	fffffc02 	.word	0xfffffc02
 8006da8:	7ff00000 	.word	0x7ff00000
 8006dac:	39500000 	.word	0x39500000
 8006db0:	46ca      	mov	sl, r9
 8006db2:	d165      	bne.n	8006e80 <_strtod_l+0x950>
 8006db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006db6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006dba:	b352      	cbz	r2, 8006e12 <_strtod_l+0x8e2>
 8006dbc:	4a9e      	ldr	r2, [pc, #632]	; (8007038 <_strtod_l+0xb08>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d12a      	bne.n	8006e18 <_strtod_l+0x8e8>
 8006dc2:	9b05      	ldr	r3, [sp, #20]
 8006dc4:	4641      	mov	r1, r8
 8006dc6:	b1fb      	cbz	r3, 8006e08 <_strtod_l+0x8d8>
 8006dc8:	4b9c      	ldr	r3, [pc, #624]	; (800703c <_strtod_l+0xb0c>)
 8006dca:	f04f 32ff 	mov.w	r2, #4294967295
 8006dce:	ea09 0303 	and.w	r3, r9, r3
 8006dd2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006dd6:	d81a      	bhi.n	8006e0e <_strtod_l+0x8de>
 8006dd8:	0d1b      	lsrs	r3, r3, #20
 8006dda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006dde:	fa02 f303 	lsl.w	r3, r2, r3
 8006de2:	4299      	cmp	r1, r3
 8006de4:	d118      	bne.n	8006e18 <_strtod_l+0x8e8>
 8006de6:	4b96      	ldr	r3, [pc, #600]	; (8007040 <_strtod_l+0xb10>)
 8006de8:	459a      	cmp	sl, r3
 8006dea:	d102      	bne.n	8006df2 <_strtod_l+0x8c2>
 8006dec:	3101      	adds	r1, #1
 8006dee:	f43f addd 	beq.w	80069ac <_strtod_l+0x47c>
 8006df2:	f04f 0800 	mov.w	r8, #0
 8006df6:	4b91      	ldr	r3, [pc, #580]	; (800703c <_strtod_l+0xb0c>)
 8006df8:	ea0a 0303 	and.w	r3, sl, r3
 8006dfc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006e00:	9b05      	ldr	r3, [sp, #20]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d19a      	bne.n	8006d3c <_strtod_l+0x80c>
 8006e06:	e5db      	b.n	80069c0 <_strtod_l+0x490>
 8006e08:	f04f 33ff 	mov.w	r3, #4294967295
 8006e0c:	e7e9      	b.n	8006de2 <_strtod_l+0x8b2>
 8006e0e:	4613      	mov	r3, r2
 8006e10:	e7e7      	b.n	8006de2 <_strtod_l+0x8b2>
 8006e12:	ea53 0308 	orrs.w	r3, r3, r8
 8006e16:	d081      	beq.n	8006d1c <_strtod_l+0x7ec>
 8006e18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e1a:	b1e3      	cbz	r3, 8006e56 <_strtod_l+0x926>
 8006e1c:	ea13 0f0a 	tst.w	r3, sl
 8006e20:	d0ee      	beq.n	8006e00 <_strtod_l+0x8d0>
 8006e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e24:	4640      	mov	r0, r8
 8006e26:	4649      	mov	r1, r9
 8006e28:	9a05      	ldr	r2, [sp, #20]
 8006e2a:	b1c3      	cbz	r3, 8006e5e <_strtod_l+0x92e>
 8006e2c:	f7ff fb5c 	bl	80064e8 <sulp>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e36:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006e38:	f7f9 fa04 	bl	8000244 <__adddf3>
 8006e3c:	4680      	mov	r8, r0
 8006e3e:	4689      	mov	r9, r1
 8006e40:	e7de      	b.n	8006e00 <_strtod_l+0x8d0>
 8006e42:	4013      	ands	r3, r2
 8006e44:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006e48:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006e4c:	f04f 38ff 	mov.w	r8, #4294967295
 8006e50:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006e54:	e7d4      	b.n	8006e00 <_strtod_l+0x8d0>
 8006e56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e58:	ea13 0f08 	tst.w	r3, r8
 8006e5c:	e7e0      	b.n	8006e20 <_strtod_l+0x8f0>
 8006e5e:	f7ff fb43 	bl	80064e8 <sulp>
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006e6a:	f7f9 f9e9 	bl	8000240 <__aeabi_dsub>
 8006e6e:	2200      	movs	r2, #0
 8006e70:	2300      	movs	r3, #0
 8006e72:	4680      	mov	r8, r0
 8006e74:	4689      	mov	r9, r1
 8006e76:	f7f9 fe03 	bl	8000a80 <__aeabi_dcmpeq>
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d0c0      	beq.n	8006e00 <_strtod_l+0x8d0>
 8006e7e:	e606      	b.n	8006a8e <_strtod_l+0x55e>
 8006e80:	4659      	mov	r1, fp
 8006e82:	4630      	mov	r0, r6
 8006e84:	f7ff fabe 	bl	8006404 <__ratio>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006e90:	2200      	movs	r2, #0
 8006e92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e96:	f7f9 fe07 	bl	8000aa8 <__aeabi_dcmple>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d06f      	beq.n	8006f7e <_strtod_l+0xa4e>
 8006e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d17c      	bne.n	8006f9e <_strtod_l+0xa6e>
 8006ea4:	f1b8 0f00 	cmp.w	r8, #0
 8006ea8:	d159      	bne.n	8006f5e <_strtod_l+0xa2e>
 8006eaa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d17b      	bne.n	8006faa <_strtod_l+0xa7a>
 8006eb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	4b62      	ldr	r3, [pc, #392]	; (8007044 <_strtod_l+0xb14>)
 8006eba:	f7f9 fdeb 	bl	8000a94 <__aeabi_dcmplt>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d15a      	bne.n	8006f78 <_strtod_l+0xa48>
 8006ec2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	4b5f      	ldr	r3, [pc, #380]	; (8007048 <_strtod_l+0xb18>)
 8006eca:	f7f9 fb71 	bl	80005b0 <__aeabi_dmul>
 8006ece:	4605      	mov	r5, r0
 8006ed0:	460f      	mov	r7, r1
 8006ed2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006ed6:	9506      	str	r5, [sp, #24]
 8006ed8:	9307      	str	r3, [sp, #28]
 8006eda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ede:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006ee2:	4b56      	ldr	r3, [pc, #344]	; (800703c <_strtod_l+0xb0c>)
 8006ee4:	4a55      	ldr	r2, [pc, #340]	; (800703c <_strtod_l+0xb0c>)
 8006ee6:	ea0a 0303 	and.w	r3, sl, r3
 8006eea:	9313      	str	r3, [sp, #76]	; 0x4c
 8006eec:	4b57      	ldr	r3, [pc, #348]	; (800704c <_strtod_l+0xb1c>)
 8006eee:	ea0a 0202 	and.w	r2, sl, r2
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	f040 80b0 	bne.w	8007058 <_strtod_l+0xb28>
 8006ef8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006efc:	4640      	mov	r0, r8
 8006efe:	4649      	mov	r1, r9
 8006f00:	f7ff f9c2 	bl	8006288 <__ulp>
 8006f04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f08:	f7f9 fb52 	bl	80005b0 <__aeabi_dmul>
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	464b      	mov	r3, r9
 8006f10:	f7f9 f998 	bl	8000244 <__adddf3>
 8006f14:	f8df a124 	ldr.w	sl, [pc, #292]	; 800703c <_strtod_l+0xb0c>
 8006f18:	4a4d      	ldr	r2, [pc, #308]	; (8007050 <_strtod_l+0xb20>)
 8006f1a:	ea01 0a0a 	and.w	sl, r1, sl
 8006f1e:	4592      	cmp	sl, r2
 8006f20:	4680      	mov	r8, r0
 8006f22:	d948      	bls.n	8006fb6 <_strtod_l+0xa86>
 8006f24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f26:	4b46      	ldr	r3, [pc, #280]	; (8007040 <_strtod_l+0xb10>)
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d103      	bne.n	8006f34 <_strtod_l+0xa04>
 8006f2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f2e:	3301      	adds	r3, #1
 8006f30:	f43f ad3c 	beq.w	80069ac <_strtod_l+0x47c>
 8006f34:	f04f 38ff 	mov.w	r8, #4294967295
 8006f38:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007040 <_strtod_l+0xb10>
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006f40:	f7fe fe76 	bl	8005c30 <_Bfree>
 8006f44:	4620      	mov	r0, r4
 8006f46:	9908      	ldr	r1, [sp, #32]
 8006f48:	f7fe fe72 	bl	8005c30 <_Bfree>
 8006f4c:	4659      	mov	r1, fp
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f7fe fe6e 	bl	8005c30 <_Bfree>
 8006f54:	4631      	mov	r1, r6
 8006f56:	4620      	mov	r0, r4
 8006f58:	f7fe fe6a 	bl	8005c30 <_Bfree>
 8006f5c:	e605      	b.n	8006b6a <_strtod_l+0x63a>
 8006f5e:	f1b8 0f01 	cmp.w	r8, #1
 8006f62:	d103      	bne.n	8006f6c <_strtod_l+0xa3c>
 8006f64:	f1b9 0f00 	cmp.w	r9, #0
 8006f68:	f43f ad91 	beq.w	8006a8e <_strtod_l+0x55e>
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	4b39      	ldr	r3, [pc, #228]	; (8007054 <_strtod_l+0xb24>)
 8006f70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006f72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f76:	e016      	b.n	8006fa6 <_strtod_l+0xa76>
 8006f78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006f7a:	4f33      	ldr	r7, [pc, #204]	; (8007048 <_strtod_l+0xb18>)
 8006f7c:	e7a9      	b.n	8006ed2 <_strtod_l+0x9a2>
 8006f7e:	4b32      	ldr	r3, [pc, #200]	; (8007048 <_strtod_l+0xb18>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f86:	f7f9 fb13 	bl	80005b0 <__aeabi_dmul>
 8006f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	460f      	mov	r7, r1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d09e      	beq.n	8006ed2 <_strtod_l+0x9a2>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f9c:	e79d      	b.n	8006eda <_strtod_l+0x9aa>
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	4b28      	ldr	r3, [pc, #160]	; (8007044 <_strtod_l+0xb14>)
 8006fa2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006fa6:	4f27      	ldr	r7, [pc, #156]	; (8007044 <_strtod_l+0xb14>)
 8006fa8:	e797      	b.n	8006eda <_strtod_l+0x9aa>
 8006faa:	2200      	movs	r2, #0
 8006fac:	4b29      	ldr	r3, [pc, #164]	; (8007054 <_strtod_l+0xb24>)
 8006fae:	4645      	mov	r5, r8
 8006fb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006fb4:	e7f7      	b.n	8006fa6 <_strtod_l+0xa76>
 8006fb6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8006fba:	9b05      	ldr	r3, [sp, #20]
 8006fbc:	46ca      	mov	sl, r9
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1bc      	bne.n	8006f3c <_strtod_l+0xa0c>
 8006fc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006fc6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006fc8:	0d1b      	lsrs	r3, r3, #20
 8006fca:	051b      	lsls	r3, r3, #20
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d1b5      	bne.n	8006f3c <_strtod_l+0xa0c>
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	4639      	mov	r1, r7
 8006fd4:	f7f9 fe34 	bl	8000c40 <__aeabi_d2lz>
 8006fd8:	f7f9 fabc 	bl	8000554 <__aeabi_l2d>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	4639      	mov	r1, r7
 8006fe4:	f7f9 f92c 	bl	8000240 <__aeabi_dsub>
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4602      	mov	r2, r0
 8006fec:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8006ff0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff6:	ea4a 0a08 	orr.w	sl, sl, r8
 8006ffa:	ea5a 0a03 	orrs.w	sl, sl, r3
 8006ffe:	d06c      	beq.n	80070da <_strtod_l+0xbaa>
 8007000:	a309      	add	r3, pc, #36	; (adr r3, 8007028 <_strtod_l+0xaf8>)
 8007002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007006:	f7f9 fd45 	bl	8000a94 <__aeabi_dcmplt>
 800700a:	2800      	cmp	r0, #0
 800700c:	f47f acd8 	bne.w	80069c0 <_strtod_l+0x490>
 8007010:	a307      	add	r3, pc, #28	; (adr r3, 8007030 <_strtod_l+0xb00>)
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800701a:	f7f9 fd59 	bl	8000ad0 <__aeabi_dcmpgt>
 800701e:	2800      	cmp	r0, #0
 8007020:	d08c      	beq.n	8006f3c <_strtod_l+0xa0c>
 8007022:	e4cd      	b.n	80069c0 <_strtod_l+0x490>
 8007024:	f3af 8000 	nop.w
 8007028:	94a03595 	.word	0x94a03595
 800702c:	3fdfffff 	.word	0x3fdfffff
 8007030:	35afe535 	.word	0x35afe535
 8007034:	3fe00000 	.word	0x3fe00000
 8007038:	000fffff 	.word	0x000fffff
 800703c:	7ff00000 	.word	0x7ff00000
 8007040:	7fefffff 	.word	0x7fefffff
 8007044:	3ff00000 	.word	0x3ff00000
 8007048:	3fe00000 	.word	0x3fe00000
 800704c:	7fe00000 	.word	0x7fe00000
 8007050:	7c9fffff 	.word	0x7c9fffff
 8007054:	bff00000 	.word	0xbff00000
 8007058:	9b05      	ldr	r3, [sp, #20]
 800705a:	b333      	cbz	r3, 80070aa <_strtod_l+0xb7a>
 800705c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800705e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007062:	d822      	bhi.n	80070aa <_strtod_l+0xb7a>
 8007064:	a328      	add	r3, pc, #160	; (adr r3, 8007108 <_strtod_l+0xbd8>)
 8007066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706a:	4628      	mov	r0, r5
 800706c:	4639      	mov	r1, r7
 800706e:	f7f9 fd1b 	bl	8000aa8 <__aeabi_dcmple>
 8007072:	b1a0      	cbz	r0, 800709e <_strtod_l+0xb6e>
 8007074:	4639      	mov	r1, r7
 8007076:	4628      	mov	r0, r5
 8007078:	f7f9 fd72 	bl	8000b60 <__aeabi_d2uiz>
 800707c:	2801      	cmp	r0, #1
 800707e:	bf38      	it	cc
 8007080:	2001      	movcc	r0, #1
 8007082:	f7f9 fa1b 	bl	80004bc <__aeabi_ui2d>
 8007086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007088:	4605      	mov	r5, r0
 800708a:	460f      	mov	r7, r1
 800708c:	bb03      	cbnz	r3, 80070d0 <_strtod_l+0xba0>
 800708e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007092:	9014      	str	r0, [sp, #80]	; 0x50
 8007094:	9315      	str	r3, [sp, #84]	; 0x54
 8007096:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800709a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800709e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070a2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80070a6:	1a9b      	subs	r3, r3, r2
 80070a8:	9311      	str	r3, [sp, #68]	; 0x44
 80070aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80070ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80070ae:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80070b2:	f7ff f8e9 	bl	8006288 <__ulp>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	4640      	mov	r0, r8
 80070bc:	4649      	mov	r1, r9
 80070be:	f7f9 fa77 	bl	80005b0 <__aeabi_dmul>
 80070c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070c6:	f7f9 f8bd 	bl	8000244 <__adddf3>
 80070ca:	4680      	mov	r8, r0
 80070cc:	4689      	mov	r9, r1
 80070ce:	e774      	b.n	8006fba <_strtod_l+0xa8a>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80070d8:	e7dd      	b.n	8007096 <_strtod_l+0xb66>
 80070da:	a30d      	add	r3, pc, #52	; (adr r3, 8007110 <_strtod_l+0xbe0>)
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	f7f9 fcd8 	bl	8000a94 <__aeabi_dcmplt>
 80070e4:	e79b      	b.n	800701e <_strtod_l+0xaee>
 80070e6:	2300      	movs	r3, #0
 80070e8:	930e      	str	r3, [sp, #56]	; 0x38
 80070ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	f7ff ba5b 	b.w	80065aa <_strtod_l+0x7a>
 80070f4:	2a65      	cmp	r2, #101	; 0x65
 80070f6:	f43f ab52 	beq.w	800679e <_strtod_l+0x26e>
 80070fa:	2a45      	cmp	r2, #69	; 0x45
 80070fc:	f43f ab4f 	beq.w	800679e <_strtod_l+0x26e>
 8007100:	2301      	movs	r3, #1
 8007102:	f7ff bb87 	b.w	8006814 <_strtod_l+0x2e4>
 8007106:	bf00      	nop
 8007108:	ffc00000 	.word	0xffc00000
 800710c:	41dfffff 	.word	0x41dfffff
 8007110:	94a03595 	.word	0x94a03595
 8007114:	3fcfffff 	.word	0x3fcfffff

08007118 <_strtod_r>:
 8007118:	4b01      	ldr	r3, [pc, #4]	; (8007120 <_strtod_r+0x8>)
 800711a:	f7ff ba09 	b.w	8006530 <_strtod_l>
 800711e:	bf00      	nop
 8007120:	20000068 	.word	0x20000068

08007124 <_strtol_l.constprop.0>:
 8007124:	2b01      	cmp	r3, #1
 8007126:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800712a:	4686      	mov	lr, r0
 800712c:	4690      	mov	r8, r2
 800712e:	d001      	beq.n	8007134 <_strtol_l.constprop.0+0x10>
 8007130:	2b24      	cmp	r3, #36	; 0x24
 8007132:	d906      	bls.n	8007142 <_strtol_l.constprop.0+0x1e>
 8007134:	f7fd fd94 	bl	8004c60 <__errno>
 8007138:	2316      	movs	r3, #22
 800713a:	6003      	str	r3, [r0, #0]
 800713c:	2000      	movs	r0, #0
 800713e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007142:	460d      	mov	r5, r1
 8007144:	4835      	ldr	r0, [pc, #212]	; (800721c <_strtol_l.constprop.0+0xf8>)
 8007146:	462a      	mov	r2, r5
 8007148:	f815 4b01 	ldrb.w	r4, [r5], #1
 800714c:	5d06      	ldrb	r6, [r0, r4]
 800714e:	f016 0608 	ands.w	r6, r6, #8
 8007152:	d1f8      	bne.n	8007146 <_strtol_l.constprop.0+0x22>
 8007154:	2c2d      	cmp	r4, #45	; 0x2d
 8007156:	d12e      	bne.n	80071b6 <_strtol_l.constprop.0+0x92>
 8007158:	2601      	movs	r6, #1
 800715a:	782c      	ldrb	r4, [r5, #0]
 800715c:	1c95      	adds	r5, r2, #2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d057      	beq.n	8007212 <_strtol_l.constprop.0+0xee>
 8007162:	2b10      	cmp	r3, #16
 8007164:	d109      	bne.n	800717a <_strtol_l.constprop.0+0x56>
 8007166:	2c30      	cmp	r4, #48	; 0x30
 8007168:	d107      	bne.n	800717a <_strtol_l.constprop.0+0x56>
 800716a:	782a      	ldrb	r2, [r5, #0]
 800716c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007170:	2a58      	cmp	r2, #88	; 0x58
 8007172:	d149      	bne.n	8007208 <_strtol_l.constprop.0+0xe4>
 8007174:	2310      	movs	r3, #16
 8007176:	786c      	ldrb	r4, [r5, #1]
 8007178:	3502      	adds	r5, #2
 800717a:	2200      	movs	r2, #0
 800717c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007180:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007184:	fbbc f9f3 	udiv	r9, ip, r3
 8007188:	4610      	mov	r0, r2
 800718a:	fb03 ca19 	mls	sl, r3, r9, ip
 800718e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007192:	2f09      	cmp	r7, #9
 8007194:	d814      	bhi.n	80071c0 <_strtol_l.constprop.0+0x9c>
 8007196:	463c      	mov	r4, r7
 8007198:	42a3      	cmp	r3, r4
 800719a:	dd20      	ble.n	80071de <_strtol_l.constprop.0+0xba>
 800719c:	1c57      	adds	r7, r2, #1
 800719e:	d007      	beq.n	80071b0 <_strtol_l.constprop.0+0x8c>
 80071a0:	4581      	cmp	r9, r0
 80071a2:	d319      	bcc.n	80071d8 <_strtol_l.constprop.0+0xb4>
 80071a4:	d101      	bne.n	80071aa <_strtol_l.constprop.0+0x86>
 80071a6:	45a2      	cmp	sl, r4
 80071a8:	db16      	blt.n	80071d8 <_strtol_l.constprop.0+0xb4>
 80071aa:	2201      	movs	r2, #1
 80071ac:	fb00 4003 	mla	r0, r0, r3, r4
 80071b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071b4:	e7eb      	b.n	800718e <_strtol_l.constprop.0+0x6a>
 80071b6:	2c2b      	cmp	r4, #43	; 0x2b
 80071b8:	bf04      	itt	eq
 80071ba:	782c      	ldrbeq	r4, [r5, #0]
 80071bc:	1c95      	addeq	r5, r2, #2
 80071be:	e7ce      	b.n	800715e <_strtol_l.constprop.0+0x3a>
 80071c0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80071c4:	2f19      	cmp	r7, #25
 80071c6:	d801      	bhi.n	80071cc <_strtol_l.constprop.0+0xa8>
 80071c8:	3c37      	subs	r4, #55	; 0x37
 80071ca:	e7e5      	b.n	8007198 <_strtol_l.constprop.0+0x74>
 80071cc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80071d0:	2f19      	cmp	r7, #25
 80071d2:	d804      	bhi.n	80071de <_strtol_l.constprop.0+0xba>
 80071d4:	3c57      	subs	r4, #87	; 0x57
 80071d6:	e7df      	b.n	8007198 <_strtol_l.constprop.0+0x74>
 80071d8:	f04f 32ff 	mov.w	r2, #4294967295
 80071dc:	e7e8      	b.n	80071b0 <_strtol_l.constprop.0+0x8c>
 80071de:	1c53      	adds	r3, r2, #1
 80071e0:	d108      	bne.n	80071f4 <_strtol_l.constprop.0+0xd0>
 80071e2:	2322      	movs	r3, #34	; 0x22
 80071e4:	4660      	mov	r0, ip
 80071e6:	f8ce 3000 	str.w	r3, [lr]
 80071ea:	f1b8 0f00 	cmp.w	r8, #0
 80071ee:	d0a6      	beq.n	800713e <_strtol_l.constprop.0+0x1a>
 80071f0:	1e69      	subs	r1, r5, #1
 80071f2:	e006      	b.n	8007202 <_strtol_l.constprop.0+0xde>
 80071f4:	b106      	cbz	r6, 80071f8 <_strtol_l.constprop.0+0xd4>
 80071f6:	4240      	negs	r0, r0
 80071f8:	f1b8 0f00 	cmp.w	r8, #0
 80071fc:	d09f      	beq.n	800713e <_strtol_l.constprop.0+0x1a>
 80071fe:	2a00      	cmp	r2, #0
 8007200:	d1f6      	bne.n	80071f0 <_strtol_l.constprop.0+0xcc>
 8007202:	f8c8 1000 	str.w	r1, [r8]
 8007206:	e79a      	b.n	800713e <_strtol_l.constprop.0+0x1a>
 8007208:	2430      	movs	r4, #48	; 0x30
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1b5      	bne.n	800717a <_strtol_l.constprop.0+0x56>
 800720e:	2308      	movs	r3, #8
 8007210:	e7b3      	b.n	800717a <_strtol_l.constprop.0+0x56>
 8007212:	2c30      	cmp	r4, #48	; 0x30
 8007214:	d0a9      	beq.n	800716a <_strtol_l.constprop.0+0x46>
 8007216:	230a      	movs	r3, #10
 8007218:	e7af      	b.n	800717a <_strtol_l.constprop.0+0x56>
 800721a:	bf00      	nop
 800721c:	080086f1 	.word	0x080086f1

08007220 <_strtol_r>:
 8007220:	f7ff bf80 	b.w	8007124 <_strtol_l.constprop.0>

08007224 <__ssputs_r>:
 8007224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007228:	461f      	mov	r7, r3
 800722a:	688e      	ldr	r6, [r1, #8]
 800722c:	4682      	mov	sl, r0
 800722e:	42be      	cmp	r6, r7
 8007230:	460c      	mov	r4, r1
 8007232:	4690      	mov	r8, r2
 8007234:	680b      	ldr	r3, [r1, #0]
 8007236:	d82c      	bhi.n	8007292 <__ssputs_r+0x6e>
 8007238:	898a      	ldrh	r2, [r1, #12]
 800723a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800723e:	d026      	beq.n	800728e <__ssputs_r+0x6a>
 8007240:	6965      	ldr	r5, [r4, #20]
 8007242:	6909      	ldr	r1, [r1, #16]
 8007244:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007248:	eba3 0901 	sub.w	r9, r3, r1
 800724c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007250:	1c7b      	adds	r3, r7, #1
 8007252:	444b      	add	r3, r9
 8007254:	106d      	asrs	r5, r5, #1
 8007256:	429d      	cmp	r5, r3
 8007258:	bf38      	it	cc
 800725a:	461d      	movcc	r5, r3
 800725c:	0553      	lsls	r3, r2, #21
 800725e:	d527      	bpl.n	80072b0 <__ssputs_r+0x8c>
 8007260:	4629      	mov	r1, r5
 8007262:	f7fe fc19 	bl	8005a98 <_malloc_r>
 8007266:	4606      	mov	r6, r0
 8007268:	b360      	cbz	r0, 80072c4 <__ssputs_r+0xa0>
 800726a:	464a      	mov	r2, r9
 800726c:	6921      	ldr	r1, [r4, #16]
 800726e:	f000 fbef 	bl	8007a50 <memcpy>
 8007272:	89a3      	ldrh	r3, [r4, #12]
 8007274:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727c:	81a3      	strh	r3, [r4, #12]
 800727e:	6126      	str	r6, [r4, #16]
 8007280:	444e      	add	r6, r9
 8007282:	6026      	str	r6, [r4, #0]
 8007284:	463e      	mov	r6, r7
 8007286:	6165      	str	r5, [r4, #20]
 8007288:	eba5 0509 	sub.w	r5, r5, r9
 800728c:	60a5      	str	r5, [r4, #8]
 800728e:	42be      	cmp	r6, r7
 8007290:	d900      	bls.n	8007294 <__ssputs_r+0x70>
 8007292:	463e      	mov	r6, r7
 8007294:	4632      	mov	r2, r6
 8007296:	4641      	mov	r1, r8
 8007298:	6820      	ldr	r0, [r4, #0]
 800729a:	f000 fb9d 	bl	80079d8 <memmove>
 800729e:	2000      	movs	r0, #0
 80072a0:	68a3      	ldr	r3, [r4, #8]
 80072a2:	1b9b      	subs	r3, r3, r6
 80072a4:	60a3      	str	r3, [r4, #8]
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	4433      	add	r3, r6
 80072aa:	6023      	str	r3, [r4, #0]
 80072ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b0:	462a      	mov	r2, r5
 80072b2:	f000 ff7e 	bl	80081b2 <_realloc_r>
 80072b6:	4606      	mov	r6, r0
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d1e0      	bne.n	800727e <__ssputs_r+0x5a>
 80072bc:	4650      	mov	r0, sl
 80072be:	6921      	ldr	r1, [r4, #16]
 80072c0:	f7fe fb7a 	bl	80059b8 <_free_r>
 80072c4:	230c      	movs	r3, #12
 80072c6:	f8ca 3000 	str.w	r3, [sl]
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	f04f 30ff 	mov.w	r0, #4294967295
 80072d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072d4:	81a3      	strh	r3, [r4, #12]
 80072d6:	e7e9      	b.n	80072ac <__ssputs_r+0x88>

080072d8 <_svfiprintf_r>:
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	4698      	mov	r8, r3
 80072de:	898b      	ldrh	r3, [r1, #12]
 80072e0:	4607      	mov	r7, r0
 80072e2:	061b      	lsls	r3, r3, #24
 80072e4:	460d      	mov	r5, r1
 80072e6:	4614      	mov	r4, r2
 80072e8:	b09d      	sub	sp, #116	; 0x74
 80072ea:	d50e      	bpl.n	800730a <_svfiprintf_r+0x32>
 80072ec:	690b      	ldr	r3, [r1, #16]
 80072ee:	b963      	cbnz	r3, 800730a <_svfiprintf_r+0x32>
 80072f0:	2140      	movs	r1, #64	; 0x40
 80072f2:	f7fe fbd1 	bl	8005a98 <_malloc_r>
 80072f6:	6028      	str	r0, [r5, #0]
 80072f8:	6128      	str	r0, [r5, #16]
 80072fa:	b920      	cbnz	r0, 8007306 <_svfiprintf_r+0x2e>
 80072fc:	230c      	movs	r3, #12
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	e0d0      	b.n	80074a8 <_svfiprintf_r+0x1d0>
 8007306:	2340      	movs	r3, #64	; 0x40
 8007308:	616b      	str	r3, [r5, #20]
 800730a:	2300      	movs	r3, #0
 800730c:	9309      	str	r3, [sp, #36]	; 0x24
 800730e:	2320      	movs	r3, #32
 8007310:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007314:	2330      	movs	r3, #48	; 0x30
 8007316:	f04f 0901 	mov.w	r9, #1
 800731a:	f8cd 800c 	str.w	r8, [sp, #12]
 800731e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80074c0 <_svfiprintf_r+0x1e8>
 8007322:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007326:	4623      	mov	r3, r4
 8007328:	469a      	mov	sl, r3
 800732a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800732e:	b10a      	cbz	r2, 8007334 <_svfiprintf_r+0x5c>
 8007330:	2a25      	cmp	r2, #37	; 0x25
 8007332:	d1f9      	bne.n	8007328 <_svfiprintf_r+0x50>
 8007334:	ebba 0b04 	subs.w	fp, sl, r4
 8007338:	d00b      	beq.n	8007352 <_svfiprintf_r+0x7a>
 800733a:	465b      	mov	r3, fp
 800733c:	4622      	mov	r2, r4
 800733e:	4629      	mov	r1, r5
 8007340:	4638      	mov	r0, r7
 8007342:	f7ff ff6f 	bl	8007224 <__ssputs_r>
 8007346:	3001      	adds	r0, #1
 8007348:	f000 80a9 	beq.w	800749e <_svfiprintf_r+0x1c6>
 800734c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800734e:	445a      	add	r2, fp
 8007350:	9209      	str	r2, [sp, #36]	; 0x24
 8007352:	f89a 3000 	ldrb.w	r3, [sl]
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 80a1 	beq.w	800749e <_svfiprintf_r+0x1c6>
 800735c:	2300      	movs	r3, #0
 800735e:	f04f 32ff 	mov.w	r2, #4294967295
 8007362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007366:	f10a 0a01 	add.w	sl, sl, #1
 800736a:	9304      	str	r3, [sp, #16]
 800736c:	9307      	str	r3, [sp, #28]
 800736e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007372:	931a      	str	r3, [sp, #104]	; 0x68
 8007374:	4654      	mov	r4, sl
 8007376:	2205      	movs	r2, #5
 8007378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800737c:	4850      	ldr	r0, [pc, #320]	; (80074c0 <_svfiprintf_r+0x1e8>)
 800737e:	f7fd fc9b 	bl	8004cb8 <memchr>
 8007382:	9a04      	ldr	r2, [sp, #16]
 8007384:	b9d8      	cbnz	r0, 80073be <_svfiprintf_r+0xe6>
 8007386:	06d0      	lsls	r0, r2, #27
 8007388:	bf44      	itt	mi
 800738a:	2320      	movmi	r3, #32
 800738c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007390:	0711      	lsls	r1, r2, #28
 8007392:	bf44      	itt	mi
 8007394:	232b      	movmi	r3, #43	; 0x2b
 8007396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800739a:	f89a 3000 	ldrb.w	r3, [sl]
 800739e:	2b2a      	cmp	r3, #42	; 0x2a
 80073a0:	d015      	beq.n	80073ce <_svfiprintf_r+0xf6>
 80073a2:	4654      	mov	r4, sl
 80073a4:	2000      	movs	r0, #0
 80073a6:	f04f 0c0a 	mov.w	ip, #10
 80073aa:	9a07      	ldr	r2, [sp, #28]
 80073ac:	4621      	mov	r1, r4
 80073ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073b2:	3b30      	subs	r3, #48	; 0x30
 80073b4:	2b09      	cmp	r3, #9
 80073b6:	d94d      	bls.n	8007454 <_svfiprintf_r+0x17c>
 80073b8:	b1b0      	cbz	r0, 80073e8 <_svfiprintf_r+0x110>
 80073ba:	9207      	str	r2, [sp, #28]
 80073bc:	e014      	b.n	80073e8 <_svfiprintf_r+0x110>
 80073be:	eba0 0308 	sub.w	r3, r0, r8
 80073c2:	fa09 f303 	lsl.w	r3, r9, r3
 80073c6:	4313      	orrs	r3, r2
 80073c8:	46a2      	mov	sl, r4
 80073ca:	9304      	str	r3, [sp, #16]
 80073cc:	e7d2      	b.n	8007374 <_svfiprintf_r+0x9c>
 80073ce:	9b03      	ldr	r3, [sp, #12]
 80073d0:	1d19      	adds	r1, r3, #4
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	9103      	str	r1, [sp, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	bfbb      	ittet	lt
 80073da:	425b      	neglt	r3, r3
 80073dc:	f042 0202 	orrlt.w	r2, r2, #2
 80073e0:	9307      	strge	r3, [sp, #28]
 80073e2:	9307      	strlt	r3, [sp, #28]
 80073e4:	bfb8      	it	lt
 80073e6:	9204      	strlt	r2, [sp, #16]
 80073e8:	7823      	ldrb	r3, [r4, #0]
 80073ea:	2b2e      	cmp	r3, #46	; 0x2e
 80073ec:	d10c      	bne.n	8007408 <_svfiprintf_r+0x130>
 80073ee:	7863      	ldrb	r3, [r4, #1]
 80073f0:	2b2a      	cmp	r3, #42	; 0x2a
 80073f2:	d134      	bne.n	800745e <_svfiprintf_r+0x186>
 80073f4:	9b03      	ldr	r3, [sp, #12]
 80073f6:	3402      	adds	r4, #2
 80073f8:	1d1a      	adds	r2, r3, #4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	9203      	str	r2, [sp, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bfb8      	it	lt
 8007402:	f04f 33ff 	movlt.w	r3, #4294967295
 8007406:	9305      	str	r3, [sp, #20]
 8007408:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80074c4 <_svfiprintf_r+0x1ec>
 800740c:	2203      	movs	r2, #3
 800740e:	4650      	mov	r0, sl
 8007410:	7821      	ldrb	r1, [r4, #0]
 8007412:	f7fd fc51 	bl	8004cb8 <memchr>
 8007416:	b138      	cbz	r0, 8007428 <_svfiprintf_r+0x150>
 8007418:	2240      	movs	r2, #64	; 0x40
 800741a:	9b04      	ldr	r3, [sp, #16]
 800741c:	eba0 000a 	sub.w	r0, r0, sl
 8007420:	4082      	lsls	r2, r0
 8007422:	4313      	orrs	r3, r2
 8007424:	3401      	adds	r4, #1
 8007426:	9304      	str	r3, [sp, #16]
 8007428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800742c:	2206      	movs	r2, #6
 800742e:	4826      	ldr	r0, [pc, #152]	; (80074c8 <_svfiprintf_r+0x1f0>)
 8007430:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007434:	f7fd fc40 	bl	8004cb8 <memchr>
 8007438:	2800      	cmp	r0, #0
 800743a:	d038      	beq.n	80074ae <_svfiprintf_r+0x1d6>
 800743c:	4b23      	ldr	r3, [pc, #140]	; (80074cc <_svfiprintf_r+0x1f4>)
 800743e:	bb1b      	cbnz	r3, 8007488 <_svfiprintf_r+0x1b0>
 8007440:	9b03      	ldr	r3, [sp, #12]
 8007442:	3307      	adds	r3, #7
 8007444:	f023 0307 	bic.w	r3, r3, #7
 8007448:	3308      	adds	r3, #8
 800744a:	9303      	str	r3, [sp, #12]
 800744c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744e:	4433      	add	r3, r6
 8007450:	9309      	str	r3, [sp, #36]	; 0x24
 8007452:	e768      	b.n	8007326 <_svfiprintf_r+0x4e>
 8007454:	460c      	mov	r4, r1
 8007456:	2001      	movs	r0, #1
 8007458:	fb0c 3202 	mla	r2, ip, r2, r3
 800745c:	e7a6      	b.n	80073ac <_svfiprintf_r+0xd4>
 800745e:	2300      	movs	r3, #0
 8007460:	f04f 0c0a 	mov.w	ip, #10
 8007464:	4619      	mov	r1, r3
 8007466:	3401      	adds	r4, #1
 8007468:	9305      	str	r3, [sp, #20]
 800746a:	4620      	mov	r0, r4
 800746c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007470:	3a30      	subs	r2, #48	; 0x30
 8007472:	2a09      	cmp	r2, #9
 8007474:	d903      	bls.n	800747e <_svfiprintf_r+0x1a6>
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0c6      	beq.n	8007408 <_svfiprintf_r+0x130>
 800747a:	9105      	str	r1, [sp, #20]
 800747c:	e7c4      	b.n	8007408 <_svfiprintf_r+0x130>
 800747e:	4604      	mov	r4, r0
 8007480:	2301      	movs	r3, #1
 8007482:	fb0c 2101 	mla	r1, ip, r1, r2
 8007486:	e7f0      	b.n	800746a <_svfiprintf_r+0x192>
 8007488:	ab03      	add	r3, sp, #12
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	462a      	mov	r2, r5
 800748e:	4638      	mov	r0, r7
 8007490:	4b0f      	ldr	r3, [pc, #60]	; (80074d0 <_svfiprintf_r+0x1f8>)
 8007492:	a904      	add	r1, sp, #16
 8007494:	f7fc fc9c 	bl	8003dd0 <_printf_float>
 8007498:	1c42      	adds	r2, r0, #1
 800749a:	4606      	mov	r6, r0
 800749c:	d1d6      	bne.n	800744c <_svfiprintf_r+0x174>
 800749e:	89ab      	ldrh	r3, [r5, #12]
 80074a0:	065b      	lsls	r3, r3, #25
 80074a2:	f53f af2d 	bmi.w	8007300 <_svfiprintf_r+0x28>
 80074a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074a8:	b01d      	add	sp, #116	; 0x74
 80074aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ae:	ab03      	add	r3, sp, #12
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	462a      	mov	r2, r5
 80074b4:	4638      	mov	r0, r7
 80074b6:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <_svfiprintf_r+0x1f8>)
 80074b8:	a904      	add	r1, sp, #16
 80074ba:	f7fc ff29 	bl	8004310 <_printf_i>
 80074be:	e7eb      	b.n	8007498 <_svfiprintf_r+0x1c0>
 80074c0:	080087f1 	.word	0x080087f1
 80074c4:	080087f7 	.word	0x080087f7
 80074c8:	080087fb 	.word	0x080087fb
 80074cc:	08003dd1 	.word	0x08003dd1
 80074d0:	08007225 	.word	0x08007225

080074d4 <__sfputc_r>:
 80074d4:	6893      	ldr	r3, [r2, #8]
 80074d6:	b410      	push	{r4}
 80074d8:	3b01      	subs	r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	6093      	str	r3, [r2, #8]
 80074de:	da07      	bge.n	80074f0 <__sfputc_r+0x1c>
 80074e0:	6994      	ldr	r4, [r2, #24]
 80074e2:	42a3      	cmp	r3, r4
 80074e4:	db01      	blt.n	80074ea <__sfputc_r+0x16>
 80074e6:	290a      	cmp	r1, #10
 80074e8:	d102      	bne.n	80074f0 <__sfputc_r+0x1c>
 80074ea:	bc10      	pop	{r4}
 80074ec:	f000 b9de 	b.w	80078ac <__swbuf_r>
 80074f0:	6813      	ldr	r3, [r2, #0]
 80074f2:	1c58      	adds	r0, r3, #1
 80074f4:	6010      	str	r0, [r2, #0]
 80074f6:	7019      	strb	r1, [r3, #0]
 80074f8:	4608      	mov	r0, r1
 80074fa:	bc10      	pop	{r4}
 80074fc:	4770      	bx	lr

080074fe <__sfputs_r>:
 80074fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007500:	4606      	mov	r6, r0
 8007502:	460f      	mov	r7, r1
 8007504:	4614      	mov	r4, r2
 8007506:	18d5      	adds	r5, r2, r3
 8007508:	42ac      	cmp	r4, r5
 800750a:	d101      	bne.n	8007510 <__sfputs_r+0x12>
 800750c:	2000      	movs	r0, #0
 800750e:	e007      	b.n	8007520 <__sfputs_r+0x22>
 8007510:	463a      	mov	r2, r7
 8007512:	4630      	mov	r0, r6
 8007514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007518:	f7ff ffdc 	bl	80074d4 <__sfputc_r>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d1f3      	bne.n	8007508 <__sfputs_r+0xa>
 8007520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007524 <_vfiprintf_r>:
 8007524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007528:	460d      	mov	r5, r1
 800752a:	4614      	mov	r4, r2
 800752c:	4698      	mov	r8, r3
 800752e:	4606      	mov	r6, r0
 8007530:	b09d      	sub	sp, #116	; 0x74
 8007532:	b118      	cbz	r0, 800753c <_vfiprintf_r+0x18>
 8007534:	6a03      	ldr	r3, [r0, #32]
 8007536:	b90b      	cbnz	r3, 800753c <_vfiprintf_r+0x18>
 8007538:	f7fd fa94 	bl	8004a64 <__sinit>
 800753c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800753e:	07d9      	lsls	r1, r3, #31
 8007540:	d405      	bmi.n	800754e <_vfiprintf_r+0x2a>
 8007542:	89ab      	ldrh	r3, [r5, #12]
 8007544:	059a      	lsls	r2, r3, #22
 8007546:	d402      	bmi.n	800754e <_vfiprintf_r+0x2a>
 8007548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800754a:	f7fd fbb3 	bl	8004cb4 <__retarget_lock_acquire_recursive>
 800754e:	89ab      	ldrh	r3, [r5, #12]
 8007550:	071b      	lsls	r3, r3, #28
 8007552:	d501      	bpl.n	8007558 <_vfiprintf_r+0x34>
 8007554:	692b      	ldr	r3, [r5, #16]
 8007556:	b99b      	cbnz	r3, 8007580 <_vfiprintf_r+0x5c>
 8007558:	4629      	mov	r1, r5
 800755a:	4630      	mov	r0, r6
 800755c:	f000 f9e4 	bl	8007928 <__swsetup_r>
 8007560:	b170      	cbz	r0, 8007580 <_vfiprintf_r+0x5c>
 8007562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007564:	07dc      	lsls	r4, r3, #31
 8007566:	d504      	bpl.n	8007572 <_vfiprintf_r+0x4e>
 8007568:	f04f 30ff 	mov.w	r0, #4294967295
 800756c:	b01d      	add	sp, #116	; 0x74
 800756e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007572:	89ab      	ldrh	r3, [r5, #12]
 8007574:	0598      	lsls	r0, r3, #22
 8007576:	d4f7      	bmi.n	8007568 <_vfiprintf_r+0x44>
 8007578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800757a:	f7fd fb9c 	bl	8004cb6 <__retarget_lock_release_recursive>
 800757e:	e7f3      	b.n	8007568 <_vfiprintf_r+0x44>
 8007580:	2300      	movs	r3, #0
 8007582:	9309      	str	r3, [sp, #36]	; 0x24
 8007584:	2320      	movs	r3, #32
 8007586:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800758a:	2330      	movs	r3, #48	; 0x30
 800758c:	f04f 0901 	mov.w	r9, #1
 8007590:	f8cd 800c 	str.w	r8, [sp, #12]
 8007594:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007744 <_vfiprintf_r+0x220>
 8007598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800759c:	4623      	mov	r3, r4
 800759e:	469a      	mov	sl, r3
 80075a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075a4:	b10a      	cbz	r2, 80075aa <_vfiprintf_r+0x86>
 80075a6:	2a25      	cmp	r2, #37	; 0x25
 80075a8:	d1f9      	bne.n	800759e <_vfiprintf_r+0x7a>
 80075aa:	ebba 0b04 	subs.w	fp, sl, r4
 80075ae:	d00b      	beq.n	80075c8 <_vfiprintf_r+0xa4>
 80075b0:	465b      	mov	r3, fp
 80075b2:	4622      	mov	r2, r4
 80075b4:	4629      	mov	r1, r5
 80075b6:	4630      	mov	r0, r6
 80075b8:	f7ff ffa1 	bl	80074fe <__sfputs_r>
 80075bc:	3001      	adds	r0, #1
 80075be:	f000 80a9 	beq.w	8007714 <_vfiprintf_r+0x1f0>
 80075c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075c4:	445a      	add	r2, fp
 80075c6:	9209      	str	r2, [sp, #36]	; 0x24
 80075c8:	f89a 3000 	ldrb.w	r3, [sl]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 80a1 	beq.w	8007714 <_vfiprintf_r+0x1f0>
 80075d2:	2300      	movs	r3, #0
 80075d4:	f04f 32ff 	mov.w	r2, #4294967295
 80075d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075dc:	f10a 0a01 	add.w	sl, sl, #1
 80075e0:	9304      	str	r3, [sp, #16]
 80075e2:	9307      	str	r3, [sp, #28]
 80075e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075e8:	931a      	str	r3, [sp, #104]	; 0x68
 80075ea:	4654      	mov	r4, sl
 80075ec:	2205      	movs	r2, #5
 80075ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f2:	4854      	ldr	r0, [pc, #336]	; (8007744 <_vfiprintf_r+0x220>)
 80075f4:	f7fd fb60 	bl	8004cb8 <memchr>
 80075f8:	9a04      	ldr	r2, [sp, #16]
 80075fa:	b9d8      	cbnz	r0, 8007634 <_vfiprintf_r+0x110>
 80075fc:	06d1      	lsls	r1, r2, #27
 80075fe:	bf44      	itt	mi
 8007600:	2320      	movmi	r3, #32
 8007602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007606:	0713      	lsls	r3, r2, #28
 8007608:	bf44      	itt	mi
 800760a:	232b      	movmi	r3, #43	; 0x2b
 800760c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007610:	f89a 3000 	ldrb.w	r3, [sl]
 8007614:	2b2a      	cmp	r3, #42	; 0x2a
 8007616:	d015      	beq.n	8007644 <_vfiprintf_r+0x120>
 8007618:	4654      	mov	r4, sl
 800761a:	2000      	movs	r0, #0
 800761c:	f04f 0c0a 	mov.w	ip, #10
 8007620:	9a07      	ldr	r2, [sp, #28]
 8007622:	4621      	mov	r1, r4
 8007624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007628:	3b30      	subs	r3, #48	; 0x30
 800762a:	2b09      	cmp	r3, #9
 800762c:	d94d      	bls.n	80076ca <_vfiprintf_r+0x1a6>
 800762e:	b1b0      	cbz	r0, 800765e <_vfiprintf_r+0x13a>
 8007630:	9207      	str	r2, [sp, #28]
 8007632:	e014      	b.n	800765e <_vfiprintf_r+0x13a>
 8007634:	eba0 0308 	sub.w	r3, r0, r8
 8007638:	fa09 f303 	lsl.w	r3, r9, r3
 800763c:	4313      	orrs	r3, r2
 800763e:	46a2      	mov	sl, r4
 8007640:	9304      	str	r3, [sp, #16]
 8007642:	e7d2      	b.n	80075ea <_vfiprintf_r+0xc6>
 8007644:	9b03      	ldr	r3, [sp, #12]
 8007646:	1d19      	adds	r1, r3, #4
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	9103      	str	r1, [sp, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	bfbb      	ittet	lt
 8007650:	425b      	neglt	r3, r3
 8007652:	f042 0202 	orrlt.w	r2, r2, #2
 8007656:	9307      	strge	r3, [sp, #28]
 8007658:	9307      	strlt	r3, [sp, #28]
 800765a:	bfb8      	it	lt
 800765c:	9204      	strlt	r2, [sp, #16]
 800765e:	7823      	ldrb	r3, [r4, #0]
 8007660:	2b2e      	cmp	r3, #46	; 0x2e
 8007662:	d10c      	bne.n	800767e <_vfiprintf_r+0x15a>
 8007664:	7863      	ldrb	r3, [r4, #1]
 8007666:	2b2a      	cmp	r3, #42	; 0x2a
 8007668:	d134      	bne.n	80076d4 <_vfiprintf_r+0x1b0>
 800766a:	9b03      	ldr	r3, [sp, #12]
 800766c:	3402      	adds	r4, #2
 800766e:	1d1a      	adds	r2, r3, #4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	9203      	str	r2, [sp, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	bfb8      	it	lt
 8007678:	f04f 33ff 	movlt.w	r3, #4294967295
 800767c:	9305      	str	r3, [sp, #20]
 800767e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007748 <_vfiprintf_r+0x224>
 8007682:	2203      	movs	r2, #3
 8007684:	4650      	mov	r0, sl
 8007686:	7821      	ldrb	r1, [r4, #0]
 8007688:	f7fd fb16 	bl	8004cb8 <memchr>
 800768c:	b138      	cbz	r0, 800769e <_vfiprintf_r+0x17a>
 800768e:	2240      	movs	r2, #64	; 0x40
 8007690:	9b04      	ldr	r3, [sp, #16]
 8007692:	eba0 000a 	sub.w	r0, r0, sl
 8007696:	4082      	lsls	r2, r0
 8007698:	4313      	orrs	r3, r2
 800769a:	3401      	adds	r4, #1
 800769c:	9304      	str	r3, [sp, #16]
 800769e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a2:	2206      	movs	r2, #6
 80076a4:	4829      	ldr	r0, [pc, #164]	; (800774c <_vfiprintf_r+0x228>)
 80076a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076aa:	f7fd fb05 	bl	8004cb8 <memchr>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d03f      	beq.n	8007732 <_vfiprintf_r+0x20e>
 80076b2:	4b27      	ldr	r3, [pc, #156]	; (8007750 <_vfiprintf_r+0x22c>)
 80076b4:	bb1b      	cbnz	r3, 80076fe <_vfiprintf_r+0x1da>
 80076b6:	9b03      	ldr	r3, [sp, #12]
 80076b8:	3307      	adds	r3, #7
 80076ba:	f023 0307 	bic.w	r3, r3, #7
 80076be:	3308      	adds	r3, #8
 80076c0:	9303      	str	r3, [sp, #12]
 80076c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c4:	443b      	add	r3, r7
 80076c6:	9309      	str	r3, [sp, #36]	; 0x24
 80076c8:	e768      	b.n	800759c <_vfiprintf_r+0x78>
 80076ca:	460c      	mov	r4, r1
 80076cc:	2001      	movs	r0, #1
 80076ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80076d2:	e7a6      	b.n	8007622 <_vfiprintf_r+0xfe>
 80076d4:	2300      	movs	r3, #0
 80076d6:	f04f 0c0a 	mov.w	ip, #10
 80076da:	4619      	mov	r1, r3
 80076dc:	3401      	adds	r4, #1
 80076de:	9305      	str	r3, [sp, #20]
 80076e0:	4620      	mov	r0, r4
 80076e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076e6:	3a30      	subs	r2, #48	; 0x30
 80076e8:	2a09      	cmp	r2, #9
 80076ea:	d903      	bls.n	80076f4 <_vfiprintf_r+0x1d0>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0c6      	beq.n	800767e <_vfiprintf_r+0x15a>
 80076f0:	9105      	str	r1, [sp, #20]
 80076f2:	e7c4      	b.n	800767e <_vfiprintf_r+0x15a>
 80076f4:	4604      	mov	r4, r0
 80076f6:	2301      	movs	r3, #1
 80076f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80076fc:	e7f0      	b.n	80076e0 <_vfiprintf_r+0x1bc>
 80076fe:	ab03      	add	r3, sp, #12
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	462a      	mov	r2, r5
 8007704:	4630      	mov	r0, r6
 8007706:	4b13      	ldr	r3, [pc, #76]	; (8007754 <_vfiprintf_r+0x230>)
 8007708:	a904      	add	r1, sp, #16
 800770a:	f7fc fb61 	bl	8003dd0 <_printf_float>
 800770e:	4607      	mov	r7, r0
 8007710:	1c78      	adds	r0, r7, #1
 8007712:	d1d6      	bne.n	80076c2 <_vfiprintf_r+0x19e>
 8007714:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007716:	07d9      	lsls	r1, r3, #31
 8007718:	d405      	bmi.n	8007726 <_vfiprintf_r+0x202>
 800771a:	89ab      	ldrh	r3, [r5, #12]
 800771c:	059a      	lsls	r2, r3, #22
 800771e:	d402      	bmi.n	8007726 <_vfiprintf_r+0x202>
 8007720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007722:	f7fd fac8 	bl	8004cb6 <__retarget_lock_release_recursive>
 8007726:	89ab      	ldrh	r3, [r5, #12]
 8007728:	065b      	lsls	r3, r3, #25
 800772a:	f53f af1d 	bmi.w	8007568 <_vfiprintf_r+0x44>
 800772e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007730:	e71c      	b.n	800756c <_vfiprintf_r+0x48>
 8007732:	ab03      	add	r3, sp, #12
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	462a      	mov	r2, r5
 8007738:	4630      	mov	r0, r6
 800773a:	4b06      	ldr	r3, [pc, #24]	; (8007754 <_vfiprintf_r+0x230>)
 800773c:	a904      	add	r1, sp, #16
 800773e:	f7fc fde7 	bl	8004310 <_printf_i>
 8007742:	e7e4      	b.n	800770e <_vfiprintf_r+0x1ea>
 8007744:	080087f1 	.word	0x080087f1
 8007748:	080087f7 	.word	0x080087f7
 800774c:	080087fb 	.word	0x080087fb
 8007750:	08003dd1 	.word	0x08003dd1
 8007754:	080074ff 	.word	0x080074ff

08007758 <__sflush_r>:
 8007758:	898a      	ldrh	r2, [r1, #12]
 800775a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775c:	4605      	mov	r5, r0
 800775e:	0710      	lsls	r0, r2, #28
 8007760:	460c      	mov	r4, r1
 8007762:	d457      	bmi.n	8007814 <__sflush_r+0xbc>
 8007764:	684b      	ldr	r3, [r1, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	dc04      	bgt.n	8007774 <__sflush_r+0x1c>
 800776a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	dc01      	bgt.n	8007774 <__sflush_r+0x1c>
 8007770:	2000      	movs	r0, #0
 8007772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007774:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007776:	2e00      	cmp	r6, #0
 8007778:	d0fa      	beq.n	8007770 <__sflush_r+0x18>
 800777a:	2300      	movs	r3, #0
 800777c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007780:	682f      	ldr	r7, [r5, #0]
 8007782:	6a21      	ldr	r1, [r4, #32]
 8007784:	602b      	str	r3, [r5, #0]
 8007786:	d032      	beq.n	80077ee <__sflush_r+0x96>
 8007788:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800778a:	89a3      	ldrh	r3, [r4, #12]
 800778c:	075a      	lsls	r2, r3, #29
 800778e:	d505      	bpl.n	800779c <__sflush_r+0x44>
 8007790:	6863      	ldr	r3, [r4, #4]
 8007792:	1ac0      	subs	r0, r0, r3
 8007794:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007796:	b10b      	cbz	r3, 800779c <__sflush_r+0x44>
 8007798:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800779a:	1ac0      	subs	r0, r0, r3
 800779c:	2300      	movs	r3, #0
 800779e:	4602      	mov	r2, r0
 80077a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077a2:	4628      	mov	r0, r5
 80077a4:	6a21      	ldr	r1, [r4, #32]
 80077a6:	47b0      	blx	r6
 80077a8:	1c43      	adds	r3, r0, #1
 80077aa:	89a3      	ldrh	r3, [r4, #12]
 80077ac:	d106      	bne.n	80077bc <__sflush_r+0x64>
 80077ae:	6829      	ldr	r1, [r5, #0]
 80077b0:	291d      	cmp	r1, #29
 80077b2:	d82b      	bhi.n	800780c <__sflush_r+0xb4>
 80077b4:	4a28      	ldr	r2, [pc, #160]	; (8007858 <__sflush_r+0x100>)
 80077b6:	410a      	asrs	r2, r1
 80077b8:	07d6      	lsls	r6, r2, #31
 80077ba:	d427      	bmi.n	800780c <__sflush_r+0xb4>
 80077bc:	2200      	movs	r2, #0
 80077be:	6062      	str	r2, [r4, #4]
 80077c0:	6922      	ldr	r2, [r4, #16]
 80077c2:	04d9      	lsls	r1, r3, #19
 80077c4:	6022      	str	r2, [r4, #0]
 80077c6:	d504      	bpl.n	80077d2 <__sflush_r+0x7a>
 80077c8:	1c42      	adds	r2, r0, #1
 80077ca:	d101      	bne.n	80077d0 <__sflush_r+0x78>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	b903      	cbnz	r3, 80077d2 <__sflush_r+0x7a>
 80077d0:	6560      	str	r0, [r4, #84]	; 0x54
 80077d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077d4:	602f      	str	r7, [r5, #0]
 80077d6:	2900      	cmp	r1, #0
 80077d8:	d0ca      	beq.n	8007770 <__sflush_r+0x18>
 80077da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077de:	4299      	cmp	r1, r3
 80077e0:	d002      	beq.n	80077e8 <__sflush_r+0x90>
 80077e2:	4628      	mov	r0, r5
 80077e4:	f7fe f8e8 	bl	80059b8 <_free_r>
 80077e8:	2000      	movs	r0, #0
 80077ea:	6360      	str	r0, [r4, #52]	; 0x34
 80077ec:	e7c1      	b.n	8007772 <__sflush_r+0x1a>
 80077ee:	2301      	movs	r3, #1
 80077f0:	4628      	mov	r0, r5
 80077f2:	47b0      	blx	r6
 80077f4:	1c41      	adds	r1, r0, #1
 80077f6:	d1c8      	bne.n	800778a <__sflush_r+0x32>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0c5      	beq.n	800778a <__sflush_r+0x32>
 80077fe:	2b1d      	cmp	r3, #29
 8007800:	d001      	beq.n	8007806 <__sflush_r+0xae>
 8007802:	2b16      	cmp	r3, #22
 8007804:	d101      	bne.n	800780a <__sflush_r+0xb2>
 8007806:	602f      	str	r7, [r5, #0]
 8007808:	e7b2      	b.n	8007770 <__sflush_r+0x18>
 800780a:	89a3      	ldrh	r3, [r4, #12]
 800780c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007810:	81a3      	strh	r3, [r4, #12]
 8007812:	e7ae      	b.n	8007772 <__sflush_r+0x1a>
 8007814:	690f      	ldr	r7, [r1, #16]
 8007816:	2f00      	cmp	r7, #0
 8007818:	d0aa      	beq.n	8007770 <__sflush_r+0x18>
 800781a:	0793      	lsls	r3, r2, #30
 800781c:	bf18      	it	ne
 800781e:	2300      	movne	r3, #0
 8007820:	680e      	ldr	r6, [r1, #0]
 8007822:	bf08      	it	eq
 8007824:	694b      	ldreq	r3, [r1, #20]
 8007826:	1bf6      	subs	r6, r6, r7
 8007828:	600f      	str	r7, [r1, #0]
 800782a:	608b      	str	r3, [r1, #8]
 800782c:	2e00      	cmp	r6, #0
 800782e:	dd9f      	ble.n	8007770 <__sflush_r+0x18>
 8007830:	4633      	mov	r3, r6
 8007832:	463a      	mov	r2, r7
 8007834:	4628      	mov	r0, r5
 8007836:	6a21      	ldr	r1, [r4, #32]
 8007838:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800783c:	47e0      	blx	ip
 800783e:	2800      	cmp	r0, #0
 8007840:	dc06      	bgt.n	8007850 <__sflush_r+0xf8>
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	f04f 30ff 	mov.w	r0, #4294967295
 8007848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800784c:	81a3      	strh	r3, [r4, #12]
 800784e:	e790      	b.n	8007772 <__sflush_r+0x1a>
 8007850:	4407      	add	r7, r0
 8007852:	1a36      	subs	r6, r6, r0
 8007854:	e7ea      	b.n	800782c <__sflush_r+0xd4>
 8007856:	bf00      	nop
 8007858:	dfbffffe 	.word	0xdfbffffe

0800785c <_fflush_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	690b      	ldr	r3, [r1, #16]
 8007860:	4605      	mov	r5, r0
 8007862:	460c      	mov	r4, r1
 8007864:	b913      	cbnz	r3, 800786c <_fflush_r+0x10>
 8007866:	2500      	movs	r5, #0
 8007868:	4628      	mov	r0, r5
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	b118      	cbz	r0, 8007876 <_fflush_r+0x1a>
 800786e:	6a03      	ldr	r3, [r0, #32]
 8007870:	b90b      	cbnz	r3, 8007876 <_fflush_r+0x1a>
 8007872:	f7fd f8f7 	bl	8004a64 <__sinit>
 8007876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0f3      	beq.n	8007866 <_fflush_r+0xa>
 800787e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007880:	07d0      	lsls	r0, r2, #31
 8007882:	d404      	bmi.n	800788e <_fflush_r+0x32>
 8007884:	0599      	lsls	r1, r3, #22
 8007886:	d402      	bmi.n	800788e <_fflush_r+0x32>
 8007888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800788a:	f7fd fa13 	bl	8004cb4 <__retarget_lock_acquire_recursive>
 800788e:	4628      	mov	r0, r5
 8007890:	4621      	mov	r1, r4
 8007892:	f7ff ff61 	bl	8007758 <__sflush_r>
 8007896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007898:	4605      	mov	r5, r0
 800789a:	07da      	lsls	r2, r3, #31
 800789c:	d4e4      	bmi.n	8007868 <_fflush_r+0xc>
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	059b      	lsls	r3, r3, #22
 80078a2:	d4e1      	bmi.n	8007868 <_fflush_r+0xc>
 80078a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078a6:	f7fd fa06 	bl	8004cb6 <__retarget_lock_release_recursive>
 80078aa:	e7dd      	b.n	8007868 <_fflush_r+0xc>

080078ac <__swbuf_r>:
 80078ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ae:	460e      	mov	r6, r1
 80078b0:	4614      	mov	r4, r2
 80078b2:	4605      	mov	r5, r0
 80078b4:	b118      	cbz	r0, 80078be <__swbuf_r+0x12>
 80078b6:	6a03      	ldr	r3, [r0, #32]
 80078b8:	b90b      	cbnz	r3, 80078be <__swbuf_r+0x12>
 80078ba:	f7fd f8d3 	bl	8004a64 <__sinit>
 80078be:	69a3      	ldr	r3, [r4, #24]
 80078c0:	60a3      	str	r3, [r4, #8]
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	071a      	lsls	r2, r3, #28
 80078c6:	d525      	bpl.n	8007914 <__swbuf_r+0x68>
 80078c8:	6923      	ldr	r3, [r4, #16]
 80078ca:	b31b      	cbz	r3, 8007914 <__swbuf_r+0x68>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	6922      	ldr	r2, [r4, #16]
 80078d0:	b2f6      	uxtb	r6, r6
 80078d2:	1a98      	subs	r0, r3, r2
 80078d4:	6963      	ldr	r3, [r4, #20]
 80078d6:	4637      	mov	r7, r6
 80078d8:	4283      	cmp	r3, r0
 80078da:	dc04      	bgt.n	80078e6 <__swbuf_r+0x3a>
 80078dc:	4621      	mov	r1, r4
 80078de:	4628      	mov	r0, r5
 80078e0:	f7ff ffbc 	bl	800785c <_fflush_r>
 80078e4:	b9e0      	cbnz	r0, 8007920 <__swbuf_r+0x74>
 80078e6:	68a3      	ldr	r3, [r4, #8]
 80078e8:	3b01      	subs	r3, #1
 80078ea:	60a3      	str	r3, [r4, #8]
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	6022      	str	r2, [r4, #0]
 80078f2:	701e      	strb	r6, [r3, #0]
 80078f4:	6962      	ldr	r2, [r4, #20]
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d004      	beq.n	8007906 <__swbuf_r+0x5a>
 80078fc:	89a3      	ldrh	r3, [r4, #12]
 80078fe:	07db      	lsls	r3, r3, #31
 8007900:	d506      	bpl.n	8007910 <__swbuf_r+0x64>
 8007902:	2e0a      	cmp	r6, #10
 8007904:	d104      	bne.n	8007910 <__swbuf_r+0x64>
 8007906:	4621      	mov	r1, r4
 8007908:	4628      	mov	r0, r5
 800790a:	f7ff ffa7 	bl	800785c <_fflush_r>
 800790e:	b938      	cbnz	r0, 8007920 <__swbuf_r+0x74>
 8007910:	4638      	mov	r0, r7
 8007912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007914:	4621      	mov	r1, r4
 8007916:	4628      	mov	r0, r5
 8007918:	f000 f806 	bl	8007928 <__swsetup_r>
 800791c:	2800      	cmp	r0, #0
 800791e:	d0d5      	beq.n	80078cc <__swbuf_r+0x20>
 8007920:	f04f 37ff 	mov.w	r7, #4294967295
 8007924:	e7f4      	b.n	8007910 <__swbuf_r+0x64>
	...

08007928 <__swsetup_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4b2a      	ldr	r3, [pc, #168]	; (80079d4 <__swsetup_r+0xac>)
 800792c:	4605      	mov	r5, r0
 800792e:	6818      	ldr	r0, [r3, #0]
 8007930:	460c      	mov	r4, r1
 8007932:	b118      	cbz	r0, 800793c <__swsetup_r+0x14>
 8007934:	6a03      	ldr	r3, [r0, #32]
 8007936:	b90b      	cbnz	r3, 800793c <__swsetup_r+0x14>
 8007938:	f7fd f894 	bl	8004a64 <__sinit>
 800793c:	89a3      	ldrh	r3, [r4, #12]
 800793e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007942:	0718      	lsls	r0, r3, #28
 8007944:	d422      	bmi.n	800798c <__swsetup_r+0x64>
 8007946:	06d9      	lsls	r1, r3, #27
 8007948:	d407      	bmi.n	800795a <__swsetup_r+0x32>
 800794a:	2309      	movs	r3, #9
 800794c:	602b      	str	r3, [r5, #0]
 800794e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007952:	f04f 30ff 	mov.w	r0, #4294967295
 8007956:	81a3      	strh	r3, [r4, #12]
 8007958:	e034      	b.n	80079c4 <__swsetup_r+0x9c>
 800795a:	0758      	lsls	r0, r3, #29
 800795c:	d512      	bpl.n	8007984 <__swsetup_r+0x5c>
 800795e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007960:	b141      	cbz	r1, 8007974 <__swsetup_r+0x4c>
 8007962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007966:	4299      	cmp	r1, r3
 8007968:	d002      	beq.n	8007970 <__swsetup_r+0x48>
 800796a:	4628      	mov	r0, r5
 800796c:	f7fe f824 	bl	80059b8 <_free_r>
 8007970:	2300      	movs	r3, #0
 8007972:	6363      	str	r3, [r4, #52]	; 0x34
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800797a:	81a3      	strh	r3, [r4, #12]
 800797c:	2300      	movs	r3, #0
 800797e:	6063      	str	r3, [r4, #4]
 8007980:	6923      	ldr	r3, [r4, #16]
 8007982:	6023      	str	r3, [r4, #0]
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	f043 0308 	orr.w	r3, r3, #8
 800798a:	81a3      	strh	r3, [r4, #12]
 800798c:	6923      	ldr	r3, [r4, #16]
 800798e:	b94b      	cbnz	r3, 80079a4 <__swsetup_r+0x7c>
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800799a:	d003      	beq.n	80079a4 <__swsetup_r+0x7c>
 800799c:	4621      	mov	r1, r4
 800799e:	4628      	mov	r0, r5
 80079a0:	f000 fc7b 	bl	800829a <__smakebuf_r>
 80079a4:	89a0      	ldrh	r0, [r4, #12]
 80079a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079aa:	f010 0301 	ands.w	r3, r0, #1
 80079ae:	d00a      	beq.n	80079c6 <__swsetup_r+0x9e>
 80079b0:	2300      	movs	r3, #0
 80079b2:	60a3      	str	r3, [r4, #8]
 80079b4:	6963      	ldr	r3, [r4, #20]
 80079b6:	425b      	negs	r3, r3
 80079b8:	61a3      	str	r3, [r4, #24]
 80079ba:	6923      	ldr	r3, [r4, #16]
 80079bc:	b943      	cbnz	r3, 80079d0 <__swsetup_r+0xa8>
 80079be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079c2:	d1c4      	bne.n	800794e <__swsetup_r+0x26>
 80079c4:	bd38      	pop	{r3, r4, r5, pc}
 80079c6:	0781      	lsls	r1, r0, #30
 80079c8:	bf58      	it	pl
 80079ca:	6963      	ldrpl	r3, [r4, #20]
 80079cc:	60a3      	str	r3, [r4, #8]
 80079ce:	e7f4      	b.n	80079ba <__swsetup_r+0x92>
 80079d0:	2000      	movs	r0, #0
 80079d2:	e7f7      	b.n	80079c4 <__swsetup_r+0x9c>
 80079d4:	20000064 	.word	0x20000064

080079d8 <memmove>:
 80079d8:	4288      	cmp	r0, r1
 80079da:	b510      	push	{r4, lr}
 80079dc:	eb01 0402 	add.w	r4, r1, r2
 80079e0:	d902      	bls.n	80079e8 <memmove+0x10>
 80079e2:	4284      	cmp	r4, r0
 80079e4:	4623      	mov	r3, r4
 80079e6:	d807      	bhi.n	80079f8 <memmove+0x20>
 80079e8:	1e43      	subs	r3, r0, #1
 80079ea:	42a1      	cmp	r1, r4
 80079ec:	d008      	beq.n	8007a00 <memmove+0x28>
 80079ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079f6:	e7f8      	b.n	80079ea <memmove+0x12>
 80079f8:	4601      	mov	r1, r0
 80079fa:	4402      	add	r2, r0
 80079fc:	428a      	cmp	r2, r1
 80079fe:	d100      	bne.n	8007a02 <memmove+0x2a>
 8007a00:	bd10      	pop	{r4, pc}
 8007a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a0a:	e7f7      	b.n	80079fc <memmove+0x24>

08007a0c <strncmp>:
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	b16a      	cbz	r2, 8007a2c <strncmp+0x20>
 8007a10:	3901      	subs	r1, #1
 8007a12:	1884      	adds	r4, r0, r2
 8007a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a18:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d103      	bne.n	8007a28 <strncmp+0x1c>
 8007a20:	42a0      	cmp	r0, r4
 8007a22:	d001      	beq.n	8007a28 <strncmp+0x1c>
 8007a24:	2a00      	cmp	r2, #0
 8007a26:	d1f5      	bne.n	8007a14 <strncmp+0x8>
 8007a28:	1ad0      	subs	r0, r2, r3
 8007a2a:	bd10      	pop	{r4, pc}
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	e7fc      	b.n	8007a2a <strncmp+0x1e>

08007a30 <_sbrk_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	2300      	movs	r3, #0
 8007a34:	4d05      	ldr	r5, [pc, #20]	; (8007a4c <_sbrk_r+0x1c>)
 8007a36:	4604      	mov	r4, r0
 8007a38:	4608      	mov	r0, r1
 8007a3a:	602b      	str	r3, [r5, #0]
 8007a3c:	f7f9 fc48 	bl	80012d0 <_sbrk>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d102      	bne.n	8007a4a <_sbrk_r+0x1a>
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	b103      	cbz	r3, 8007a4a <_sbrk_r+0x1a>
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	bd38      	pop	{r3, r4, r5, pc}
 8007a4c:	200004e8 	.word	0x200004e8

08007a50 <memcpy>:
 8007a50:	440a      	add	r2, r1
 8007a52:	4291      	cmp	r1, r2
 8007a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a58:	d100      	bne.n	8007a5c <memcpy+0xc>
 8007a5a:	4770      	bx	lr
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a62:	4291      	cmp	r1, r2
 8007a64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a68:	d1f9      	bne.n	8007a5e <memcpy+0xe>
 8007a6a:	bd10      	pop	{r4, pc}

08007a6c <nan>:
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	4901      	ldr	r1, [pc, #4]	; (8007a74 <nan+0x8>)
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	7ff80000 	.word	0x7ff80000

08007a78 <__assert_func>:
 8007a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a7a:	4614      	mov	r4, r2
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <__assert_func+0x2c>)
 8007a80:	4605      	mov	r5, r0
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68d8      	ldr	r0, [r3, #12]
 8007a86:	b14c      	cbz	r4, 8007a9c <__assert_func+0x24>
 8007a88:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <__assert_func+0x30>)
 8007a8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a8e:	9100      	str	r1, [sp, #0]
 8007a90:	462b      	mov	r3, r5
 8007a92:	4906      	ldr	r1, [pc, #24]	; (8007aac <__assert_func+0x34>)
 8007a94:	f000 fbca 	bl	800822c <fiprintf>
 8007a98:	f000 fc5e 	bl	8008358 <abort>
 8007a9c:	4b04      	ldr	r3, [pc, #16]	; (8007ab0 <__assert_func+0x38>)
 8007a9e:	461c      	mov	r4, r3
 8007aa0:	e7f3      	b.n	8007a8a <__assert_func+0x12>
 8007aa2:	bf00      	nop
 8007aa4:	20000064 	.word	0x20000064
 8007aa8:	0800880a 	.word	0x0800880a
 8007aac:	08008817 	.word	0x08008817
 8007ab0:	08008845 	.word	0x08008845

08007ab4 <_calloc_r>:
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	fba1 5402 	umull	r5, r4, r1, r2
 8007aba:	b934      	cbnz	r4, 8007aca <_calloc_r+0x16>
 8007abc:	4629      	mov	r1, r5
 8007abe:	f7fd ffeb 	bl	8005a98 <_malloc_r>
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	b928      	cbnz	r0, 8007ad2 <_calloc_r+0x1e>
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	bd70      	pop	{r4, r5, r6, pc}
 8007aca:	220c      	movs	r2, #12
 8007acc:	2600      	movs	r6, #0
 8007ace:	6002      	str	r2, [r0, #0]
 8007ad0:	e7f9      	b.n	8007ac6 <_calloc_r+0x12>
 8007ad2:	462a      	mov	r2, r5
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	f7fd f870 	bl	8004bba <memset>
 8007ada:	e7f4      	b.n	8007ac6 <_calloc_r+0x12>

08007adc <rshift>:
 8007adc:	6903      	ldr	r3, [r0, #16]
 8007ade:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ae2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007ae6:	f100 0414 	add.w	r4, r0, #20
 8007aea:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007aee:	dd46      	ble.n	8007b7e <rshift+0xa2>
 8007af0:	f011 011f 	ands.w	r1, r1, #31
 8007af4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007af8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007afc:	d10c      	bne.n	8007b18 <rshift+0x3c>
 8007afe:	4629      	mov	r1, r5
 8007b00:	f100 0710 	add.w	r7, r0, #16
 8007b04:	42b1      	cmp	r1, r6
 8007b06:	d335      	bcc.n	8007b74 <rshift+0x98>
 8007b08:	1a9b      	subs	r3, r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	1eea      	subs	r2, r5, #3
 8007b0e:	4296      	cmp	r6, r2
 8007b10:	bf38      	it	cc
 8007b12:	2300      	movcc	r3, #0
 8007b14:	4423      	add	r3, r4
 8007b16:	e015      	b.n	8007b44 <rshift+0x68>
 8007b18:	46a1      	mov	r9, r4
 8007b1a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007b1e:	f1c1 0820 	rsb	r8, r1, #32
 8007b22:	40cf      	lsrs	r7, r1
 8007b24:	f105 0e04 	add.w	lr, r5, #4
 8007b28:	4576      	cmp	r6, lr
 8007b2a:	46f4      	mov	ip, lr
 8007b2c:	d816      	bhi.n	8007b5c <rshift+0x80>
 8007b2e:	1a9a      	subs	r2, r3, r2
 8007b30:	0092      	lsls	r2, r2, #2
 8007b32:	3a04      	subs	r2, #4
 8007b34:	3501      	adds	r5, #1
 8007b36:	42ae      	cmp	r6, r5
 8007b38:	bf38      	it	cc
 8007b3a:	2200      	movcc	r2, #0
 8007b3c:	18a3      	adds	r3, r4, r2
 8007b3e:	50a7      	str	r7, [r4, r2]
 8007b40:	b107      	cbz	r7, 8007b44 <rshift+0x68>
 8007b42:	3304      	adds	r3, #4
 8007b44:	42a3      	cmp	r3, r4
 8007b46:	eba3 0204 	sub.w	r2, r3, r4
 8007b4a:	bf08      	it	eq
 8007b4c:	2300      	moveq	r3, #0
 8007b4e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007b52:	6102      	str	r2, [r0, #16]
 8007b54:	bf08      	it	eq
 8007b56:	6143      	streq	r3, [r0, #20]
 8007b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b5c:	f8dc c000 	ldr.w	ip, [ip]
 8007b60:	fa0c fc08 	lsl.w	ip, ip, r8
 8007b64:	ea4c 0707 	orr.w	r7, ip, r7
 8007b68:	f849 7b04 	str.w	r7, [r9], #4
 8007b6c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b70:	40cf      	lsrs	r7, r1
 8007b72:	e7d9      	b.n	8007b28 <rshift+0x4c>
 8007b74:	f851 cb04 	ldr.w	ip, [r1], #4
 8007b78:	f847 cf04 	str.w	ip, [r7, #4]!
 8007b7c:	e7c2      	b.n	8007b04 <rshift+0x28>
 8007b7e:	4623      	mov	r3, r4
 8007b80:	e7e0      	b.n	8007b44 <rshift+0x68>

08007b82 <__hexdig_fun>:
 8007b82:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007b86:	2b09      	cmp	r3, #9
 8007b88:	d802      	bhi.n	8007b90 <__hexdig_fun+0xe>
 8007b8a:	3820      	subs	r0, #32
 8007b8c:	b2c0      	uxtb	r0, r0
 8007b8e:	4770      	bx	lr
 8007b90:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007b94:	2b05      	cmp	r3, #5
 8007b96:	d801      	bhi.n	8007b9c <__hexdig_fun+0x1a>
 8007b98:	3847      	subs	r0, #71	; 0x47
 8007b9a:	e7f7      	b.n	8007b8c <__hexdig_fun+0xa>
 8007b9c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007ba0:	2b05      	cmp	r3, #5
 8007ba2:	d801      	bhi.n	8007ba8 <__hexdig_fun+0x26>
 8007ba4:	3827      	subs	r0, #39	; 0x27
 8007ba6:	e7f1      	b.n	8007b8c <__hexdig_fun+0xa>
 8007ba8:	2000      	movs	r0, #0
 8007baa:	4770      	bx	lr

08007bac <__gethex>:
 8007bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb0:	4681      	mov	r9, r0
 8007bb2:	468a      	mov	sl, r1
 8007bb4:	4617      	mov	r7, r2
 8007bb6:	680a      	ldr	r2, [r1, #0]
 8007bb8:	b085      	sub	sp, #20
 8007bba:	f102 0b02 	add.w	fp, r2, #2
 8007bbe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007bc2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007bc6:	9302      	str	r3, [sp, #8]
 8007bc8:	32fe      	adds	r2, #254	; 0xfe
 8007bca:	eb02 030b 	add.w	r3, r2, fp
 8007bce:	46d8      	mov	r8, fp
 8007bd0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	2830      	cmp	r0, #48	; 0x30
 8007bd8:	d0f7      	beq.n	8007bca <__gethex+0x1e>
 8007bda:	f7ff ffd2 	bl	8007b82 <__hexdig_fun>
 8007bde:	4604      	mov	r4, r0
 8007be0:	2800      	cmp	r0, #0
 8007be2:	d138      	bne.n	8007c56 <__gethex+0xaa>
 8007be4:	2201      	movs	r2, #1
 8007be6:	4640      	mov	r0, r8
 8007be8:	49a7      	ldr	r1, [pc, #668]	; (8007e88 <__gethex+0x2dc>)
 8007bea:	f7ff ff0f 	bl	8007a0c <strncmp>
 8007bee:	4606      	mov	r6, r0
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d169      	bne.n	8007cc8 <__gethex+0x11c>
 8007bf4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007bf8:	465d      	mov	r5, fp
 8007bfa:	f7ff ffc2 	bl	8007b82 <__hexdig_fun>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d064      	beq.n	8007ccc <__gethex+0x120>
 8007c02:	465a      	mov	r2, fp
 8007c04:	7810      	ldrb	r0, [r2, #0]
 8007c06:	4690      	mov	r8, r2
 8007c08:	2830      	cmp	r0, #48	; 0x30
 8007c0a:	f102 0201 	add.w	r2, r2, #1
 8007c0e:	d0f9      	beq.n	8007c04 <__gethex+0x58>
 8007c10:	f7ff ffb7 	bl	8007b82 <__hexdig_fun>
 8007c14:	2301      	movs	r3, #1
 8007c16:	fab0 f480 	clz	r4, r0
 8007c1a:	465e      	mov	r6, fp
 8007c1c:	0964      	lsrs	r4, r4, #5
 8007c1e:	9301      	str	r3, [sp, #4]
 8007c20:	4642      	mov	r2, r8
 8007c22:	4615      	mov	r5, r2
 8007c24:	7828      	ldrb	r0, [r5, #0]
 8007c26:	3201      	adds	r2, #1
 8007c28:	f7ff ffab 	bl	8007b82 <__hexdig_fun>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d1f8      	bne.n	8007c22 <__gethex+0x76>
 8007c30:	2201      	movs	r2, #1
 8007c32:	4628      	mov	r0, r5
 8007c34:	4994      	ldr	r1, [pc, #592]	; (8007e88 <__gethex+0x2dc>)
 8007c36:	f7ff fee9 	bl	8007a0c <strncmp>
 8007c3a:	b978      	cbnz	r0, 8007c5c <__gethex+0xb0>
 8007c3c:	b946      	cbnz	r6, 8007c50 <__gethex+0xa4>
 8007c3e:	1c6e      	adds	r6, r5, #1
 8007c40:	4632      	mov	r2, r6
 8007c42:	4615      	mov	r5, r2
 8007c44:	7828      	ldrb	r0, [r5, #0]
 8007c46:	3201      	adds	r2, #1
 8007c48:	f7ff ff9b 	bl	8007b82 <__hexdig_fun>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d1f8      	bne.n	8007c42 <__gethex+0x96>
 8007c50:	1b73      	subs	r3, r6, r5
 8007c52:	009e      	lsls	r6, r3, #2
 8007c54:	e004      	b.n	8007c60 <__gethex+0xb4>
 8007c56:	2400      	movs	r4, #0
 8007c58:	4626      	mov	r6, r4
 8007c5a:	e7e1      	b.n	8007c20 <__gethex+0x74>
 8007c5c:	2e00      	cmp	r6, #0
 8007c5e:	d1f7      	bne.n	8007c50 <__gethex+0xa4>
 8007c60:	782b      	ldrb	r3, [r5, #0]
 8007c62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c66:	2b50      	cmp	r3, #80	; 0x50
 8007c68:	d13d      	bne.n	8007ce6 <__gethex+0x13a>
 8007c6a:	786b      	ldrb	r3, [r5, #1]
 8007c6c:	2b2b      	cmp	r3, #43	; 0x2b
 8007c6e:	d02f      	beq.n	8007cd0 <__gethex+0x124>
 8007c70:	2b2d      	cmp	r3, #45	; 0x2d
 8007c72:	d031      	beq.n	8007cd8 <__gethex+0x12c>
 8007c74:	f04f 0b00 	mov.w	fp, #0
 8007c78:	1c69      	adds	r1, r5, #1
 8007c7a:	7808      	ldrb	r0, [r1, #0]
 8007c7c:	f7ff ff81 	bl	8007b82 <__hexdig_fun>
 8007c80:	1e42      	subs	r2, r0, #1
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	2a18      	cmp	r2, #24
 8007c86:	d82e      	bhi.n	8007ce6 <__gethex+0x13a>
 8007c88:	f1a0 0210 	sub.w	r2, r0, #16
 8007c8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007c90:	f7ff ff77 	bl	8007b82 <__hexdig_fun>
 8007c94:	f100 3cff 	add.w	ip, r0, #4294967295
 8007c98:	fa5f fc8c 	uxtb.w	ip, ip
 8007c9c:	f1bc 0f18 	cmp.w	ip, #24
 8007ca0:	d91d      	bls.n	8007cde <__gethex+0x132>
 8007ca2:	f1bb 0f00 	cmp.w	fp, #0
 8007ca6:	d000      	beq.n	8007caa <__gethex+0xfe>
 8007ca8:	4252      	negs	r2, r2
 8007caa:	4416      	add	r6, r2
 8007cac:	f8ca 1000 	str.w	r1, [sl]
 8007cb0:	b1dc      	cbz	r4, 8007cea <__gethex+0x13e>
 8007cb2:	9b01      	ldr	r3, [sp, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	bf14      	ite	ne
 8007cb8:	f04f 0800 	movne.w	r8, #0
 8007cbc:	f04f 0806 	moveq.w	r8, #6
 8007cc0:	4640      	mov	r0, r8
 8007cc2:	b005      	add	sp, #20
 8007cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc8:	4645      	mov	r5, r8
 8007cca:	4626      	mov	r6, r4
 8007ccc:	2401      	movs	r4, #1
 8007cce:	e7c7      	b.n	8007c60 <__gethex+0xb4>
 8007cd0:	f04f 0b00 	mov.w	fp, #0
 8007cd4:	1ca9      	adds	r1, r5, #2
 8007cd6:	e7d0      	b.n	8007c7a <__gethex+0xce>
 8007cd8:	f04f 0b01 	mov.w	fp, #1
 8007cdc:	e7fa      	b.n	8007cd4 <__gethex+0x128>
 8007cde:	230a      	movs	r3, #10
 8007ce0:	fb03 0002 	mla	r0, r3, r2, r0
 8007ce4:	e7d0      	b.n	8007c88 <__gethex+0xdc>
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	e7e0      	b.n	8007cac <__gethex+0x100>
 8007cea:	4621      	mov	r1, r4
 8007cec:	eba5 0308 	sub.w	r3, r5, r8
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	2b07      	cmp	r3, #7
 8007cf4:	dc0a      	bgt.n	8007d0c <__gethex+0x160>
 8007cf6:	4648      	mov	r0, r9
 8007cf8:	f7fd ff5a 	bl	8005bb0 <_Balloc>
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	b940      	cbnz	r0, 8007d12 <__gethex+0x166>
 8007d00:	4602      	mov	r2, r0
 8007d02:	21e4      	movs	r1, #228	; 0xe4
 8007d04:	4b61      	ldr	r3, [pc, #388]	; (8007e8c <__gethex+0x2e0>)
 8007d06:	4862      	ldr	r0, [pc, #392]	; (8007e90 <__gethex+0x2e4>)
 8007d08:	f7ff feb6 	bl	8007a78 <__assert_func>
 8007d0c:	3101      	adds	r1, #1
 8007d0e:	105b      	asrs	r3, r3, #1
 8007d10:	e7ef      	b.n	8007cf2 <__gethex+0x146>
 8007d12:	2300      	movs	r3, #0
 8007d14:	469b      	mov	fp, r3
 8007d16:	f100 0a14 	add.w	sl, r0, #20
 8007d1a:	f8cd a004 	str.w	sl, [sp, #4]
 8007d1e:	45a8      	cmp	r8, r5
 8007d20:	d344      	bcc.n	8007dac <__gethex+0x200>
 8007d22:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d26:	4658      	mov	r0, fp
 8007d28:	f848 bb04 	str.w	fp, [r8], #4
 8007d2c:	eba8 080a 	sub.w	r8, r8, sl
 8007d30:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8007d34:	6122      	str	r2, [r4, #16]
 8007d36:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8007d3a:	f7fe f82b 	bl	8005d94 <__hi0bits>
 8007d3e:	683d      	ldr	r5, [r7, #0]
 8007d40:	eba8 0800 	sub.w	r8, r8, r0
 8007d44:	45a8      	cmp	r8, r5
 8007d46:	dd59      	ble.n	8007dfc <__gethex+0x250>
 8007d48:	eba8 0805 	sub.w	r8, r8, r5
 8007d4c:	4641      	mov	r1, r8
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f7fe fba9 	bl	80064a6 <__any_on>
 8007d54:	4683      	mov	fp, r0
 8007d56:	b1b8      	cbz	r0, 8007d88 <__gethex+0x1dc>
 8007d58:	f04f 0b01 	mov.w	fp, #1
 8007d5c:	f108 33ff 	add.w	r3, r8, #4294967295
 8007d60:	1159      	asrs	r1, r3, #5
 8007d62:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007d66:	f003 021f 	and.w	r2, r3, #31
 8007d6a:	fa0b f202 	lsl.w	r2, fp, r2
 8007d6e:	420a      	tst	r2, r1
 8007d70:	d00a      	beq.n	8007d88 <__gethex+0x1dc>
 8007d72:	455b      	cmp	r3, fp
 8007d74:	dd06      	ble.n	8007d84 <__gethex+0x1d8>
 8007d76:	4620      	mov	r0, r4
 8007d78:	f1a8 0102 	sub.w	r1, r8, #2
 8007d7c:	f7fe fb93 	bl	80064a6 <__any_on>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d138      	bne.n	8007df6 <__gethex+0x24a>
 8007d84:	f04f 0b02 	mov.w	fp, #2
 8007d88:	4641      	mov	r1, r8
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f7ff fea6 	bl	8007adc <rshift>
 8007d90:	4446      	add	r6, r8
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	42b3      	cmp	r3, r6
 8007d96:	da41      	bge.n	8007e1c <__gethex+0x270>
 8007d98:	4621      	mov	r1, r4
 8007d9a:	4648      	mov	r0, r9
 8007d9c:	f7fd ff48 	bl	8005c30 <_Bfree>
 8007da0:	2300      	movs	r3, #0
 8007da2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007da4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007da8:	6013      	str	r3, [r2, #0]
 8007daa:	e789      	b.n	8007cc0 <__gethex+0x114>
 8007dac:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007db0:	2a2e      	cmp	r2, #46	; 0x2e
 8007db2:	d014      	beq.n	8007dde <__gethex+0x232>
 8007db4:	2b20      	cmp	r3, #32
 8007db6:	d106      	bne.n	8007dc6 <__gethex+0x21a>
 8007db8:	9b01      	ldr	r3, [sp, #4]
 8007dba:	f843 bb04 	str.w	fp, [r3], #4
 8007dbe:	f04f 0b00 	mov.w	fp, #0
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	465b      	mov	r3, fp
 8007dc6:	7828      	ldrb	r0, [r5, #0]
 8007dc8:	9303      	str	r3, [sp, #12]
 8007dca:	f7ff feda 	bl	8007b82 <__hexdig_fun>
 8007dce:	9b03      	ldr	r3, [sp, #12]
 8007dd0:	f000 000f 	and.w	r0, r0, #15
 8007dd4:	4098      	lsls	r0, r3
 8007dd6:	ea4b 0b00 	orr.w	fp, fp, r0
 8007dda:	3304      	adds	r3, #4
 8007ddc:	e79f      	b.n	8007d1e <__gethex+0x172>
 8007dde:	45a8      	cmp	r8, r5
 8007de0:	d8e8      	bhi.n	8007db4 <__gethex+0x208>
 8007de2:	2201      	movs	r2, #1
 8007de4:	4628      	mov	r0, r5
 8007de6:	4928      	ldr	r1, [pc, #160]	; (8007e88 <__gethex+0x2dc>)
 8007de8:	9303      	str	r3, [sp, #12]
 8007dea:	f7ff fe0f 	bl	8007a0c <strncmp>
 8007dee:	9b03      	ldr	r3, [sp, #12]
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d1df      	bne.n	8007db4 <__gethex+0x208>
 8007df4:	e793      	b.n	8007d1e <__gethex+0x172>
 8007df6:	f04f 0b03 	mov.w	fp, #3
 8007dfa:	e7c5      	b.n	8007d88 <__gethex+0x1dc>
 8007dfc:	da0b      	bge.n	8007e16 <__gethex+0x26a>
 8007dfe:	eba5 0808 	sub.w	r8, r5, r8
 8007e02:	4621      	mov	r1, r4
 8007e04:	4642      	mov	r2, r8
 8007e06:	4648      	mov	r0, r9
 8007e08:	f7fe f92a 	bl	8006060 <__lshift>
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	eba6 0608 	sub.w	r6, r6, r8
 8007e12:	f100 0a14 	add.w	sl, r0, #20
 8007e16:	f04f 0b00 	mov.w	fp, #0
 8007e1a:	e7ba      	b.n	8007d92 <__gethex+0x1e6>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	42b3      	cmp	r3, r6
 8007e20:	dd74      	ble.n	8007f0c <__gethex+0x360>
 8007e22:	1b9e      	subs	r6, r3, r6
 8007e24:	42b5      	cmp	r5, r6
 8007e26:	dc35      	bgt.n	8007e94 <__gethex+0x2e8>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d023      	beq.n	8007e76 <__gethex+0x2ca>
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d025      	beq.n	8007e7e <__gethex+0x2d2>
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d115      	bne.n	8007e62 <__gethex+0x2b6>
 8007e36:	42b5      	cmp	r5, r6
 8007e38:	d113      	bne.n	8007e62 <__gethex+0x2b6>
 8007e3a:	2d01      	cmp	r5, #1
 8007e3c:	d10b      	bne.n	8007e56 <__gethex+0x2aa>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	9a02      	ldr	r2, [sp, #8]
 8007e42:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007e46:	6013      	str	r3, [r2, #0]
 8007e48:	2301      	movs	r3, #1
 8007e4a:	6123      	str	r3, [r4, #16]
 8007e4c:	f8ca 3000 	str.w	r3, [sl]
 8007e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e52:	601c      	str	r4, [r3, #0]
 8007e54:	e734      	b.n	8007cc0 <__gethex+0x114>
 8007e56:	4620      	mov	r0, r4
 8007e58:	1e69      	subs	r1, r5, #1
 8007e5a:	f7fe fb24 	bl	80064a6 <__any_on>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d1ed      	bne.n	8007e3e <__gethex+0x292>
 8007e62:	4621      	mov	r1, r4
 8007e64:	4648      	mov	r0, r9
 8007e66:	f7fd fee3 	bl	8005c30 <_Bfree>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e6e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007e72:	6013      	str	r3, [r2, #0]
 8007e74:	e724      	b.n	8007cc0 <__gethex+0x114>
 8007e76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1f2      	bne.n	8007e62 <__gethex+0x2b6>
 8007e7c:	e7df      	b.n	8007e3e <__gethex+0x292>
 8007e7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1dc      	bne.n	8007e3e <__gethex+0x292>
 8007e84:	e7ed      	b.n	8007e62 <__gethex+0x2b6>
 8007e86:	bf00      	nop
 8007e88:	0800869c 	.word	0x0800869c
 8007e8c:	08008533 	.word	0x08008533
 8007e90:	08008846 	.word	0x08008846
 8007e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8007e98:	f1bb 0f00 	cmp.w	fp, #0
 8007e9c:	d133      	bne.n	8007f06 <__gethex+0x35a>
 8007e9e:	f1b8 0f00 	cmp.w	r8, #0
 8007ea2:	d004      	beq.n	8007eae <__gethex+0x302>
 8007ea4:	4641      	mov	r1, r8
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f7fe fafd 	bl	80064a6 <__any_on>
 8007eac:	4683      	mov	fp, r0
 8007eae:	2301      	movs	r3, #1
 8007eb0:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007eb4:	f008 081f 	and.w	r8, r8, #31
 8007eb8:	fa03 f308 	lsl.w	r3, r3, r8
 8007ebc:	f04f 0802 	mov.w	r8, #2
 8007ec0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007ec4:	4631      	mov	r1, r6
 8007ec6:	4213      	tst	r3, r2
 8007ec8:	4620      	mov	r0, r4
 8007eca:	bf18      	it	ne
 8007ecc:	f04b 0b02 	orrne.w	fp, fp, #2
 8007ed0:	1bad      	subs	r5, r5, r6
 8007ed2:	f7ff fe03 	bl	8007adc <rshift>
 8007ed6:	687e      	ldr	r6, [r7, #4]
 8007ed8:	f1bb 0f00 	cmp.w	fp, #0
 8007edc:	d04a      	beq.n	8007f74 <__gethex+0x3c8>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d016      	beq.n	8007f12 <__gethex+0x366>
 8007ee4:	2b03      	cmp	r3, #3
 8007ee6:	d018      	beq.n	8007f1a <__gethex+0x36e>
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d109      	bne.n	8007f00 <__gethex+0x354>
 8007eec:	f01b 0f02 	tst.w	fp, #2
 8007ef0:	d006      	beq.n	8007f00 <__gethex+0x354>
 8007ef2:	f8da 3000 	ldr.w	r3, [sl]
 8007ef6:	ea4b 0b03 	orr.w	fp, fp, r3
 8007efa:	f01b 0f01 	tst.w	fp, #1
 8007efe:	d10f      	bne.n	8007f20 <__gethex+0x374>
 8007f00:	f048 0810 	orr.w	r8, r8, #16
 8007f04:	e036      	b.n	8007f74 <__gethex+0x3c8>
 8007f06:	f04f 0b01 	mov.w	fp, #1
 8007f0a:	e7d0      	b.n	8007eae <__gethex+0x302>
 8007f0c:	f04f 0801 	mov.w	r8, #1
 8007f10:	e7e2      	b.n	8007ed8 <__gethex+0x32c>
 8007f12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f14:	f1c3 0301 	rsb	r3, r3, #1
 8007f18:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d0ef      	beq.n	8007f00 <__gethex+0x354>
 8007f20:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007f24:	f104 0214 	add.w	r2, r4, #20
 8007f28:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007f34:	4694      	mov	ip, r2
 8007f36:	f852 1b04 	ldr.w	r1, [r2], #4
 8007f3a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007f3e:	d01e      	beq.n	8007f7e <__gethex+0x3d2>
 8007f40:	3101      	adds	r1, #1
 8007f42:	f8cc 1000 	str.w	r1, [ip]
 8007f46:	f1b8 0f02 	cmp.w	r8, #2
 8007f4a:	f104 0214 	add.w	r2, r4, #20
 8007f4e:	d13d      	bne.n	8007fcc <__gethex+0x420>
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	42ab      	cmp	r3, r5
 8007f56:	d10b      	bne.n	8007f70 <__gethex+0x3c4>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	1169      	asrs	r1, r5, #5
 8007f5c:	f005 051f 	and.w	r5, r5, #31
 8007f60:	fa03 f505 	lsl.w	r5, r3, r5
 8007f64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f68:	421d      	tst	r5, r3
 8007f6a:	bf18      	it	ne
 8007f6c:	f04f 0801 	movne.w	r8, #1
 8007f70:	f048 0820 	orr.w	r8, r8, #32
 8007f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f76:	601c      	str	r4, [r3, #0]
 8007f78:	9b02      	ldr	r3, [sp, #8]
 8007f7a:	601e      	str	r6, [r3, #0]
 8007f7c:	e6a0      	b.n	8007cc0 <__gethex+0x114>
 8007f7e:	4290      	cmp	r0, r2
 8007f80:	f842 3c04 	str.w	r3, [r2, #-4]
 8007f84:	d8d6      	bhi.n	8007f34 <__gethex+0x388>
 8007f86:	68a2      	ldr	r2, [r4, #8]
 8007f88:	4593      	cmp	fp, r2
 8007f8a:	db17      	blt.n	8007fbc <__gethex+0x410>
 8007f8c:	6861      	ldr	r1, [r4, #4]
 8007f8e:	4648      	mov	r0, r9
 8007f90:	3101      	adds	r1, #1
 8007f92:	f7fd fe0d 	bl	8005bb0 <_Balloc>
 8007f96:	4682      	mov	sl, r0
 8007f98:	b918      	cbnz	r0, 8007fa2 <__gethex+0x3f6>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	2184      	movs	r1, #132	; 0x84
 8007f9e:	4b1a      	ldr	r3, [pc, #104]	; (8008008 <__gethex+0x45c>)
 8007fa0:	e6b1      	b.n	8007d06 <__gethex+0x15a>
 8007fa2:	6922      	ldr	r2, [r4, #16]
 8007fa4:	f104 010c 	add.w	r1, r4, #12
 8007fa8:	3202      	adds	r2, #2
 8007faa:	0092      	lsls	r2, r2, #2
 8007fac:	300c      	adds	r0, #12
 8007fae:	f7ff fd4f 	bl	8007a50 <memcpy>
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	4648      	mov	r0, r9
 8007fb6:	f7fd fe3b 	bl	8005c30 <_Bfree>
 8007fba:	4654      	mov	r4, sl
 8007fbc:	6922      	ldr	r2, [r4, #16]
 8007fbe:	1c51      	adds	r1, r2, #1
 8007fc0:	6121      	str	r1, [r4, #16]
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007fc8:	6151      	str	r1, [r2, #20]
 8007fca:	e7bc      	b.n	8007f46 <__gethex+0x39a>
 8007fcc:	6921      	ldr	r1, [r4, #16]
 8007fce:	4559      	cmp	r1, fp
 8007fd0:	dd0b      	ble.n	8007fea <__gethex+0x43e>
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f7ff fd81 	bl	8007adc <rshift>
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	3601      	adds	r6, #1
 8007fde:	42b3      	cmp	r3, r6
 8007fe0:	f6ff aeda 	blt.w	8007d98 <__gethex+0x1ec>
 8007fe4:	f04f 0801 	mov.w	r8, #1
 8007fe8:	e7c2      	b.n	8007f70 <__gethex+0x3c4>
 8007fea:	f015 051f 	ands.w	r5, r5, #31
 8007fee:	d0f9      	beq.n	8007fe4 <__gethex+0x438>
 8007ff0:	9b01      	ldr	r3, [sp, #4]
 8007ff2:	f1c5 0520 	rsb	r5, r5, #32
 8007ff6:	441a      	add	r2, r3
 8007ff8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007ffc:	f7fd feca 	bl	8005d94 <__hi0bits>
 8008000:	42a8      	cmp	r0, r5
 8008002:	dbe6      	blt.n	8007fd2 <__gethex+0x426>
 8008004:	e7ee      	b.n	8007fe4 <__gethex+0x438>
 8008006:	bf00      	nop
 8008008:	08008533 	.word	0x08008533

0800800c <L_shift>:
 800800c:	f1c2 0208 	rsb	r2, r2, #8
 8008010:	0092      	lsls	r2, r2, #2
 8008012:	b570      	push	{r4, r5, r6, lr}
 8008014:	f1c2 0620 	rsb	r6, r2, #32
 8008018:	6843      	ldr	r3, [r0, #4]
 800801a:	6804      	ldr	r4, [r0, #0]
 800801c:	fa03 f506 	lsl.w	r5, r3, r6
 8008020:	432c      	orrs	r4, r5
 8008022:	40d3      	lsrs	r3, r2
 8008024:	6004      	str	r4, [r0, #0]
 8008026:	f840 3f04 	str.w	r3, [r0, #4]!
 800802a:	4288      	cmp	r0, r1
 800802c:	d3f4      	bcc.n	8008018 <L_shift+0xc>
 800802e:	bd70      	pop	{r4, r5, r6, pc}

08008030 <__match>:
 8008030:	b530      	push	{r4, r5, lr}
 8008032:	6803      	ldr	r3, [r0, #0]
 8008034:	3301      	adds	r3, #1
 8008036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800803a:	b914      	cbnz	r4, 8008042 <__match+0x12>
 800803c:	6003      	str	r3, [r0, #0]
 800803e:	2001      	movs	r0, #1
 8008040:	bd30      	pop	{r4, r5, pc}
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800804a:	2d19      	cmp	r5, #25
 800804c:	bf98      	it	ls
 800804e:	3220      	addls	r2, #32
 8008050:	42a2      	cmp	r2, r4
 8008052:	d0f0      	beq.n	8008036 <__match+0x6>
 8008054:	2000      	movs	r0, #0
 8008056:	e7f3      	b.n	8008040 <__match+0x10>

08008058 <__hexnan>:
 8008058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805c:	2500      	movs	r5, #0
 800805e:	680b      	ldr	r3, [r1, #0]
 8008060:	4682      	mov	sl, r0
 8008062:	115e      	asrs	r6, r3, #5
 8008064:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008068:	f013 031f 	ands.w	r3, r3, #31
 800806c:	bf18      	it	ne
 800806e:	3604      	addne	r6, #4
 8008070:	1f37      	subs	r7, r6, #4
 8008072:	4690      	mov	r8, r2
 8008074:	46b9      	mov	r9, r7
 8008076:	463c      	mov	r4, r7
 8008078:	46ab      	mov	fp, r5
 800807a:	b087      	sub	sp, #28
 800807c:	6801      	ldr	r1, [r0, #0]
 800807e:	9301      	str	r3, [sp, #4]
 8008080:	f846 5c04 	str.w	r5, [r6, #-4]
 8008084:	9502      	str	r5, [sp, #8]
 8008086:	784a      	ldrb	r2, [r1, #1]
 8008088:	1c4b      	adds	r3, r1, #1
 800808a:	9303      	str	r3, [sp, #12]
 800808c:	b342      	cbz	r2, 80080e0 <__hexnan+0x88>
 800808e:	4610      	mov	r0, r2
 8008090:	9105      	str	r1, [sp, #20]
 8008092:	9204      	str	r2, [sp, #16]
 8008094:	f7ff fd75 	bl	8007b82 <__hexdig_fun>
 8008098:	2800      	cmp	r0, #0
 800809a:	d14f      	bne.n	800813c <__hexnan+0xe4>
 800809c:	9a04      	ldr	r2, [sp, #16]
 800809e:	9905      	ldr	r1, [sp, #20]
 80080a0:	2a20      	cmp	r2, #32
 80080a2:	d818      	bhi.n	80080d6 <__hexnan+0x7e>
 80080a4:	9b02      	ldr	r3, [sp, #8]
 80080a6:	459b      	cmp	fp, r3
 80080a8:	dd13      	ble.n	80080d2 <__hexnan+0x7a>
 80080aa:	454c      	cmp	r4, r9
 80080ac:	d206      	bcs.n	80080bc <__hexnan+0x64>
 80080ae:	2d07      	cmp	r5, #7
 80080b0:	dc04      	bgt.n	80080bc <__hexnan+0x64>
 80080b2:	462a      	mov	r2, r5
 80080b4:	4649      	mov	r1, r9
 80080b6:	4620      	mov	r0, r4
 80080b8:	f7ff ffa8 	bl	800800c <L_shift>
 80080bc:	4544      	cmp	r4, r8
 80080be:	d950      	bls.n	8008162 <__hexnan+0x10a>
 80080c0:	2300      	movs	r3, #0
 80080c2:	f1a4 0904 	sub.w	r9, r4, #4
 80080c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80080ca:	461d      	mov	r5, r3
 80080cc:	464c      	mov	r4, r9
 80080ce:	f8cd b008 	str.w	fp, [sp, #8]
 80080d2:	9903      	ldr	r1, [sp, #12]
 80080d4:	e7d7      	b.n	8008086 <__hexnan+0x2e>
 80080d6:	2a29      	cmp	r2, #41	; 0x29
 80080d8:	d155      	bne.n	8008186 <__hexnan+0x12e>
 80080da:	3102      	adds	r1, #2
 80080dc:	f8ca 1000 	str.w	r1, [sl]
 80080e0:	f1bb 0f00 	cmp.w	fp, #0
 80080e4:	d04f      	beq.n	8008186 <__hexnan+0x12e>
 80080e6:	454c      	cmp	r4, r9
 80080e8:	d206      	bcs.n	80080f8 <__hexnan+0xa0>
 80080ea:	2d07      	cmp	r5, #7
 80080ec:	dc04      	bgt.n	80080f8 <__hexnan+0xa0>
 80080ee:	462a      	mov	r2, r5
 80080f0:	4649      	mov	r1, r9
 80080f2:	4620      	mov	r0, r4
 80080f4:	f7ff ff8a 	bl	800800c <L_shift>
 80080f8:	4544      	cmp	r4, r8
 80080fa:	d934      	bls.n	8008166 <__hexnan+0x10e>
 80080fc:	4623      	mov	r3, r4
 80080fe:	f1a8 0204 	sub.w	r2, r8, #4
 8008102:	f853 1b04 	ldr.w	r1, [r3], #4
 8008106:	429f      	cmp	r7, r3
 8008108:	f842 1f04 	str.w	r1, [r2, #4]!
 800810c:	d2f9      	bcs.n	8008102 <__hexnan+0xaa>
 800810e:	1b3b      	subs	r3, r7, r4
 8008110:	f023 0303 	bic.w	r3, r3, #3
 8008114:	3304      	adds	r3, #4
 8008116:	3e03      	subs	r6, #3
 8008118:	3401      	adds	r4, #1
 800811a:	42a6      	cmp	r6, r4
 800811c:	bf38      	it	cc
 800811e:	2304      	movcc	r3, #4
 8008120:	2200      	movs	r2, #0
 8008122:	4443      	add	r3, r8
 8008124:	f843 2b04 	str.w	r2, [r3], #4
 8008128:	429f      	cmp	r7, r3
 800812a:	d2fb      	bcs.n	8008124 <__hexnan+0xcc>
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	b91b      	cbnz	r3, 8008138 <__hexnan+0xe0>
 8008130:	4547      	cmp	r7, r8
 8008132:	d126      	bne.n	8008182 <__hexnan+0x12a>
 8008134:	2301      	movs	r3, #1
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	2005      	movs	r0, #5
 800813a:	e025      	b.n	8008188 <__hexnan+0x130>
 800813c:	3501      	adds	r5, #1
 800813e:	2d08      	cmp	r5, #8
 8008140:	f10b 0b01 	add.w	fp, fp, #1
 8008144:	dd06      	ble.n	8008154 <__hexnan+0xfc>
 8008146:	4544      	cmp	r4, r8
 8008148:	d9c3      	bls.n	80080d2 <__hexnan+0x7a>
 800814a:	2300      	movs	r3, #0
 800814c:	2501      	movs	r5, #1
 800814e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008152:	3c04      	subs	r4, #4
 8008154:	6822      	ldr	r2, [r4, #0]
 8008156:	f000 000f 	and.w	r0, r0, #15
 800815a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800815e:	6020      	str	r0, [r4, #0]
 8008160:	e7b7      	b.n	80080d2 <__hexnan+0x7a>
 8008162:	2508      	movs	r5, #8
 8008164:	e7b5      	b.n	80080d2 <__hexnan+0x7a>
 8008166:	9b01      	ldr	r3, [sp, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d0df      	beq.n	800812c <__hexnan+0xd4>
 800816c:	f04f 32ff 	mov.w	r2, #4294967295
 8008170:	f1c3 0320 	rsb	r3, r3, #32
 8008174:	40da      	lsrs	r2, r3
 8008176:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800817a:	4013      	ands	r3, r2
 800817c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008180:	e7d4      	b.n	800812c <__hexnan+0xd4>
 8008182:	3f04      	subs	r7, #4
 8008184:	e7d2      	b.n	800812c <__hexnan+0xd4>
 8008186:	2004      	movs	r0, #4
 8008188:	b007      	add	sp, #28
 800818a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800818e <__ascii_mbtowc>:
 800818e:	b082      	sub	sp, #8
 8008190:	b901      	cbnz	r1, 8008194 <__ascii_mbtowc+0x6>
 8008192:	a901      	add	r1, sp, #4
 8008194:	b142      	cbz	r2, 80081a8 <__ascii_mbtowc+0x1a>
 8008196:	b14b      	cbz	r3, 80081ac <__ascii_mbtowc+0x1e>
 8008198:	7813      	ldrb	r3, [r2, #0]
 800819a:	600b      	str	r3, [r1, #0]
 800819c:	7812      	ldrb	r2, [r2, #0]
 800819e:	1e10      	subs	r0, r2, #0
 80081a0:	bf18      	it	ne
 80081a2:	2001      	movne	r0, #1
 80081a4:	b002      	add	sp, #8
 80081a6:	4770      	bx	lr
 80081a8:	4610      	mov	r0, r2
 80081aa:	e7fb      	b.n	80081a4 <__ascii_mbtowc+0x16>
 80081ac:	f06f 0001 	mvn.w	r0, #1
 80081b0:	e7f8      	b.n	80081a4 <__ascii_mbtowc+0x16>

080081b2 <_realloc_r>:
 80081b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b6:	4680      	mov	r8, r0
 80081b8:	4614      	mov	r4, r2
 80081ba:	460e      	mov	r6, r1
 80081bc:	b921      	cbnz	r1, 80081c8 <_realloc_r+0x16>
 80081be:	4611      	mov	r1, r2
 80081c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081c4:	f7fd bc68 	b.w	8005a98 <_malloc_r>
 80081c8:	b92a      	cbnz	r2, 80081d6 <_realloc_r+0x24>
 80081ca:	f7fd fbf5 	bl	80059b8 <_free_r>
 80081ce:	4625      	mov	r5, r4
 80081d0:	4628      	mov	r0, r5
 80081d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d6:	f000 f8c6 	bl	8008366 <_malloc_usable_size_r>
 80081da:	4284      	cmp	r4, r0
 80081dc:	4607      	mov	r7, r0
 80081de:	d802      	bhi.n	80081e6 <_realloc_r+0x34>
 80081e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081e4:	d812      	bhi.n	800820c <_realloc_r+0x5a>
 80081e6:	4621      	mov	r1, r4
 80081e8:	4640      	mov	r0, r8
 80081ea:	f7fd fc55 	bl	8005a98 <_malloc_r>
 80081ee:	4605      	mov	r5, r0
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d0ed      	beq.n	80081d0 <_realloc_r+0x1e>
 80081f4:	42bc      	cmp	r4, r7
 80081f6:	4622      	mov	r2, r4
 80081f8:	4631      	mov	r1, r6
 80081fa:	bf28      	it	cs
 80081fc:	463a      	movcs	r2, r7
 80081fe:	f7ff fc27 	bl	8007a50 <memcpy>
 8008202:	4631      	mov	r1, r6
 8008204:	4640      	mov	r0, r8
 8008206:	f7fd fbd7 	bl	80059b8 <_free_r>
 800820a:	e7e1      	b.n	80081d0 <_realloc_r+0x1e>
 800820c:	4635      	mov	r5, r6
 800820e:	e7df      	b.n	80081d0 <_realloc_r+0x1e>

08008210 <__ascii_wctomb>:
 8008210:	4603      	mov	r3, r0
 8008212:	4608      	mov	r0, r1
 8008214:	b141      	cbz	r1, 8008228 <__ascii_wctomb+0x18>
 8008216:	2aff      	cmp	r2, #255	; 0xff
 8008218:	d904      	bls.n	8008224 <__ascii_wctomb+0x14>
 800821a:	228a      	movs	r2, #138	; 0x8a
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	4770      	bx	lr
 8008224:	2001      	movs	r0, #1
 8008226:	700a      	strb	r2, [r1, #0]
 8008228:	4770      	bx	lr
	...

0800822c <fiprintf>:
 800822c:	b40e      	push	{r1, r2, r3}
 800822e:	b503      	push	{r0, r1, lr}
 8008230:	4601      	mov	r1, r0
 8008232:	ab03      	add	r3, sp, #12
 8008234:	4805      	ldr	r0, [pc, #20]	; (800824c <fiprintf+0x20>)
 8008236:	f853 2b04 	ldr.w	r2, [r3], #4
 800823a:	6800      	ldr	r0, [r0, #0]
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	f7ff f971 	bl	8007524 <_vfiprintf_r>
 8008242:	b002      	add	sp, #8
 8008244:	f85d eb04 	ldr.w	lr, [sp], #4
 8008248:	b003      	add	sp, #12
 800824a:	4770      	bx	lr
 800824c:	20000064 	.word	0x20000064

08008250 <__swhatbuf_r>:
 8008250:	b570      	push	{r4, r5, r6, lr}
 8008252:	460c      	mov	r4, r1
 8008254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008258:	4615      	mov	r5, r2
 800825a:	2900      	cmp	r1, #0
 800825c:	461e      	mov	r6, r3
 800825e:	b096      	sub	sp, #88	; 0x58
 8008260:	da0c      	bge.n	800827c <__swhatbuf_r+0x2c>
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	2100      	movs	r1, #0
 8008266:	f013 0f80 	tst.w	r3, #128	; 0x80
 800826a:	bf0c      	ite	eq
 800826c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008270:	2340      	movne	r3, #64	; 0x40
 8008272:	2000      	movs	r0, #0
 8008274:	6031      	str	r1, [r6, #0]
 8008276:	602b      	str	r3, [r5, #0]
 8008278:	b016      	add	sp, #88	; 0x58
 800827a:	bd70      	pop	{r4, r5, r6, pc}
 800827c:	466a      	mov	r2, sp
 800827e:	f000 f849 	bl	8008314 <_fstat_r>
 8008282:	2800      	cmp	r0, #0
 8008284:	dbed      	blt.n	8008262 <__swhatbuf_r+0x12>
 8008286:	9901      	ldr	r1, [sp, #4]
 8008288:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800828c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008290:	4259      	negs	r1, r3
 8008292:	4159      	adcs	r1, r3
 8008294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008298:	e7eb      	b.n	8008272 <__swhatbuf_r+0x22>

0800829a <__smakebuf_r>:
 800829a:	898b      	ldrh	r3, [r1, #12]
 800829c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800829e:	079d      	lsls	r5, r3, #30
 80082a0:	4606      	mov	r6, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	d507      	bpl.n	80082b6 <__smakebuf_r+0x1c>
 80082a6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082aa:	6023      	str	r3, [r4, #0]
 80082ac:	6123      	str	r3, [r4, #16]
 80082ae:	2301      	movs	r3, #1
 80082b0:	6163      	str	r3, [r4, #20]
 80082b2:	b002      	add	sp, #8
 80082b4:	bd70      	pop	{r4, r5, r6, pc}
 80082b6:	466a      	mov	r2, sp
 80082b8:	ab01      	add	r3, sp, #4
 80082ba:	f7ff ffc9 	bl	8008250 <__swhatbuf_r>
 80082be:	9900      	ldr	r1, [sp, #0]
 80082c0:	4605      	mov	r5, r0
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7fd fbe8 	bl	8005a98 <_malloc_r>
 80082c8:	b948      	cbnz	r0, 80082de <__smakebuf_r+0x44>
 80082ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ce:	059a      	lsls	r2, r3, #22
 80082d0:	d4ef      	bmi.n	80082b2 <__smakebuf_r+0x18>
 80082d2:	f023 0303 	bic.w	r3, r3, #3
 80082d6:	f043 0302 	orr.w	r3, r3, #2
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	e7e3      	b.n	80082a6 <__smakebuf_r+0xc>
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	6020      	str	r0, [r4, #0]
 80082e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e6:	81a3      	strh	r3, [r4, #12]
 80082e8:	9b00      	ldr	r3, [sp, #0]
 80082ea:	6120      	str	r0, [r4, #16]
 80082ec:	6163      	str	r3, [r4, #20]
 80082ee:	9b01      	ldr	r3, [sp, #4]
 80082f0:	b15b      	cbz	r3, 800830a <__smakebuf_r+0x70>
 80082f2:	4630      	mov	r0, r6
 80082f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082f8:	f000 f81e 	bl	8008338 <_isatty_r>
 80082fc:	b128      	cbz	r0, 800830a <__smakebuf_r+0x70>
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	f023 0303 	bic.w	r3, r3, #3
 8008304:	f043 0301 	orr.w	r3, r3, #1
 8008308:	81a3      	strh	r3, [r4, #12]
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	431d      	orrs	r5, r3
 800830e:	81a5      	strh	r5, [r4, #12]
 8008310:	e7cf      	b.n	80082b2 <__smakebuf_r+0x18>
	...

08008314 <_fstat_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	2300      	movs	r3, #0
 8008318:	4d06      	ldr	r5, [pc, #24]	; (8008334 <_fstat_r+0x20>)
 800831a:	4604      	mov	r4, r0
 800831c:	4608      	mov	r0, r1
 800831e:	4611      	mov	r1, r2
 8008320:	602b      	str	r3, [r5, #0]
 8008322:	f7f8 ffb0 	bl	8001286 <_fstat>
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	d102      	bne.n	8008330 <_fstat_r+0x1c>
 800832a:	682b      	ldr	r3, [r5, #0]
 800832c:	b103      	cbz	r3, 8008330 <_fstat_r+0x1c>
 800832e:	6023      	str	r3, [r4, #0]
 8008330:	bd38      	pop	{r3, r4, r5, pc}
 8008332:	bf00      	nop
 8008334:	200004e8 	.word	0x200004e8

08008338 <_isatty_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	2300      	movs	r3, #0
 800833c:	4d05      	ldr	r5, [pc, #20]	; (8008354 <_isatty_r+0x1c>)
 800833e:	4604      	mov	r4, r0
 8008340:	4608      	mov	r0, r1
 8008342:	602b      	str	r3, [r5, #0]
 8008344:	f7f8 ffae 	bl	80012a4 <_isatty>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d102      	bne.n	8008352 <_isatty_r+0x1a>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	b103      	cbz	r3, 8008352 <_isatty_r+0x1a>
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	200004e8 	.word	0x200004e8

08008358 <abort>:
 8008358:	2006      	movs	r0, #6
 800835a:	b508      	push	{r3, lr}
 800835c:	f000 f834 	bl	80083c8 <raise>
 8008360:	2001      	movs	r0, #1
 8008362:	f7f8 ff42 	bl	80011ea <_exit>

08008366 <_malloc_usable_size_r>:
 8008366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800836a:	1f18      	subs	r0, r3, #4
 800836c:	2b00      	cmp	r3, #0
 800836e:	bfbc      	itt	lt
 8008370:	580b      	ldrlt	r3, [r1, r0]
 8008372:	18c0      	addlt	r0, r0, r3
 8008374:	4770      	bx	lr

08008376 <_raise_r>:
 8008376:	291f      	cmp	r1, #31
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4604      	mov	r4, r0
 800837c:	460d      	mov	r5, r1
 800837e:	d904      	bls.n	800838a <_raise_r+0x14>
 8008380:	2316      	movs	r3, #22
 8008382:	6003      	str	r3, [r0, #0]
 8008384:	f04f 30ff 	mov.w	r0, #4294967295
 8008388:	bd38      	pop	{r3, r4, r5, pc}
 800838a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800838c:	b112      	cbz	r2, 8008394 <_raise_r+0x1e>
 800838e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008392:	b94b      	cbnz	r3, 80083a8 <_raise_r+0x32>
 8008394:	4620      	mov	r0, r4
 8008396:	f000 f831 	bl	80083fc <_getpid_r>
 800839a:	462a      	mov	r2, r5
 800839c:	4601      	mov	r1, r0
 800839e:	4620      	mov	r0, r4
 80083a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083a4:	f000 b818 	b.w	80083d8 <_kill_r>
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d00a      	beq.n	80083c2 <_raise_r+0x4c>
 80083ac:	1c59      	adds	r1, r3, #1
 80083ae:	d103      	bne.n	80083b8 <_raise_r+0x42>
 80083b0:	2316      	movs	r3, #22
 80083b2:	6003      	str	r3, [r0, #0]
 80083b4:	2001      	movs	r0, #1
 80083b6:	e7e7      	b.n	8008388 <_raise_r+0x12>
 80083b8:	2400      	movs	r4, #0
 80083ba:	4628      	mov	r0, r5
 80083bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083c0:	4798      	blx	r3
 80083c2:	2000      	movs	r0, #0
 80083c4:	e7e0      	b.n	8008388 <_raise_r+0x12>
	...

080083c8 <raise>:
 80083c8:	4b02      	ldr	r3, [pc, #8]	; (80083d4 <raise+0xc>)
 80083ca:	4601      	mov	r1, r0
 80083cc:	6818      	ldr	r0, [r3, #0]
 80083ce:	f7ff bfd2 	b.w	8008376 <_raise_r>
 80083d2:	bf00      	nop
 80083d4:	20000064 	.word	0x20000064

080083d8 <_kill_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	2300      	movs	r3, #0
 80083dc:	4d06      	ldr	r5, [pc, #24]	; (80083f8 <_kill_r+0x20>)
 80083de:	4604      	mov	r4, r0
 80083e0:	4608      	mov	r0, r1
 80083e2:	4611      	mov	r1, r2
 80083e4:	602b      	str	r3, [r5, #0]
 80083e6:	f7f8 fef0 	bl	80011ca <_kill>
 80083ea:	1c43      	adds	r3, r0, #1
 80083ec:	d102      	bne.n	80083f4 <_kill_r+0x1c>
 80083ee:	682b      	ldr	r3, [r5, #0]
 80083f0:	b103      	cbz	r3, 80083f4 <_kill_r+0x1c>
 80083f2:	6023      	str	r3, [r4, #0]
 80083f4:	bd38      	pop	{r3, r4, r5, pc}
 80083f6:	bf00      	nop
 80083f8:	200004e8 	.word	0x200004e8

080083fc <_getpid_r>:
 80083fc:	f7f8 bede 	b.w	80011bc <_getpid>

08008400 <_init>:
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008402:	bf00      	nop
 8008404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008406:	bc08      	pop	{r3}
 8008408:	469e      	mov	lr, r3
 800840a:	4770      	bx	lr

0800840c <_fini>:
 800840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840e:	bf00      	nop
 8008410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008412:	bc08      	pop	{r3}
 8008414:	469e      	mov	lr, r3
 8008416:	4770      	bx	lr
