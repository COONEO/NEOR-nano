
Example4_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008708  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  080088f0  080088f0  000188f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ce4  08008ce4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08008ce4  08008ce4  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ce4  08008ce4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ce4  08008ce4  00018ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ce8  08008ce8  00018ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  200001d4  08008ec0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  08008ec0  000207ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc52  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002502  00000000  00000000  0002de92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00030398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000acc  00000000  00000000  00031188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af8d  00000000  00000000  00031c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001121d  00000000  00000000  0004cbe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a6d4  00000000  00000000  0005ddfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c28  00000000  00000000  000f84d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000fd0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	080088d8 	.word	0x080088d8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	080088d8 	.word	0x080088d8

08000228 <__aeabi_fmul>:
 8000228:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000230:	bf1e      	ittt	ne
 8000232:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000236:	ea92 0f0c 	teqne	r2, ip
 800023a:	ea93 0f0c 	teqne	r3, ip
 800023e:	d06f      	beq.n	8000320 <__aeabi_fmul+0xf8>
 8000240:	441a      	add	r2, r3
 8000242:	ea80 0c01 	eor.w	ip, r0, r1
 8000246:	0240      	lsls	r0, r0, #9
 8000248:	bf18      	it	ne
 800024a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024e:	d01e      	beq.n	800028e <__aeabi_fmul+0x66>
 8000250:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000254:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000258:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800025c:	fba0 3101 	umull	r3, r1, r0, r1
 8000260:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000264:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000268:	bf3e      	ittt	cc
 800026a:	0049      	lslcc	r1, r1, #1
 800026c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000270:	005b      	lslcc	r3, r3, #1
 8000272:	ea40 0001 	orr.w	r0, r0, r1
 8000276:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800027a:	2afd      	cmp	r2, #253	; 0xfd
 800027c:	d81d      	bhi.n	80002ba <__aeabi_fmul+0x92>
 800027e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000282:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000286:	bf08      	it	eq
 8000288:	f020 0001 	biceq.w	r0, r0, #1
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000296:	bf08      	it	eq
 8000298:	0249      	lsleq	r1, r1, #9
 800029a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002a2:	3a7f      	subs	r2, #127	; 0x7f
 80002a4:	bfc2      	ittt	gt
 80002a6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002aa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002ae:	4770      	bxgt	lr
 80002b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b4:	f04f 0300 	mov.w	r3, #0
 80002b8:	3a01      	subs	r2, #1
 80002ba:	dc5d      	bgt.n	8000378 <__aeabi_fmul+0x150>
 80002bc:	f112 0f19 	cmn.w	r2, #25
 80002c0:	bfdc      	itt	le
 80002c2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002c6:	4770      	bxle	lr
 80002c8:	f1c2 0200 	rsb	r2, r2, #0
 80002cc:	0041      	lsls	r1, r0, #1
 80002ce:	fa21 f102 	lsr.w	r1, r1, r2
 80002d2:	f1c2 0220 	rsb	r2, r2, #32
 80002d6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002da:	ea5f 0031 	movs.w	r0, r1, rrx
 80002de:	f140 0000 	adc.w	r0, r0, #0
 80002e2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e6:	bf08      	it	eq
 80002e8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002ec:	4770      	bx	lr
 80002ee:	f092 0f00 	teq	r2, #0
 80002f2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002f6:	bf02      	ittt	eq
 80002f8:	0040      	lsleq	r0, r0, #1
 80002fa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002fe:	3a01      	subeq	r2, #1
 8000300:	d0f9      	beq.n	80002f6 <__aeabi_fmul+0xce>
 8000302:	ea40 000c 	orr.w	r0, r0, ip
 8000306:	f093 0f00 	teq	r3, #0
 800030a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800030e:	bf02      	ittt	eq
 8000310:	0049      	lsleq	r1, r1, #1
 8000312:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000316:	3b01      	subeq	r3, #1
 8000318:	d0f9      	beq.n	800030e <__aeabi_fmul+0xe6>
 800031a:	ea41 010c 	orr.w	r1, r1, ip
 800031e:	e78f      	b.n	8000240 <__aeabi_fmul+0x18>
 8000320:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000324:	ea92 0f0c 	teq	r2, ip
 8000328:	bf18      	it	ne
 800032a:	ea93 0f0c 	teqne	r3, ip
 800032e:	d00a      	beq.n	8000346 <__aeabi_fmul+0x11e>
 8000330:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000334:	bf18      	it	ne
 8000336:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800033a:	d1d8      	bne.n	80002ee <__aeabi_fmul+0xc6>
 800033c:	ea80 0001 	eor.w	r0, r0, r1
 8000340:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000344:	4770      	bx	lr
 8000346:	f090 0f00 	teq	r0, #0
 800034a:	bf17      	itett	ne
 800034c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000350:	4608      	moveq	r0, r1
 8000352:	f091 0f00 	teqne	r1, #0
 8000356:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800035a:	d014      	beq.n	8000386 <__aeabi_fmul+0x15e>
 800035c:	ea92 0f0c 	teq	r2, ip
 8000360:	d101      	bne.n	8000366 <__aeabi_fmul+0x13e>
 8000362:	0242      	lsls	r2, r0, #9
 8000364:	d10f      	bne.n	8000386 <__aeabi_fmul+0x15e>
 8000366:	ea93 0f0c 	teq	r3, ip
 800036a:	d103      	bne.n	8000374 <__aeabi_fmul+0x14c>
 800036c:	024b      	lsls	r3, r1, #9
 800036e:	bf18      	it	ne
 8000370:	4608      	movne	r0, r1
 8000372:	d108      	bne.n	8000386 <__aeabi_fmul+0x15e>
 8000374:	ea80 0001 	eor.w	r0, r0, r1
 8000378:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800037c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000380:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000384:	4770      	bx	lr
 8000386:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800038a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_dmul>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000716:	bf1d      	ittte	ne
 8000718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800071c:	ea94 0f0c 	teqne	r4, ip
 8000720:	ea95 0f0c 	teqne	r5, ip
 8000724:	f000 f8de 	bleq	80008e4 <__aeabi_dmul+0x1dc>
 8000728:	442c      	add	r4, r5
 800072a:	ea81 0603 	eor.w	r6, r1, r3
 800072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800073a:	bf18      	it	ne
 800073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000748:	d038      	beq.n	80007bc <__aeabi_dmul+0xb4>
 800074a:	fba0 ce02 	umull	ip, lr, r0, r2
 800074e:	f04f 0500 	mov.w	r5, #0
 8000752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800075e:	f04f 0600 	mov.w	r6, #0
 8000762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000766:	f09c 0f00 	teq	ip, #0
 800076a:	bf18      	it	ne
 800076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800077c:	d204      	bcs.n	8000788 <__aeabi_dmul+0x80>
 800077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000782:	416d      	adcs	r5, r5
 8000784:	eb46 0606 	adc.w	r6, r6, r6
 8000788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007a0:	bf88      	it	hi
 80007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007a6:	d81e      	bhi.n	80007e6 <__aeabi_dmul+0xde>
 80007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007ac:	bf08      	it	eq
 80007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007b2:	f150 0000 	adcs.w	r0, r0, #0
 80007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007c0:	ea46 0101 	orr.w	r1, r6, r1
 80007c4:	ea40 0002 	orr.w	r0, r0, r2
 80007c8:	ea81 0103 	eor.w	r1, r1, r3
 80007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007d0:	bfc2      	ittt	gt
 80007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007da:	bd70      	popgt	{r4, r5, r6, pc}
 80007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007e0:	f04f 0e00 	mov.w	lr, #0
 80007e4:	3c01      	subs	r4, #1
 80007e6:	f300 80ab 	bgt.w	8000940 <__aeabi_dmul+0x238>
 80007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ee:	bfde      	ittt	le
 80007f0:	2000      	movle	r0, #0
 80007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007f6:	bd70      	pople	{r4, r5, r6, pc}
 80007f8:	f1c4 0400 	rsb	r4, r4, #0
 80007fc:	3c20      	subs	r4, #32
 80007fe:	da35      	bge.n	800086c <__aeabi_dmul+0x164>
 8000800:	340c      	adds	r4, #12
 8000802:	dc1b      	bgt.n	800083c <__aeabi_dmul+0x134>
 8000804:	f104 0414 	add.w	r4, r4, #20
 8000808:	f1c4 0520 	rsb	r5, r4, #32
 800080c:	fa00 f305 	lsl.w	r3, r0, r5
 8000810:	fa20 f004 	lsr.w	r0, r0, r4
 8000814:	fa01 f205 	lsl.w	r2, r1, r5
 8000818:	ea40 0002 	orr.w	r0, r0, r2
 800081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000828:	fa21 f604 	lsr.w	r6, r1, r4
 800082c:	eb42 0106 	adc.w	r1, r2, r6
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 040c 	rsb	r4, r4, #12
 8000840:	f1c4 0520 	rsb	r5, r4, #32
 8000844:	fa00 f304 	lsl.w	r3, r0, r4
 8000848:	fa20 f005 	lsr.w	r0, r0, r5
 800084c:	fa01 f204 	lsl.w	r2, r1, r4
 8000850:	ea40 0002 	orr.w	r0, r0, r2
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800085c:	f141 0100 	adc.w	r1, r1, #0
 8000860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000864:	bf08      	it	eq
 8000866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f1c4 0520 	rsb	r5, r4, #32
 8000870:	fa00 f205 	lsl.w	r2, r0, r5
 8000874:	ea4e 0e02 	orr.w	lr, lr, r2
 8000878:	fa20 f304 	lsr.w	r3, r0, r4
 800087c:	fa01 f205 	lsl.w	r2, r1, r5
 8000880:	ea43 0302 	orr.w	r3, r3, r2
 8000884:	fa21 f004 	lsr.w	r0, r1, r4
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	fa21 f204 	lsr.w	r2, r1, r4
 8000890:	ea20 0002 	bic.w	r0, r0, r2
 8000894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800089c:	bf08      	it	eq
 800089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f094 0f00 	teq	r4, #0
 80008a8:	d10f      	bne.n	80008ca <__aeabi_dmul+0x1c2>
 80008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008ae:	0040      	lsls	r0, r0, #1
 80008b0:	eb41 0101 	adc.w	r1, r1, r1
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3c01      	subeq	r4, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1a6>
 80008be:	ea41 0106 	orr.w	r1, r1, r6
 80008c2:	f095 0f00 	teq	r5, #0
 80008c6:	bf18      	it	ne
 80008c8:	4770      	bxne	lr
 80008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ce:	0052      	lsls	r2, r2, #1
 80008d0:	eb43 0303 	adc.w	r3, r3, r3
 80008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008d8:	bf08      	it	eq
 80008da:	3d01      	subeq	r5, #1
 80008dc:	d0f7      	beq.n	80008ce <__aeabi_dmul+0x1c6>
 80008de:	ea43 0306 	orr.w	r3, r3, r6
 80008e2:	4770      	bx	lr
 80008e4:	ea94 0f0c 	teq	r4, ip
 80008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ec:	bf18      	it	ne
 80008ee:	ea95 0f0c 	teqne	r5, ip
 80008f2:	d00c      	beq.n	800090e <__aeabi_dmul+0x206>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	d1d1      	bne.n	80008a4 <__aeabi_dmul+0x19c>
 8000900:	ea81 0103 	eor.w	r1, r1, r3
 8000904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000908:	f04f 0000 	mov.w	r0, #0
 800090c:	bd70      	pop	{r4, r5, r6, pc}
 800090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000912:	bf06      	itte	eq
 8000914:	4610      	moveq	r0, r2
 8000916:	4619      	moveq	r1, r3
 8000918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091c:	d019      	beq.n	8000952 <__aeabi_dmul+0x24a>
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	d102      	bne.n	800092a <__aeabi_dmul+0x222>
 8000924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000928:	d113      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	d105      	bne.n	800093c <__aeabi_dmul+0x234>
 8000930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000934:	bf1c      	itt	ne
 8000936:	4610      	movne	r0, r2
 8000938:	4619      	movne	r1, r3
 800093a:	d10a      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800093c:	ea81 0103 	eor.w	r1, r1, r3
 8000940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	bd70      	pop	{r4, r5, r6, pc}
 8000952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800095a:	bd70      	pop	{r4, r5, r6, pc}

0800095c <__aeabi_ddiv>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800096a:	bf1d      	ittte	ne
 800096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000970:	ea94 0f0c 	teqne	r4, ip
 8000974:	ea95 0f0c 	teqne	r5, ip
 8000978:	f000 f8a7 	bleq	8000aca <__aeabi_ddiv+0x16e>
 800097c:	eba4 0405 	sub.w	r4, r4, r5
 8000980:	ea81 0e03 	eor.w	lr, r1, r3
 8000984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800098c:	f000 8088 	beq.w	8000aa0 <__aeabi_ddiv+0x144>
 8000990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009b4:	429d      	cmp	r5, r3
 80009b6:	bf08      	it	eq
 80009b8:	4296      	cmpeq	r6, r2
 80009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009c2:	d202      	bcs.n	80009ca <__aeabi_ddiv+0x6e>
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ca:	1ab6      	subs	r6, r6, r2
 80009cc:	eb65 0503 	sbc.w	r5, r5, r3
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a16:	bf22      	ittt	cs
 8000a18:	1ab6      	subcs	r6, r6, r2
 8000a1a:	4675      	movcs	r5, lr
 8000a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a2e:	bf22      	ittt	cs
 8000a30:	1ab6      	subcs	r6, r6, r2
 8000a32:	4675      	movcs	r5, lr
 8000a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a3c:	d018      	beq.n	8000a70 <__aeabi_ddiv+0x114>
 8000a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a5a:	d1c0      	bne.n	80009de <__aeabi_ddiv+0x82>
 8000a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a60:	d10b      	bne.n	8000a7a <__aeabi_ddiv+0x11e>
 8000a62:	ea41 0100 	orr.w	r1, r1, r0
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a6e:	e7b6      	b.n	80009de <__aeabi_ddiv+0x82>
 8000a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a74:	bf04      	itt	eq
 8000a76:	4301      	orreq	r1, r0
 8000a78:	2000      	moveq	r0, #0
 8000a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a7e:	bf88      	it	hi
 8000a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a84:	f63f aeaf 	bhi.w	80007e6 <__aeabi_dmul+0xde>
 8000a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a8c:	bf04      	itt	eq
 8000a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a96:	f150 0000 	adcs.w	r0, r0, #0
 8000a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000aac:	bfc2      	ittt	gt
 8000aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abc:	f04f 0e00 	mov.w	lr, #0
 8000ac0:	3c01      	subs	r4, #1
 8000ac2:	e690      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ac8:	e68d      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ace:	ea94 0f0c 	teq	r4, ip
 8000ad2:	bf08      	it	eq
 8000ad4:	ea95 0f0c 	teqeq	r5, ip
 8000ad8:	f43f af3b 	beq.w	8000952 <__aeabi_dmul+0x24a>
 8000adc:	ea94 0f0c 	teq	r4, ip
 8000ae0:	d10a      	bne.n	8000af8 <__aeabi_ddiv+0x19c>
 8000ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ae6:	f47f af34 	bne.w	8000952 <__aeabi_dmul+0x24a>
 8000aea:	ea95 0f0c 	teq	r5, ip
 8000aee:	f47f af25 	bne.w	800093c <__aeabi_dmul+0x234>
 8000af2:	4610      	mov	r0, r2
 8000af4:	4619      	mov	r1, r3
 8000af6:	e72c      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000af8:	ea95 0f0c 	teq	r5, ip
 8000afc:	d106      	bne.n	8000b0c <__aeabi_ddiv+0x1b0>
 8000afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b02:	f43f aefd 	beq.w	8000900 <__aeabi_dmul+0x1f8>
 8000b06:	4610      	mov	r0, r2
 8000b08:	4619      	mov	r1, r3
 8000b0a:	e722      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b10:	bf18      	it	ne
 8000b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b16:	f47f aec5 	bne.w	80008a4 <__aeabi_dmul+0x19c>
 8000b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b1e:	f47f af0d 	bne.w	800093c <__aeabi_dmul+0x234>
 8000b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b26:	f47f aeeb 	bne.w	8000900 <__aeabi_dmul+0x1f8>
 8000b2a:	e712      	b.n	8000952 <__aeabi_dmul+0x24a>

08000b2c <__gedf2>:
 8000b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b30:	e006      	b.n	8000b40 <__cmpdf2+0x4>
 8000b32:	bf00      	nop

08000b34 <__ledf2>:
 8000b34:	f04f 0c01 	mov.w	ip, #1
 8000b38:	e002      	b.n	8000b40 <__cmpdf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__cmpdf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	bf18      	it	ne
 8000b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b56:	d01b      	beq.n	8000b90 <__cmpdf2+0x54>
 8000b58:	b001      	add	sp, #4
 8000b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b5e:	bf0c      	ite	eq
 8000b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b64:	ea91 0f03 	teqne	r1, r3
 8000b68:	bf02      	ittt	eq
 8000b6a:	ea90 0f02 	teqeq	r0, r2
 8000b6e:	2000      	moveq	r0, #0
 8000b70:	4770      	bxeq	lr
 8000b72:	f110 0f00 	cmn.w	r0, #0
 8000b76:	ea91 0f03 	teq	r1, r3
 8000b7a:	bf58      	it	pl
 8000b7c:	4299      	cmppl	r1, r3
 8000b7e:	bf08      	it	eq
 8000b80:	4290      	cmpeq	r0, r2
 8000b82:	bf2c      	ite	cs
 8000b84:	17d8      	asrcs	r0, r3, #31
 8000b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b8a:	f040 0001 	orr.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__cmpdf2+0x64>
 8000b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9e:	d107      	bne.n	8000bb0 <__cmpdf2+0x74>
 8000ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d1d6      	bne.n	8000b58 <__cmpdf2+0x1c>
 8000baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bae:	d0d3      	beq.n	8000b58 <__cmpdf2+0x1c>
 8000bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdrcmple>:
 8000bb8:	4684      	mov	ip, r0
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4662      	mov	r2, ip
 8000bbe:	468c      	mov	ip, r1
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4663      	mov	r3, ip
 8000bc4:	e000      	b.n	8000bc8 <__aeabi_cdcmpeq>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdcmpeq>:
 8000bc8:	b501      	push	{r0, lr}
 8000bca:	f7ff ffb7 	bl	8000b3c <__cmpdf2>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	bf48      	it	mi
 8000bd2:	f110 0f00 	cmnmi.w	r0, #0
 8000bd6:	bd01      	pop	{r0, pc}

08000bd8 <__aeabi_dcmpeq>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff fff4 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000be0:	bf0c      	ite	eq
 8000be2:	2001      	moveq	r0, #1
 8000be4:	2000      	movne	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmplt>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffea 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000bf4:	bf34      	ite	cc
 8000bf6:	2001      	movcc	r0, #1
 8000bf8:	2000      	movcs	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_dcmple>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffe0 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000c08:	bf94      	ite	ls
 8000c0a:	2001      	movls	r0, #1
 8000c0c:	2000      	movhi	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_dcmpge>:
 8000c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c18:	f7ff ffce 	bl	8000bb8 <__aeabi_cdrcmple>
 8000c1c:	bf94      	ite	ls
 8000c1e:	2001      	movls	r0, #1
 8000c20:	2000      	movhi	r0, #0
 8000c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c26:	bf00      	nop

08000c28 <__aeabi_dcmpgt>:
 8000c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c2c:	f7ff ffc4 	bl	8000bb8 <__aeabi_cdrcmple>
 8000c30:	bf34      	ite	cc
 8000c32:	2001      	movcc	r0, #1
 8000c34:	2000      	movcs	r0, #0
 8000c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2uiz>:
 8000c3c:	004a      	lsls	r2, r1, #1
 8000c3e:	d211      	bcs.n	8000c64 <__aeabi_d2uiz+0x28>
 8000c40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c44:	d211      	bcs.n	8000c6a <__aeabi_d2uiz+0x2e>
 8000c46:	d50d      	bpl.n	8000c64 <__aeabi_d2uiz+0x28>
 8000c48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c50:	d40e      	bmi.n	8000c70 <__aeabi_d2uiz+0x34>
 8000c52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	4770      	bx	lr
 8000c64:	f04f 0000 	mov.w	r0, #0
 8000c68:	4770      	bx	lr
 8000c6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c6e:	d102      	bne.n	8000c76 <__aeabi_d2uiz+0x3a>
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	4770      	bx	lr
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2f>:
 8000c7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c84:	bf24      	itt	cs
 8000c86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c8e:	d90d      	bls.n	8000cac <__aeabi_d2f+0x30>
 8000c90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ca0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ca4:	bf08      	it	eq
 8000ca6:	f020 0001 	biceq.w	r0, r0, #1
 8000caa:	4770      	bx	lr
 8000cac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cb0:	d121      	bne.n	8000cf6 <__aeabi_d2f+0x7a>
 8000cb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cb6:	bfbc      	itt	lt
 8000cb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	4770      	bxlt	lr
 8000cbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cc6:	f1c2 0218 	rsb	r2, r2, #24
 8000cca:	f1c2 0c20 	rsb	ip, r2, #32
 8000cce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000cd6:	bf18      	it	ne
 8000cd8:	f040 0001 	orrne.w	r0, r0, #1
 8000cdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ce4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ce8:	ea40 000c 	orr.w	r0, r0, ip
 8000cec:	fa23 f302 	lsr.w	r3, r3, r2
 8000cf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cf4:	e7cc      	b.n	8000c90 <__aeabi_d2f+0x14>
 8000cf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cfa:	d107      	bne.n	8000d0c <__aeabi_d2f+0x90>
 8000cfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d00:	bf1e      	ittt	ne
 8000d02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bxne	lr
 8000d0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <__aeabi_frsub>:
 8000d1c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	e002      	b.n	8000d28 <__addsf3>
 8000d22:	bf00      	nop

08000d24 <__aeabi_fsub>:
 8000d24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000d28 <__addsf3>:
 8000d28:	0042      	lsls	r2, r0, #1
 8000d2a:	bf1f      	itttt	ne
 8000d2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000d30:	ea92 0f03 	teqne	r2, r3
 8000d34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3c:	d06a      	beq.n	8000e14 <__addsf3+0xec>
 8000d3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d46:	bfc1      	itttt	gt
 8000d48:	18d2      	addgt	r2, r2, r3
 8000d4a:	4041      	eorgt	r1, r0
 8000d4c:	4048      	eorgt	r0, r1
 8000d4e:	4041      	eorgt	r1, r0
 8000d50:	bfb8      	it	lt
 8000d52:	425b      	neglt	r3, r3
 8000d54:	2b19      	cmp	r3, #25
 8000d56:	bf88      	it	hi
 8000d58:	4770      	bxhi	lr
 8000d5a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d66:	bf18      	it	ne
 8000d68:	4240      	negne	r0, r0
 8000d6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d6e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d72:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d76:	bf18      	it	ne
 8000d78:	4249      	negne	r1, r1
 8000d7a:	ea92 0f03 	teq	r2, r3
 8000d7e:	d03f      	beq.n	8000e00 <__addsf3+0xd8>
 8000d80:	f1a2 0201 	sub.w	r2, r2, #1
 8000d84:	fa41 fc03 	asr.w	ip, r1, r3
 8000d88:	eb10 000c 	adds.w	r0, r0, ip
 8000d8c:	f1c3 0320 	rsb	r3, r3, #32
 8000d90:	fa01 f103 	lsl.w	r1, r1, r3
 8000d94:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d98:	d502      	bpl.n	8000da0 <__addsf3+0x78>
 8000d9a:	4249      	negs	r1, r1
 8000d9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000da0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000da4:	d313      	bcc.n	8000dce <__addsf3+0xa6>
 8000da6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000daa:	d306      	bcc.n	8000dba <__addsf3+0x92>
 8000dac:	0840      	lsrs	r0, r0, #1
 8000dae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000db2:	f102 0201 	add.w	r2, r2, #1
 8000db6:	2afe      	cmp	r2, #254	; 0xfe
 8000db8:	d251      	bcs.n	8000e5e <__addsf3+0x136>
 8000dba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000dbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc2:	bf08      	it	eq
 8000dc4:	f020 0001 	biceq.w	r0, r0, #1
 8000dc8:	ea40 0003 	orr.w	r0, r0, r3
 8000dcc:	4770      	bx	lr
 8000dce:	0049      	lsls	r1, r1, #1
 8000dd0:	eb40 0000 	adc.w	r0, r0, r0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	bf28      	it	cs
 8000dd8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ddc:	d2ed      	bcs.n	8000dba <__addsf3+0x92>
 8000dde:	fab0 fc80 	clz	ip, r0
 8000de2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000de6:	ebb2 020c 	subs.w	r2, r2, ip
 8000dea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000dee:	bfaa      	itet	ge
 8000df0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000df4:	4252      	neglt	r2, r2
 8000df6:	4318      	orrge	r0, r3
 8000df8:	bfbc      	itt	lt
 8000dfa:	40d0      	lsrlt	r0, r2
 8000dfc:	4318      	orrlt	r0, r3
 8000dfe:	4770      	bx	lr
 8000e00:	f092 0f00 	teq	r2, #0
 8000e04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e08:	bf06      	itte	eq
 8000e0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e0e:	3201      	addeq	r2, #1
 8000e10:	3b01      	subne	r3, #1
 8000e12:	e7b5      	b.n	8000d80 <__addsf3+0x58>
 8000e14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e1c:	bf18      	it	ne
 8000e1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e22:	d021      	beq.n	8000e68 <__addsf3+0x140>
 8000e24:	ea92 0f03 	teq	r2, r3
 8000e28:	d004      	beq.n	8000e34 <__addsf3+0x10c>
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	bf08      	it	eq
 8000e30:	4608      	moveq	r0, r1
 8000e32:	4770      	bx	lr
 8000e34:	ea90 0f01 	teq	r0, r1
 8000e38:	bf1c      	itt	ne
 8000e3a:	2000      	movne	r0, #0
 8000e3c:	4770      	bxne	lr
 8000e3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000e42:	d104      	bne.n	8000e4e <__addsf3+0x126>
 8000e44:	0040      	lsls	r0, r0, #1
 8000e46:	bf28      	it	cs
 8000e48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e52:	bf3c      	itt	cc
 8000e54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e58:	4770      	bxcc	lr
 8000e5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e66:	4770      	bx	lr
 8000e68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e6c:	bf16      	itet	ne
 8000e6e:	4608      	movne	r0, r1
 8000e70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e74:	4601      	movne	r1, r0
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	bf06      	itte	eq
 8000e7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e7e:	ea90 0f01 	teqeq	r0, r1
 8000e82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e86:	4770      	bx	lr

08000e88 <__aeabi_ui2f>:
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	e004      	b.n	8000e98 <__aeabi_i2f+0x8>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_i2f>:
 8000e90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e94:	bf48      	it	mi
 8000e96:	4240      	negmi	r0, r0
 8000e98:	ea5f 0c00 	movs.w	ip, r0
 8000e9c:	bf08      	it	eq
 8000e9e:	4770      	bxeq	lr
 8000ea0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	f04f 0000 	mov.w	r0, #0
 8000eaa:	e01c      	b.n	8000ee6 <__aeabi_l2f+0x2a>

08000eac <__aeabi_ul2f>:
 8000eac:	ea50 0201 	orrs.w	r2, r0, r1
 8000eb0:	bf08      	it	eq
 8000eb2:	4770      	bxeq	lr
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	e00a      	b.n	8000ed0 <__aeabi_l2f+0x14>
 8000eba:	bf00      	nop

08000ebc <__aeabi_l2f>:
 8000ebc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ec0:	bf08      	it	eq
 8000ec2:	4770      	bxeq	lr
 8000ec4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ec8:	d502      	bpl.n	8000ed0 <__aeabi_l2f+0x14>
 8000eca:	4240      	negs	r0, r0
 8000ecc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ed0:	ea5f 0c01 	movs.w	ip, r1
 8000ed4:	bf02      	ittt	eq
 8000ed6:	4684      	moveq	ip, r0
 8000ed8:	4601      	moveq	r1, r0
 8000eda:	2000      	moveq	r0, #0
 8000edc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ee0:	bf08      	it	eq
 8000ee2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000eea:	fabc f28c 	clz	r2, ip
 8000eee:	3a08      	subs	r2, #8
 8000ef0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ef4:	db10      	blt.n	8000f18 <__aeabi_l2f+0x5c>
 8000ef6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000efa:	4463      	add	r3, ip
 8000efc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f00:	f1c2 0220 	rsb	r2, r2, #32
 8000f04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f08:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0c:	eb43 0002 	adc.w	r0, r3, r2
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f102 0220 	add.w	r2, r2, #32
 8000f1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f20:	f1c2 0220 	rsb	r2, r2, #32
 8000f24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000f28:	fa21 f202 	lsr.w	r2, r1, r2
 8000f2c:	eb43 0002 	adc.w	r0, r3, r2
 8000f30:	bf08      	it	eq
 8000f32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f36:	4770      	bx	lr

08000f38 <__gesf2>:
 8000f38:	f04f 3cff 	mov.w	ip, #4294967295
 8000f3c:	e006      	b.n	8000f4c <__cmpsf2+0x4>
 8000f3e:	bf00      	nop

08000f40 <__lesf2>:
 8000f40:	f04f 0c01 	mov.w	ip, #1
 8000f44:	e002      	b.n	8000f4c <__cmpsf2+0x4>
 8000f46:	bf00      	nop

08000f48 <__cmpsf2>:
 8000f48:	f04f 0c01 	mov.w	ip, #1
 8000f4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f50:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f5c:	bf18      	it	ne
 8000f5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f62:	d011      	beq.n	8000f88 <__cmpsf2+0x40>
 8000f64:	b001      	add	sp, #4
 8000f66:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f6a:	bf18      	it	ne
 8000f6c:	ea90 0f01 	teqne	r0, r1
 8000f70:	bf58      	it	pl
 8000f72:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f76:	bf88      	it	hi
 8000f78:	17c8      	asrhi	r0, r1, #31
 8000f7a:	bf38      	it	cc
 8000f7c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f80:	bf18      	it	ne
 8000f82:	f040 0001 	orrne.w	r0, r0, #1
 8000f86:	4770      	bx	lr
 8000f88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f8c:	d102      	bne.n	8000f94 <__cmpsf2+0x4c>
 8000f8e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f92:	d105      	bne.n	8000fa0 <__cmpsf2+0x58>
 8000f94:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f98:	d1e4      	bne.n	8000f64 <__cmpsf2+0x1c>
 8000f9a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f9e:	d0e1      	beq.n	8000f64 <__cmpsf2+0x1c>
 8000fa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_cfrcmple>:
 8000fa8:	4684      	mov	ip, r0
 8000faa:	4608      	mov	r0, r1
 8000fac:	4661      	mov	r1, ip
 8000fae:	e7ff      	b.n	8000fb0 <__aeabi_cfcmpeq>

08000fb0 <__aeabi_cfcmpeq>:
 8000fb0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fb2:	f7ff ffc9 	bl	8000f48 <__cmpsf2>
 8000fb6:	2800      	cmp	r0, #0
 8000fb8:	bf48      	it	mi
 8000fba:	f110 0f00 	cmnmi.w	r0, #0
 8000fbe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fc0 <__aeabi_fcmpeq>:
 8000fc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc4:	f7ff fff4 	bl	8000fb0 <__aeabi_cfcmpeq>
 8000fc8:	bf0c      	ite	eq
 8000fca:	2001      	moveq	r0, #1
 8000fcc:	2000      	movne	r0, #0
 8000fce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_fcmplt>:
 8000fd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd8:	f7ff ffea 	bl	8000fb0 <__aeabi_cfcmpeq>
 8000fdc:	bf34      	ite	cc
 8000fde:	2001      	movcc	r0, #1
 8000fe0:	2000      	movcs	r0, #0
 8000fe2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_fcmple>:
 8000fe8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fec:	f7ff ffe0 	bl	8000fb0 <__aeabi_cfcmpeq>
 8000ff0:	bf94      	ite	ls
 8000ff2:	2001      	movls	r0, #1
 8000ff4:	2000      	movhi	r0, #0
 8000ff6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffa:	bf00      	nop

08000ffc <__aeabi_fcmpge>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff ffd2 	bl	8000fa8 <__aeabi_cfrcmple>
 8001004:	bf94      	ite	ls
 8001006:	2001      	movls	r0, #1
 8001008:	2000      	movhi	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <__aeabi_fcmpgt>:
 8001010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001014:	f7ff ffc8 	bl	8000fa8 <__aeabi_cfrcmple>
 8001018:	bf34      	ite	cc
 800101a:	2001      	movcc	r0, #1
 800101c:	2000      	movcs	r0, #0
 800101e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	4605      	mov	r5, r0
 8001074:	460c      	mov	r4, r1
 8001076:	2200      	movs	r2, #0
 8001078:	2300      	movs	r3, #0
 800107a:	4628      	mov	r0, r5
 800107c:	4621      	mov	r1, r4
 800107e:	f7ff fdb5 	bl	8000bec <__aeabi_dcmplt>
 8001082:	b928      	cbnz	r0, 8001090 <__aeabi_d2lz+0x20>
 8001084:	4628      	mov	r0, r5
 8001086:	4621      	mov	r1, r4
 8001088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800108c:	f000 b80a 	b.w	80010a4 <__aeabi_d2ulz>
 8001090:	4628      	mov	r0, r5
 8001092:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001096:	f000 f805 	bl	80010a4 <__aeabi_d2ulz>
 800109a:	4240      	negs	r0, r0
 800109c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a0:	bd38      	pop	{r3, r4, r5, pc}
 80010a2:	bf00      	nop

080010a4 <__aeabi_d2ulz>:
 80010a4:	b5d0      	push	{r4, r6, r7, lr}
 80010a6:	2200      	movs	r2, #0
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <__aeabi_d2ulz+0x34>)
 80010aa:	4606      	mov	r6, r0
 80010ac:	460f      	mov	r7, r1
 80010ae:	f7ff fb2b 	bl	8000708 <__aeabi_dmul>
 80010b2:	f7ff fdc3 	bl	8000c3c <__aeabi_d2uiz>
 80010b6:	4604      	mov	r4, r0
 80010b8:	f7ff faac 	bl	8000614 <__aeabi_ui2d>
 80010bc:	2200      	movs	r2, #0
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <__aeabi_d2ulz+0x38>)
 80010c0:	f7ff fb22 	bl	8000708 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4630      	mov	r0, r6
 80010ca:	4639      	mov	r1, r7
 80010cc:	f7ff f964 	bl	8000398 <__aeabi_dsub>
 80010d0:	f7ff fdb4 	bl	8000c3c <__aeabi_d2uiz>
 80010d4:	4621      	mov	r1, r4
 80010d6:	bdd0      	pop	{r4, r6, r7, pc}
 80010d8:	3df00000 	.word	0x3df00000
 80010dc:	41f00000 	.word	0x41f00000

080010e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MX_DMA_Init+0x48>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <MX_DMA_Init+0x48>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6153      	str	r3, [r2, #20]
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <MX_DMA_Init+0x48>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	200e      	movs	r0, #14
 8001104:	f001 fa75 	bl	80025f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001108:	200e      	movs	r0, #14
 800110a:	f001 fa8e 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	200f      	movs	r0, #15
 8001114:	f001 fa6d 	bl	80025f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001118:	200f      	movs	r0, #15
 800111a:	f001 fa86 	bl	800262a <HAL_NVIC_EnableIRQ>

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000

0800112c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <MX_GPIO_Init+0xa4>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a22      	ldr	r2, [pc, #136]	; (80011d0 <MX_GPIO_Init+0xa4>)
 8001146:	f043 0320 	orr.w	r3, r3, #32
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_GPIO_Init+0xa4>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0320 	and.w	r3, r3, #32
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_GPIO_Init+0xa4>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <MX_GPIO_Init+0xa4>)
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_GPIO_Init+0xa4>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_GPIO_Init+0xa4>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a16      	ldr	r2, [pc, #88]	; (80011d0 <MX_GPIO_Init+0xa4>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_GPIO_Init+0xa4>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_GPIO_Init+0xa4>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <MX_GPIO_Init+0xa4>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_GPIO_Init+0xa4>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	210f      	movs	r1, #15
 80011a4:	480b      	ldr	r0, [pc, #44]	; (80011d4 <MX_GPIO_Init+0xa8>)
 80011a6:	f002 f873 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011aa:	230f      	movs	r3, #15
 80011ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4619      	mov	r1, r3
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <MX_GPIO_Init+0xa8>)
 80011c2:	f001 fed1 	bl	8002f68 <HAL_GPIO_Init>

}
 80011c6:	bf00      	nop
 80011c8:	3720      	adds	r7, #32
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40011000 	.word	0x40011000

080011d8 <myabs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int myabs(int a)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	int temp;
	if(a<0)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	da03      	bge.n	80011ee <myabs+0x16>
	  temp=-a;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	425b      	negs	r3, r3
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e001      	b.n	80011f2 <myabs+0x1a>
	else
	  temp=a;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]
	return temp;
 80011f2:	68fb      	ldr	r3, [r7, #12]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
	...

08001200 <MotorInit>:

//电机初始化
void MotorInit()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);  //启动定时器8的PWM模式
 8001204:	2100      	movs	r1, #0
 8001206:	480c      	ldr	r0, [pc, #48]	; (8001238 <MotorInit+0x38>)
 8001208:	f002 fd6a 	bl	8003ce0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 800120c:	2104      	movs	r1, #4
 800120e:	480a      	ldr	r0, [pc, #40]	; (8001238 <MotorInit+0x38>)
 8001210:	f002 fd66 	bl	8003ce0 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1);  //启动定时器2的编码器模式
 8001214:	2100      	movs	r1, #0
 8001216:	4809      	ldr	r0, [pc, #36]	; (800123c <MotorInit+0x3c>)
 8001218:	f002 febe 	bl	8003f98 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_2);
 800121c:	2104      	movs	r1, #4
 800121e:	4807      	ldr	r0, [pc, #28]	; (800123c <MotorInit+0x3c>)
 8001220:	f002 feba 	bl	8003f98 <HAL_TIM_Encoder_Start>

	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);  //启动定时器3的编码器模式
 8001224:	2100      	movs	r1, #0
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MotorInit+0x40>)
 8001228:	f002 feb6 	bl	8003f98 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 800122c:	2104      	movs	r1, #4
 800122e:	4804      	ldr	r0, [pc, #16]	; (8001240 <MotorInit+0x40>)
 8001230:	f002 feb2 	bl	8003f98 <HAL_TIM_Encoder_Start>
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000328 	.word	0x20000328
 800123c:	20000250 	.word	0x20000250
 8001240:	20000298 	.word	0x20000298

08001244 <Left_Go>:


void Left_Go()
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(m_DirPort,AIN1,GPIO_PIN_SET);
 8001248:	2201      	movs	r2, #1
 800124a:	2101      	movs	r1, #1
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <Left_Go+0x1c>)
 800124e:	f002 f81f 	bl	8003290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m_DirPort,AIN2,GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	2102      	movs	r1, #2
 8001256:	4802      	ldr	r0, [pc, #8]	; (8001260 <Left_Go+0x1c>)
 8001258:	f002 f81a 	bl	8003290 <HAL_GPIO_WritePin>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40011000 	.word	0x40011000

08001264 <Right_Go>:

void Right_Go()
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(m_DirPort,BIN1,GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	2104      	movs	r1, #4
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <Right_Go+0x1c>)
 800126e:	f002 f80f 	bl	8003290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m_DirPort,BIN2,GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2108      	movs	r1, #8
 8001276:	4802      	ldr	r0, [pc, #8]	; (8001280 <Right_Go+0x1c>)
 8001278:	f002 f80a 	bl	8003290 <HAL_GPIO_WritePin>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40011000 	.word	0x40011000

08001284 <Left_Back>:

void Left_Back()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(m_DirPort,AIN1,GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2101      	movs	r1, #1
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <Left_Back+0x1c>)
 800128e:	f001 ffff 	bl	8003290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m_DirPort,AIN2,GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2102      	movs	r1, #2
 8001296:	4802      	ldr	r0, [pc, #8]	; (80012a0 <Left_Back+0x1c>)
 8001298:	f001 fffa 	bl	8003290 <HAL_GPIO_WritePin>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40011000 	.word	0x40011000

080012a4 <Right_Back>:

void Right_Back()
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(m_DirPort,BIN1,GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2104      	movs	r1, #4
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <Right_Back+0x1c>)
 80012ae:	f001 ffef 	bl	8003290 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m_DirPort,BIN2,GPIO_PIN_SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2108      	movs	r1, #8
 80012b6:	4802      	ldr	r0, [pc, #8]	; (80012c0 <Right_Back+0x1c>)
 80012b8:	f001 ffea 	bl	8003290 <HAL_GPIO_WritePin>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40011000 	.word	0x40011000

080012c4 <MotorControl>:
		HAL_GPIO_WritePin(m_DirPort,BIN2,GPIO_PIN_RESET);
}

//电机控制
void MotorControl(int leftPWM, int rightPWM)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
	if( leftPWM >= 0)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db02      	blt.n	80012da <MotorControl+0x16>
	{
		Left_Go();
 80012d4:	f7ff ffb6 	bl	8001244 <Left_Go>
 80012d8:	e001      	b.n	80012de <MotorControl+0x1a>
	}else
	{
		Left_Back();
 80012da:	f7ff ffd3 	bl	8001284 <Left_Back>
	}
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, myabs(leftPWM));
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ff7a 	bl	80011d8 <myabs>
 80012e4:	4602      	mov	r2, r0
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MotorControl+0x50>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	635a      	str	r2, [r3, #52]	; 0x34

	if(rightPWM >= 0)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	db02      	blt.n	80012f8 <MotorControl+0x34>
	{
		Right_Go();
 80012f2:	f7ff ffb7 	bl	8001264 <Right_Go>
 80012f6:	e001      	b.n	80012fc <MotorControl+0x38>
	}else
	{
		Right_Back();
 80012f8:	f7ff ffd4 	bl	80012a4 <Right_Back>
	}
	  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, myabs(rightPWM));
 80012fc:	6838      	ldr	r0, [r7, #0]
 80012fe:	f7ff ff6b 	bl	80011d8 <myabs>
 8001302:	4602      	mov	r2, r0
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <MotorControl+0x50>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	639a      	str	r2, [r3, #56]	; 0x38

}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000328 	.word	0x20000328

08001318 <CalActualSpeed>:

//计算速度  cm/s
float CalActualSpeed(int pulse)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    return (float)(0.3092424 * pulse);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff f987 	bl	8000634 <__aeabi_i2d>
 8001326:	a308      	add	r3, pc, #32	; (adr r3, 8001348 <CalActualSpeed+0x30>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	f7ff f9ec 	bl	8000708 <__aeabi_dmul>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	f7ff fca0 	bl	8000c7c <__aeabi_d2f>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	a2a256d7 	.word	0xa2a256d7
 800134c:	3fd3caa0 	.word	0x3fd3caa0

08001350 <AverageFilter>:
* @brief	均值滤波
*	@param 需要滤波的数组，滤波次数
*	@retval 滤波后的值
*/
int AverageFilter(short *array, uint8_t num)//均值滤波
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	70fb      	strb	r3, [r7, #3]
    int tmp = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
    uint8_t  i;
    for(i = 0; i < num; i++)
 8001360:	2300      	movs	r3, #0
 8001362:	72fb      	strb	r3, [r7, #11]
 8001364:	e00c      	b.n	8001380 <AverageFilter+0x30>
    tmp += array[i];
 8001366:	7afb      	ldrb	r3, [r7, #11]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < num; i++)
 800137a:	7afb      	ldrb	r3, [r7, #11]
 800137c:	3301      	adds	r3, #1
 800137e:	72fb      	strb	r3, [r7, #11]
 8001380:	7afa      	ldrb	r2, [r7, #11]
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	429a      	cmp	r2, r3
 8001386:	d3ee      	bcc.n	8001366 <AverageFilter+0x16>
    tmp = tmp / num;
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001390:	60fb      	str	r3, [r7, #12]
    return tmp;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
	...

080013a0 <GetEncoderPulse>:
* @brief   获取电机编码器的脉冲值
* @param  	None
* @retval 	存放经过滤波后的编码器脉冲值
*/
void GetEncoderPulse()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	uint8_t i = filterNum - 1;
 80013a6:	2302      	movs	r3, #2
 80013a8:	71fb      	strb	r3, [r7, #7]
	for(;i > 0;i--)
 80013aa:	e014      	b.n	80013d6 <GetEncoderPulse+0x36>
	{
		leftEncoder[i-1] = leftEncoder[i];  //使用数组来保存两次的编码值
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	493f      	ldr	r1, [pc, #252]	; (80014b0 <GetEncoderPulse+0x110>)
 80013b4:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80013b8:	4a3d      	ldr	r2, [pc, #244]	; (80014b0 <GetEncoderPulse+0x110>)
 80013ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		rightEncoder[i-1] = rightEncoder[i];  //最后一个用于保留上一次的值
 80013be:	79fa      	ldrb	r2, [r7, #7]
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	493b      	ldr	r1, [pc, #236]	; (80014b4 <GetEncoderPulse+0x114>)
 80013c6:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80013ca:	4a3a      	ldr	r2, [pc, #232]	; (80014b4 <GetEncoderPulse+0x114>)
 80013cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(;i > 0;i--)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1e7      	bne.n	80013ac <GetEncoderPulse+0xc>
	}
	  leftEncoder[filterNum-1] = -((short)__HAL_TIM_GET_COUNTER(&htim2));
 80013dc:	4b36      	ldr	r3, [pc, #216]	; (80014b8 <GetEncoderPulse+0x118>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	425b      	negs	r3, r3
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <GetEncoderPulse+0x110>)
 80013ec:	809a      	strh	r2, [r3, #4]
    rightEncoder[filterNum-1] = -((short)__HAL_TIM_GET_COUNTER(&htim3));
 80013ee:	4b33      	ldr	r3, [pc, #204]	; (80014bc <GetEncoderPulse+0x11c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	425b      	negs	r3, r3
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <GetEncoderPulse+0x114>)
 80013fe:	809a      	strh	r2, [r3, #4]

    last_encoderPulse[0] = encoderPulse[0];
 8001400:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <GetEncoderPulse+0x120>)
 8001402:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001406:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <GetEncoderPulse+0x124>)
 8001408:	801a      	strh	r2, [r3, #0]
    last_encoderPulse[1] = encoderPulse[1];
 800140a:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <GetEncoderPulse+0x120>)
 800140c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001410:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <GetEncoderPulse+0x124>)
 8001412:	805a      	strh	r2, [r3, #2]

	  encoderPulse[0] = AverageFilter(leftEncoder, filterNum);  //左电机的编码器值
 8001414:	2103      	movs	r1, #3
 8001416:	4826      	ldr	r0, [pc, #152]	; (80014b0 <GetEncoderPulse+0x110>)
 8001418:	f7ff ff9a 	bl	8001350 <AverageFilter>
 800141c:	4603      	mov	r3, r0
 800141e:	b21a      	sxth	r2, r3
 8001420:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <GetEncoderPulse+0x120>)
 8001422:	801a      	strh	r2, [r3, #0]
    encoderPulse[1] = AverageFilter(rightEncoder, filterNum);  //右电机的编码器值
 8001424:	2103      	movs	r1, #3
 8001426:	4823      	ldr	r0, [pc, #140]	; (80014b4 <GetEncoderPulse+0x114>)
 8001428:	f7ff ff92 	bl	8001350 <AverageFilter>
 800142c:	4603      	mov	r3, r0
 800142e:	b21a      	sxth	r2, r3
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <GetEncoderPulse+0x120>)
 8001432:	805a      	strh	r2, [r3, #2]

    encoderValue[0] = encoderPulse[0]-last_encoderPulse[0];
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <GetEncoderPulse+0x120>)
 8001436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143a:	b29a      	uxth	r2, r3
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <GetEncoderPulse+0x124>)
 800143e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001442:	b29b      	uxth	r3, r3
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b29b      	uxth	r3, r3
 8001448:	b21a      	sxth	r2, r3
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <GetEncoderPulse+0x128>)
 800144c:	801a      	strh	r2, [r3, #0]
    encoderValue[1] = encoderPulse[1]-last_encoderPulse[1];
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <GetEncoderPulse+0x120>)
 8001450:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <GetEncoderPulse+0x124>)
 8001458:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800145c:	b29b      	uxth	r3, r3
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	b29b      	uxth	r3, r3
 8001462:	b21a      	sxth	r2, r3
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <GetEncoderPulse+0x128>)
 8001466:	805a      	strh	r2, [r3, #2]

     if(encoderPulse[0]>32000||encoderPulse[0]<-32000)
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <GetEncoderPulse+0x120>)
 800146a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001472:	dc05      	bgt.n	8001480 <GetEncoderPulse+0xe0>
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <GetEncoderPulse+0x120>)
 8001476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147a:	f513 4ffa 	cmn.w	r3, #32000	; 0x7d00
 800147e:	da03      	bge.n	8001488 <GetEncoderPulse+0xe8>
     {
       TIM2->CNT = 0;
 8001480:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
     }
     if(encoderPulse[1]>32000||encoderPulse[1]<-32000)
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <GetEncoderPulse+0x120>)
 800148a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800148e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001492:	dc05      	bgt.n	80014a0 <GetEncoderPulse+0x100>
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <GetEncoderPulse+0x120>)
 8001496:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800149a:	f513 4ffa 	cmn.w	r3, #32000	; 0x7d00
 800149e:	da02      	bge.n	80014a6 <GetEncoderPulse+0x106>
     {
       TIM3->CNT = 0;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <GetEncoderPulse+0x12c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
     }

//    __HAL_TIM_GET_COUNTER(&htim2) = 0;	 //计数值重新清零
//    __HAL_TIM_GET_COUNTER(&htim3) = 0;
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200001f8 	.word	0x200001f8
 80014b4:	20000200 	.word	0x20000200
 80014b8:	20000250 	.word	0x20000250
 80014bc:	20000298 	.word	0x20000298
 80014c0:	200001f0 	.word	0x200001f0
 80014c4:	200001f4 	.word	0x200001f4
 80014c8:	20000208 	.word	0x20000208
 80014cc:	40000400 	.word	0x40000400

080014d0 <PID_Init>:
/**
  * @brief  PID相关参数的初始化
  * @param  PID的结构体指针
  */
void PID_Init(PID *p)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    p->Kp = Velocity_Kp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80014de:	601a      	str	r2, [r3, #0]
    p->Ki = Velocity_Ki;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e6:	605a      	str	r2, [r3, #4]
    p->Kd = Velocity_Kd;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <PID_Init+0x48>)
 80014ec:	609a      	str	r2, [r3, #8]
    p->last_error = 0;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
    p->prev_error = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
    p->limit = limit_value;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001504:	615a      	str	r2, [r3, #20]
    p->pwm_add = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	3e4ccccd 	.word	0x3e4ccccd

0800151c <PID_Cal>:
 /**
  * @brief  PID相关参数的初始化
  * @param  PID的结构体指针
  */
int PID_Cal(int targetSpeed,int currentSpeed,PID *p)
{
 800151c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
    int error = targetSpeed - currentSpeed;
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	617b      	str	r3, [r7, #20]
    if(error>50)error=0;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b32      	cmp	r3, #50	; 0x32
 8001536:	dd01      	ble.n	800153c <PID_Cal+0x20>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
    if(error<-50)error=0;  //避免跳动
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8001542:	da01      	bge.n	8001548 <PID_Cal+0x2c>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
    p->pwm_add += p->Kp*(error - p->last_error) + p->Ki*error + p->Kd*(error - 2*p->last_error+p->prev_error);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fc9f 	bl	8000e90 <__aeabi_i2f>
 8001552:	4605      	mov	r5, r0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681c      	ldr	r4, [r3, #0]
 8001558:	6978      	ldr	r0, [r7, #20]
 800155a:	f7ff fc99 	bl	8000e90 <__aeabi_i2f>
 800155e:	4602      	mov	r2, r0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	4619      	mov	r1, r3
 8001566:	4610      	mov	r0, r2
 8001568:	f7ff fbdc 	bl	8000d24 <__aeabi_fsub>
 800156c:	4603      	mov	r3, r0
 800156e:	4619      	mov	r1, r3
 8001570:	4620      	mov	r0, r4
 8001572:	f7fe fe59 	bl	8000228 <__aeabi_fmul>
 8001576:	4603      	mov	r3, r0
 8001578:	461e      	mov	r6, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685c      	ldr	r4, [r3, #4]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff fc86 	bl	8000e90 <__aeabi_i2f>
 8001584:	4603      	mov	r3, r0
 8001586:	4619      	mov	r1, r3
 8001588:	4620      	mov	r0, r4
 800158a:	f7fe fe4d 	bl	8000228 <__aeabi_fmul>
 800158e:	4603      	mov	r3, r0
 8001590:	4619      	mov	r1, r3
 8001592:	4630      	mov	r0, r6
 8001594:	f7ff fbc8 	bl	8000d28 <__addsf3>
 8001598:	4603      	mov	r3, r0
 800159a:	4698      	mov	r8, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689c      	ldr	r4, [r3, #8]
 80015a0:	6978      	ldr	r0, [r7, #20]
 80015a2:	f7ff fc75 	bl	8000e90 <__aeabi_i2f>
 80015a6:	4606      	mov	r6, r0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fbba 	bl	8000d28 <__addsf3>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4619      	mov	r1, r3
 80015b8:	4630      	mov	r0, r6
 80015ba:	f7ff fbb3 	bl	8000d24 <__aeabi_fsub>
 80015be:	4603      	mov	r3, r0
 80015c0:	461a      	mov	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4610      	mov	r0, r2
 80015ca:	f7ff fbad 	bl	8000d28 <__addsf3>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4619      	mov	r1, r3
 80015d2:	4620      	mov	r0, r4
 80015d4:	f7fe fe28 	bl	8000228 <__aeabi_fmul>
 80015d8:	4603      	mov	r3, r0
 80015da:	4619      	mov	r1, r3
 80015dc:	4640      	mov	r0, r8
 80015de:	f7ff fba3 	bl	8000d28 <__addsf3>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4619      	mov	r1, r3
 80015e6:	4628      	mov	r0, r5
 80015e8:	f7ff fb9e 	bl	8000d28 <__addsf3>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fd18 	bl	8001024 <__aeabi_f2iz>
 80015f4:	4602      	mov	r2, r0
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	619a      	str	r2, [r3, #24]

		p->prev_error = p->last_error;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	611a      	str	r2, [r3, #16]
	  p->last_error = error;
 8001602:	6978      	ldr	r0, [r7, #20]
 8001604:	f7ff fc44 	bl	8000e90 <__aeabi_i2f>
 8001608:	4602      	mov	r2, r0
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60da      	str	r2, [r3, #12]

		if(p->pwm_add>p->limit) p->pwm_add=p->limit;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699a      	ldr	r2, [r3, #24]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	429a      	cmp	r2, r3
 8001618:	dd03      	ble.n	8001622 <PID_Cal+0x106>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	619a      	str	r2, [r3, #24]
		if(p->pwm_add<-p->limit) p->pwm_add=-p->limit;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699a      	ldr	r2, [r3, #24]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	425b      	negs	r3, r3
 800162c:	429a      	cmp	r2, r3
 800162e:	da04      	bge.n	800163a <PID_Cal+0x11e>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	425a      	negs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	619a      	str	r2, [r3, #24]
}
 800163a:	bf00      	nop
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800164e:	f000 fe97 	bl	8002380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001652:	f000 f8d3 	bl	80017fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001656:	f7ff fd69 	bl	800112c <MX_GPIO_Init>
  MX_DMA_Init();
 800165a:	f7ff fd41 	bl	80010e0 <MX_DMA_Init>
  MX_TIM2_Init();
 800165e:	f000 fb07 	bl	8001c70 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001662:	f000 fb59 	bl	8001d18 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001666:	f000 fbab 	bl	8001dc0 <MX_TIM6_Init>
  MX_TIM8_Init();
 800166a:	f000 fbdf 	bl	8001e2c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800166e:	f000 fd8d 	bl	800218c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE); //使能IDLE中断
 8001672:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <main+0x178>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	4b51      	ldr	r3, [pc, #324]	; (80017c0 <main+0x178>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 0210 	orr.w	r2, r2, #16
 8001680:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1,uart1_rx_buffer,BUFFER_SIZE);//DMA接收函数，此句一定要加，不加接收不到第一次传进来的实数据是空的
 8001682:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001686:	494f      	ldr	r1, [pc, #316]	; (80017c4 <main+0x17c>)
 8001688:	484d      	ldr	r0, [pc, #308]	; (80017c0 <main+0x178>)
 800168a:	f003 faed 	bl	8004c68 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 800168e:	484e      	ldr	r0, [pc, #312]	; (80017c8 <main+0x180>)
 8001690:	f002 fa76 	bl	8003b80 <HAL_TIM_Base_Start_IT>

  PID_Init(&LeftMotor_PID);
 8001694:	484d      	ldr	r0, [pc, #308]	; (80017cc <main+0x184>)
 8001696:	f7ff ff1b 	bl	80014d0 <PID_Init>
  PID_Init(&RightMotor_PID);
 800169a:	484d      	ldr	r0, [pc, #308]	; (80017d0 <main+0x188>)
 800169c:	f7ff ff18 	bl	80014d0 <PID_Init>

  MotorInit();
 80016a0:	f7ff fdae 	bl	8001200 <MotorInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(recv_end_flag == 1)
 80016a4:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <main+0x18c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d1fa      	bne.n	80016a4 <main+0x5c>
	  	{
	  	  if(uart1_rx_buffer[0] == 0x6d)
 80016ae:	4b45      	ldr	r3, [pc, #276]	; (80017c4 <main+0x17c>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b6d      	cmp	r3, #109	; 0x6d
 80016b4:	d160      	bne.n	8001778 <main+0x130>
	  	  {
	  	    if(rx_len <=9)
 80016b6:	4b48      	ldr	r3, [pc, #288]	; (80017d8 <main+0x190>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b09      	cmp	r3, #9
 80016be:	d838      	bhi.n	8001732 <main+0xea>
	  	    {
	  	      leftTargetSpeed = atof(uart1_rx_buffer+1);  //将接收的字符串转换为float类型
 80016c0:	4b46      	ldr	r3, [pc, #280]	; (80017dc <main+0x194>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 fa8c 	bl	8005be0 <atof>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fad4 	bl	8000c7c <__aeabi_d2f>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4a42      	ldr	r2, [pc, #264]	; (80017e0 <main+0x198>)
 80016d8:	6013      	str	r3, [r2, #0]
	  	      rightTargetSpeed = atof(uart1_rx_buffer+4);
 80016da:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <main+0x19c>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f004 fa7f 	bl	8005be0 <atof>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff fac7 	bl	8000c7c <__aeabi_d2f>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4a3d      	ldr	r2, [pc, #244]	; (80017e8 <main+0x1a0>)
 80016f2:	6013      	str	r3, [r2, #0]
	  	      if(uart1_rx_buffer[2] == 0x2d)
 80016f4:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <main+0x17c>)
 80016f6:	789b      	ldrb	r3, [r3, #2]
 80016f8:	2b2d      	cmp	r3, #45	; 0x2d
 80016fa:	d139      	bne.n	8001770 <main+0x128>
	  	      {
	  	        leftTargetSpeed = atof(uart1_rx_buffer+1);  //将接收的字符串转换为float类型
 80016fc:	4b37      	ldr	r3, [pc, #220]	; (80017dc <main+0x194>)
 80016fe:	4618      	mov	r0, r3
 8001700:	f004 fa6e 	bl	8005be0 <atof>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	f7ff fab6 	bl	8000c7c <__aeabi_d2f>
 8001710:	4603      	mov	r3, r0
 8001712:	4a33      	ldr	r2, [pc, #204]	; (80017e0 <main+0x198>)
 8001714:	6013      	str	r3, [r2, #0]
	  	        rightTargetSpeed = atof(uart1_rx_buffer+5);
 8001716:	4b35      	ldr	r3, [pc, #212]	; (80017ec <main+0x1a4>)
 8001718:	4618      	mov	r0, r3
 800171a:	f004 fa61 	bl	8005be0 <atof>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff faa9 	bl	8000c7c <__aeabi_d2f>
 800172a:	4603      	mov	r3, r0
 800172c:	4a2e      	ldr	r2, [pc, #184]	; (80017e8 <main+0x1a0>)
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	e01e      	b.n	8001770 <main+0x128>
	  	      }
	  	    }
	  	    else if(rx_len > 9)
 8001732:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <main+0x190>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b09      	cmp	r3, #9
 800173a:	d919      	bls.n	8001770 <main+0x128>
	  	    {
	  	      leftTargetSpeed = atof(uart1_rx_buffer+1);
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <main+0x194>)
 800173e:	4618      	mov	r0, r3
 8001740:	f004 fa4e 	bl	8005be0 <atof>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff fa96 	bl	8000c7c <__aeabi_d2f>
 8001750:	4603      	mov	r3, r0
 8001752:	4a23      	ldr	r2, [pc, #140]	; (80017e0 <main+0x198>)
 8001754:	6013      	str	r3, [r2, #0]
	  	      rightTargetSpeed = atof(uart1_rx_buffer+5);
 8001756:	4b25      	ldr	r3, [pc, #148]	; (80017ec <main+0x1a4>)
 8001758:	4618      	mov	r0, r3
 800175a:	f004 fa41 	bl	8005be0 <atof>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff fa89 	bl	8000c7c <__aeabi_d2f>
 800176a:	4603      	mov	r3, r0
 800176c:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <main+0x1a0>)
 800176e:	6013      	str	r3, [r2, #0]
	  	    }

	  	    printf("OK\r\n");
 8001770:	481f      	ldr	r0, [pc, #124]	; (80017f0 <main+0x1a8>)
 8001772:	f005 f96f 	bl	8006a54 <puts>
 8001776:	e014      	b.n	80017a2 <main+0x15a>
	  	  }
	  	  else if(uart1_rx_buffer[0] == 0x65)
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <main+0x17c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b65      	cmp	r3, #101	; 0x65
 800177e:	d110      	bne.n	80017a2 <main+0x15a>
	  	  {
	  	    int leftPulse=0,rightPulse=0;
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	2300      	movs	r3, #0
 8001786:	603b      	str	r3, [r7, #0]
	  	    leftPulse = encoderPulse[0];
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <main+0x1ac>)
 800178a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178e:	607b      	str	r3, [r7, #4]
	  	    rightPulse = encoderPulse[1];
 8001790:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <main+0x1ac>)
 8001792:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001796:	603b      	str	r3, [r7, #0]
	  	    printf("%d %d\r\n",leftPulse,rightPulse);
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4816      	ldr	r0, [pc, #88]	; (80017f8 <main+0x1b0>)
 800179e:	f005 f8f3 	bl	8006988 <iprintf>
	  	  //      else if(uart1_rx_buffer[0] == 0x73)
	  	  //      {
	  	  //        TIM2->CNT=0;
	  	  //        TIM3->CNT=0;
	  	  //      }
	  	  recv_end_flag = 0;
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <main+0x18c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
	  	  rx_len = 0;
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <main+0x190>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
	  	  memset(uart1_rx_buffer,0,rx_len);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <main+0x190>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	2100      	movs	r1, #0
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <main+0x17c>)
 80017ba:	f005 fa2b 	bl	8006c14 <memset>
	  if(recv_end_flag == 1)
 80017be:	e771      	b.n	80016a4 <main+0x5c>
 80017c0:	200005cc 	.word	0x200005cc
 80017c4:	20000374 	.word	0x20000374
 80017c8:	200002e0 	.word	0x200002e0
 80017cc:	20000214 	.word	0x20000214
 80017d0:	20000230 	.word	0x20000230
 80017d4:	20000371 	.word	0x20000371
 80017d8:	20000370 	.word	0x20000370
 80017dc:	20000375 	.word	0x20000375
 80017e0:	2000020c 	.word	0x2000020c
 80017e4:	20000378 	.word	0x20000378
 80017e8:	20000210 	.word	0x20000210
 80017ec:	20000379 	.word	0x20000379
 80017f0:	080088f0 	.word	0x080088f0
 80017f4:	200001f0 	.word	0x200001f0
 80017f8:	080088f4 	.word	0x080088f4

080017fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b090      	sub	sp, #64	; 0x40
 8001800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001802:	f107 0318 	add.w	r3, r7, #24
 8001806:	2228      	movs	r2, #40	; 0x28
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f005 fa02 	bl	8006c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800181e:	2301      	movs	r3, #1
 8001820:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001822:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001826:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800182c:	2301      	movs	r3, #1
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001830:	2302      	movs	r3, #2
 8001832:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001838:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800183a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800183e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001840:	f107 0318 	add.w	r3, r7, #24
 8001844:	4618      	mov	r0, r3
 8001846:	f001 fd3b 	bl	80032c0 <HAL_RCC_OscConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001850:	f000 f884 	bl	800195c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001854:	230f      	movs	r3, #15
 8001856:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001858:	2302      	movs	r3, #2
 800185a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2102      	movs	r1, #2
 800186e:	4618      	mov	r0, r3
 8001870:	f001 ffa8 	bl	80037c4 <HAL_RCC_ClockConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800187a:	f000 f86f 	bl	800195c <Error_Handler>
  }
}
 800187e:	bf00      	nop
 8001880:	3740      	adds	r7, #64	; 0x40
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  //定时器6中断回调函数
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	float c_leftSpeed,c_rightSpeed;
  if(htim==(&htim6))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a2c      	ldr	r2, [pc, #176]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d150      	bne.n	800193a <HAL_TIM_PeriodElapsedCallback+0xb2>
  {
		GetEncoderPulse();
 8001898:	f7ff fd82 	bl	80013a0 <GetEncoderPulse>

		c_leftSpeed = CalActualSpeed(encoderValue[0]);   //获得当前的速度值
 800189c:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800189e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fd38 	bl	8001318 <CalActualSpeed>
 80018a8:	60f8      	str	r0, [r7, #12]
		c_rightSpeed = CalActualSpeed(encoderValue[1]);
 80018aa:	4b27      	ldr	r3, [pc, #156]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80018ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fd31 	bl	8001318 <CalActualSpeed>
 80018b6:	60b8      	str	r0, [r7, #8]
//    printf("leftpulse%d\r\n",encoderPulse[0]);
//    printf("rightpulse%d\r\n",encoderPulse[1]);
		PID_Cal(leftTargetSpeed,c_leftSpeed,&LeftMotor_PID);
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fbb1 	bl	8001024 <__aeabi_f2iz>
 80018c2:	4604      	mov	r4, r0
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f7ff fbad 	bl	8001024 <__aeabi_f2iz>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a20      	ldr	r2, [pc, #128]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80018ce:	4619      	mov	r1, r3
 80018d0:	4620      	mov	r0, r4
 80018d2:	f7ff fe23 	bl	800151c <PID_Cal>
		PID_Cal(rightTargetSpeed,c_rightSpeed,&RightMotor_PID);
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fba2 	bl	8001024 <__aeabi_f2iz>
 80018e0:	4604      	mov	r4, r0
 80018e2:	68b8      	ldr	r0, [r7, #8]
 80018e4:	f7ff fb9e 	bl	8001024 <__aeabi_f2iz>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80018ec:	4619      	mov	r1, r3
 80018ee:	4620      	mov	r0, r4
 80018f0:	f7ff fe14 	bl	800151c <PID_Cal>

		MotorControl(LeftMotor_PID.pwm_add,RightMotor_PID.pwm_add);  //PID调节
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a17      	ldr	r2, [pc, #92]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80018fa:	6992      	ldr	r2, [r2, #24]
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fce0 	bl	80012c4 <MotorControl>

    if(leftTargetSpeed==0)
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f04f 0100 	mov.w	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fb57 	bl	8000fc0 <__aeabi_fcmpeq>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <HAL_TIM_PeriodElapsedCallback+0x96>
    {
      LeftMotor_PID.pwm_add = 0;  //PID增量清零
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
    }
    if(rightTargetSpeed==0)
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f04f 0100 	mov.w	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fb4a 	bl	8000fc0 <__aeabi_fcmpeq>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d100      	bne.n	8001934 <HAL_TIM_PeriodElapsedCallback+0xac>
//	  printf("----------------------------\r\n");
//		 printf("{currentLeftSpeed is:%.2f}\r\n",c_leftSpeed);
//		 printf("{currentrightSpeed is:%.2f}\r\n",c_rightSpeed);
//     printf("----------------------------\r\n");
  }
}
 8001932:	e002      	b.n	800193a <HAL_TIM_PeriodElapsedCallback+0xb2>
      RightMotor_PID.pwm_add = 0;
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001936:	2200      	movs	r2, #0
 8001938:	619a      	str	r2, [r3, #24]
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	bd90      	pop	{r4, r7, pc}
 8001942:	bf00      	nop
 8001944:	200002e0 	.word	0x200002e0
 8001948:	20000208 	.word	0x20000208
 800194c:	2000020c 	.word	0x2000020c
 8001950:	20000214 	.word	0x20000214
 8001954:	20000210 	.word	0x20000210
 8001958:	20000230 	.word	0x20000230

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001964:	e7fe      	b.n	8001964 <Error_Handler+0x8>
	...

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_MspInit+0x5c>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <HAL_MspInit+0x5c>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6193      	str	r3, [r2, #24]
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_MspInit+0x5c>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_MspInit+0x5c>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <HAL_MspInit+0x5c>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_MspInit+0x5c>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_MspInit+0x60>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_MspInit+0x60>)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010000 	.word	0x40010000

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <NMI_Handler+0x4>

080019d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <MemManage_Handler+0x4>

080019de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a12:	f000 fcfb 	bl	800240c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <DMA1_Channel4_IRQHandler+0x10>)
 8001a22:	f001 f837 	bl	8002a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000658 	.word	0x20000658

08001a30 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <DMA1_Channel5_IRQHandler+0x10>)
 8001a36:	f001 f82d 	bl	8002a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000614 	.word	0x20000614

08001a44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uint32_t tmp_flag = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
  uint32_t temp;
  tmp_flag =__HAL_UART_GET_FLAG(&huart1,UART_FLAG_IDLE); //获取IDLE标志位
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <USART1_IRQHandler+0x78>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0310 	and.w	r3, r3, #16
 8001a58:	2b10      	cmp	r3, #16
 8001a5a:	bf0c      	ite	eq
 8001a5c:	2301      	moveq	r3, #1
 8001a5e:	2300      	movne	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	60fb      	str	r3, [r7, #12]
  if((tmp_flag != RESET))//idle标志被置位
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d01b      	beq.n	8001aa2 <USART1_IRQHandler+0x5e>
  {
	__HAL_UART_CLEAR_IDLEFLAG(&huart1);//清除标志位
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <USART1_IRQHandler+0x78>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <USART1_IRQHandler+0x78>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
	HAL_UART_DMAStop(&huart1);
 8001a80:	480e      	ldr	r0, [pc, #56]	; (8001abc <USART1_IRQHandler+0x78>)
 8001a82:	f003 f916 	bl	8004cb2 <HAL_UART_DMAStop>
	temp  =  __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);// 获取DMA中未传输的数据个数
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <USART1_IRQHandler+0x7c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	60bb      	str	r3, [r7, #8]

	rx_len =  BUFFER_SIZE - temp; //总计数减去未传输的数据个数，得到已经接收的数据个数
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f1c3 0358 	rsb	r3, r3, #88	; 0x58
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <USART1_IRQHandler+0x80>)
 8001a9a:	701a      	strb	r2, [r3, #0]
	recv_end_flag = 1;	// 接受完成标志位置1
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <USART1_IRQHandler+0x84>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Receive_DMA(&huart1,uart1_rx_buffer,BUFFER_SIZE);//重新打开DMA接收
 8001aa2:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001aa6:	4909      	ldr	r1, [pc, #36]	; (8001acc <USART1_IRQHandler+0x88>)
 8001aa8:	4804      	ldr	r0, [pc, #16]	; (8001abc <USART1_IRQHandler+0x78>)
 8001aaa:	f003 f8dd 	bl	8004c68 <HAL_UART_Receive_DMA>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001aae:	4803      	ldr	r0, [pc, #12]	; (8001abc <USART1_IRQHandler+0x78>)
 8001ab0:	f003 f97e 	bl	8004db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200005cc 	.word	0x200005cc
 8001ac0:	20000614 	.word	0x20000614
 8001ac4:	20000370 	.word	0x20000370
 8001ac8:	20000371 	.word	0x20000371
 8001acc:	20000374 	.word	0x20000374

08001ad0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <TIM6_IRQHandler+0x10>)
 8001ad6:	f002 faed 	bl	80040b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200002e0 	.word	0x200002e0

08001ae4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return 1;
 8001ae8:	2301      	movs	r3, #1
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <_kill>:

int _kill(int pid, int sig)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001afc:	f005 f8ea 	bl	8006cd4 <__errno>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2216      	movs	r2, #22
 8001b04:	601a      	str	r2, [r3, #0]
  return -1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_exit>:

void _exit (int status)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ffe7 	bl	8001af2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b24:	e7fe      	b.n	8001b24 <_exit+0x12>

08001b26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e00a      	b.n	8001b4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b38:	f3af 8000 	nop.w
 8001b3c:	4601      	mov	r1, r0
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	60ba      	str	r2, [r7, #8]
 8001b44:	b2ca      	uxtb	r2, r1
 8001b46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	dbf0      	blt.n	8001b38 <_read+0x12>
  }

  return len;
 8001b56:	687b      	ldr	r3, [r7, #4]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e009      	b.n	8001b86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	60ba      	str	r2, [r7, #8]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 faf4 	bl	8002168 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	3301      	adds	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	dbf1      	blt.n	8001b72 <_write+0x12>
  }
  return len;
 8001b8e:	687b      	ldr	r3, [r7, #4]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_close>:

int _close(int file)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bbe:	605a      	str	r2, [r3, #4]
  return 0;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <_isatty>:

int _isatty(int file)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bd4:	2301      	movs	r3, #1
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c00:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <_sbrk+0x5c>)
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <_sbrk+0x60>)
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <_sbrk+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <_sbrk+0x64>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <_sbrk+0x68>)
 8001c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d207      	bcs.n	8001c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c28:	f005 f854 	bl	8006cd4 <__errno>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	220c      	movs	r2, #12
 8001c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	e009      	b.n	8001c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <_sbrk+0x64>)
 8001c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	2000c000 	.word	0x2000c000
 8001c58:	00000400 	.word	0x00000400
 8001c5c:	2000024c 	.word	0x2000024c
 8001c60:	200007f0 	.word	0x200007f0

08001c64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	; 0x30
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	2224      	movs	r2, #36	; 0x24
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f004 ffc8 	bl	8006c14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c8c:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <MX_TIM2_Init+0xa4>)
 8001c8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <MX_TIM2_Init+0xa4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <MX_TIM2_Init+0xa4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <MX_TIM2_Init+0xa4>)
 8001ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <MX_TIM2_Init+0xa4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <MX_TIM2_Init+0xa4>)
 8001cb0:	2280      	movs	r2, #128	; 0x80
 8001cb2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480d      	ldr	r0, [pc, #52]	; (8001d14 <MX_TIM2_Init+0xa4>)
 8001ce0:	f002 f8b8 	bl	8003e54 <HAL_TIM_Encoder_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001cea:	f7ff fe37 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4806      	ldr	r0, [pc, #24]	; (8001d14 <MX_TIM2_Init+0xa4>)
 8001cfc:	f002 fe12 	bl	8004924 <HAL_TIMEx_MasterConfigSynchronization>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d06:	f7ff fe29 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	3730      	adds	r7, #48	; 0x30
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000250 	.word	0x20000250

08001d18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	; 0x30
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d1e:	f107 030c 	add.w	r3, r7, #12
 8001d22:	2224      	movs	r2, #36	; 0x24
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 ff74 	bl	8006c14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d34:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <MX_TIM3_Init+0xa0>)
 8001d36:	4a21      	ldr	r2, [pc, #132]	; (8001dbc <MX_TIM3_Init+0xa4>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <MX_TIM3_Init+0xa0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <MX_TIM3_Init+0xa0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <MX_TIM3_Init+0xa0>)
 8001d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <MX_TIM3_Init+0xa0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <MX_TIM3_Init+0xa0>)
 8001d56:	2280      	movs	r2, #128	; 0x80
 8001d58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d62:	2301      	movs	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d72:	2301      	movs	r3, #1
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	4619      	mov	r1, r3
 8001d84:	480c      	ldr	r0, [pc, #48]	; (8001db8 <MX_TIM3_Init+0xa0>)
 8001d86:	f002 f865 	bl	8003e54 <HAL_TIM_Encoder_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d90:	f7ff fde4 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_TIM3_Init+0xa0>)
 8001da2:	f002 fdbf 	bl	8004924 <HAL_TIMEx_MasterConfigSynchronization>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001dac:	f7ff fdd6 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	3730      	adds	r7, #48	; 0x30
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000298 	.word	0x20000298
 8001dbc:	40000400 	.word	0x40000400

08001dc0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc6:	463b      	mov	r3, r7
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001dd0:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <MX_TIM6_Init+0x68>)
 8001dd2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 499;
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001dd6:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001dda:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7199;
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001de4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001de8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001df0:	480c      	ldr	r0, [pc, #48]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001df2:	f001 fe75 	bl	8003ae0 <HAL_TIM_Base_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001dfc:	f7ff fdae 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e00:	2300      	movs	r3, #0
 8001e02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e08:	463b      	mov	r3, r7
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001e0e:	f002 fd89 	bl	8004924 <HAL_TIMEx_MasterConfigSynchronization>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e18:	f7ff fda0 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	200002e0 	.word	0x200002e0
 8001e28:	40001000 	.word	0x40001000

08001e2c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b092      	sub	sp, #72	; 0x48
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
 8001e4c:	615a      	str	r2, [r3, #20]
 8001e4e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2220      	movs	r2, #32
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f004 fedc 	bl	8006c14 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e5c:	4b39      	ldr	r3, [pc, #228]	; (8001f44 <MX_TIM8_Init+0x118>)
 8001e5e:	4a3a      	ldr	r2, [pc, #232]	; (8001f48 <MX_TIM8_Init+0x11c>)
 8001e60:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <MX_TIM8_Init+0x118>)
 8001e64:	2203      	movs	r2, #3
 8001e66:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e68:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <MX_TIM8_Init+0x118>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8001e6e:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <MX_TIM8_Init+0x118>)
 8001e70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e74:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e76:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <MX_TIM8_Init+0x118>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e7c:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <MX_TIM8_Init+0x118>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e82:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <MX_TIM8_Init+0x118>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001e88:	482e      	ldr	r0, [pc, #184]	; (8001f44 <MX_TIM8_Init+0x118>)
 8001e8a:	f001 fed9 	bl	8003c40 <HAL_TIM_PWM_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001e94:	f7ff fd62 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ea0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4827      	ldr	r0, [pc, #156]	; (8001f44 <MX_TIM8_Init+0x118>)
 8001ea8:	f002 fd3c 	bl	8004924 <HAL_TIMEx_MasterConfigSynchronization>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001eb2:	f7ff fd53 	bl	800195c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb6:	2360      	movs	r3, #96	; 0x60
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	4619      	mov	r1, r3
 8001eda:	481a      	ldr	r0, [pc, #104]	; (8001f44 <MX_TIM8_Init+0x118>)
 8001edc:	f002 f9f2 	bl	80042c4 <HAL_TIM_PWM_ConfigChannel>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001ee6:	f7ff fd39 	bl	800195c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eee:	2204      	movs	r2, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4814      	ldr	r0, [pc, #80]	; (8001f44 <MX_TIM8_Init+0x118>)
 8001ef4:	f002 f9e6 	bl	80042c4 <HAL_TIM_PWM_ConfigChannel>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001efe:	f7ff fd2d 	bl	800195c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	4619      	mov	r1, r3
 8001f24:	4807      	ldr	r0, [pc, #28]	; (8001f44 <MX_TIM8_Init+0x118>)
 8001f26:	f002 fd69 	bl	80049fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001f30:	f7ff fd14 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001f34:	4803      	ldr	r0, [pc, #12]	; (8001f44 <MX_TIM8_Init+0x118>)
 8001f36:	f000 f8e5 	bl	8002104 <HAL_TIM_MspPostInit>

}
 8001f3a:	bf00      	nop
 8001f3c:	3748      	adds	r7, #72	; 0x48
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000328 	.word	0x20000328
 8001f48:	40013400 	.word	0x40013400

08001f4c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08c      	sub	sp, #48	; 0x30
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6a:	d14f      	bne.n	800200c <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f6c:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	4a3d      	ldr	r2, [pc, #244]	; (8002068 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	61d3      	str	r3, [r2, #28]
 8001f78:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	4b38      	ldr	r3, [pc, #224]	; (8002068 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a37      	ldr	r2, [pc, #220]	; (8002068 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b35      	ldr	r3, [pc, #212]	; (8002068 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9c:	4b32      	ldr	r3, [pc, #200]	; (8002068 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a31      	ldr	r2, [pc, #196]	; (8002068 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001fa2:	f043 0308 	orr.w	r3, r3, #8
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4828      	ldr	r0, [pc, #160]	; (800206c <HAL_TIM_Encoder_MspInit+0x120>)
 8001fca:	f000 ffcd 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fce:	2308      	movs	r3, #8
 8001fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fda:	f107 031c 	add.w	r3, r7, #28
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4823      	ldr	r0, [pc, #140]	; (8002070 <HAL_TIM_Encoder_MspInit+0x124>)
 8001fe2:	f000 ffc1 	bl	8002f68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_TIM_Encoder_MspInit+0x128>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002004:	4a1b      	ldr	r2, [pc, #108]	; (8002074 <HAL_TIM_Encoder_MspInit+0x128>)
 8002006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002008:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800200a:	e028      	b.n	800205e <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM3)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a19      	ldr	r2, [pc, #100]	; (8002078 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d123      	bne.n	800205e <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	4a13      	ldr	r2, [pc, #76]	; (8002068 <HAL_TIM_Encoder_MspInit+0x11c>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	61d3      	str	r3, [r2, #28]
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	6193      	str	r3, [r2, #24]
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_TIM_Encoder_MspInit+0x11c>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002046:	23c0      	movs	r3, #192	; 0xc0
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204a:	2300      	movs	r3, #0
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	4804      	ldr	r0, [pc, #16]	; (800206c <HAL_TIM_Encoder_MspInit+0x120>)
 800205a:	f000 ff85 	bl	8002f68 <HAL_GPIO_Init>
}
 800205e:	bf00      	nop
 8002060:	3730      	adds	r7, #48	; 0x30
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	40010800 	.word	0x40010800
 8002070:	40010c00 	.word	0x40010c00
 8002074:	40010000 	.word	0x40010000
 8002078:	40000400 	.word	0x40000400

0800207c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0d      	ldr	r2, [pc, #52]	; (80020c0 <HAL_TIM_Base_MspInit+0x44>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d113      	bne.n	80020b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_TIM_Base_MspInit+0x48>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <HAL_TIM_Base_MspInit+0x48>)
 8002094:	f043 0310 	orr.w	r3, r3, #16
 8002098:	61d3      	str	r3, [r2, #28]
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_TIM_Base_MspInit+0x48>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	2036      	movs	r0, #54	; 0x36
 80020ac:	f000 faa1 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80020b0:	2036      	movs	r0, #54	; 0x36
 80020b2:	f000 faba 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40001000 	.word	0x40001000
 80020c4:	40021000 	.word	0x40021000

080020c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a09      	ldr	r2, [pc, #36]	; (80020fc <HAL_TIM_PWM_MspInit+0x34>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d10b      	bne.n	80020f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_TIM_PWM_MspInit+0x38>)
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	4a08      	ldr	r2, [pc, #32]	; (8002100 <HAL_TIM_PWM_MspInit+0x38>)
 80020e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020e4:	6193      	str	r3, [r2, #24]
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_TIM_PWM_MspInit+0x38>)
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	40013400 	.word	0x40013400
 8002100:	40021000 	.word	0x40021000

08002104 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM8)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a0f      	ldr	r2, [pc, #60]	; (800215c <HAL_TIM_MspPostInit+0x58>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d117      	bne.n	8002154 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002124:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_TIM_MspPostInit+0x5c>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <HAL_TIM_MspPostInit+0x5c>)
 800212a:	f043 0310 	orr.w	r3, r3, #16
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_TIM_MspPostInit+0x5c>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800213c:	23c0      	movs	r3, #192	; 0xc0
 800213e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2302      	movs	r3, #2
 8002146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002148:	f107 0310 	add.w	r3, r7, #16
 800214c:	4619      	mov	r1, r3
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <HAL_TIM_MspPostInit+0x60>)
 8002150:	f000 ff0a 	bl	8002f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002154:	bf00      	nop
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40013400 	.word	0x40013400
 8002160:	40021000 	.word	0x40021000
 8002164:	40011000 	.word	0x40011000

08002168 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8002170:	1d39      	adds	r1, r7, #4
 8002172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002176:	2201      	movs	r2, #1
 8002178:	4803      	ldr	r0, [pc, #12]	; (8002188 <__io_putchar+0x20>)
 800217a:	f002 fcf2 	bl	8004b62 <HAL_UART_Transmit>
	return ch;
 800217e:	687b      	ldr	r3, [r7, #4]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	200005cc 	.word	0x200005cc

0800218c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <MX_USART1_UART_Init+0x4c>)
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <MX_USART1_UART_Init+0x50>)
 8002194:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <MX_USART1_UART_Init+0x4c>)
 8002198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800219c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800219e:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <MX_USART1_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <MX_USART1_UART_Init+0x4c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <MX_USART1_UART_Init+0x4c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <MX_USART1_UART_Init+0x4c>)
 80021b2:	220c      	movs	r2, #12
 80021b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <MX_USART1_UART_Init+0x4c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <MX_USART1_UART_Init+0x4c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <MX_USART1_UART_Init+0x4c>)
 80021c4:	f002 fc7d 	bl	8004ac2 <HAL_UART_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021ce:	f7ff fbc5 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200005cc 	.word	0x200005cc
 80021dc:	40013800 	.word	0x40013800

080021e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0310 	add.w	r3, r7, #16
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a47      	ldr	r2, [pc, #284]	; (8002318 <HAL_UART_MspInit+0x138>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	f040 8086 	bne.w	800230e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002202:	4b46      	ldr	r3, [pc, #280]	; (800231c <HAL_UART_MspInit+0x13c>)
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	4a45      	ldr	r2, [pc, #276]	; (800231c <HAL_UART_MspInit+0x13c>)
 8002208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220c:	6193      	str	r3, [r2, #24]
 800220e:	4b43      	ldr	r3, [pc, #268]	; (800231c <HAL_UART_MspInit+0x13c>)
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	4b40      	ldr	r3, [pc, #256]	; (800231c <HAL_UART_MspInit+0x13c>)
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	4a3f      	ldr	r2, [pc, #252]	; (800231c <HAL_UART_MspInit+0x13c>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6193      	str	r3, [r2, #24]
 8002226:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_UART_MspInit+0x13c>)
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002236:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800223c:	2303      	movs	r3, #3
 800223e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	4619      	mov	r1, r3
 8002246:	4836      	ldr	r0, [pc, #216]	; (8002320 <HAL_UART_MspInit+0x140>)
 8002248:	f000 fe8e 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800224c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002250:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 0310 	add.w	r3, r7, #16
 800225e:	4619      	mov	r1, r3
 8002260:	482f      	ldr	r0, [pc, #188]	; (8002320 <HAL_UART_MspInit+0x140>)
 8002262:	f000 fe81 	bl	8002f68 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002266:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <HAL_UART_MspInit+0x144>)
 8002268:	4a2f      	ldr	r2, [pc, #188]	; (8002328 <HAL_UART_MspInit+0x148>)
 800226a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800226c:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_UART_MspInit+0x144>)
 800226e:	2200      	movs	r2, #0
 8002270:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002272:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <HAL_UART_MspInit+0x144>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002278:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <HAL_UART_MspInit+0x144>)
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800227e:	4b29      	ldr	r3, [pc, #164]	; (8002324 <HAL_UART_MspInit+0x144>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002284:	4b27      	ldr	r3, [pc, #156]	; (8002324 <HAL_UART_MspInit+0x144>)
 8002286:	2200      	movs	r2, #0
 8002288:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800228a:	4b26      	ldr	r3, [pc, #152]	; (8002324 <HAL_UART_MspInit+0x144>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002290:	4b24      	ldr	r3, [pc, #144]	; (8002324 <HAL_UART_MspInit+0x144>)
 8002292:	2200      	movs	r2, #0
 8002294:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002296:	4823      	ldr	r0, [pc, #140]	; (8002324 <HAL_UART_MspInit+0x144>)
 8002298:	f000 f9e2 	bl	8002660 <HAL_DMA_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80022a2:	f7ff fb5b 	bl	800195c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <HAL_UART_MspInit+0x144>)
 80022aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80022ac:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <HAL_UART_MspInit+0x144>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80022b2:	4b1e      	ldr	r3, [pc, #120]	; (800232c <HAL_UART_MspInit+0x14c>)
 80022b4:	4a1e      	ldr	r2, [pc, #120]	; (8002330 <HAL_UART_MspInit+0x150>)
 80022b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022b8:	4b1c      	ldr	r3, [pc, #112]	; (800232c <HAL_UART_MspInit+0x14c>)
 80022ba:	2210      	movs	r2, #16
 80022bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022be:	4b1b      	ldr	r3, [pc, #108]	; (800232c <HAL_UART_MspInit+0x14c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_UART_MspInit+0x14c>)
 80022c6:	2280      	movs	r2, #128	; 0x80
 80022c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_UART_MspInit+0x14c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022d0:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_UART_MspInit+0x14c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_UART_MspInit+0x14c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_UART_MspInit+0x14c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80022e2:	4812      	ldr	r0, [pc, #72]	; (800232c <HAL_UART_MspInit+0x14c>)
 80022e4:	f000 f9bc 	bl	8002660 <HAL_DMA_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80022ee:	f7ff fb35 	bl	800195c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	; (800232c <HAL_UART_MspInit+0x14c>)
 80022f6:	639a      	str	r2, [r3, #56]	; 0x38
 80022f8:	4a0c      	ldr	r2, [pc, #48]	; (800232c <HAL_UART_MspInit+0x14c>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	2025      	movs	r0, #37	; 0x25
 8002304:	f000 f975 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002308:	2025      	movs	r0, #37	; 0x25
 800230a:	f000 f98e 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800230e:	bf00      	nop
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40013800 	.word	0x40013800
 800231c:	40021000 	.word	0x40021000
 8002320:	40010800 	.word	0x40010800
 8002324:	20000614 	.word	0x20000614
 8002328:	40020058 	.word	0x40020058
 800232c:	20000658 	.word	0x20000658
 8002330:	40020044 	.word	0x40020044

08002334 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002334:	f7ff fc96 	bl	8001c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002338:	480b      	ldr	r0, [pc, #44]	; (8002368 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800233a:	490c      	ldr	r1, [pc, #48]	; (800236c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800233c:	4a0c      	ldr	r2, [pc, #48]	; (8002370 <LoopFillZerobss+0x16>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002340:	e002      	b.n	8002348 <LoopCopyDataInit>

08002342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002346:	3304      	adds	r3, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800234c:	d3f9      	bcc.n	8002342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234e:	4a09      	ldr	r2, [pc, #36]	; (8002374 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002350:	4c09      	ldr	r4, [pc, #36]	; (8002378 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002354:	e001      	b.n	800235a <LoopFillZerobss>

08002356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002358:	3204      	adds	r2, #4

0800235a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800235c:	d3fb      	bcc.n	8002356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800235e:	f004 fcbf 	bl	8006ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002362:	f7ff f971 	bl	8001648 <main>
  bx lr
 8002366:	4770      	bx	lr
  ldr r0, =_sdata
 8002368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800236c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002370:	08008cec 	.word	0x08008cec
  ldr r2, =_sbss
 8002374:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002378:	200007ec 	.word	0x200007ec

0800237c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800237c:	e7fe      	b.n	800237c <ADC1_2_IRQHandler>
	...

08002380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_Init+0x28>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <HAL_Init+0x28>)
 800238a:	f043 0310 	orr.w	r3, r3, #16
 800238e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002390:	2003      	movs	r0, #3
 8002392:	f000 f923 	bl	80025dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002396:	200f      	movs	r0, #15
 8002398:	f000 f808 	bl	80023ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800239c:	f7ff fae4 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40022000 	.word	0x40022000

080023ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_InitTick+0x54>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_InitTick+0x58>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f93b 	bl	8002646 <HAL_SYSTICK_Config>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00e      	b.n	80023f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b0f      	cmp	r3, #15
 80023de:	d80a      	bhi.n	80023f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e0:	2200      	movs	r2, #0
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295
 80023e8:	f000 f903 	bl	80025f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023ec:	4a06      	ldr	r2, [pc, #24]	; (8002408 <HAL_InitTick+0x5c>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	e000      	b.n	80023f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000000 	.word	0x20000000
 8002404:	20000008 	.word	0x20000008
 8002408:	20000004 	.word	0x20000004

0800240c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_IncTick+0x1c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_IncTick+0x20>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4413      	add	r3, r2
 800241c:	4a03      	ldr	r2, [pc, #12]	; (800242c <HAL_IncTick+0x20>)
 800241e:	6013      	str	r3, [r2, #0]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	20000008 	.word	0x20000008
 800242c:	2000069c 	.word	0x2000069c

08002430 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return uwTick;
 8002434:	4b02      	ldr	r3, [pc, #8]	; (8002440 <HAL_GetTick+0x10>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	2000069c 	.word	0x2000069c

08002444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <__NVIC_SetPriorityGrouping+0x44>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002460:	4013      	ands	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800246c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002476:	4a04      	ldr	r2, [pc, #16]	; (8002488 <__NVIC_SetPriorityGrouping+0x44>)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	60d3      	str	r3, [r2, #12]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	0a1b      	lsrs	r3, r3, #8
 8002496:	f003 0307 	and.w	r3, r3, #7
}
 800249a:	4618      	mov	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	db0b      	blt.n	80024d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	f003 021f 	and.w	r2, r3, #31
 80024c0:	4906      	ldr	r1, [pc, #24]	; (80024dc <__NVIC_EnableIRQ+0x34>)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	2001      	movs	r0, #1
 80024ca:	fa00 f202 	lsl.w	r2, r0, r2
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	e000e100 	.word	0xe000e100

080024e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db0a      	blt.n	800250a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	490c      	ldr	r1, [pc, #48]	; (800252c <__NVIC_SetPriority+0x4c>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002508:	e00a      	b.n	8002520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4908      	ldr	r1, [pc, #32]	; (8002530 <__NVIC_SetPriority+0x50>)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	3b04      	subs	r3, #4
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	440b      	add	r3, r1
 800251e:	761a      	strb	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000e100 	.word	0xe000e100
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f1c3 0307 	rsb	r3, r3, #7
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf28      	it	cs
 8002552:	2304      	movcs	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3304      	adds	r3, #4
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <NVIC_EncodePriority+0x30>
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3b03      	subs	r3, #3
 8002562:	e000      	b.n	8002566 <NVIC_EncodePriority+0x32>
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 32ff 	mov.w	r2, #4294967295
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800257c:	f04f 31ff 	mov.w	r1, #4294967295
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43d9      	mvns	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	4313      	orrs	r3, r2
         );
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a8:	d301      	bcc.n	80025ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00f      	b.n	80025ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ae:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <SysTick_Config+0x40>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025b6:	210f      	movs	r1, #15
 80025b8:	f04f 30ff 	mov.w	r0, #4294967295
 80025bc:	f7ff ff90 	bl	80024e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <SysTick_Config+0x40>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025c6:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <SysTick_Config+0x40>)
 80025c8:	2207      	movs	r2, #7
 80025ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	e000e010 	.word	0xe000e010

080025dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ff2d 	bl	8002444 <__NVIC_SetPriorityGrouping>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	4603      	mov	r3, r0
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002604:	f7ff ff42 	bl	800248c <__NVIC_GetPriorityGrouping>
 8002608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	6978      	ldr	r0, [r7, #20]
 8002610:	f7ff ff90 	bl	8002534 <NVIC_EncodePriority>
 8002614:	4602      	mov	r2, r0
 8002616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff5f 	bl	80024e0 <__NVIC_SetPriority>
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff35 	bl	80024a8 <__NVIC_EnableIRQ>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ffa2 	bl	8002598 <SysTick_Config>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e059      	b.n	800272a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <HAL_DMA_Init+0xd4>)
 800267e:	429a      	cmp	r2, r3
 8002680:	d80f      	bhi.n	80026a2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_DMA_Init+0xd8>)
 800268a:	4413      	add	r3, r2
 800268c:	4a2b      	ldr	r2, [pc, #172]	; (800273c <HAL_DMA_Init+0xdc>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	009a      	lsls	r2, r3, #2
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a28      	ldr	r2, [pc, #160]	; (8002740 <HAL_DMA_Init+0xe0>)
 800269e:	63da      	str	r2, [r3, #60]	; 0x3c
 80026a0:	e00e      	b.n	80026c0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b26      	ldr	r3, [pc, #152]	; (8002744 <HAL_DMA_Init+0xe4>)
 80026aa:	4413      	add	r3, r2
 80026ac:	4a23      	ldr	r2, [pc, #140]	; (800273c <HAL_DMA_Init+0xdc>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	009a      	lsls	r2, r3, #2
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a22      	ldr	r2, [pc, #136]	; (8002748 <HAL_DMA_Init+0xe8>)
 80026be:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40020407 	.word	0x40020407
 8002738:	bffdfff8 	.word	0xbffdfff8
 800273c:	cccccccd 	.word	0xcccccccd
 8002740:	40020000 	.word	0x40020000
 8002744:	bffdfbf8 	.word	0xbffdfbf8
 8002748:	40020400 	.word	0x40020400

0800274c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_DMA_Start_IT+0x20>
 8002768:	2302      	movs	r3, #2
 800276a:	e04b      	b.n	8002804 <HAL_DMA_Start_IT+0xb8>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d13a      	bne.n	80027f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fbb1 	bl	8002f0c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 020e 	orr.w	r2, r2, #14
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e00f      	b.n	80027e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0204 	bic.w	r2, r2, #4
 80027d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 020a 	orr.w	r2, r2, #10
 80027e2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	e005      	b.n	8002802 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027fe:	2302      	movs	r3, #2
 8002800:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002802:	7dfb      	ldrb	r3, [r7, #23]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d008      	beq.n	8002836 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2204      	movs	r2, #4
 8002828:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e020      	b.n	8002878 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 020e 	bic.w	r2, r2, #14
 8002844:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f202 	lsl.w	r2, r1, r2
 8002864:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002876:	7bfb      	ldrb	r3, [r7, #15]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
	...

08002884 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d005      	beq.n	80028a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2204      	movs	r2, #4
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	e0d6      	b.n	8002a56 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 020e 	bic.w	r2, r2, #14
 80028b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b64      	ldr	r3, [pc, #400]	; (8002a60 <HAL_DMA_Abort_IT+0x1dc>)
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d958      	bls.n	8002986 <HAL_DMA_Abort_IT+0x102>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a62      	ldr	r2, [pc, #392]	; (8002a64 <HAL_DMA_Abort_IT+0x1e0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d04f      	beq.n	800297e <HAL_DMA_Abort_IT+0xfa>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a61      	ldr	r2, [pc, #388]	; (8002a68 <HAL_DMA_Abort_IT+0x1e4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d048      	beq.n	800297a <HAL_DMA_Abort_IT+0xf6>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a5f      	ldr	r2, [pc, #380]	; (8002a6c <HAL_DMA_Abort_IT+0x1e8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d040      	beq.n	8002974 <HAL_DMA_Abort_IT+0xf0>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a5e      	ldr	r2, [pc, #376]	; (8002a70 <HAL_DMA_Abort_IT+0x1ec>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d038      	beq.n	800296e <HAL_DMA_Abort_IT+0xea>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a5c      	ldr	r2, [pc, #368]	; (8002a74 <HAL_DMA_Abort_IT+0x1f0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d030      	beq.n	8002968 <HAL_DMA_Abort_IT+0xe4>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a5b      	ldr	r2, [pc, #364]	; (8002a78 <HAL_DMA_Abort_IT+0x1f4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d028      	beq.n	8002962 <HAL_DMA_Abort_IT+0xde>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a52      	ldr	r2, [pc, #328]	; (8002a60 <HAL_DMA_Abort_IT+0x1dc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d020      	beq.n	800295c <HAL_DMA_Abort_IT+0xd8>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a57      	ldr	r2, [pc, #348]	; (8002a7c <HAL_DMA_Abort_IT+0x1f8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d019      	beq.n	8002958 <HAL_DMA_Abort_IT+0xd4>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a55      	ldr	r2, [pc, #340]	; (8002a80 <HAL_DMA_Abort_IT+0x1fc>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d012      	beq.n	8002954 <HAL_DMA_Abort_IT+0xd0>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a54      	ldr	r2, [pc, #336]	; (8002a84 <HAL_DMA_Abort_IT+0x200>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00a      	beq.n	800294e <HAL_DMA_Abort_IT+0xca>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a52      	ldr	r2, [pc, #328]	; (8002a88 <HAL_DMA_Abort_IT+0x204>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d102      	bne.n	8002948 <HAL_DMA_Abort_IT+0xc4>
 8002942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002946:	e01b      	b.n	8002980 <HAL_DMA_Abort_IT+0xfc>
 8002948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800294c:	e018      	b.n	8002980 <HAL_DMA_Abort_IT+0xfc>
 800294e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002952:	e015      	b.n	8002980 <HAL_DMA_Abort_IT+0xfc>
 8002954:	2310      	movs	r3, #16
 8002956:	e013      	b.n	8002980 <HAL_DMA_Abort_IT+0xfc>
 8002958:	2301      	movs	r3, #1
 800295a:	e011      	b.n	8002980 <HAL_DMA_Abort_IT+0xfc>
 800295c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002960:	e00e      	b.n	8002980 <HAL_DMA_Abort_IT+0xfc>
 8002962:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002966:	e00b      	b.n	8002980 <HAL_DMA_Abort_IT+0xfc>
 8002968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800296c:	e008      	b.n	8002980 <HAL_DMA_Abort_IT+0xfc>
 800296e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002972:	e005      	b.n	8002980 <HAL_DMA_Abort_IT+0xfc>
 8002974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002978:	e002      	b.n	8002980 <HAL_DMA_Abort_IT+0xfc>
 800297a:	2310      	movs	r3, #16
 800297c:	e000      	b.n	8002980 <HAL_DMA_Abort_IT+0xfc>
 800297e:	2301      	movs	r3, #1
 8002980:	4a42      	ldr	r2, [pc, #264]	; (8002a8c <HAL_DMA_Abort_IT+0x208>)
 8002982:	6053      	str	r3, [r2, #4]
 8002984:	e057      	b.n	8002a36 <HAL_DMA_Abort_IT+0x1b2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a36      	ldr	r2, [pc, #216]	; (8002a64 <HAL_DMA_Abort_IT+0x1e0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d04f      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x1ac>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a34      	ldr	r2, [pc, #208]	; (8002a68 <HAL_DMA_Abort_IT+0x1e4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d048      	beq.n	8002a2c <HAL_DMA_Abort_IT+0x1a8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a33      	ldr	r2, [pc, #204]	; (8002a6c <HAL_DMA_Abort_IT+0x1e8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d040      	beq.n	8002a26 <HAL_DMA_Abort_IT+0x1a2>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a31      	ldr	r2, [pc, #196]	; (8002a70 <HAL_DMA_Abort_IT+0x1ec>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d038      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x19c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a30      	ldr	r2, [pc, #192]	; (8002a74 <HAL_DMA_Abort_IT+0x1f0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d030      	beq.n	8002a1a <HAL_DMA_Abort_IT+0x196>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a2e      	ldr	r2, [pc, #184]	; (8002a78 <HAL_DMA_Abort_IT+0x1f4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d028      	beq.n	8002a14 <HAL_DMA_Abort_IT+0x190>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a26      	ldr	r2, [pc, #152]	; (8002a60 <HAL_DMA_Abort_IT+0x1dc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d020      	beq.n	8002a0e <HAL_DMA_Abort_IT+0x18a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a2a      	ldr	r2, [pc, #168]	; (8002a7c <HAL_DMA_Abort_IT+0x1f8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d019      	beq.n	8002a0a <HAL_DMA_Abort_IT+0x186>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a29      	ldr	r2, [pc, #164]	; (8002a80 <HAL_DMA_Abort_IT+0x1fc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d012      	beq.n	8002a06 <HAL_DMA_Abort_IT+0x182>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a27      	ldr	r2, [pc, #156]	; (8002a84 <HAL_DMA_Abort_IT+0x200>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00a      	beq.n	8002a00 <HAL_DMA_Abort_IT+0x17c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a26      	ldr	r2, [pc, #152]	; (8002a88 <HAL_DMA_Abort_IT+0x204>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d102      	bne.n	80029fa <HAL_DMA_Abort_IT+0x176>
 80029f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f8:	e01b      	b.n	8002a32 <HAL_DMA_Abort_IT+0x1ae>
 80029fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029fe:	e018      	b.n	8002a32 <HAL_DMA_Abort_IT+0x1ae>
 8002a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a04:	e015      	b.n	8002a32 <HAL_DMA_Abort_IT+0x1ae>
 8002a06:	2310      	movs	r3, #16
 8002a08:	e013      	b.n	8002a32 <HAL_DMA_Abort_IT+0x1ae>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e011      	b.n	8002a32 <HAL_DMA_Abort_IT+0x1ae>
 8002a0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a12:	e00e      	b.n	8002a32 <HAL_DMA_Abort_IT+0x1ae>
 8002a14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a18:	e00b      	b.n	8002a32 <HAL_DMA_Abort_IT+0x1ae>
 8002a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a1e:	e008      	b.n	8002a32 <HAL_DMA_Abort_IT+0x1ae>
 8002a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a24:	e005      	b.n	8002a32 <HAL_DMA_Abort_IT+0x1ae>
 8002a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a2a:	e002      	b.n	8002a32 <HAL_DMA_Abort_IT+0x1ae>
 8002a2c:	2310      	movs	r3, #16
 8002a2e:	e000      	b.n	8002a32 <HAL_DMA_Abort_IT+0x1ae>
 8002a30:	2301      	movs	r3, #1
 8002a32:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <HAL_DMA_Abort_IT+0x20c>)
 8002a34:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
    } 
  }
  return status;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40020080 	.word	0x40020080
 8002a64:	40020008 	.word	0x40020008
 8002a68:	4002001c 	.word	0x4002001c
 8002a6c:	40020030 	.word	0x40020030
 8002a70:	40020044 	.word	0x40020044
 8002a74:	40020058 	.word	0x40020058
 8002a78:	4002006c 	.word	0x4002006c
 8002a7c:	40020408 	.word	0x40020408
 8002a80:	4002041c 	.word	0x4002041c
 8002a84:	40020430 	.word	0x40020430
 8002a88:	40020444 	.word	0x40020444
 8002a8c:	40020400 	.word	0x40020400
 8002a90:	40020000 	.word	0x40020000

08002a94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80f1 	beq.w	8002ca0 <HAL_DMA_IRQHandler+0x20c>
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80eb 	beq.w	8002ca0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d107      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0204 	bic.w	r2, r2, #4
 8002ae6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b5f      	ldr	r3, [pc, #380]	; (8002c6c <HAL_DMA_IRQHandler+0x1d8>)
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d958      	bls.n	8002ba6 <HAL_DMA_IRQHandler+0x112>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a5d      	ldr	r2, [pc, #372]	; (8002c70 <HAL_DMA_IRQHandler+0x1dc>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d04f      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x10a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a5c      	ldr	r2, [pc, #368]	; (8002c74 <HAL_DMA_IRQHandler+0x1e0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d048      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x106>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a5a      	ldr	r2, [pc, #360]	; (8002c78 <HAL_DMA_IRQHandler+0x1e4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d040      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x100>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a59      	ldr	r2, [pc, #356]	; (8002c7c <HAL_DMA_IRQHandler+0x1e8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d038      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xfa>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a57      	ldr	r2, [pc, #348]	; (8002c80 <HAL_DMA_IRQHandler+0x1ec>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d030      	beq.n	8002b88 <HAL_DMA_IRQHandler+0xf4>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a56      	ldr	r2, [pc, #344]	; (8002c84 <HAL_DMA_IRQHandler+0x1f0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d028      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xee>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a4d      	ldr	r2, [pc, #308]	; (8002c6c <HAL_DMA_IRQHandler+0x1d8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d020      	beq.n	8002b7c <HAL_DMA_IRQHandler+0xe8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_DMA_IRQHandler+0x1f4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d019      	beq.n	8002b78 <HAL_DMA_IRQHandler+0xe4>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a50      	ldr	r2, [pc, #320]	; (8002c8c <HAL_DMA_IRQHandler+0x1f8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d012      	beq.n	8002b74 <HAL_DMA_IRQHandler+0xe0>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a4f      	ldr	r2, [pc, #316]	; (8002c90 <HAL_DMA_IRQHandler+0x1fc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d00a      	beq.n	8002b6e <HAL_DMA_IRQHandler+0xda>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a4d      	ldr	r2, [pc, #308]	; (8002c94 <HAL_DMA_IRQHandler+0x200>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d102      	bne.n	8002b68 <HAL_DMA_IRQHandler+0xd4>
 8002b62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b66:	e01b      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x10c>
 8002b68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b6c:	e018      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x10c>
 8002b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b72:	e015      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x10c>
 8002b74:	2340      	movs	r3, #64	; 0x40
 8002b76:	e013      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x10c>
 8002b78:	2304      	movs	r3, #4
 8002b7a:	e011      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x10c>
 8002b7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b80:	e00e      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x10c>
 8002b82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b86:	e00b      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x10c>
 8002b88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b8c:	e008      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x10c>
 8002b8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b92:	e005      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x10c>
 8002b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b98:	e002      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x10c>
 8002b9a:	2340      	movs	r3, #64	; 0x40
 8002b9c:	e000      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x10c>
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	4a3d      	ldr	r2, [pc, #244]	; (8002c98 <HAL_DMA_IRQHandler+0x204>)
 8002ba2:	6053      	str	r3, [r2, #4]
 8002ba4:	e057      	b.n	8002c56 <HAL_DMA_IRQHandler+0x1c2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a31      	ldr	r2, [pc, #196]	; (8002c70 <HAL_DMA_IRQHandler+0x1dc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d04f      	beq.n	8002c50 <HAL_DMA_IRQHandler+0x1bc>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a2f      	ldr	r2, [pc, #188]	; (8002c74 <HAL_DMA_IRQHandler+0x1e0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d048      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x1b8>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a2e      	ldr	r2, [pc, #184]	; (8002c78 <HAL_DMA_IRQHandler+0x1e4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d040      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x1b2>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a2c      	ldr	r2, [pc, #176]	; (8002c7c <HAL_DMA_IRQHandler+0x1e8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d038      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x1ac>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a2b      	ldr	r2, [pc, #172]	; (8002c80 <HAL_DMA_IRQHandler+0x1ec>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d030      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x1a6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a29      	ldr	r2, [pc, #164]	; (8002c84 <HAL_DMA_IRQHandler+0x1f0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d028      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x1a0>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a21      	ldr	r2, [pc, #132]	; (8002c6c <HAL_DMA_IRQHandler+0x1d8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d020      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x19a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a25      	ldr	r2, [pc, #148]	; (8002c88 <HAL_DMA_IRQHandler+0x1f4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d019      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x196>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a24      	ldr	r2, [pc, #144]	; (8002c8c <HAL_DMA_IRQHandler+0x1f8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d012      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x192>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a22      	ldr	r2, [pc, #136]	; (8002c90 <HAL_DMA_IRQHandler+0x1fc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00a      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x18c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a21      	ldr	r2, [pc, #132]	; (8002c94 <HAL_DMA_IRQHandler+0x200>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d102      	bne.n	8002c1a <HAL_DMA_IRQHandler+0x186>
 8002c14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c18:	e01b      	b.n	8002c52 <HAL_DMA_IRQHandler+0x1be>
 8002c1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c1e:	e018      	b.n	8002c52 <HAL_DMA_IRQHandler+0x1be>
 8002c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c24:	e015      	b.n	8002c52 <HAL_DMA_IRQHandler+0x1be>
 8002c26:	2340      	movs	r3, #64	; 0x40
 8002c28:	e013      	b.n	8002c52 <HAL_DMA_IRQHandler+0x1be>
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	e011      	b.n	8002c52 <HAL_DMA_IRQHandler+0x1be>
 8002c2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c32:	e00e      	b.n	8002c52 <HAL_DMA_IRQHandler+0x1be>
 8002c34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c38:	e00b      	b.n	8002c52 <HAL_DMA_IRQHandler+0x1be>
 8002c3a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c3e:	e008      	b.n	8002c52 <HAL_DMA_IRQHandler+0x1be>
 8002c40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c44:	e005      	b.n	8002c52 <HAL_DMA_IRQHandler+0x1be>
 8002c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c4a:	e002      	b.n	8002c52 <HAL_DMA_IRQHandler+0x1be>
 8002c4c:	2340      	movs	r3, #64	; 0x40
 8002c4e:	e000      	b.n	8002c52 <HAL_DMA_IRQHandler+0x1be>
 8002c50:	2304      	movs	r3, #4
 8002c52:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <HAL_DMA_IRQHandler+0x208>)
 8002c54:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 8136 	beq.w	8002ecc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c68:	e130      	b.n	8002ecc <HAL_DMA_IRQHandler+0x438>
 8002c6a:	bf00      	nop
 8002c6c:	40020080 	.word	0x40020080
 8002c70:	40020008 	.word	0x40020008
 8002c74:	4002001c 	.word	0x4002001c
 8002c78:	40020030 	.word	0x40020030
 8002c7c:	40020044 	.word	0x40020044
 8002c80:	40020058 	.word	0x40020058
 8002c84:	4002006c 	.word	0x4002006c
 8002c88:	40020408 	.word	0x40020408
 8002c8c:	4002041c 	.word	0x4002041c
 8002c90:	40020430 	.word	0x40020430
 8002c94:	40020444 	.word	0x40020444
 8002c98:	40020400 	.word	0x40020400
 8002c9c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80dd 	beq.w	8002e6c <HAL_DMA_IRQHandler+0x3d8>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80d7 	beq.w	8002e6c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 020a 	bic.w	r2, r2, #10
 8002cda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b7b      	ldr	r3, [pc, #492]	; (8002ed8 <HAL_DMA_IRQHandler+0x444>)
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d958      	bls.n	8002da2 <HAL_DMA_IRQHandler+0x30e>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a79      	ldr	r2, [pc, #484]	; (8002edc <HAL_DMA_IRQHandler+0x448>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d04f      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x306>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a78      	ldr	r2, [pc, #480]	; (8002ee0 <HAL_DMA_IRQHandler+0x44c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d048      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x302>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a76      	ldr	r2, [pc, #472]	; (8002ee4 <HAL_DMA_IRQHandler+0x450>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d040      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x2fc>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a75      	ldr	r2, [pc, #468]	; (8002ee8 <HAL_DMA_IRQHandler+0x454>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d038      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x2f6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a73      	ldr	r2, [pc, #460]	; (8002eec <HAL_DMA_IRQHandler+0x458>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d030      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x2f0>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a72      	ldr	r2, [pc, #456]	; (8002ef0 <HAL_DMA_IRQHandler+0x45c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d028      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x2ea>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a69      	ldr	r2, [pc, #420]	; (8002ed8 <HAL_DMA_IRQHandler+0x444>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d020      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x2e4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a6e      	ldr	r2, [pc, #440]	; (8002ef4 <HAL_DMA_IRQHandler+0x460>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d019      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x2e0>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6c      	ldr	r2, [pc, #432]	; (8002ef8 <HAL_DMA_IRQHandler+0x464>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d012      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x2dc>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6b      	ldr	r2, [pc, #428]	; (8002efc <HAL_DMA_IRQHandler+0x468>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00a      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x2d6>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a69      	ldr	r2, [pc, #420]	; (8002f00 <HAL_DMA_IRQHandler+0x46c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d102      	bne.n	8002d64 <HAL_DMA_IRQHandler+0x2d0>
 8002d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d62:	e01b      	b.n	8002d9c <HAL_DMA_IRQHandler+0x308>
 8002d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d68:	e018      	b.n	8002d9c <HAL_DMA_IRQHandler+0x308>
 8002d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d6e:	e015      	b.n	8002d9c <HAL_DMA_IRQHandler+0x308>
 8002d70:	2320      	movs	r3, #32
 8002d72:	e013      	b.n	8002d9c <HAL_DMA_IRQHandler+0x308>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e011      	b.n	8002d9c <HAL_DMA_IRQHandler+0x308>
 8002d78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7c:	e00e      	b.n	8002d9c <HAL_DMA_IRQHandler+0x308>
 8002d7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d82:	e00b      	b.n	8002d9c <HAL_DMA_IRQHandler+0x308>
 8002d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d88:	e008      	b.n	8002d9c <HAL_DMA_IRQHandler+0x308>
 8002d8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d8e:	e005      	b.n	8002d9c <HAL_DMA_IRQHandler+0x308>
 8002d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d94:	e002      	b.n	8002d9c <HAL_DMA_IRQHandler+0x308>
 8002d96:	2320      	movs	r3, #32
 8002d98:	e000      	b.n	8002d9c <HAL_DMA_IRQHandler+0x308>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	4a59      	ldr	r2, [pc, #356]	; (8002f04 <HAL_DMA_IRQHandler+0x470>)
 8002d9e:	6053      	str	r3, [r2, #4]
 8002da0:	e057      	b.n	8002e52 <HAL_DMA_IRQHandler+0x3be>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a4d      	ldr	r2, [pc, #308]	; (8002edc <HAL_DMA_IRQHandler+0x448>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d04f      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x3b8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a4b      	ldr	r2, [pc, #300]	; (8002ee0 <HAL_DMA_IRQHandler+0x44c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d048      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x3b4>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a4a      	ldr	r2, [pc, #296]	; (8002ee4 <HAL_DMA_IRQHandler+0x450>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d040      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x3ae>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a48      	ldr	r2, [pc, #288]	; (8002ee8 <HAL_DMA_IRQHandler+0x454>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d038      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x3a8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a47      	ldr	r2, [pc, #284]	; (8002eec <HAL_DMA_IRQHandler+0x458>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d030      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x3a2>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a45      	ldr	r2, [pc, #276]	; (8002ef0 <HAL_DMA_IRQHandler+0x45c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d028      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x39c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a3d      	ldr	r2, [pc, #244]	; (8002ed8 <HAL_DMA_IRQHandler+0x444>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d020      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x396>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a41      	ldr	r2, [pc, #260]	; (8002ef4 <HAL_DMA_IRQHandler+0x460>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d019      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x392>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a40      	ldr	r2, [pc, #256]	; (8002ef8 <HAL_DMA_IRQHandler+0x464>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d012      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x38e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a3e      	ldr	r2, [pc, #248]	; (8002efc <HAL_DMA_IRQHandler+0x468>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00a      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x388>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a3d      	ldr	r2, [pc, #244]	; (8002f00 <HAL_DMA_IRQHandler+0x46c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d102      	bne.n	8002e16 <HAL_DMA_IRQHandler+0x382>
 8002e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e14:	e01b      	b.n	8002e4e <HAL_DMA_IRQHandler+0x3ba>
 8002e16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e1a:	e018      	b.n	8002e4e <HAL_DMA_IRQHandler+0x3ba>
 8002e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e20:	e015      	b.n	8002e4e <HAL_DMA_IRQHandler+0x3ba>
 8002e22:	2320      	movs	r3, #32
 8002e24:	e013      	b.n	8002e4e <HAL_DMA_IRQHandler+0x3ba>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e011      	b.n	8002e4e <HAL_DMA_IRQHandler+0x3ba>
 8002e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e2e:	e00e      	b.n	8002e4e <HAL_DMA_IRQHandler+0x3ba>
 8002e30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e34:	e00b      	b.n	8002e4e <HAL_DMA_IRQHandler+0x3ba>
 8002e36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e3a:	e008      	b.n	8002e4e <HAL_DMA_IRQHandler+0x3ba>
 8002e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e40:	e005      	b.n	8002e4e <HAL_DMA_IRQHandler+0x3ba>
 8002e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e46:	e002      	b.n	8002e4e <HAL_DMA_IRQHandler+0x3ba>
 8002e48:	2320      	movs	r3, #32
 8002e4a:	e000      	b.n	8002e4e <HAL_DMA_IRQHandler+0x3ba>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	4a2e      	ldr	r2, [pc, #184]	; (8002f08 <HAL_DMA_IRQHandler+0x474>)
 8002e50:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d034      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e6a:	e02f      	b.n	8002ecc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	2208      	movs	r2, #8
 8002e72:	409a      	lsls	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d028      	beq.n	8002ece <HAL_DMA_IRQHandler+0x43a>
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d023      	beq.n	8002ece <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 020e 	bic.w	r2, r2, #14
 8002e94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d004      	beq.n	8002ece <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	4798      	blx	r3
    }
  }
  return;
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
}
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40020080 	.word	0x40020080
 8002edc:	40020008 	.word	0x40020008
 8002ee0:	4002001c 	.word	0x4002001c
 8002ee4:	40020030 	.word	0x40020030
 8002ee8:	40020044 	.word	0x40020044
 8002eec:	40020058 	.word	0x40020058
 8002ef0:	4002006c 	.word	0x4002006c
 8002ef4:	40020408 	.word	0x40020408
 8002ef8:	4002041c 	.word	0x4002041c
 8002efc:	40020430 	.word	0x40020430
 8002f00:	40020444 	.word	0x40020444
 8002f04:	40020400 	.word	0x40020400
 8002f08:	40020000 	.word	0x40020000

08002f0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f22:	2101      	movs	r1, #1
 8002f24:	fa01 f202 	lsl.w	r2, r1, r2
 8002f28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d108      	bne.n	8002f4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f4a:	e007      	b.n	8002f5c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b08b      	sub	sp, #44	; 0x2c
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f72:	2300      	movs	r3, #0
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f76:	2300      	movs	r3, #0
 8002f78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f7a:	e179      	b.n	8003270 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	f040 8168 	bne.w	800326a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4a96      	ldr	r2, [pc, #600]	; (80031f8 <HAL_GPIO_Init+0x290>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d05e      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
 8002fa4:	4a94      	ldr	r2, [pc, #592]	; (80031f8 <HAL_GPIO_Init+0x290>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d875      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002faa:	4a94      	ldr	r2, [pc, #592]	; (80031fc <HAL_GPIO_Init+0x294>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d058      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
 8002fb0:	4a92      	ldr	r2, [pc, #584]	; (80031fc <HAL_GPIO_Init+0x294>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d86f      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002fb6:	4a92      	ldr	r2, [pc, #584]	; (8003200 <HAL_GPIO_Init+0x298>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d052      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
 8002fbc:	4a90      	ldr	r2, [pc, #576]	; (8003200 <HAL_GPIO_Init+0x298>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d869      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002fc2:	4a90      	ldr	r2, [pc, #576]	; (8003204 <HAL_GPIO_Init+0x29c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d04c      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
 8002fc8:	4a8e      	ldr	r2, [pc, #568]	; (8003204 <HAL_GPIO_Init+0x29c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d863      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002fce:	4a8e      	ldr	r2, [pc, #568]	; (8003208 <HAL_GPIO_Init+0x2a0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d046      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
 8002fd4:	4a8c      	ldr	r2, [pc, #560]	; (8003208 <HAL_GPIO_Init+0x2a0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d85d      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002fda:	2b12      	cmp	r3, #18
 8002fdc:	d82a      	bhi.n	8003034 <HAL_GPIO_Init+0xcc>
 8002fde:	2b12      	cmp	r3, #18
 8002fe0:	d859      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002fe2:	a201      	add	r2, pc, #4	; (adr r2, 8002fe8 <HAL_GPIO_Init+0x80>)
 8002fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe8:	08003063 	.word	0x08003063
 8002fec:	0800303d 	.word	0x0800303d
 8002ff0:	0800304f 	.word	0x0800304f
 8002ff4:	08003091 	.word	0x08003091
 8002ff8:	08003097 	.word	0x08003097
 8002ffc:	08003097 	.word	0x08003097
 8003000:	08003097 	.word	0x08003097
 8003004:	08003097 	.word	0x08003097
 8003008:	08003097 	.word	0x08003097
 800300c:	08003097 	.word	0x08003097
 8003010:	08003097 	.word	0x08003097
 8003014:	08003097 	.word	0x08003097
 8003018:	08003097 	.word	0x08003097
 800301c:	08003097 	.word	0x08003097
 8003020:	08003097 	.word	0x08003097
 8003024:	08003097 	.word	0x08003097
 8003028:	08003097 	.word	0x08003097
 800302c:	08003045 	.word	0x08003045
 8003030:	08003059 	.word	0x08003059
 8003034:	4a75      	ldr	r2, [pc, #468]	; (800320c <HAL_GPIO_Init+0x2a4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800303a:	e02c      	b.n	8003096 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	623b      	str	r3, [r7, #32]
          break;
 8003042:	e029      	b.n	8003098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	3304      	adds	r3, #4
 800304a:	623b      	str	r3, [r7, #32]
          break;
 800304c:	e024      	b.n	8003098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	3308      	adds	r3, #8
 8003054:	623b      	str	r3, [r7, #32]
          break;
 8003056:	e01f      	b.n	8003098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	330c      	adds	r3, #12
 800305e:	623b      	str	r3, [r7, #32]
          break;
 8003060:	e01a      	b.n	8003098 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d102      	bne.n	8003070 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800306a:	2304      	movs	r3, #4
 800306c:	623b      	str	r3, [r7, #32]
          break;
 800306e:	e013      	b.n	8003098 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003078:	2308      	movs	r3, #8
 800307a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	611a      	str	r2, [r3, #16]
          break;
 8003082:	e009      	b.n	8003098 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003084:	2308      	movs	r3, #8
 8003086:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	615a      	str	r2, [r3, #20]
          break;
 800308e:	e003      	b.n	8003098 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003090:	2300      	movs	r3, #0
 8003092:	623b      	str	r3, [r7, #32]
          break;
 8003094:	e000      	b.n	8003098 <HAL_GPIO_Init+0x130>
          break;
 8003096:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2bff      	cmp	r3, #255	; 0xff
 800309c:	d801      	bhi.n	80030a2 <HAL_GPIO_Init+0x13a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	e001      	b.n	80030a6 <HAL_GPIO_Init+0x13e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2bff      	cmp	r3, #255	; 0xff
 80030ac:	d802      	bhi.n	80030b4 <HAL_GPIO_Init+0x14c>
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	e002      	b.n	80030ba <HAL_GPIO_Init+0x152>
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	3b08      	subs	r3, #8
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	210f      	movs	r1, #15
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	401a      	ands	r2, r3
 80030cc:	6a39      	ldr	r1, [r7, #32]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	fa01 f303 	lsl.w	r3, r1, r3
 80030d4:	431a      	orrs	r2, r3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80c1 	beq.w	800326a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030e8:	4b49      	ldr	r3, [pc, #292]	; (8003210 <HAL_GPIO_Init+0x2a8>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	4a48      	ldr	r2, [pc, #288]	; (8003210 <HAL_GPIO_Init+0x2a8>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6193      	str	r3, [r2, #24]
 80030f4:	4b46      	ldr	r3, [pc, #280]	; (8003210 <HAL_GPIO_Init+0x2a8>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003100:	4a44      	ldr	r2, [pc, #272]	; (8003214 <HAL_GPIO_Init+0x2ac>)
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	3302      	adds	r3, #2
 8003108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	220f      	movs	r2, #15
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4013      	ands	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a3c      	ldr	r2, [pc, #240]	; (8003218 <HAL_GPIO_Init+0x2b0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d01f      	beq.n	800316c <HAL_GPIO_Init+0x204>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a3b      	ldr	r2, [pc, #236]	; (800321c <HAL_GPIO_Init+0x2b4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d019      	beq.n	8003168 <HAL_GPIO_Init+0x200>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a3a      	ldr	r2, [pc, #232]	; (8003220 <HAL_GPIO_Init+0x2b8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <HAL_GPIO_Init+0x1fc>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a39      	ldr	r2, [pc, #228]	; (8003224 <HAL_GPIO_Init+0x2bc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00d      	beq.n	8003160 <HAL_GPIO_Init+0x1f8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a38      	ldr	r2, [pc, #224]	; (8003228 <HAL_GPIO_Init+0x2c0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d007      	beq.n	800315c <HAL_GPIO_Init+0x1f4>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a37      	ldr	r2, [pc, #220]	; (800322c <HAL_GPIO_Init+0x2c4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d101      	bne.n	8003158 <HAL_GPIO_Init+0x1f0>
 8003154:	2305      	movs	r3, #5
 8003156:	e00a      	b.n	800316e <HAL_GPIO_Init+0x206>
 8003158:	2306      	movs	r3, #6
 800315a:	e008      	b.n	800316e <HAL_GPIO_Init+0x206>
 800315c:	2304      	movs	r3, #4
 800315e:	e006      	b.n	800316e <HAL_GPIO_Init+0x206>
 8003160:	2303      	movs	r3, #3
 8003162:	e004      	b.n	800316e <HAL_GPIO_Init+0x206>
 8003164:	2302      	movs	r3, #2
 8003166:	e002      	b.n	800316e <HAL_GPIO_Init+0x206>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_GPIO_Init+0x206>
 800316c:	2300      	movs	r3, #0
 800316e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003170:	f002 0203 	and.w	r2, r2, #3
 8003174:	0092      	lsls	r2, r2, #2
 8003176:	4093      	lsls	r3, r2
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800317e:	4925      	ldr	r1, [pc, #148]	; (8003214 <HAL_GPIO_Init+0x2ac>)
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3302      	adds	r3, #2
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d006      	beq.n	80031a6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_GPIO_Init+0x2c8>)
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	4924      	ldr	r1, [pc, #144]	; (8003230 <HAL_GPIO_Init+0x2c8>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	608b      	str	r3, [r1, #8]
 80031a4:	e006      	b.n	80031b4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031a6:	4b22      	ldr	r3, [pc, #136]	; (8003230 <HAL_GPIO_Init+0x2c8>)
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	4920      	ldr	r1, [pc, #128]	; (8003230 <HAL_GPIO_Init+0x2c8>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d006      	beq.n	80031ce <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031c0:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <HAL_GPIO_Init+0x2c8>)
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	491a      	ldr	r1, [pc, #104]	; (8003230 <HAL_GPIO_Init+0x2c8>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60cb      	str	r3, [r1, #12]
 80031cc:	e006      	b.n	80031dc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031ce:	4b18      	ldr	r3, [pc, #96]	; (8003230 <HAL_GPIO_Init+0x2c8>)
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	4916      	ldr	r1, [pc, #88]	; (8003230 <HAL_GPIO_Init+0x2c8>)
 80031d8:	4013      	ands	r3, r2
 80031da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d025      	beq.n	8003234 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <HAL_GPIO_Init+0x2c8>)
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	4910      	ldr	r1, [pc, #64]	; (8003230 <HAL_GPIO_Init+0x2c8>)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]
 80031f4:	e025      	b.n	8003242 <HAL_GPIO_Init+0x2da>
 80031f6:	bf00      	nop
 80031f8:	10320000 	.word	0x10320000
 80031fc:	10310000 	.word	0x10310000
 8003200:	10220000 	.word	0x10220000
 8003204:	10210000 	.word	0x10210000
 8003208:	10120000 	.word	0x10120000
 800320c:	10110000 	.word	0x10110000
 8003210:	40021000 	.word	0x40021000
 8003214:	40010000 	.word	0x40010000
 8003218:	40010800 	.word	0x40010800
 800321c:	40010c00 	.word	0x40010c00
 8003220:	40011000 	.word	0x40011000
 8003224:	40011400 	.word	0x40011400
 8003228:	40011800 	.word	0x40011800
 800322c:	40011c00 	.word	0x40011c00
 8003230:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003234:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_GPIO_Init+0x324>)
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	43db      	mvns	r3, r3
 800323c:	4913      	ldr	r1, [pc, #76]	; (800328c <HAL_GPIO_Init+0x324>)
 800323e:	4013      	ands	r3, r2
 8003240:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d006      	beq.n	800325c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800324e:	4b0f      	ldr	r3, [pc, #60]	; (800328c <HAL_GPIO_Init+0x324>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	490e      	ldr	r1, [pc, #56]	; (800328c <HAL_GPIO_Init+0x324>)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]
 800325a:	e006      	b.n	800326a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_GPIO_Init+0x324>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	43db      	mvns	r3, r3
 8003264:	4909      	ldr	r1, [pc, #36]	; (800328c <HAL_GPIO_Init+0x324>)
 8003266:	4013      	ands	r3, r2
 8003268:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	3301      	adds	r3, #1
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	f47f ae7e 	bne.w	8002f7c <HAL_GPIO_Init+0x14>
  }
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop
 8003284:	372c      	adds	r7, #44	; 0x2c
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr
 800328c:	40010400 	.word	0x40010400

08003290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
 800329c:	4613      	mov	r3, r2
 800329e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032a0:	787b      	ldrb	r3, [r7, #1]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032ac:	e003      	b.n	80032b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032ae:	887b      	ldrh	r3, [r7, #2]
 80032b0:	041a      	lsls	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	611a      	str	r2, [r3, #16]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e272      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8087 	beq.w	80033ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032e0:	4b92      	ldr	r3, [pc, #584]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 030c 	and.w	r3, r3, #12
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d00c      	beq.n	8003306 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032ec:	4b8f      	ldr	r3, [pc, #572]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d112      	bne.n	800331e <HAL_RCC_OscConfig+0x5e>
 80032f8:	4b8c      	ldr	r3, [pc, #560]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d10b      	bne.n	800331e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003306:	4b89      	ldr	r3, [pc, #548]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d06c      	beq.n	80033ec <HAL_RCC_OscConfig+0x12c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d168      	bne.n	80033ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e24c      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003326:	d106      	bne.n	8003336 <HAL_RCC_OscConfig+0x76>
 8003328:	4b80      	ldr	r3, [pc, #512]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a7f      	ldr	r2, [pc, #508]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 800332e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	e02e      	b.n	8003394 <HAL_RCC_OscConfig+0xd4>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x98>
 800333e:	4b7b      	ldr	r3, [pc, #492]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7a      	ldr	r2, [pc, #488]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	4b78      	ldr	r3, [pc, #480]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a77      	ldr	r2, [pc, #476]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e01d      	b.n	8003394 <HAL_RCC_OscConfig+0xd4>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0xbc>
 8003362:	4b72      	ldr	r3, [pc, #456]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a71      	ldr	r2, [pc, #452]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b6f      	ldr	r3, [pc, #444]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a6e      	ldr	r2, [pc, #440]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e00b      	b.n	8003394 <HAL_RCC_OscConfig+0xd4>
 800337c:	4b6b      	ldr	r3, [pc, #428]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a6a      	ldr	r2, [pc, #424]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b68      	ldr	r3, [pc, #416]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a67      	ldr	r2, [pc, #412]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 800338e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003392:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7ff f848 	bl	8002430 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a4:	f7ff f844 	bl	8002430 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e200      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b5d      	ldr	r3, [pc, #372]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0xe4>
 80033c2:	e014      	b.n	80033ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7ff f834 	bl	8002430 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033cc:	f7ff f830 	bl	8002430 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e1ec      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	4b53      	ldr	r3, [pc, #332]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x10c>
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d063      	beq.n	80034c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033fa:	4b4c      	ldr	r3, [pc, #304]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00b      	beq.n	800341e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003406:	4b49      	ldr	r3, [pc, #292]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b08      	cmp	r3, #8
 8003410:	d11c      	bne.n	800344c <HAL_RCC_OscConfig+0x18c>
 8003412:	4b46      	ldr	r3, [pc, #280]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d116      	bne.n	800344c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341e:	4b43      	ldr	r3, [pc, #268]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_RCC_OscConfig+0x176>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d001      	beq.n	8003436 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e1c0      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003436:	4b3d      	ldr	r3, [pc, #244]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4939      	ldr	r1, [pc, #228]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344a:	e03a      	b.n	80034c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d020      	beq.n	8003496 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003454:	4b36      	ldr	r3, [pc, #216]	; (8003530 <HAL_RCC_OscConfig+0x270>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345a:	f7fe ffe9 	bl	8002430 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003462:	f7fe ffe5 	bl	8002430 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e1a1      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003474:	4b2d      	ldr	r3, [pc, #180]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003480:	4b2a      	ldr	r3, [pc, #168]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4927      	ldr	r1, [pc, #156]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]
 8003494:	e015      	b.n	80034c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003496:	4b26      	ldr	r3, [pc, #152]	; (8003530 <HAL_RCC_OscConfig+0x270>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fe ffc8 	bl	8002430 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a4:	f7fe ffc4 	bl	8002430 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e180      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b6:	4b1d      	ldr	r3, [pc, #116]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d03a      	beq.n	8003544 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d019      	beq.n	800350a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d6:	4b17      	ldr	r3, [pc, #92]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 80034d8:	2201      	movs	r2, #1
 80034da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034dc:	f7fe ffa8 	bl	8002430 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e4:	f7fe ffa4 	bl	8002430 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e160      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f6:	4b0d      	ldr	r3, [pc, #52]	; (800352c <HAL_RCC_OscConfig+0x26c>)
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003502:	2001      	movs	r0, #1
 8003504:	f000 face 	bl	8003aa4 <RCC_Delay>
 8003508:	e01c      	b.n	8003544 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <HAL_RCC_OscConfig+0x274>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003510:	f7fe ff8e 	bl	8002430 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003516:	e00f      	b.n	8003538 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003518:	f7fe ff8a 	bl	8002430 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d908      	bls.n	8003538 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e146      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000
 8003530:	42420000 	.word	0x42420000
 8003534:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003538:	4b92      	ldr	r3, [pc, #584]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e9      	bne.n	8003518 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80a6 	beq.w	800369e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003552:	2300      	movs	r3, #0
 8003554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003556:	4b8b      	ldr	r3, [pc, #556]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10d      	bne.n	800357e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003562:	4b88      	ldr	r3, [pc, #544]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	4a87      	ldr	r2, [pc, #540]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356c:	61d3      	str	r3, [r2, #28]
 800356e:	4b85      	ldr	r3, [pc, #532]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800357a:	2301      	movs	r3, #1
 800357c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357e:	4b82      	ldr	r3, [pc, #520]	; (8003788 <HAL_RCC_OscConfig+0x4c8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003586:	2b00      	cmp	r3, #0
 8003588:	d118      	bne.n	80035bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800358a:	4b7f      	ldr	r3, [pc, #508]	; (8003788 <HAL_RCC_OscConfig+0x4c8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a7e      	ldr	r2, [pc, #504]	; (8003788 <HAL_RCC_OscConfig+0x4c8>)
 8003590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003596:	f7fe ff4b 	bl	8002430 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359e:	f7fe ff47 	bl	8002430 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b64      	cmp	r3, #100	; 0x64
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e103      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b0:	4b75      	ldr	r3, [pc, #468]	; (8003788 <HAL_RCC_OscConfig+0x4c8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d106      	bne.n	80035d2 <HAL_RCC_OscConfig+0x312>
 80035c4:	4b6f      	ldr	r3, [pc, #444]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	4a6e      	ldr	r2, [pc, #440]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6213      	str	r3, [r2, #32]
 80035d0:	e02d      	b.n	800362e <HAL_RCC_OscConfig+0x36e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x334>
 80035da:	4b6a      	ldr	r3, [pc, #424]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	4a69      	ldr	r2, [pc, #420]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	6213      	str	r3, [r2, #32]
 80035e6:	4b67      	ldr	r3, [pc, #412]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	4a66      	ldr	r2, [pc, #408]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	f023 0304 	bic.w	r3, r3, #4
 80035f0:	6213      	str	r3, [r2, #32]
 80035f2:	e01c      	b.n	800362e <HAL_RCC_OscConfig+0x36e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b05      	cmp	r3, #5
 80035fa:	d10c      	bne.n	8003616 <HAL_RCC_OscConfig+0x356>
 80035fc:	4b61      	ldr	r3, [pc, #388]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	4a60      	ldr	r2, [pc, #384]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 8003602:	f043 0304 	orr.w	r3, r3, #4
 8003606:	6213      	str	r3, [r2, #32]
 8003608:	4b5e      	ldr	r3, [pc, #376]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	4a5d      	ldr	r2, [pc, #372]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6213      	str	r3, [r2, #32]
 8003614:	e00b      	b.n	800362e <HAL_RCC_OscConfig+0x36e>
 8003616:	4b5b      	ldr	r3, [pc, #364]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4a5a      	ldr	r2, [pc, #360]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	6213      	str	r3, [r2, #32]
 8003622:	4b58      	ldr	r3, [pc, #352]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	4a57      	ldr	r2, [pc, #348]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 8003628:	f023 0304 	bic.w	r3, r3, #4
 800362c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d015      	beq.n	8003662 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003636:	f7fe fefb 	bl	8002430 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363c:	e00a      	b.n	8003654 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363e:	f7fe fef7 	bl	8002430 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	f241 3288 	movw	r2, #5000	; 0x1388
 800364c:	4293      	cmp	r3, r2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e0b1      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003654:	4b4b      	ldr	r3, [pc, #300]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0ee      	beq.n	800363e <HAL_RCC_OscConfig+0x37e>
 8003660:	e014      	b.n	800368c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003662:	f7fe fee5 	bl	8002430 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003668:	e00a      	b.n	8003680 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366a:	f7fe fee1 	bl	8002430 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	f241 3288 	movw	r2, #5000	; 0x1388
 8003678:	4293      	cmp	r3, r2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e09b      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003680:	4b40      	ldr	r3, [pc, #256]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1ee      	bne.n	800366a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800368c:	7dfb      	ldrb	r3, [r7, #23]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d105      	bne.n	800369e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003692:	4b3c      	ldr	r3, [pc, #240]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	4a3b      	ldr	r2, [pc, #236]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 8087 	beq.w	80037b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036a8:	4b36      	ldr	r3, [pc, #216]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 030c 	and.w	r3, r3, #12
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d061      	beq.n	8003778 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d146      	bne.n	800374a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036bc:	4b33      	ldr	r3, [pc, #204]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c2:	f7fe feb5 	bl	8002430 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ca:	f7fe feb1 	bl	8002430 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e06d      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036dc:	4b29      	ldr	r3, [pc, #164]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1f0      	bne.n	80036ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f0:	d108      	bne.n	8003704 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036f2:	4b24      	ldr	r3, [pc, #144]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	4921      	ldr	r1, [pc, #132]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 8003700:	4313      	orrs	r3, r2
 8003702:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003704:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a19      	ldr	r1, [r3, #32]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	430b      	orrs	r3, r1
 8003716:	491b      	ldr	r1, [pc, #108]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	4313      	orrs	r3, r2
 800371a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800371c:	4b1b      	ldr	r3, [pc, #108]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003722:	f7fe fe85 	bl	8002430 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372a:	f7fe fe81 	bl	8002430 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e03d      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800373c:	4b11      	ldr	r3, [pc, #68]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x46a>
 8003748:	e035      	b.n	80037b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7fe fe6e 	bl	8002430 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003758:	f7fe fe6a 	bl	8002430 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e026      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_RCC_OscConfig+0x4c4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x498>
 8003776:	e01e      	b.n	80037b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d107      	bne.n	8003790 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e019      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>
 8003784:	40021000 	.word	0x40021000
 8003788:	40007000 	.word	0x40007000
 800378c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_RCC_OscConfig+0x500>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d106      	bne.n	80037b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d001      	beq.n	80037b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000

080037c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0d0      	b.n	800397a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037d8:	4b6a      	ldr	r3, [pc, #424]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d910      	bls.n	8003808 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e6:	4b67      	ldr	r3, [pc, #412]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 0207 	bic.w	r2, r3, #7
 80037ee:	4965      	ldr	r1, [pc, #404]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f6:	4b63      	ldr	r3, [pc, #396]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0b8      	b.n	800397a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d020      	beq.n	8003856 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003820:	4b59      	ldr	r3, [pc, #356]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4a58      	ldr	r2, [pc, #352]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800382a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003838:	4b53      	ldr	r3, [pc, #332]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a52      	ldr	r2, [pc, #328]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 800383e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003842:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003844:	4b50      	ldr	r3, [pc, #320]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	494d      	ldr	r1, [pc, #308]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003852:	4313      	orrs	r3, r2
 8003854:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d040      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386a:	4b47      	ldr	r3, [pc, #284]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d115      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e07f      	b.n	800397a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d107      	bne.n	8003892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003882:	4b41      	ldr	r3, [pc, #260]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e073      	b.n	800397a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003892:	4b3d      	ldr	r3, [pc, #244]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e06b      	b.n	800397a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038a2:	4b39      	ldr	r3, [pc, #228]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f023 0203 	bic.w	r2, r3, #3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	4936      	ldr	r1, [pc, #216]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038b4:	f7fe fdbc 	bl	8002430 <HAL_GetTick>
 80038b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038bc:	f7fe fdb8 	bl	8002430 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e053      	b.n	800397a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	4b2d      	ldr	r3, [pc, #180]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 020c 	and.w	r2, r3, #12
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d1eb      	bne.n	80038bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038e4:	4b27      	ldr	r3, [pc, #156]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d210      	bcs.n	8003914 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f2:	4b24      	ldr	r3, [pc, #144]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 0207 	bic.w	r2, r3, #7
 80038fa:	4922      	ldr	r1, [pc, #136]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	4313      	orrs	r3, r2
 8003900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b20      	ldr	r3, [pc, #128]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e032      	b.n	800397a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003920:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4916      	ldr	r1, [pc, #88]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	4313      	orrs	r3, r2
 8003930:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800393e:	4b12      	ldr	r3, [pc, #72]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	490e      	ldr	r1, [pc, #56]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003952:	f000 f821 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 8003956:	4602      	mov	r2, r0
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	490a      	ldr	r1, [pc, #40]	; (800398c <HAL_RCC_ClockConfig+0x1c8>)
 8003964:	5ccb      	ldrb	r3, [r1, r3]
 8003966:	fa22 f303 	lsr.w	r3, r2, r3
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <HAL_RCC_ClockConfig+0x1cc>)
 800396c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800396e:	4b09      	ldr	r3, [pc, #36]	; (8003994 <HAL_RCC_ClockConfig+0x1d0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe fd1a 	bl	80023ac <HAL_InitTick>

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40022000 	.word	0x40022000
 8003988:	40021000 	.word	0x40021000
 800398c:	080088fc 	.word	0x080088fc
 8003990:	20000000 	.word	0x20000000
 8003994:	20000004 	.word	0x20000004

08003998 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039b2:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x94>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d002      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0x30>
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d003      	beq.n	80039ce <HAL_RCC_GetSysClockFreq+0x36>
 80039c6:	e027      	b.n	8003a18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039c8:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x98>)
 80039ca:	613b      	str	r3, [r7, #16]
      break;
 80039cc:	e027      	b.n	8003a1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	0c9b      	lsrs	r3, r3, #18
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	4a17      	ldr	r2, [pc, #92]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039d8:	5cd3      	ldrb	r3, [r2, r3]
 80039da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d010      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x94>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	0c5b      	lsrs	r3, r3, #17
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	4a11      	ldr	r2, [pc, #68]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039f2:	5cd3      	ldrb	r3, [r2, r3]
 80039f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x98>)
 80039fa:	fb03 f202 	mul.w	r2, r3, r2
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	e004      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a0c      	ldr	r2, [pc, #48]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a0c:	fb02 f303 	mul.w	r3, r2, r3
 8003a10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	613b      	str	r3, [r7, #16]
      break;
 8003a16:	e002      	b.n	8003a1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a1a:	613b      	str	r3, [r7, #16]
      break;
 8003a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a1e:	693b      	ldr	r3, [r7, #16]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	007a1200 	.word	0x007a1200
 8003a34:	08008914 	.word	0x08008914
 8003a38:	08008924 	.word	0x08008924
 8003a3c:	003d0900 	.word	0x003d0900

08003a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a44:	4b02      	ldr	r3, [pc, #8]	; (8003a50 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a46:	681b      	ldr	r3, [r3, #0]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr
 8003a50:	20000000 	.word	0x20000000

08003a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a58:	f7ff fff2 	bl	8003a40 <HAL_RCC_GetHCLKFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4903      	ldr	r1, [pc, #12]	; (8003a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000
 8003a78:	0800890c 	.word	0x0800890c

08003a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a80:	f7ff ffde 	bl	8003a40 <HAL_RCC_GetHCLKFreq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	0adb      	lsrs	r3, r3, #11
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	4903      	ldr	r1, [pc, #12]	; (8003aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a92:	5ccb      	ldrb	r3, [r1, r3]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	0800890c 	.word	0x0800890c

08003aa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003aac:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <RCC_Delay+0x34>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <RCC_Delay+0x38>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	0a5b      	lsrs	r3, r3, #9
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	fb02 f303 	mul.w	r3, r2, r3
 8003abe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ac0:	bf00      	nop
  }
  while (Delay --);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1e5a      	subs	r2, r3, #1
 8003ac6:	60fa      	str	r2, [r7, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1f9      	bne.n	8003ac0 <RCC_Delay+0x1c>
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr
 8003ad8:	20000000 	.word	0x20000000
 8003adc:	10624dd3 	.word	0x10624dd3

08003ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e041      	b.n	8003b76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fe fab8 	bl	800207c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	f000 fcb6 	bl	8004490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d001      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e044      	b.n	8003c22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a1d      	ldr	r2, [pc, #116]	; (8003c2c <HAL_TIM_Base_Start_IT+0xac>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d018      	beq.n	8003bec <HAL_TIM_Base_Start_IT+0x6c>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1c      	ldr	r2, [pc, #112]	; (8003c30 <HAL_TIM_Base_Start_IT+0xb0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d013      	beq.n	8003bec <HAL_TIM_Base_Start_IT+0x6c>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bcc:	d00e      	beq.n	8003bec <HAL_TIM_Base_Start_IT+0x6c>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <HAL_TIM_Base_Start_IT+0xb4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d009      	beq.n	8003bec <HAL_TIM_Base_Start_IT+0x6c>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <HAL_TIM_Base_Start_IT+0xb8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d004      	beq.n	8003bec <HAL_TIM_Base_Start_IT+0x6c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <HAL_TIM_Base_Start_IT+0xbc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d111      	bne.n	8003c10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b06      	cmp	r3, #6
 8003bfc:	d010      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0201 	orr.w	r2, r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0e:	e007      	b.n	8003c20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40013400 	.word	0x40013400
 8003c34:	40000400 	.word	0x40000400
 8003c38:	40000800 	.word	0x40000800
 8003c3c:	40000c00 	.word	0x40000c00

08003c40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e041      	b.n	8003cd6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fe fa2e 	bl	80020c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	f000 fc06 	bl	8004490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d109      	bne.n	8003d04 <HAL_TIM_PWM_Start+0x24>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	bf14      	ite	ne
 8003cfc:	2301      	movne	r3, #1
 8003cfe:	2300      	moveq	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	e022      	b.n	8003d4a <HAL_TIM_PWM_Start+0x6a>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d109      	bne.n	8003d1e <HAL_TIM_PWM_Start+0x3e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	bf14      	ite	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	2300      	moveq	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	e015      	b.n	8003d4a <HAL_TIM_PWM_Start+0x6a>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d109      	bne.n	8003d38 <HAL_TIM_PWM_Start+0x58>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	bf14      	ite	ne
 8003d30:	2301      	movne	r3, #1
 8003d32:	2300      	moveq	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	e008      	b.n	8003d4a <HAL_TIM_PWM_Start+0x6a>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	bf14      	ite	ne
 8003d44:	2301      	movne	r3, #1
 8003d46:	2300      	moveq	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e072      	b.n	8003e38 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d104      	bne.n	8003d62 <HAL_TIM_PWM_Start+0x82>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d60:	e013      	b.n	8003d8a <HAL_TIM_PWM_Start+0xaa>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d104      	bne.n	8003d72 <HAL_TIM_PWM_Start+0x92>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d70:	e00b      	b.n	8003d8a <HAL_TIM_PWM_Start+0xaa>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d104      	bne.n	8003d82 <HAL_TIM_PWM_Start+0xa2>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d80:	e003      	b.n	8003d8a <HAL_TIM_PWM_Start+0xaa>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2202      	movs	r2, #2
 8003d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	6839      	ldr	r1, [r7, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fda2 	bl	80048dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a28      	ldr	r2, [pc, #160]	; (8003e40 <HAL_TIM_PWM_Start+0x160>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d004      	beq.n	8003dac <HAL_TIM_PWM_Start+0xcc>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a27      	ldr	r2, [pc, #156]	; (8003e44 <HAL_TIM_PWM_Start+0x164>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d101      	bne.n	8003db0 <HAL_TIM_PWM_Start+0xd0>
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <HAL_TIM_PWM_Start+0xd2>
 8003db0:	2300      	movs	r3, #0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1d      	ldr	r2, [pc, #116]	; (8003e40 <HAL_TIM_PWM_Start+0x160>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d018      	beq.n	8003e02 <HAL_TIM_PWM_Start+0x122>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1b      	ldr	r2, [pc, #108]	; (8003e44 <HAL_TIM_PWM_Start+0x164>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d013      	beq.n	8003e02 <HAL_TIM_PWM_Start+0x122>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de2:	d00e      	beq.n	8003e02 <HAL_TIM_PWM_Start+0x122>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <HAL_TIM_PWM_Start+0x168>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d009      	beq.n	8003e02 <HAL_TIM_PWM_Start+0x122>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <HAL_TIM_PWM_Start+0x16c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d004      	beq.n	8003e02 <HAL_TIM_PWM_Start+0x122>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a14      	ldr	r2, [pc, #80]	; (8003e50 <HAL_TIM_PWM_Start+0x170>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d111      	bne.n	8003e26 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b06      	cmp	r3, #6
 8003e12:	d010      	beq.n	8003e36 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e24:	e007      	b.n	8003e36 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0201 	orr.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	40013400 	.word	0x40013400
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40000800 	.word	0x40000800
 8003e50:	40000c00 	.word	0x40000c00

08003e54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e093      	b.n	8003f90 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7fe f865 	bl	8001f4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e98:	f023 0307 	bic.w	r3, r3, #7
 8003e9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	f000 faf1 	bl	8004490 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed6:	f023 0303 	bic.w	r3, r3, #3
 8003eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ef4:	f023 030c 	bic.w	r3, r3, #12
 8003ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	4313      	orrs	r3, r2
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	011a      	lsls	r2, r3, #4
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	031b      	lsls	r3, r3, #12
 8003f24:	4313      	orrs	r3, r2
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fa8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003fc0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d110      	bne.n	8003fea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d102      	bne.n	8003fd4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fce:	7b7b      	ldrb	r3, [r7, #13]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d001      	beq.n	8003fd8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e069      	b.n	80040ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fe8:	e031      	b.n	800404e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d110      	bne.n	8004012 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ff0:	7bbb      	ldrb	r3, [r7, #14]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d102      	bne.n	8003ffc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ff6:	7b3b      	ldrb	r3, [r7, #12]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d001      	beq.n	8004000 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e055      	b.n	80040ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004010:	e01d      	b.n	800404e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d108      	bne.n	800402a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004018:	7bbb      	ldrb	r3, [r7, #14]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d105      	bne.n	800402a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800401e:	7b7b      	ldrb	r3, [r7, #13]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d102      	bne.n	800402a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004024:	7b3b      	ldrb	r3, [r7, #12]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d001      	beq.n	800402e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e03e      	b.n	80040ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2202      	movs	r2, #2
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2202      	movs	r2, #2
 800403a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2202      	movs	r2, #2
 800404a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_TIM_Encoder_Start+0xc4>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b04      	cmp	r3, #4
 8004058:	d008      	beq.n	800406c <HAL_TIM_Encoder_Start+0xd4>
 800405a:	e00f      	b.n	800407c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2201      	movs	r2, #1
 8004062:	2100      	movs	r1, #0
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fc39 	bl	80048dc <TIM_CCxChannelCmd>
      break;
 800406a:	e016      	b.n	800409a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2201      	movs	r2, #1
 8004072:	2104      	movs	r1, #4
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fc31 	bl	80048dc <TIM_CCxChannelCmd>
      break;
 800407a:	e00e      	b.n	800409a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2201      	movs	r2, #1
 8004082:	2100      	movs	r1, #0
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fc29 	bl	80048dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2201      	movs	r2, #1
 8004090:	2104      	movs	r1, #4
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fc22 	bl	80048dc <TIM_CCxChannelCmd>
      break;
 8004098:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d122      	bne.n	8004110 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d11b      	bne.n	8004110 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0202 	mvn.w	r2, #2
 80040e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f9af 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 80040fc:	e005      	b.n	800410a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f9a2 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f9b1 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b04      	cmp	r3, #4
 800411c:	d122      	bne.n	8004164 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b04      	cmp	r3, #4
 800412a:	d11b      	bne.n	8004164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0204 	mvn.w	r2, #4
 8004134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2202      	movs	r2, #2
 800413a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f985 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8004150:	e005      	b.n	800415e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f978 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f987 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b08      	cmp	r3, #8
 8004170:	d122      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b08      	cmp	r3, #8
 800417e:	d11b      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0208 	mvn.w	r2, #8
 8004188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2204      	movs	r2, #4
 800418e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f95b 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 80041a4:	e005      	b.n	80041b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f94e 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f95d 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	2b10      	cmp	r3, #16
 80041c4:	d122      	bne.n	800420c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d11b      	bne.n	800420c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0210 	mvn.w	r2, #16
 80041dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2208      	movs	r2, #8
 80041e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f931 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 80041f8:	e005      	b.n	8004206 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f924 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f933 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b01      	cmp	r3, #1
 8004218:	d10e      	bne.n	8004238 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b01      	cmp	r3, #1
 8004226:	d107      	bne.n	8004238 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0201 	mvn.w	r2, #1
 8004230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fd fb28 	bl	8001888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004242:	2b80      	cmp	r3, #128	; 0x80
 8004244:	d10e      	bne.n	8004264 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004250:	2b80      	cmp	r3, #128	; 0x80
 8004252:	d107      	bne.n	8004264 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800425c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fc26 	bl	8004ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426e:	2b40      	cmp	r3, #64	; 0x40
 8004270:	d10e      	bne.n	8004290 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d107      	bne.n	8004290 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f8f7 	bl	800447e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b20      	cmp	r3, #32
 800429c:	d10e      	bne.n	80042bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d107      	bne.n	80042bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0220 	mvn.w	r2, #32
 80042b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fbf1 	bl	8004a9e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042bc:	bf00      	nop
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042de:	2302      	movs	r3, #2
 80042e0:	e0ae      	b.n	8004440 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	f200 809f 	bhi.w	8004430 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80042f2:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f8:	0800432d 	.word	0x0800432d
 80042fc:	08004431 	.word	0x08004431
 8004300:	08004431 	.word	0x08004431
 8004304:	08004431 	.word	0x08004431
 8004308:	0800436d 	.word	0x0800436d
 800430c:	08004431 	.word	0x08004431
 8004310:	08004431 	.word	0x08004431
 8004314:	08004431 	.word	0x08004431
 8004318:	080043af 	.word	0x080043af
 800431c:	08004431 	.word	0x08004431
 8004320:	08004431 	.word	0x08004431
 8004324:	08004431 	.word	0x08004431
 8004328:	080043ef 	.word	0x080043ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68b9      	ldr	r1, [r7, #8]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f926 	bl	8004584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699a      	ldr	r2, [r3, #24]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0208 	orr.w	r2, r2, #8
 8004346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0204 	bic.w	r2, r2, #4
 8004356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6999      	ldr	r1, [r3, #24]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	619a      	str	r2, [r3, #24]
      break;
 800436a:	e064      	b.n	8004436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	4618      	mov	r0, r3
 8004374:	f000 f976 	bl	8004664 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6999      	ldr	r1, [r3, #24]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	021a      	lsls	r2, r3, #8
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	619a      	str	r2, [r3, #24]
      break;
 80043ac:	e043      	b.n	8004436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 f9c9 	bl	800474c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69da      	ldr	r2, [r3, #28]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0208 	orr.w	r2, r2, #8
 80043c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69da      	ldr	r2, [r3, #28]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0204 	bic.w	r2, r2, #4
 80043d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69d9      	ldr	r1, [r3, #28]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	61da      	str	r2, [r3, #28]
      break;
 80043ec:	e023      	b.n	8004436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fa1d 	bl	8004834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69d9      	ldr	r1, [r3, #28]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	021a      	lsls	r2, r3, #8
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	61da      	str	r2, [r3, #28]
      break;
 800442e:	e002      	b.n	8004436 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	75fb      	strb	r3, [r7, #23]
      break;
 8004434:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800443e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr

0800445a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr

0800447e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a33      	ldr	r2, [pc, #204]	; (8004570 <TIM_Base_SetConfig+0xe0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <TIM_Base_SetConfig+0x40>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a32      	ldr	r2, [pc, #200]	; (8004574 <TIM_Base_SetConfig+0xe4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00f      	beq.n	80044d0 <TIM_Base_SetConfig+0x40>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b6:	d00b      	beq.n	80044d0 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a2f      	ldr	r2, [pc, #188]	; (8004578 <TIM_Base_SetConfig+0xe8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d007      	beq.n	80044d0 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a2e      	ldr	r2, [pc, #184]	; (800457c <TIM_Base_SetConfig+0xec>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a2d      	ldr	r2, [pc, #180]	; (8004580 <TIM_Base_SetConfig+0xf0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d108      	bne.n	80044e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a22      	ldr	r2, [pc, #136]	; (8004570 <TIM_Base_SetConfig+0xe0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <TIM_Base_SetConfig+0x82>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a21      	ldr	r2, [pc, #132]	; (8004574 <TIM_Base_SetConfig+0xe4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00f      	beq.n	8004512 <TIM_Base_SetConfig+0x82>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f8:	d00b      	beq.n	8004512 <TIM_Base_SetConfig+0x82>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <TIM_Base_SetConfig+0xe8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d007      	beq.n	8004512 <TIM_Base_SetConfig+0x82>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a1d      	ldr	r2, [pc, #116]	; (800457c <TIM_Base_SetConfig+0xec>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <TIM_Base_SetConfig+0x82>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a1c      	ldr	r2, [pc, #112]	; (8004580 <TIM_Base_SetConfig+0xf0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d108      	bne.n	8004524 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a09      	ldr	r2, [pc, #36]	; (8004570 <TIM_Base_SetConfig+0xe0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_Base_SetConfig+0xc8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a08      	ldr	r2, [pc, #32]	; (8004574 <TIM_Base_SetConfig+0xe4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d103      	bne.n	8004560 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	615a      	str	r2, [r3, #20]
}
 8004566:	bf00      	nop
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr
 8004570:	40012c00 	.word	0x40012c00
 8004574:	40013400 	.word	0x40013400
 8004578:	40000400 	.word	0x40000400
 800457c:	40000800 	.word	0x40000800
 8004580:	40000c00 	.word	0x40000c00

08004584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f023 0201 	bic.w	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0303 	bic.w	r3, r3, #3
 80045ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f023 0302 	bic.w	r3, r3, #2
 80045cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a20      	ldr	r2, [pc, #128]	; (800465c <TIM_OC1_SetConfig+0xd8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d003      	beq.n	80045e8 <TIM_OC1_SetConfig+0x64>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a1f      	ldr	r2, [pc, #124]	; (8004660 <TIM_OC1_SetConfig+0xdc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d10c      	bne.n	8004602 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f023 0308 	bic.w	r3, r3, #8
 80045ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f023 0304 	bic.w	r3, r3, #4
 8004600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a15      	ldr	r2, [pc, #84]	; (800465c <TIM_OC1_SetConfig+0xd8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d003      	beq.n	8004612 <TIM_OC1_SetConfig+0x8e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a14      	ldr	r2, [pc, #80]	; (8004660 <TIM_OC1_SetConfig+0xdc>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d111      	bne.n	8004636 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	621a      	str	r2, [r3, #32]
}
 8004650:	bf00      	nop
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40012c00 	.word	0x40012c00
 8004660:	40013400 	.word	0x40013400

08004664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f023 0210 	bic.w	r2, r3, #16
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800469a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f023 0320 	bic.w	r3, r3, #32
 80046ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a21      	ldr	r2, [pc, #132]	; (8004744 <TIM_OC2_SetConfig+0xe0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d003      	beq.n	80046cc <TIM_OC2_SetConfig+0x68>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a20      	ldr	r2, [pc, #128]	; (8004748 <TIM_OC2_SetConfig+0xe4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d10d      	bne.n	80046e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a16      	ldr	r2, [pc, #88]	; (8004744 <TIM_OC2_SetConfig+0xe0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_OC2_SetConfig+0x94>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a15      	ldr	r2, [pc, #84]	; (8004748 <TIM_OC2_SetConfig+0xe4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d113      	bne.n	8004720 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004706:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr
 8004744:	40012c00 	.word	0x40012c00
 8004748:	40013400 	.word	0x40013400

0800474c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a21      	ldr	r2, [pc, #132]	; (800482c <TIM_OC3_SetConfig+0xe0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <TIM_OC3_SetConfig+0x66>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a20      	ldr	r2, [pc, #128]	; (8004830 <TIM_OC3_SetConfig+0xe4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d10d      	bne.n	80047ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a16      	ldr	r2, [pc, #88]	; (800482c <TIM_OC3_SetConfig+0xe0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d003      	beq.n	80047de <TIM_OC3_SetConfig+0x92>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a15      	ldr	r2, [pc, #84]	; (8004830 <TIM_OC3_SetConfig+0xe4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d113      	bne.n	8004806 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	621a      	str	r2, [r3, #32]
}
 8004820:	bf00      	nop
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40013400 	.word	0x40013400

08004834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800487e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	031b      	lsls	r3, r3, #12
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a11      	ldr	r2, [pc, #68]	; (80048d4 <TIM_OC4_SetConfig+0xa0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_OC4_SetConfig+0x68>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a10      	ldr	r2, [pc, #64]	; (80048d8 <TIM_OC4_SetConfig+0xa4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d109      	bne.n	80048b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	019b      	lsls	r3, r3, #6
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	621a      	str	r2, [r3, #32]
}
 80048ca:	bf00      	nop
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr
 80048d4:	40012c00 	.word	0x40012c00
 80048d8:	40013400 	.word	0x40013400

080048dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f003 031f 	and.w	r3, r3, #31
 80048ee:	2201      	movs	r2, #1
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a1a      	ldr	r2, [r3, #32]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	401a      	ands	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a1a      	ldr	r2, [r3, #32]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	fa01 f303 	lsl.w	r3, r1, r3
 8004914:	431a      	orrs	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004938:	2302      	movs	r3, #2
 800493a:	e050      	b.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1b      	ldr	r2, [pc, #108]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d018      	beq.n	80049b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a19      	ldr	r2, [pc, #100]	; (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d013      	beq.n	80049b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004992:	d00e      	beq.n	80049b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a15      	ldr	r2, [pc, #84]	; (80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d009      	beq.n	80049b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a14      	ldr	r2, [pc, #80]	; (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d004      	beq.n	80049b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a12      	ldr	r2, [pc, #72]	; (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d10c      	bne.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr
 80049e8:	40012c00 	.word	0x40012c00
 80049ec:	40013400 	.word	0x40013400
 80049f0:	40000400 	.word	0x40000400
 80049f4:	40000800 	.word	0x40000800
 80049f8:	40000c00 	.word	0x40000c00

080049fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e03d      	b.n	8004a94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr

08004a9e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bc80      	pop	{r7}
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e042      	b.n	8004b5a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d106      	bne.n	8004aee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7fd fb79 	bl	80021e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2224      	movs	r2, #36	; 0x24
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 ffdc 	bl	8005ac4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691a      	ldr	r2, [r3, #16]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695a      	ldr	r2, [r3, #20]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b08a      	sub	sp, #40	; 0x28
 8004b66:	af02      	add	r7, sp, #8
 8004b68:	60f8      	str	r0, [r7, #12]
 8004b6a:	60b9      	str	r1, [r7, #8]
 8004b6c:	603b      	str	r3, [r7, #0]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	d16d      	bne.n	8004c5e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <HAL_UART_Transmit+0x2c>
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e066      	b.n	8004c60 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2221      	movs	r2, #33	; 0x21
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ba0:	f7fd fc46 	bl	8002430 <HAL_GetTick>
 8004ba4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	88fa      	ldrh	r2, [r7, #6]
 8004baa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bba:	d108      	bne.n	8004bce <HAL_UART_Transmit+0x6c>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d104      	bne.n	8004bce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	e003      	b.n	8004bd6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bd6:	e02a      	b.n	8004c2e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2200      	movs	r2, #0
 8004be0:	2180      	movs	r1, #128	; 0x80
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fca3 	bl	800552e <UART_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e036      	b.n	8004c60 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10b      	bne.n	8004c10 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c06:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	3302      	adds	r3, #2
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	e007      	b.n	8004c20 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	781a      	ldrb	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1cf      	bne.n	8004bd8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2140      	movs	r1, #64	; 0x40
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 fc73 	bl	800552e <UART_WaitOnFlagUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e006      	b.n	8004c60 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e000      	b.n	8004c60 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004c5e:	2302      	movs	r3, #2
  }
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3720      	adds	r7, #32
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	4613      	mov	r3, r2
 8004c74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d112      	bne.n	8004ca8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <HAL_UART_Receive_DMA+0x26>
 8004c88:	88fb      	ldrh	r3, [r7, #6]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e00b      	b.n	8004caa <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004c98:	88fb      	ldrh	r3, [r7, #6]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fcb4 	bl	800560c <UART_Start_Receive_DMA>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	e000      	b.n	8004caa <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ca8:	2302      	movs	r3, #2
  }
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b090      	sub	sp, #64	; 0x40
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bf14      	ite	ne
 8004ccc:	2301      	movne	r3, #1
 8004cce:	2300      	moveq	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b21      	cmp	r3, #33	; 0x21
 8004cde:	d128      	bne.n	8004d32 <HAL_UART_DMAStop+0x80>
 8004ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d025      	beq.n	8004d32 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3314      	adds	r3, #20
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	623b      	str	r3, [r7, #32]
   return(result);
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3314      	adds	r3, #20
 8004d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d06:	633a      	str	r2, [r7, #48]	; 0x30
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0e:	e841 2300 	strex	r3, r2, [r1]
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1e5      	bne.n	8004ce6 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d004      	beq.n	8004d2c <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fd fd70 	bl	800280c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fd07 	bl	8005740 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	bf14      	ite	ne
 8004d40:	2301      	movne	r3, #1
 8004d42:	2300      	moveq	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b22      	cmp	r3, #34	; 0x22
 8004d52:	d128      	bne.n	8004da6 <HAL_UART_DMAStop+0xf4>
 8004d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d025      	beq.n	8004da6 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3314      	adds	r3, #20
 8004d60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3314      	adds	r3, #20
 8004d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d7a:	61fa      	str	r2, [r7, #28]
 8004d7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7e:	69b9      	ldr	r1, [r7, #24]
 8004d80:	69fa      	ldr	r2, [r7, #28]
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	617b      	str	r3, [r7, #20]
   return(result);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1e5      	bne.n	8004d5a <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d004      	beq.n	8004da0 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fd fd36 	bl	800280c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fcf4 	bl	800578e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3740      	adds	r7, #64	; 0x40
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b0ba      	sub	sp, #232	; 0xe8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10f      	bne.n	8004e16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d009      	beq.n	8004e16 <HAL_UART_IRQHandler+0x66>
 8004e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fd9a 	bl	8005948 <UART_Receive_IT>
      return;
 8004e14:	e25b      	b.n	80052ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 80de 	beq.w	8004fdc <HAL_UART_IRQHandler+0x22c>
 8004e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 80d1 	beq.w	8004fdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00b      	beq.n	8004e5e <HAL_UART_IRQHandler+0xae>
 8004e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	f043 0201 	orr.w	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00b      	beq.n	8004e82 <HAL_UART_IRQHandler+0xd2>
 8004e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d005      	beq.n	8004e82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7a:	f043 0202 	orr.w	r2, r3, #2
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00b      	beq.n	8004ea6 <HAL_UART_IRQHandler+0xf6>
 8004e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d005      	beq.n	8004ea6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	f043 0204 	orr.w	r2, r3, #4
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d011      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x126>
 8004eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d105      	bne.n	8004eca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d005      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ece:	f043 0208 	orr.w	r2, r3, #8
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 81f2 	beq.w	80052c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <HAL_UART_IRQHandler+0x14e>
 8004eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fd25 	bl	8005948 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	bf14      	ite	ne
 8004f0c:	2301      	movne	r3, #1
 8004f0e:	2300      	moveq	r3, #0
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d103      	bne.n	8004f2a <HAL_UART_IRQHandler+0x17a>
 8004f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d04f      	beq.n	8004fca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fc2f 	bl	800578e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d041      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3314      	adds	r3, #20
 8004f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f4c:	e853 3f00 	ldrex	r3, [r3]
 8004f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3314      	adds	r3, #20
 8004f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1d9      	bne.n	8004f3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d013      	beq.n	8004fba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f96:	4a7e      	ldr	r2, [pc, #504]	; (8005190 <HAL_UART_IRQHandler+0x3e0>)
 8004f98:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fd fc70 	bl	8002884 <HAL_DMA_Abort_IT>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d016      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb8:	e00e      	b.n	8004fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f9a5 	bl	800530a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	e00a      	b.n	8004fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f9a1 	bl	800530a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc8:	e006      	b.n	8004fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f99d 	bl	800530a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004fd6:	e175      	b.n	80052c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd8:	bf00      	nop
    return;
 8004fda:	e173      	b.n	80052c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	f040 814f 	bne.w	8005284 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fea:	f003 0310 	and.w	r3, r3, #16
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 8148 	beq.w	8005284 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff8:	f003 0310 	and.w	r3, r3, #16
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 8141 	beq.w	8005284 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005002:	2300      	movs	r3, #0
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 80b6 	beq.w	8005194 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005034:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8145 	beq.w	80052c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005046:	429a      	cmp	r2, r3
 8005048:	f080 813e 	bcs.w	80052c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005052:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	2b20      	cmp	r3, #32
 800505c:	f000 8088 	beq.w	8005170 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800506e:	e853 3f00 	ldrex	r3, [r3]
 8005072:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005076:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800507a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800507e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	330c      	adds	r3, #12
 8005088:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800508c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005090:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005098:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800509c:	e841 2300 	strex	r3, r2, [r1]
 80050a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1d9      	bne.n	8005060 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3314      	adds	r3, #20
 80050b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050be:	f023 0301 	bic.w	r3, r3, #1
 80050c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3314      	adds	r3, #20
 80050cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80050d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80050d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e1      	bne.n	80050ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3314      	adds	r3, #20
 80050ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3314      	adds	r3, #20
 8005108:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800510c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800510e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005112:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800511a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e3      	bne.n	80050e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	330c      	adds	r3, #12
 8005134:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800513e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005140:	f023 0310 	bic.w	r3, r3, #16
 8005144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005152:	65ba      	str	r2, [r7, #88]	; 0x58
 8005154:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005156:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005158:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800515a:	e841 2300 	strex	r3, r2, [r1]
 800515e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1e3      	bne.n	800512e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	4618      	mov	r0, r3
 800516c:	f7fd fb4e 	bl	800280c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800517e:	b29b      	uxth	r3, r3
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	b29b      	uxth	r3, r3
 8005184:	4619      	mov	r1, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f8c8 	bl	800531c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800518c:	e09c      	b.n	80052c8 <HAL_UART_IRQHandler+0x518>
 800518e:	bf00      	nop
 8005190:	08005853 	.word	0x08005853
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800519c:	b29b      	uxth	r3, r3
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 808e 	beq.w	80052cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80051b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8089 	beq.w	80052cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	330c      	adds	r3, #12
 80051c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	e853 3f00 	ldrex	r3, [r3]
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80051de:	647a      	str	r2, [r7, #68]	; 0x44
 80051e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e3      	bne.n	80051ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3314      	adds	r3, #20
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	e853 3f00 	ldrex	r3, [r3]
 8005200:	623b      	str	r3, [r7, #32]
   return(result);
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3314      	adds	r3, #20
 8005212:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005216:	633a      	str	r2, [r7, #48]	; 0x30
 8005218:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800521c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e3      	bne.n	80051f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	330c      	adds	r3, #12
 800523e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	60fb      	str	r3, [r7, #12]
   return(result);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0310 	bic.w	r3, r3, #16
 800524e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	330c      	adds	r3, #12
 8005258:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800525c:	61fa      	str	r2, [r7, #28]
 800525e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	69b9      	ldr	r1, [r7, #24]
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	617b      	str	r3, [r7, #20]
   return(result);
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e3      	bne.n	8005238 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005276:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800527a:	4619      	mov	r1, r3
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f84d 	bl	800531c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005282:	e023      	b.n	80052cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528c:	2b00      	cmp	r3, #0
 800528e:	d009      	beq.n	80052a4 <HAL_UART_IRQHandler+0x4f4>
 8005290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 faec 	bl	800587a <UART_Transmit_IT>
    return;
 80052a2:	e014      	b.n	80052ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00e      	beq.n	80052ce <HAL_UART_IRQHandler+0x51e>
 80052b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fb2b 	bl	8005918 <UART_EndTransmit_IT>
    return;
 80052c2:	e004      	b.n	80052ce <HAL_UART_IRQHandler+0x51e>
    return;
 80052c4:	bf00      	nop
 80052c6:	e002      	b.n	80052ce <HAL_UART_IRQHandler+0x51e>
      return;
 80052c8:	bf00      	nop
 80052ca:	e000      	b.n	80052ce <HAL_UART_IRQHandler+0x51e>
      return;
 80052cc:	bf00      	nop
  }
}
 80052ce:	37e8      	adds	r7, #232	; 0xe8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr

080052e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc80      	pop	{r7}
 80052f6:	4770      	bx	lr

080052f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	bc80      	pop	{r7}
 8005308:	4770      	bx	lr

0800530a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr

0800531c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	bc80      	pop	{r7}
 8005330:	4770      	bx	lr

08005332 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b09c      	sub	sp, #112	; 0x70
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d172      	bne.n	8005434 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800534e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005350:	2200      	movs	r2, #0
 8005352:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	330c      	adds	r3, #12
 800535a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535e:	e853 3f00 	ldrex	r3, [r3]
 8005362:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800536a:	66bb      	str	r3, [r7, #104]	; 0x68
 800536c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	330c      	adds	r3, #12
 8005372:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005374:	65ba      	str	r2, [r7, #88]	; 0x58
 8005376:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800537a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800537c:	e841 2300 	strex	r3, r2, [r1]
 8005380:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e5      	bne.n	8005354 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3314      	adds	r3, #20
 800538e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539a:	f023 0301 	bic.w	r3, r3, #1
 800539e:	667b      	str	r3, [r7, #100]	; 0x64
 80053a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3314      	adds	r3, #20
 80053a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80053a8:	647a      	str	r2, [r7, #68]	; 0x44
 80053aa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e5      	bne.n	8005388 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3314      	adds	r3, #20
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	623b      	str	r3, [r7, #32]
   return(result);
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d2:	663b      	str	r3, [r7, #96]	; 0x60
 80053d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3314      	adds	r3, #20
 80053da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053dc:	633a      	str	r2, [r7, #48]	; 0x30
 80053de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e5      	bne.n	80053bc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d119      	bne.n	8005434 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	330c      	adds	r3, #12
 8005406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0310 	bic.w	r3, r3, #16
 8005416:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005420:	61fa      	str	r2, [r7, #28]
 8005422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	69b9      	ldr	r1, [r7, #24]
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	617b      	str	r3, [r7, #20]
   return(result);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e5      	bne.n	8005400 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005436:	2200      	movs	r2, #0
 8005438:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800543a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543e:	2b01      	cmp	r3, #1
 8005440:	d106      	bne.n	8005450 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005446:	4619      	mov	r1, r3
 8005448:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800544a:	f7ff ff67 	bl	800531c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800544e:	e002      	b.n	8005456 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005450:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005452:	f7ff ff48 	bl	80052e6 <HAL_UART_RxCpltCallback>
}
 8005456:	bf00      	nop
 8005458:	3770      	adds	r7, #112	; 0x70
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	2b01      	cmp	r3, #1
 8005478:	d108      	bne.n	800548c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800547e:	085b      	lsrs	r3, r3, #1
 8005480:	b29b      	uxth	r3, r3
 8005482:	4619      	mov	r1, r3
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f7ff ff49 	bl	800531c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800548a:	e002      	b.n	8005492 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f7ff ff33 	bl	80052f8 <HAL_UART_RxHalfCpltCallback>
}
 8005492:	bf00      	nop
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bf14      	ite	ne
 80054ba:	2301      	movne	r3, #1
 80054bc:	2300      	moveq	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b21      	cmp	r3, #33	; 0x21
 80054cc:	d108      	bne.n	80054e0 <UART_DMAError+0x46>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2200      	movs	r2, #0
 80054d8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80054da:	68b8      	ldr	r0, [r7, #8]
 80054dc:	f000 f930 	bl	8005740 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b22      	cmp	r3, #34	; 0x22
 8005500:	d108      	bne.n	8005514 <UART_DMAError+0x7a>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2200      	movs	r2, #0
 800550c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800550e:	68b8      	ldr	r0, [r7, #8]
 8005510:	f000 f93d 	bl	800578e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005518:	f043 0210 	orr.w	r2, r3, #16
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005520:	68b8      	ldr	r0, [r7, #8]
 8005522:	f7ff fef2 	bl	800530a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005526:	bf00      	nop
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b090      	sub	sp, #64	; 0x40
 8005532:	af00      	add	r7, sp, #0
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	603b      	str	r3, [r7, #0]
 800553a:	4613      	mov	r3, r2
 800553c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800553e:	e050      	b.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d04c      	beq.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <UART_WaitOnFlagUntilTimeout+0x30>
 800554e:	f7fc ff6f 	bl	8002430 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800555a:	429a      	cmp	r2, r3
 800555c:	d241      	bcs.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	330c      	adds	r3, #12
 8005564:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	330c      	adds	r3, #12
 800557c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800557e:	637a      	str	r2, [r7, #52]	; 0x34
 8005580:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1e5      	bne.n	800555e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3314      	adds	r3, #20
 8005598:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	613b      	str	r3, [r7, #16]
   return(result);
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	f023 0301 	bic.w	r3, r3, #1
 80055a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3314      	adds	r3, #20
 80055b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055b2:	623a      	str	r2, [r7, #32]
 80055b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	69f9      	ldr	r1, [r7, #28]
 80055b8:	6a3a      	ldr	r2, [r7, #32]
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	61bb      	str	r3, [r7, #24]
   return(result);
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e5      	bne.n	8005592 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e00f      	b.n	8005602 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4013      	ands	r3, r2
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	bf0c      	ite	eq
 80055f2:	2301      	moveq	r3, #1
 80055f4:	2300      	movne	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d09f      	beq.n	8005540 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3740      	adds	r7, #64	; 0x40
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b098      	sub	sp, #96	; 0x60
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	4613      	mov	r3, r2
 8005618:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	88fa      	ldrh	r2, [r7, #6]
 8005624:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2222      	movs	r2, #34	; 0x22
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005638:	4a3e      	ldr	r2, [pc, #248]	; (8005734 <UART_Start_Receive_DMA+0x128>)
 800563a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005640:	4a3d      	ldr	r2, [pc, #244]	; (8005738 <UART_Start_Receive_DMA+0x12c>)
 8005642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005648:	4a3c      	ldr	r2, [pc, #240]	; (800573c <UART_Start_Receive_DMA+0x130>)
 800564a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005650:	2200      	movs	r2, #0
 8005652:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005654:	f107 0308 	add.w	r3, r7, #8
 8005658:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3304      	adds	r3, #4
 8005664:	4619      	mov	r1, r3
 8005666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	f7fd f86e 	bl	800274c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005670:	2300      	movs	r3, #0
 8005672:	613b      	str	r3, [r7, #16]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	613b      	str	r3, [r7, #16]
 8005684:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d019      	beq.n	80056c2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	330c      	adds	r3, #12
 8005694:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800569e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	330c      	adds	r3, #12
 80056ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056ae:	64fa      	str	r2, [r7, #76]	; 0x4c
 80056b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80056b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80056bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e5      	bne.n	800568e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3314      	adds	r3, #20
 80056c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056cc:	e853 3f00 	ldrex	r3, [r3]
 80056d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d4:	f043 0301 	orr.w	r3, r3, #1
 80056d8:	657b      	str	r3, [r7, #84]	; 0x54
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3314      	adds	r3, #20
 80056e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056e2:	63ba      	str	r2, [r7, #56]	; 0x38
 80056e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e5      	bne.n	80056c2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3314      	adds	r3, #20
 80056fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	617b      	str	r3, [r7, #20]
   return(result);
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800570c:	653b      	str	r3, [r7, #80]	; 0x50
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3314      	adds	r3, #20
 8005714:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005716:	627a      	str	r2, [r7, #36]	; 0x24
 8005718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	6a39      	ldr	r1, [r7, #32]
 800571c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	61fb      	str	r3, [r7, #28]
   return(result);
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1e5      	bne.n	80056f6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3760      	adds	r7, #96	; 0x60
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	08005333 	.word	0x08005333
 8005738:	0800545f 	.word	0x0800545f
 800573c:	0800549b 	.word	0x0800549b

08005740 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005740:	b480      	push	{r7}
 8005742:	b089      	sub	sp, #36	; 0x24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	60bb      	str	r3, [r7, #8]
   return(result);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800575e:	61fb      	str	r3, [r7, #28]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	330c      	adds	r3, #12
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	61ba      	str	r2, [r7, #24]
 800576a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576c:	6979      	ldr	r1, [r7, #20]
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	e841 2300 	strex	r3, r2, [r1]
 8005774:	613b      	str	r3, [r7, #16]
   return(result);
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e5      	bne.n	8005748 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005784:	bf00      	nop
 8005786:	3724      	adds	r7, #36	; 0x24
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800578e:	b480      	push	{r7}
 8005790:	b095      	sub	sp, #84	; 0x54
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	330c      	adds	r3, #12
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	330c      	adds	r3, #12
 80057b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057b6:	643a      	str	r2, [r7, #64]	; 0x40
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e5      	bne.n	8005796 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3314      	adds	r3, #20
 80057d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	f023 0301 	bic.w	r3, r3, #1
 80057e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3314      	adds	r3, #20
 80057e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e5      	bne.n	80057ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	2b01      	cmp	r3, #1
 8005804:	d119      	bne.n	800583a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	330c      	adds	r3, #12
 800580c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	60bb      	str	r3, [r7, #8]
   return(result);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f023 0310 	bic.w	r3, r3, #16
 800581c:	647b      	str	r3, [r7, #68]	; 0x44
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	330c      	adds	r3, #12
 8005824:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005826:	61ba      	str	r2, [r7, #24]
 8005828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6979      	ldr	r1, [r7, #20]
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	613b      	str	r3, [r7, #16]
   return(result);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e5      	bne.n	8005806 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005848:	bf00      	nop
 800584a:	3754      	adds	r7, #84	; 0x54
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr

08005852 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7ff fd4c 	bl	800530a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b21      	cmp	r3, #33	; 0x21
 800588c:	d13e      	bne.n	800590c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005896:	d114      	bne.n	80058c2 <UART_Transmit_IT+0x48>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d110      	bne.n	80058c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	1c9a      	adds	r2, r3, #2
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	621a      	str	r2, [r3, #32]
 80058c0:	e008      	b.n	80058d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	1c59      	adds	r1, r3, #1
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6211      	str	r1, [r2, #32]
 80058cc:	781a      	ldrb	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058d8:	b29b      	uxth	r3, r3
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29b      	uxth	r3, r3
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4619      	mov	r1, r3
 80058e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10f      	bne.n	8005908 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005906:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	e000      	b.n	800590e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800590c:	2302      	movs	r3, #2
  }
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr

08005918 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800592e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff fccb 	bl	80052d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08c      	sub	sp, #48	; 0x30
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b22      	cmp	r3, #34	; 0x22
 800595a:	f040 80ae 	bne.w	8005aba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005966:	d117      	bne.n	8005998 <UART_Receive_IT+0x50>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d113      	bne.n	8005998 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005970:	2300      	movs	r3, #0
 8005972:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005978:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	b29b      	uxth	r3, r3
 8005982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005986:	b29a      	uxth	r2, r3
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	1c9a      	adds	r2, r3, #2
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	629a      	str	r2, [r3, #40]	; 0x28
 8005996:	e026      	b.n	80059e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059aa:	d007      	beq.n	80059bc <UART_Receive_IT+0x74>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10a      	bne.n	80059ca <UART_Receive_IT+0x82>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	701a      	strb	r2, [r3, #0]
 80059c8:	e008      	b.n	80059dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4619      	mov	r1, r3
 80059f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d15d      	bne.n	8005ab6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0220 	bic.w	r2, r2, #32
 8005a08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695a      	ldr	r2, [r3, #20]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0201 	bic.w	r2, r2, #1
 8005a28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d135      	bne.n	8005aac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	330c      	adds	r3, #12
 8005a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	613b      	str	r3, [r7, #16]
   return(result);
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f023 0310 	bic.w	r3, r3, #16
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	330c      	adds	r3, #12
 8005a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a66:	623a      	str	r2, [r7, #32]
 8005a68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	69f9      	ldr	r1, [r7, #28]
 8005a6c:	6a3a      	ldr	r2, [r7, #32]
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e5      	bne.n	8005a46 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b10      	cmp	r3, #16
 8005a86:	d10a      	bne.n	8005a9e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff fc39 	bl	800531c <HAL_UARTEx_RxEventCallback>
 8005aaa:	e002      	b.n	8005ab2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff fc1a 	bl	80052e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e002      	b.n	8005abc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e000      	b.n	8005abc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005aba:	2302      	movs	r3, #2
  }
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3730      	adds	r7, #48	; 0x30
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005afe:	f023 030c 	bic.w	r3, r3, #12
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6812      	ldr	r2, [r2, #0]
 8005b06:	68b9      	ldr	r1, [r7, #8]
 8005b08:	430b      	orrs	r3, r1
 8005b0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a2c      	ldr	r2, [pc, #176]	; (8005bd8 <UART_SetConfig+0x114>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d103      	bne.n	8005b34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b2c:	f7fd ffa6 	bl	8003a7c <HAL_RCC_GetPCLK2Freq>
 8005b30:	60f8      	str	r0, [r7, #12]
 8005b32:	e002      	b.n	8005b3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b34:	f7fd ff8e 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 8005b38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009a      	lsls	r2, r3, #2
 8005b44:	441a      	add	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b50:	4a22      	ldr	r2, [pc, #136]	; (8005bdc <UART_SetConfig+0x118>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	095b      	lsrs	r3, r3, #5
 8005b58:	0119      	lsls	r1, r3, #4
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	009a      	lsls	r2, r3, #2
 8005b64:	441a      	add	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b70:	4b1a      	ldr	r3, [pc, #104]	; (8005bdc <UART_SetConfig+0x118>)
 8005b72:	fba3 0302 	umull	r0, r3, r3, r2
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	2064      	movs	r0, #100	; 0x64
 8005b7a:	fb00 f303 	mul.w	r3, r0, r3
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	3332      	adds	r3, #50	; 0x32
 8005b84:	4a15      	ldr	r2, [pc, #84]	; (8005bdc <UART_SetConfig+0x118>)
 8005b86:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8a:	095b      	lsrs	r3, r3, #5
 8005b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b90:	4419      	add	r1, r3
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4613      	mov	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	009a      	lsls	r2, r3, #2
 8005b9c:	441a      	add	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <UART_SetConfig+0x118>)
 8005baa:	fba3 0302 	umull	r0, r3, r3, r2
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	2064      	movs	r0, #100	; 0x64
 8005bb2:	fb00 f303 	mul.w	r3, r0, r3
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	3332      	adds	r3, #50	; 0x32
 8005bbc:	4a07      	ldr	r2, [pc, #28]	; (8005bdc <UART_SetConfig+0x118>)
 8005bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	f003 020f 	and.w	r2, r3, #15
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	440a      	add	r2, r1
 8005bce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40013800 	.word	0x40013800
 8005bdc:	51eb851f 	.word	0x51eb851f

08005be0 <atof>:
 8005be0:	2100      	movs	r1, #0
 8005be2:	f000 be15 	b.w	8006810 <strtod>

08005be6 <sulp>:
 8005be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bea:	460f      	mov	r7, r1
 8005bec:	4690      	mov	r8, r2
 8005bee:	f002 f87d 	bl	8007cec <__ulp>
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	460d      	mov	r5, r1
 8005bf6:	f1b8 0f00 	cmp.w	r8, #0
 8005bfa:	d011      	beq.n	8005c20 <sulp+0x3a>
 8005bfc:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005c00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	dd0b      	ble.n	8005c20 <sulp+0x3a>
 8005c08:	2400      	movs	r4, #0
 8005c0a:	051b      	lsls	r3, r3, #20
 8005c0c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005c10:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005c14:	4622      	mov	r2, r4
 8005c16:	462b      	mov	r3, r5
 8005c18:	f7fa fd76 	bl	8000708 <__aeabi_dmul>
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	460d      	mov	r5, r1
 8005c20:	4620      	mov	r0, r4
 8005c22:	4629      	mov	r1, r5
 8005c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c28 <_strtod_l>:
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	b09f      	sub	sp, #124	; 0x7c
 8005c2e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c30:	2200      	movs	r2, #0
 8005c32:	4604      	mov	r4, r0
 8005c34:	921a      	str	r2, [sp, #104]	; 0x68
 8005c36:	460d      	mov	r5, r1
 8005c38:	f04f 0800 	mov.w	r8, #0
 8005c3c:	f04f 0900 	mov.w	r9, #0
 8005c40:	460a      	mov	r2, r1
 8005c42:	9219      	str	r2, [sp, #100]	; 0x64
 8005c44:	7811      	ldrb	r1, [r2, #0]
 8005c46:	292b      	cmp	r1, #43	; 0x2b
 8005c48:	d04a      	beq.n	8005ce0 <_strtod_l+0xb8>
 8005c4a:	d838      	bhi.n	8005cbe <_strtod_l+0x96>
 8005c4c:	290d      	cmp	r1, #13
 8005c4e:	d832      	bhi.n	8005cb6 <_strtod_l+0x8e>
 8005c50:	2908      	cmp	r1, #8
 8005c52:	d832      	bhi.n	8005cba <_strtod_l+0x92>
 8005c54:	2900      	cmp	r1, #0
 8005c56:	d03b      	beq.n	8005cd0 <_strtod_l+0xa8>
 8005c58:	2200      	movs	r2, #0
 8005c5a:	920e      	str	r2, [sp, #56]	; 0x38
 8005c5c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005c5e:	7832      	ldrb	r2, [r6, #0]
 8005c60:	2a30      	cmp	r2, #48	; 0x30
 8005c62:	f040 80b2 	bne.w	8005dca <_strtod_l+0x1a2>
 8005c66:	7872      	ldrb	r2, [r6, #1]
 8005c68:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005c6c:	2a58      	cmp	r2, #88	; 0x58
 8005c6e:	d16e      	bne.n	8005d4e <_strtod_l+0x126>
 8005c70:	9302      	str	r3, [sp, #8]
 8005c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c74:	4620      	mov	r0, r4
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	ab1a      	add	r3, sp, #104	; 0x68
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	4a8c      	ldr	r2, [pc, #560]	; (8005eb0 <_strtod_l+0x288>)
 8005c7e:	ab1b      	add	r3, sp, #108	; 0x6c
 8005c80:	a919      	add	r1, sp, #100	; 0x64
 8005c82:	f001 f917 	bl	8006eb4 <__gethex>
 8005c86:	f010 070f 	ands.w	r7, r0, #15
 8005c8a:	4605      	mov	r5, r0
 8005c8c:	d005      	beq.n	8005c9a <_strtod_l+0x72>
 8005c8e:	2f06      	cmp	r7, #6
 8005c90:	d128      	bne.n	8005ce4 <_strtod_l+0xbc>
 8005c92:	2300      	movs	r3, #0
 8005c94:	3601      	adds	r6, #1
 8005c96:	9619      	str	r6, [sp, #100]	; 0x64
 8005c98:	930e      	str	r3, [sp, #56]	; 0x38
 8005c9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f040 85a0 	bne.w	80067e2 <_strtod_l+0xbba>
 8005ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ca4:	b1cb      	cbz	r3, 8005cda <_strtod_l+0xb2>
 8005ca6:	4642      	mov	r2, r8
 8005ca8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005cac:	4610      	mov	r0, r2
 8005cae:	4619      	mov	r1, r3
 8005cb0:	b01f      	add	sp, #124	; 0x7c
 8005cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb6:	2920      	cmp	r1, #32
 8005cb8:	d1ce      	bne.n	8005c58 <_strtod_l+0x30>
 8005cba:	3201      	adds	r2, #1
 8005cbc:	e7c1      	b.n	8005c42 <_strtod_l+0x1a>
 8005cbe:	292d      	cmp	r1, #45	; 0x2d
 8005cc0:	d1ca      	bne.n	8005c58 <_strtod_l+0x30>
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	910e      	str	r1, [sp, #56]	; 0x38
 8005cc6:	1c51      	adds	r1, r2, #1
 8005cc8:	9119      	str	r1, [sp, #100]	; 0x64
 8005cca:	7852      	ldrb	r2, [r2, #1]
 8005ccc:	2a00      	cmp	r2, #0
 8005cce:	d1c5      	bne.n	8005c5c <_strtod_l+0x34>
 8005cd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cd2:	9519      	str	r5, [sp, #100]	; 0x64
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f040 8582 	bne.w	80067de <_strtod_l+0xbb6>
 8005cda:	4642      	mov	r2, r8
 8005cdc:	464b      	mov	r3, r9
 8005cde:	e7e5      	b.n	8005cac <_strtod_l+0x84>
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	e7ef      	b.n	8005cc4 <_strtod_l+0x9c>
 8005ce4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005ce6:	b13a      	cbz	r2, 8005cf8 <_strtod_l+0xd0>
 8005ce8:	2135      	movs	r1, #53	; 0x35
 8005cea:	a81c      	add	r0, sp, #112	; 0x70
 8005cec:	f002 f8ea 	bl	8007ec4 <__copybits>
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005cf4:	f001 fcce 	bl	8007694 <_Bfree>
 8005cf8:	3f01      	subs	r7, #1
 8005cfa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005cfc:	2f04      	cmp	r7, #4
 8005cfe:	d806      	bhi.n	8005d0e <_strtod_l+0xe6>
 8005d00:	e8df f007 	tbb	[pc, r7]
 8005d04:	201d0314 	.word	0x201d0314
 8005d08:	14          	.byte	0x14
 8005d09:	00          	.byte	0x00
 8005d0a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005d0e:	05e9      	lsls	r1, r5, #23
 8005d10:	bf48      	it	mi
 8005d12:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8005d16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d1a:	0d1b      	lsrs	r3, r3, #20
 8005d1c:	051b      	lsls	r3, r3, #20
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1bb      	bne.n	8005c9a <_strtod_l+0x72>
 8005d22:	f000 ffd7 	bl	8006cd4 <__errno>
 8005d26:	2322      	movs	r3, #34	; 0x22
 8005d28:	6003      	str	r3, [r0, #0]
 8005d2a:	e7b6      	b.n	8005c9a <_strtod_l+0x72>
 8005d2c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005d30:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005d34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d38:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005d3c:	e7e7      	b.n	8005d0e <_strtod_l+0xe6>
 8005d3e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8005eb4 <_strtod_l+0x28c>
 8005d42:	e7e4      	b.n	8005d0e <_strtod_l+0xe6>
 8005d44:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005d48:	f04f 38ff 	mov.w	r8, #4294967295
 8005d4c:	e7df      	b.n	8005d0e <_strtod_l+0xe6>
 8005d4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	9219      	str	r2, [sp, #100]	; 0x64
 8005d54:	785b      	ldrb	r3, [r3, #1]
 8005d56:	2b30      	cmp	r3, #48	; 0x30
 8005d58:	d0f9      	beq.n	8005d4e <_strtod_l+0x126>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d09d      	beq.n	8005c9a <_strtod_l+0x72>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f04f 0a00 	mov.w	sl, #0
 8005d64:	220a      	movs	r2, #10
 8005d66:	46d3      	mov	fp, sl
 8005d68:	9305      	str	r3, [sp, #20]
 8005d6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d6c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005d70:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d72:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005d74:	7806      	ldrb	r6, [r0, #0]
 8005d76:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005d7a:	b2d9      	uxtb	r1, r3
 8005d7c:	2909      	cmp	r1, #9
 8005d7e:	d926      	bls.n	8005dce <_strtod_l+0x1a6>
 8005d80:	2201      	movs	r2, #1
 8005d82:	494d      	ldr	r1, [pc, #308]	; (8005eb8 <_strtod_l+0x290>)
 8005d84:	f000 ff4e 	bl	8006c24 <strncmp>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d030      	beq.n	8005dee <_strtod_l+0x1c6>
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	4632      	mov	r2, r6
 8005d90:	4603      	mov	r3, r0
 8005d92:	465e      	mov	r6, fp
 8005d94:	9008      	str	r0, [sp, #32]
 8005d96:	2a65      	cmp	r2, #101	; 0x65
 8005d98:	d001      	beq.n	8005d9e <_strtod_l+0x176>
 8005d9a:	2a45      	cmp	r2, #69	; 0x45
 8005d9c:	d113      	bne.n	8005dc6 <_strtod_l+0x19e>
 8005d9e:	b91e      	cbnz	r6, 8005da8 <_strtod_l+0x180>
 8005da0:	9a05      	ldr	r2, [sp, #20]
 8005da2:	4302      	orrs	r2, r0
 8005da4:	d094      	beq.n	8005cd0 <_strtod_l+0xa8>
 8005da6:	2600      	movs	r6, #0
 8005da8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005daa:	1c6a      	adds	r2, r5, #1
 8005dac:	9219      	str	r2, [sp, #100]	; 0x64
 8005dae:	786a      	ldrb	r2, [r5, #1]
 8005db0:	2a2b      	cmp	r2, #43	; 0x2b
 8005db2:	d074      	beq.n	8005e9e <_strtod_l+0x276>
 8005db4:	2a2d      	cmp	r2, #45	; 0x2d
 8005db6:	d078      	beq.n	8005eaa <_strtod_l+0x282>
 8005db8:	f04f 0c00 	mov.w	ip, #0
 8005dbc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005dc0:	2909      	cmp	r1, #9
 8005dc2:	d97f      	bls.n	8005ec4 <_strtod_l+0x29c>
 8005dc4:	9519      	str	r5, [sp, #100]	; 0x64
 8005dc6:	2700      	movs	r7, #0
 8005dc8:	e09e      	b.n	8005f08 <_strtod_l+0x2e0>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e7c8      	b.n	8005d60 <_strtod_l+0x138>
 8005dce:	f1bb 0f08 	cmp.w	fp, #8
 8005dd2:	bfd8      	it	le
 8005dd4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8005dd6:	f100 0001 	add.w	r0, r0, #1
 8005dda:	bfd6      	itet	le
 8005ddc:	fb02 3301 	mlale	r3, r2, r1, r3
 8005de0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8005de4:	930a      	strle	r3, [sp, #40]	; 0x28
 8005de6:	f10b 0b01 	add.w	fp, fp, #1
 8005dea:	9019      	str	r0, [sp, #100]	; 0x64
 8005dec:	e7c1      	b.n	8005d72 <_strtod_l+0x14a>
 8005dee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	9219      	str	r2, [sp, #100]	; 0x64
 8005df4:	785a      	ldrb	r2, [r3, #1]
 8005df6:	f1bb 0f00 	cmp.w	fp, #0
 8005dfa:	d037      	beq.n	8005e6c <_strtod_l+0x244>
 8005dfc:	465e      	mov	r6, fp
 8005dfe:	9008      	str	r0, [sp, #32]
 8005e00:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005e04:	2b09      	cmp	r3, #9
 8005e06:	d912      	bls.n	8005e2e <_strtod_l+0x206>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e7c4      	b.n	8005d96 <_strtod_l+0x16e>
 8005e0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e0e:	3001      	adds	r0, #1
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	9219      	str	r2, [sp, #100]	; 0x64
 8005e14:	785a      	ldrb	r2, [r3, #1]
 8005e16:	2a30      	cmp	r2, #48	; 0x30
 8005e18:	d0f8      	beq.n	8005e0c <_strtod_l+0x1e4>
 8005e1a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005e1e:	2b08      	cmp	r3, #8
 8005e20:	f200 84e4 	bhi.w	80067ec <_strtod_l+0xbc4>
 8005e24:	9008      	str	r0, [sp, #32]
 8005e26:	2000      	movs	r0, #0
 8005e28:	4606      	mov	r6, r0
 8005e2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e2e:	3a30      	subs	r2, #48	; 0x30
 8005e30:	f100 0301 	add.w	r3, r0, #1
 8005e34:	d014      	beq.n	8005e60 <_strtod_l+0x238>
 8005e36:	9908      	ldr	r1, [sp, #32]
 8005e38:	eb00 0c06 	add.w	ip, r0, r6
 8005e3c:	4419      	add	r1, r3
 8005e3e:	9108      	str	r1, [sp, #32]
 8005e40:	4633      	mov	r3, r6
 8005e42:	210a      	movs	r1, #10
 8005e44:	4563      	cmp	r3, ip
 8005e46:	d113      	bne.n	8005e70 <_strtod_l+0x248>
 8005e48:	1833      	adds	r3, r6, r0
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	f106 0601 	add.w	r6, r6, #1
 8005e50:	4406      	add	r6, r0
 8005e52:	dc1a      	bgt.n	8005e8a <_strtod_l+0x262>
 8005e54:	230a      	movs	r3, #10
 8005e56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e58:	fb03 2301 	mla	r3, r3, r1, r2
 8005e5c:	930a      	str	r3, [sp, #40]	; 0x28
 8005e5e:	2300      	movs	r3, #0
 8005e60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005e62:	4618      	mov	r0, r3
 8005e64:	1c51      	adds	r1, r2, #1
 8005e66:	9119      	str	r1, [sp, #100]	; 0x64
 8005e68:	7852      	ldrb	r2, [r2, #1]
 8005e6a:	e7c9      	b.n	8005e00 <_strtod_l+0x1d8>
 8005e6c:	4658      	mov	r0, fp
 8005e6e:	e7d2      	b.n	8005e16 <_strtod_l+0x1ee>
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	f103 0301 	add.w	r3, r3, #1
 8005e76:	dc03      	bgt.n	8005e80 <_strtod_l+0x258>
 8005e78:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005e7a:	434f      	muls	r7, r1
 8005e7c:	970a      	str	r7, [sp, #40]	; 0x28
 8005e7e:	e7e1      	b.n	8005e44 <_strtod_l+0x21c>
 8005e80:	2b10      	cmp	r3, #16
 8005e82:	bfd8      	it	le
 8005e84:	fb01 fa0a 	mulle.w	sl, r1, sl
 8005e88:	e7dc      	b.n	8005e44 <_strtod_l+0x21c>
 8005e8a:	2e10      	cmp	r6, #16
 8005e8c:	bfdc      	itt	le
 8005e8e:	230a      	movle	r3, #10
 8005e90:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8005e94:	e7e3      	b.n	8005e5e <_strtod_l+0x236>
 8005e96:	2300      	movs	r3, #0
 8005e98:	9308      	str	r3, [sp, #32]
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e780      	b.n	8005da0 <_strtod_l+0x178>
 8005e9e:	f04f 0c00 	mov.w	ip, #0
 8005ea2:	1caa      	adds	r2, r5, #2
 8005ea4:	9219      	str	r2, [sp, #100]	; 0x64
 8005ea6:	78aa      	ldrb	r2, [r5, #2]
 8005ea8:	e788      	b.n	8005dbc <_strtod_l+0x194>
 8005eaa:	f04f 0c01 	mov.w	ip, #1
 8005eae:	e7f8      	b.n	8005ea2 <_strtod_l+0x27a>
 8005eb0:	08008934 	.word	0x08008934
 8005eb4:	7ff00000 	.word	0x7ff00000
 8005eb8:	08008926 	.word	0x08008926
 8005ebc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005ebe:	1c51      	adds	r1, r2, #1
 8005ec0:	9119      	str	r1, [sp, #100]	; 0x64
 8005ec2:	7852      	ldrb	r2, [r2, #1]
 8005ec4:	2a30      	cmp	r2, #48	; 0x30
 8005ec6:	d0f9      	beq.n	8005ebc <_strtod_l+0x294>
 8005ec8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005ecc:	2908      	cmp	r1, #8
 8005ece:	f63f af7a 	bhi.w	8005dc6 <_strtod_l+0x19e>
 8005ed2:	3a30      	subs	r2, #48	; 0x30
 8005ed4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ed6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005ed8:	920c      	str	r2, [sp, #48]	; 0x30
 8005eda:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005edc:	1c57      	adds	r7, r2, #1
 8005ede:	9719      	str	r7, [sp, #100]	; 0x64
 8005ee0:	7852      	ldrb	r2, [r2, #1]
 8005ee2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005ee6:	f1be 0f09 	cmp.w	lr, #9
 8005eea:	d938      	bls.n	8005f5e <_strtod_l+0x336>
 8005eec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005eee:	1a7f      	subs	r7, r7, r1
 8005ef0:	2f08      	cmp	r7, #8
 8005ef2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005ef6:	dc03      	bgt.n	8005f00 <_strtod_l+0x2d8>
 8005ef8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005efa:	428f      	cmp	r7, r1
 8005efc:	bfa8      	it	ge
 8005efe:	460f      	movge	r7, r1
 8005f00:	f1bc 0f00 	cmp.w	ip, #0
 8005f04:	d000      	beq.n	8005f08 <_strtod_l+0x2e0>
 8005f06:	427f      	negs	r7, r7
 8005f08:	2e00      	cmp	r6, #0
 8005f0a:	d14f      	bne.n	8005fac <_strtod_l+0x384>
 8005f0c:	9905      	ldr	r1, [sp, #20]
 8005f0e:	4301      	orrs	r1, r0
 8005f10:	f47f aec3 	bne.w	8005c9a <_strtod_l+0x72>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f47f aedb 	bne.w	8005cd0 <_strtod_l+0xa8>
 8005f1a:	2a69      	cmp	r2, #105	; 0x69
 8005f1c:	d029      	beq.n	8005f72 <_strtod_l+0x34a>
 8005f1e:	dc26      	bgt.n	8005f6e <_strtod_l+0x346>
 8005f20:	2a49      	cmp	r2, #73	; 0x49
 8005f22:	d026      	beq.n	8005f72 <_strtod_l+0x34a>
 8005f24:	2a4e      	cmp	r2, #78	; 0x4e
 8005f26:	f47f aed3 	bne.w	8005cd0 <_strtod_l+0xa8>
 8005f2a:	499a      	ldr	r1, [pc, #616]	; (8006194 <_strtod_l+0x56c>)
 8005f2c:	a819      	add	r0, sp, #100	; 0x64
 8005f2e:	f001 fa03 	bl	8007338 <__match>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	f43f aecc 	beq.w	8005cd0 <_strtod_l+0xa8>
 8005f38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b28      	cmp	r3, #40	; 0x28
 8005f3e:	d12f      	bne.n	8005fa0 <_strtod_l+0x378>
 8005f40:	4995      	ldr	r1, [pc, #596]	; (8006198 <_strtod_l+0x570>)
 8005f42:	aa1c      	add	r2, sp, #112	; 0x70
 8005f44:	a819      	add	r0, sp, #100	; 0x64
 8005f46:	f001 fa0b 	bl	8007360 <__hexnan>
 8005f4a:	2805      	cmp	r0, #5
 8005f4c:	d128      	bne.n	8005fa0 <_strtod_l+0x378>
 8005f4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f50:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005f54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005f58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005f5c:	e69d      	b.n	8005c9a <_strtod_l+0x72>
 8005f5e:	210a      	movs	r1, #10
 8005f60:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005f62:	fb01 2107 	mla	r1, r1, r7, r2
 8005f66:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8005f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8005f6c:	e7b5      	b.n	8005eda <_strtod_l+0x2b2>
 8005f6e:	2a6e      	cmp	r2, #110	; 0x6e
 8005f70:	e7d9      	b.n	8005f26 <_strtod_l+0x2fe>
 8005f72:	498a      	ldr	r1, [pc, #552]	; (800619c <_strtod_l+0x574>)
 8005f74:	a819      	add	r0, sp, #100	; 0x64
 8005f76:	f001 f9df 	bl	8007338 <__match>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	f43f aea8 	beq.w	8005cd0 <_strtod_l+0xa8>
 8005f80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f82:	4987      	ldr	r1, [pc, #540]	; (80061a0 <_strtod_l+0x578>)
 8005f84:	3b01      	subs	r3, #1
 8005f86:	a819      	add	r0, sp, #100	; 0x64
 8005f88:	9319      	str	r3, [sp, #100]	; 0x64
 8005f8a:	f001 f9d5 	bl	8007338 <__match>
 8005f8e:	b910      	cbnz	r0, 8005f96 <_strtod_l+0x36e>
 8005f90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f92:	3301      	adds	r3, #1
 8005f94:	9319      	str	r3, [sp, #100]	; 0x64
 8005f96:	f04f 0800 	mov.w	r8, #0
 8005f9a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80061a4 <_strtod_l+0x57c>
 8005f9e:	e67c      	b.n	8005c9a <_strtod_l+0x72>
 8005fa0:	4881      	ldr	r0, [pc, #516]	; (80061a8 <_strtod_l+0x580>)
 8005fa2:	f000 fed1 	bl	8006d48 <nan>
 8005fa6:	4680      	mov	r8, r0
 8005fa8:	4689      	mov	r9, r1
 8005faa:	e676      	b.n	8005c9a <_strtod_l+0x72>
 8005fac:	9b08      	ldr	r3, [sp, #32]
 8005fae:	f1bb 0f00 	cmp.w	fp, #0
 8005fb2:	bf08      	it	eq
 8005fb4:	46b3      	moveq	fp, r6
 8005fb6:	1afb      	subs	r3, r7, r3
 8005fb8:	2e10      	cmp	r6, #16
 8005fba:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005fbc:	4635      	mov	r5, r6
 8005fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005fc0:	bfa8      	it	ge
 8005fc2:	2510      	movge	r5, #16
 8005fc4:	f7fa fb26 	bl	8000614 <__aeabi_ui2d>
 8005fc8:	2e09      	cmp	r6, #9
 8005fca:	4680      	mov	r8, r0
 8005fcc:	4689      	mov	r9, r1
 8005fce:	dd13      	ble.n	8005ff8 <_strtod_l+0x3d0>
 8005fd0:	4b76      	ldr	r3, [pc, #472]	; (80061ac <_strtod_l+0x584>)
 8005fd2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005fd6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005fda:	f7fa fb95 	bl	8000708 <__aeabi_dmul>
 8005fde:	4680      	mov	r8, r0
 8005fe0:	4650      	mov	r0, sl
 8005fe2:	4689      	mov	r9, r1
 8005fe4:	f7fa fb16 	bl	8000614 <__aeabi_ui2d>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4640      	mov	r0, r8
 8005fee:	4649      	mov	r1, r9
 8005ff0:	f7fa f9d4 	bl	800039c <__adddf3>
 8005ff4:	4680      	mov	r8, r0
 8005ff6:	4689      	mov	r9, r1
 8005ff8:	2e0f      	cmp	r6, #15
 8005ffa:	dc36      	bgt.n	800606a <_strtod_l+0x442>
 8005ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f43f ae4b 	beq.w	8005c9a <_strtod_l+0x72>
 8006004:	dd22      	ble.n	800604c <_strtod_l+0x424>
 8006006:	2b16      	cmp	r3, #22
 8006008:	dc09      	bgt.n	800601e <_strtod_l+0x3f6>
 800600a:	4968      	ldr	r1, [pc, #416]	; (80061ac <_strtod_l+0x584>)
 800600c:	4642      	mov	r2, r8
 800600e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006012:	464b      	mov	r3, r9
 8006014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006018:	f7fa fb76 	bl	8000708 <__aeabi_dmul>
 800601c:	e7c3      	b.n	8005fa6 <_strtod_l+0x37e>
 800601e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006020:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006024:	4293      	cmp	r3, r2
 8006026:	db20      	blt.n	800606a <_strtod_l+0x442>
 8006028:	4c60      	ldr	r4, [pc, #384]	; (80061ac <_strtod_l+0x584>)
 800602a:	f1c6 060f 	rsb	r6, r6, #15
 800602e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006032:	4642      	mov	r2, r8
 8006034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006038:	464b      	mov	r3, r9
 800603a:	f7fa fb65 	bl	8000708 <__aeabi_dmul>
 800603e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006040:	1b9e      	subs	r6, r3, r6
 8006042:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006046:	e9d4 2300 	ldrd	r2, r3, [r4]
 800604a:	e7e5      	b.n	8006018 <_strtod_l+0x3f0>
 800604c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800604e:	3316      	adds	r3, #22
 8006050:	db0b      	blt.n	800606a <_strtod_l+0x442>
 8006052:	9b08      	ldr	r3, [sp, #32]
 8006054:	4640      	mov	r0, r8
 8006056:	1bdf      	subs	r7, r3, r7
 8006058:	4b54      	ldr	r3, [pc, #336]	; (80061ac <_strtod_l+0x584>)
 800605a:	4649      	mov	r1, r9
 800605c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006064:	f7fa fc7a 	bl	800095c <__aeabi_ddiv>
 8006068:	e79d      	b.n	8005fa6 <_strtod_l+0x37e>
 800606a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800606c:	1b75      	subs	r5, r6, r5
 800606e:	441d      	add	r5, r3
 8006070:	2d00      	cmp	r5, #0
 8006072:	dd70      	ble.n	8006156 <_strtod_l+0x52e>
 8006074:	f015 030f 	ands.w	r3, r5, #15
 8006078:	d00a      	beq.n	8006090 <_strtod_l+0x468>
 800607a:	494c      	ldr	r1, [pc, #304]	; (80061ac <_strtod_l+0x584>)
 800607c:	4642      	mov	r2, r8
 800607e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006082:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006086:	464b      	mov	r3, r9
 8006088:	f7fa fb3e 	bl	8000708 <__aeabi_dmul>
 800608c:	4680      	mov	r8, r0
 800608e:	4689      	mov	r9, r1
 8006090:	f035 050f 	bics.w	r5, r5, #15
 8006094:	d04d      	beq.n	8006132 <_strtod_l+0x50a>
 8006096:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800609a:	dd22      	ble.n	80060e2 <_strtod_l+0x4ba>
 800609c:	2600      	movs	r6, #0
 800609e:	46b3      	mov	fp, r6
 80060a0:	960b      	str	r6, [sp, #44]	; 0x2c
 80060a2:	9608      	str	r6, [sp, #32]
 80060a4:	2322      	movs	r3, #34	; 0x22
 80060a6:	f04f 0800 	mov.w	r8, #0
 80060aa:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80061a4 <_strtod_l+0x57c>
 80060ae:	6023      	str	r3, [r4, #0]
 80060b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f43f adf1 	beq.w	8005c9a <_strtod_l+0x72>
 80060b8:	4620      	mov	r0, r4
 80060ba:	991a      	ldr	r1, [sp, #104]	; 0x68
 80060bc:	f001 faea 	bl	8007694 <_Bfree>
 80060c0:	4620      	mov	r0, r4
 80060c2:	9908      	ldr	r1, [sp, #32]
 80060c4:	f001 fae6 	bl	8007694 <_Bfree>
 80060c8:	4659      	mov	r1, fp
 80060ca:	4620      	mov	r0, r4
 80060cc:	f001 fae2 	bl	8007694 <_Bfree>
 80060d0:	4620      	mov	r0, r4
 80060d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060d4:	f001 fade 	bl	8007694 <_Bfree>
 80060d8:	4631      	mov	r1, r6
 80060da:	4620      	mov	r0, r4
 80060dc:	f001 fada 	bl	8007694 <_Bfree>
 80060e0:	e5db      	b.n	8005c9a <_strtod_l+0x72>
 80060e2:	4b33      	ldr	r3, [pc, #204]	; (80061b0 <_strtod_l+0x588>)
 80060e4:	4640      	mov	r0, r8
 80060e6:	9305      	str	r3, [sp, #20]
 80060e8:	2300      	movs	r3, #0
 80060ea:	4649      	mov	r1, r9
 80060ec:	469a      	mov	sl, r3
 80060ee:	112d      	asrs	r5, r5, #4
 80060f0:	2d01      	cmp	r5, #1
 80060f2:	dc21      	bgt.n	8006138 <_strtod_l+0x510>
 80060f4:	b10b      	cbz	r3, 80060fa <_strtod_l+0x4d2>
 80060f6:	4680      	mov	r8, r0
 80060f8:	4689      	mov	r9, r1
 80060fa:	492d      	ldr	r1, [pc, #180]	; (80061b0 <_strtod_l+0x588>)
 80060fc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006100:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006104:	4642      	mov	r2, r8
 8006106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800610a:	464b      	mov	r3, r9
 800610c:	f7fa fafc 	bl	8000708 <__aeabi_dmul>
 8006110:	4b24      	ldr	r3, [pc, #144]	; (80061a4 <_strtod_l+0x57c>)
 8006112:	460a      	mov	r2, r1
 8006114:	400b      	ands	r3, r1
 8006116:	4927      	ldr	r1, [pc, #156]	; (80061b4 <_strtod_l+0x58c>)
 8006118:	4680      	mov	r8, r0
 800611a:	428b      	cmp	r3, r1
 800611c:	d8be      	bhi.n	800609c <_strtod_l+0x474>
 800611e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006122:	428b      	cmp	r3, r1
 8006124:	bf86      	itte	hi
 8006126:	f04f 38ff 	movhi.w	r8, #4294967295
 800612a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80061b8 <_strtod_l+0x590>
 800612e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006132:	2300      	movs	r3, #0
 8006134:	9305      	str	r3, [sp, #20]
 8006136:	e07b      	b.n	8006230 <_strtod_l+0x608>
 8006138:	07ea      	lsls	r2, r5, #31
 800613a:	d505      	bpl.n	8006148 <_strtod_l+0x520>
 800613c:	9b05      	ldr	r3, [sp, #20]
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	f7fa fae1 	bl	8000708 <__aeabi_dmul>
 8006146:	2301      	movs	r3, #1
 8006148:	9a05      	ldr	r2, [sp, #20]
 800614a:	f10a 0a01 	add.w	sl, sl, #1
 800614e:	3208      	adds	r2, #8
 8006150:	106d      	asrs	r5, r5, #1
 8006152:	9205      	str	r2, [sp, #20]
 8006154:	e7cc      	b.n	80060f0 <_strtod_l+0x4c8>
 8006156:	d0ec      	beq.n	8006132 <_strtod_l+0x50a>
 8006158:	426d      	negs	r5, r5
 800615a:	f015 020f 	ands.w	r2, r5, #15
 800615e:	d00a      	beq.n	8006176 <_strtod_l+0x54e>
 8006160:	4b12      	ldr	r3, [pc, #72]	; (80061ac <_strtod_l+0x584>)
 8006162:	4640      	mov	r0, r8
 8006164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006168:	4649      	mov	r1, r9
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	f7fa fbf5 	bl	800095c <__aeabi_ddiv>
 8006172:	4680      	mov	r8, r0
 8006174:	4689      	mov	r9, r1
 8006176:	112d      	asrs	r5, r5, #4
 8006178:	d0db      	beq.n	8006132 <_strtod_l+0x50a>
 800617a:	2d1f      	cmp	r5, #31
 800617c:	dd1e      	ble.n	80061bc <_strtod_l+0x594>
 800617e:	2600      	movs	r6, #0
 8006180:	46b3      	mov	fp, r6
 8006182:	960b      	str	r6, [sp, #44]	; 0x2c
 8006184:	9608      	str	r6, [sp, #32]
 8006186:	2322      	movs	r3, #34	; 0x22
 8006188:	f04f 0800 	mov.w	r8, #0
 800618c:	f04f 0900 	mov.w	r9, #0
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	e78d      	b.n	80060b0 <_strtod_l+0x488>
 8006194:	08008931 	.word	0x08008931
 8006198:	08008948 	.word	0x08008948
 800619c:	08008928 	.word	0x08008928
 80061a0:	0800892b 	.word	0x0800892b
 80061a4:	7ff00000 	.word	0x7ff00000
 80061a8:	08008ce3 	.word	0x08008ce3
 80061ac:	08008aa0 	.word	0x08008aa0
 80061b0:	08008a78 	.word	0x08008a78
 80061b4:	7ca00000 	.word	0x7ca00000
 80061b8:	7fefffff 	.word	0x7fefffff
 80061bc:	f015 0310 	ands.w	r3, r5, #16
 80061c0:	bf18      	it	ne
 80061c2:	236a      	movne	r3, #106	; 0x6a
 80061c4:	4640      	mov	r0, r8
 80061c6:	9305      	str	r3, [sp, #20]
 80061c8:	4649      	mov	r1, r9
 80061ca:	2300      	movs	r3, #0
 80061cc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006498 <_strtod_l+0x870>
 80061d0:	07ea      	lsls	r2, r5, #31
 80061d2:	d504      	bpl.n	80061de <_strtod_l+0x5b6>
 80061d4:	e9da 2300 	ldrd	r2, r3, [sl]
 80061d8:	f7fa fa96 	bl	8000708 <__aeabi_dmul>
 80061dc:	2301      	movs	r3, #1
 80061de:	106d      	asrs	r5, r5, #1
 80061e0:	f10a 0a08 	add.w	sl, sl, #8
 80061e4:	d1f4      	bne.n	80061d0 <_strtod_l+0x5a8>
 80061e6:	b10b      	cbz	r3, 80061ec <_strtod_l+0x5c4>
 80061e8:	4680      	mov	r8, r0
 80061ea:	4689      	mov	r9, r1
 80061ec:	9b05      	ldr	r3, [sp, #20]
 80061ee:	b1bb      	cbz	r3, 8006220 <_strtod_l+0x5f8>
 80061f0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80061f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	4649      	mov	r1, r9
 80061fc:	dd10      	ble.n	8006220 <_strtod_l+0x5f8>
 80061fe:	2b1f      	cmp	r3, #31
 8006200:	f340 8128 	ble.w	8006454 <_strtod_l+0x82c>
 8006204:	2b34      	cmp	r3, #52	; 0x34
 8006206:	bfd8      	it	le
 8006208:	f04f 33ff 	movle.w	r3, #4294967295
 800620c:	f04f 0800 	mov.w	r8, #0
 8006210:	bfcf      	iteee	gt
 8006212:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006216:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800621a:	4093      	lslle	r3, r2
 800621c:	ea03 0901 	andle.w	r9, r3, r1
 8006220:	2200      	movs	r2, #0
 8006222:	2300      	movs	r3, #0
 8006224:	4640      	mov	r0, r8
 8006226:	4649      	mov	r1, r9
 8006228:	f7fa fcd6 	bl	8000bd8 <__aeabi_dcmpeq>
 800622c:	2800      	cmp	r0, #0
 800622e:	d1a6      	bne.n	800617e <_strtod_l+0x556>
 8006230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006232:	465a      	mov	r2, fp
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	4620      	mov	r0, r4
 8006238:	4633      	mov	r3, r6
 800623a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800623c:	f001 fa92 	bl	8007764 <__s2b>
 8006240:	900b      	str	r0, [sp, #44]	; 0x2c
 8006242:	2800      	cmp	r0, #0
 8006244:	f43f af2a 	beq.w	800609c <_strtod_l+0x474>
 8006248:	2600      	movs	r6, #0
 800624a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800624c:	9b08      	ldr	r3, [sp, #32]
 800624e:	2a00      	cmp	r2, #0
 8006250:	eba3 0307 	sub.w	r3, r3, r7
 8006254:	bfa8      	it	ge
 8006256:	2300      	movge	r3, #0
 8006258:	46b3      	mov	fp, r6
 800625a:	9312      	str	r3, [sp, #72]	; 0x48
 800625c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006260:	9316      	str	r3, [sp, #88]	; 0x58
 8006262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006264:	4620      	mov	r0, r4
 8006266:	6859      	ldr	r1, [r3, #4]
 8006268:	f001 f9d4 	bl	8007614 <_Balloc>
 800626c:	9008      	str	r0, [sp, #32]
 800626e:	2800      	cmp	r0, #0
 8006270:	f43f af18 	beq.w	80060a4 <_strtod_l+0x47c>
 8006274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006276:	300c      	adds	r0, #12
 8006278:	691a      	ldr	r2, [r3, #16]
 800627a:	f103 010c 	add.w	r1, r3, #12
 800627e:	3202      	adds	r2, #2
 8006280:	0092      	lsls	r2, r2, #2
 8006282:	f000 fd53 	bl	8006d2c <memcpy>
 8006286:	ab1c      	add	r3, sp, #112	; 0x70
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	ab1b      	add	r3, sp, #108	; 0x6c
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	4642      	mov	r2, r8
 8006290:	464b      	mov	r3, r9
 8006292:	4620      	mov	r0, r4
 8006294:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006298:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800629c:	f001 fd8e 	bl	8007dbc <__d2b>
 80062a0:	901a      	str	r0, [sp, #104]	; 0x68
 80062a2:	2800      	cmp	r0, #0
 80062a4:	f43f aefe 	beq.w	80060a4 <_strtod_l+0x47c>
 80062a8:	2101      	movs	r1, #1
 80062aa:	4620      	mov	r0, r4
 80062ac:	f001 faf2 	bl	8007894 <__i2b>
 80062b0:	4683      	mov	fp, r0
 80062b2:	2800      	cmp	r0, #0
 80062b4:	f43f aef6 	beq.w	80060a4 <_strtod_l+0x47c>
 80062b8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80062ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80062bc:	2f00      	cmp	r7, #0
 80062be:	bfab      	itete	ge
 80062c0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80062c2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80062c4:	eb07 0a03 	addge.w	sl, r7, r3
 80062c8:	1bdd      	sublt	r5, r3, r7
 80062ca:	9b05      	ldr	r3, [sp, #20]
 80062cc:	bfa8      	it	ge
 80062ce:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80062d0:	eba7 0703 	sub.w	r7, r7, r3
 80062d4:	4417      	add	r7, r2
 80062d6:	4b71      	ldr	r3, [pc, #452]	; (800649c <_strtod_l+0x874>)
 80062d8:	f107 37ff 	add.w	r7, r7, #4294967295
 80062dc:	bfb8      	it	lt
 80062de:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80062e2:	429f      	cmp	r7, r3
 80062e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80062e8:	f280 80c7 	bge.w	800647a <_strtod_l+0x852>
 80062ec:	1bdb      	subs	r3, r3, r7
 80062ee:	2b1f      	cmp	r3, #31
 80062f0:	f04f 0101 	mov.w	r1, #1
 80062f4:	eba2 0203 	sub.w	r2, r2, r3
 80062f8:	f300 80b3 	bgt.w	8006462 <_strtod_l+0x83a>
 80062fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006300:	9313      	str	r3, [sp, #76]	; 0x4c
 8006302:	2300      	movs	r3, #0
 8006304:	9310      	str	r3, [sp, #64]	; 0x40
 8006306:	eb0a 0702 	add.w	r7, sl, r2
 800630a:	9b05      	ldr	r3, [sp, #20]
 800630c:	45ba      	cmp	sl, r7
 800630e:	4415      	add	r5, r2
 8006310:	441d      	add	r5, r3
 8006312:	4653      	mov	r3, sl
 8006314:	bfa8      	it	ge
 8006316:	463b      	movge	r3, r7
 8006318:	42ab      	cmp	r3, r5
 800631a:	bfa8      	it	ge
 800631c:	462b      	movge	r3, r5
 800631e:	2b00      	cmp	r3, #0
 8006320:	bfc2      	ittt	gt
 8006322:	1aff      	subgt	r7, r7, r3
 8006324:	1aed      	subgt	r5, r5, r3
 8006326:	ebaa 0a03 	subgt.w	sl, sl, r3
 800632a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800632c:	2b00      	cmp	r3, #0
 800632e:	dd17      	ble.n	8006360 <_strtod_l+0x738>
 8006330:	4659      	mov	r1, fp
 8006332:	461a      	mov	r2, r3
 8006334:	4620      	mov	r0, r4
 8006336:	f001 fb6b 	bl	8007a10 <__pow5mult>
 800633a:	4683      	mov	fp, r0
 800633c:	2800      	cmp	r0, #0
 800633e:	f43f aeb1 	beq.w	80060a4 <_strtod_l+0x47c>
 8006342:	4601      	mov	r1, r0
 8006344:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006346:	4620      	mov	r0, r4
 8006348:	f001 faba 	bl	80078c0 <__multiply>
 800634c:	900a      	str	r0, [sp, #40]	; 0x28
 800634e:	2800      	cmp	r0, #0
 8006350:	f43f aea8 	beq.w	80060a4 <_strtod_l+0x47c>
 8006354:	4620      	mov	r0, r4
 8006356:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006358:	f001 f99c 	bl	8007694 <_Bfree>
 800635c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800635e:	931a      	str	r3, [sp, #104]	; 0x68
 8006360:	2f00      	cmp	r7, #0
 8006362:	f300 808f 	bgt.w	8006484 <_strtod_l+0x85c>
 8006366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	dd08      	ble.n	800637e <_strtod_l+0x756>
 800636c:	4620      	mov	r0, r4
 800636e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006370:	9908      	ldr	r1, [sp, #32]
 8006372:	f001 fb4d 	bl	8007a10 <__pow5mult>
 8006376:	9008      	str	r0, [sp, #32]
 8006378:	2800      	cmp	r0, #0
 800637a:	f43f ae93 	beq.w	80060a4 <_strtod_l+0x47c>
 800637e:	2d00      	cmp	r5, #0
 8006380:	dd08      	ble.n	8006394 <_strtod_l+0x76c>
 8006382:	462a      	mov	r2, r5
 8006384:	4620      	mov	r0, r4
 8006386:	9908      	ldr	r1, [sp, #32]
 8006388:	f001 fb9c 	bl	8007ac4 <__lshift>
 800638c:	9008      	str	r0, [sp, #32]
 800638e:	2800      	cmp	r0, #0
 8006390:	f43f ae88 	beq.w	80060a4 <_strtod_l+0x47c>
 8006394:	f1ba 0f00 	cmp.w	sl, #0
 8006398:	dd08      	ble.n	80063ac <_strtod_l+0x784>
 800639a:	4659      	mov	r1, fp
 800639c:	4652      	mov	r2, sl
 800639e:	4620      	mov	r0, r4
 80063a0:	f001 fb90 	bl	8007ac4 <__lshift>
 80063a4:	4683      	mov	fp, r0
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f43f ae7c 	beq.w	80060a4 <_strtod_l+0x47c>
 80063ac:	4620      	mov	r0, r4
 80063ae:	9a08      	ldr	r2, [sp, #32]
 80063b0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80063b2:	f001 fc0f 	bl	8007bd4 <__mdiff>
 80063b6:	4606      	mov	r6, r0
 80063b8:	2800      	cmp	r0, #0
 80063ba:	f43f ae73 	beq.w	80060a4 <_strtod_l+0x47c>
 80063be:	2500      	movs	r5, #0
 80063c0:	68c3      	ldr	r3, [r0, #12]
 80063c2:	4659      	mov	r1, fp
 80063c4:	60c5      	str	r5, [r0, #12]
 80063c6:	930a      	str	r3, [sp, #40]	; 0x28
 80063c8:	f001 fbe8 	bl	8007b9c <__mcmp>
 80063cc:	42a8      	cmp	r0, r5
 80063ce:	da6b      	bge.n	80064a8 <_strtod_l+0x880>
 80063d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d2:	ea53 0308 	orrs.w	r3, r3, r8
 80063d6:	f040 808f 	bne.w	80064f8 <_strtod_l+0x8d0>
 80063da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f040 808a 	bne.w	80064f8 <_strtod_l+0x8d0>
 80063e4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80063e8:	0d1b      	lsrs	r3, r3, #20
 80063ea:	051b      	lsls	r3, r3, #20
 80063ec:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80063f0:	f240 8082 	bls.w	80064f8 <_strtod_l+0x8d0>
 80063f4:	6973      	ldr	r3, [r6, #20]
 80063f6:	b913      	cbnz	r3, 80063fe <_strtod_l+0x7d6>
 80063f8:	6933      	ldr	r3, [r6, #16]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	dd7c      	ble.n	80064f8 <_strtod_l+0x8d0>
 80063fe:	4631      	mov	r1, r6
 8006400:	2201      	movs	r2, #1
 8006402:	4620      	mov	r0, r4
 8006404:	f001 fb5e 	bl	8007ac4 <__lshift>
 8006408:	4659      	mov	r1, fp
 800640a:	4606      	mov	r6, r0
 800640c:	f001 fbc6 	bl	8007b9c <__mcmp>
 8006410:	2800      	cmp	r0, #0
 8006412:	dd71      	ble.n	80064f8 <_strtod_l+0x8d0>
 8006414:	9905      	ldr	r1, [sp, #20]
 8006416:	464b      	mov	r3, r9
 8006418:	4a21      	ldr	r2, [pc, #132]	; (80064a0 <_strtod_l+0x878>)
 800641a:	2900      	cmp	r1, #0
 800641c:	f000 808d 	beq.w	800653a <_strtod_l+0x912>
 8006420:	ea02 0109 	and.w	r1, r2, r9
 8006424:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006428:	f300 8087 	bgt.w	800653a <_strtod_l+0x912>
 800642c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006430:	f77f aea9 	ble.w	8006186 <_strtod_l+0x55e>
 8006434:	4640      	mov	r0, r8
 8006436:	4649      	mov	r1, r9
 8006438:	4b1a      	ldr	r3, [pc, #104]	; (80064a4 <_strtod_l+0x87c>)
 800643a:	2200      	movs	r2, #0
 800643c:	f7fa f964 	bl	8000708 <__aeabi_dmul>
 8006440:	4b17      	ldr	r3, [pc, #92]	; (80064a0 <_strtod_l+0x878>)
 8006442:	4680      	mov	r8, r0
 8006444:	400b      	ands	r3, r1
 8006446:	4689      	mov	r9, r1
 8006448:	2b00      	cmp	r3, #0
 800644a:	f47f ae35 	bne.w	80060b8 <_strtod_l+0x490>
 800644e:	2322      	movs	r3, #34	; 0x22
 8006450:	6023      	str	r3, [r4, #0]
 8006452:	e631      	b.n	80060b8 <_strtod_l+0x490>
 8006454:	f04f 32ff 	mov.w	r2, #4294967295
 8006458:	fa02 f303 	lsl.w	r3, r2, r3
 800645c:	ea03 0808 	and.w	r8, r3, r8
 8006460:	e6de      	b.n	8006220 <_strtod_l+0x5f8>
 8006462:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8006466:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800646a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800646e:	37e2      	adds	r7, #226	; 0xe2
 8006470:	fa01 f307 	lsl.w	r3, r1, r7
 8006474:	9310      	str	r3, [sp, #64]	; 0x40
 8006476:	9113      	str	r1, [sp, #76]	; 0x4c
 8006478:	e745      	b.n	8006306 <_strtod_l+0x6de>
 800647a:	2300      	movs	r3, #0
 800647c:	9310      	str	r3, [sp, #64]	; 0x40
 800647e:	2301      	movs	r3, #1
 8006480:	9313      	str	r3, [sp, #76]	; 0x4c
 8006482:	e740      	b.n	8006306 <_strtod_l+0x6de>
 8006484:	463a      	mov	r2, r7
 8006486:	4620      	mov	r0, r4
 8006488:	991a      	ldr	r1, [sp, #104]	; 0x68
 800648a:	f001 fb1b 	bl	8007ac4 <__lshift>
 800648e:	901a      	str	r0, [sp, #104]	; 0x68
 8006490:	2800      	cmp	r0, #0
 8006492:	f47f af68 	bne.w	8006366 <_strtod_l+0x73e>
 8006496:	e605      	b.n	80060a4 <_strtod_l+0x47c>
 8006498:	08008960 	.word	0x08008960
 800649c:	fffffc02 	.word	0xfffffc02
 80064a0:	7ff00000 	.word	0x7ff00000
 80064a4:	39500000 	.word	0x39500000
 80064a8:	46ca      	mov	sl, r9
 80064aa:	d165      	bne.n	8006578 <_strtod_l+0x950>
 80064ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064b2:	b352      	cbz	r2, 800650a <_strtod_l+0x8e2>
 80064b4:	4a9e      	ldr	r2, [pc, #632]	; (8006730 <_strtod_l+0xb08>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d12a      	bne.n	8006510 <_strtod_l+0x8e8>
 80064ba:	9b05      	ldr	r3, [sp, #20]
 80064bc:	4641      	mov	r1, r8
 80064be:	b1fb      	cbz	r3, 8006500 <_strtod_l+0x8d8>
 80064c0:	4b9c      	ldr	r3, [pc, #624]	; (8006734 <_strtod_l+0xb0c>)
 80064c2:	f04f 32ff 	mov.w	r2, #4294967295
 80064c6:	ea09 0303 	and.w	r3, r9, r3
 80064ca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80064ce:	d81a      	bhi.n	8006506 <_strtod_l+0x8de>
 80064d0:	0d1b      	lsrs	r3, r3, #20
 80064d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	4299      	cmp	r1, r3
 80064dc:	d118      	bne.n	8006510 <_strtod_l+0x8e8>
 80064de:	4b96      	ldr	r3, [pc, #600]	; (8006738 <_strtod_l+0xb10>)
 80064e0:	459a      	cmp	sl, r3
 80064e2:	d102      	bne.n	80064ea <_strtod_l+0x8c2>
 80064e4:	3101      	adds	r1, #1
 80064e6:	f43f addd 	beq.w	80060a4 <_strtod_l+0x47c>
 80064ea:	f04f 0800 	mov.w	r8, #0
 80064ee:	4b91      	ldr	r3, [pc, #580]	; (8006734 <_strtod_l+0xb0c>)
 80064f0:	ea0a 0303 	and.w	r3, sl, r3
 80064f4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80064f8:	9b05      	ldr	r3, [sp, #20]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d19a      	bne.n	8006434 <_strtod_l+0x80c>
 80064fe:	e5db      	b.n	80060b8 <_strtod_l+0x490>
 8006500:	f04f 33ff 	mov.w	r3, #4294967295
 8006504:	e7e9      	b.n	80064da <_strtod_l+0x8b2>
 8006506:	4613      	mov	r3, r2
 8006508:	e7e7      	b.n	80064da <_strtod_l+0x8b2>
 800650a:	ea53 0308 	orrs.w	r3, r3, r8
 800650e:	d081      	beq.n	8006414 <_strtod_l+0x7ec>
 8006510:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006512:	b1e3      	cbz	r3, 800654e <_strtod_l+0x926>
 8006514:	ea13 0f0a 	tst.w	r3, sl
 8006518:	d0ee      	beq.n	80064f8 <_strtod_l+0x8d0>
 800651a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800651c:	4640      	mov	r0, r8
 800651e:	4649      	mov	r1, r9
 8006520:	9a05      	ldr	r2, [sp, #20]
 8006522:	b1c3      	cbz	r3, 8006556 <_strtod_l+0x92e>
 8006524:	f7ff fb5f 	bl	8005be6 <sulp>
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800652e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006530:	f7f9 ff34 	bl	800039c <__adddf3>
 8006534:	4680      	mov	r8, r0
 8006536:	4689      	mov	r9, r1
 8006538:	e7de      	b.n	80064f8 <_strtod_l+0x8d0>
 800653a:	4013      	ands	r3, r2
 800653c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006540:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006544:	f04f 38ff 	mov.w	r8, #4294967295
 8006548:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800654c:	e7d4      	b.n	80064f8 <_strtod_l+0x8d0>
 800654e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006550:	ea13 0f08 	tst.w	r3, r8
 8006554:	e7e0      	b.n	8006518 <_strtod_l+0x8f0>
 8006556:	f7ff fb46 	bl	8005be6 <sulp>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006560:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006562:	f7f9 ff19 	bl	8000398 <__aeabi_dsub>
 8006566:	2200      	movs	r2, #0
 8006568:	2300      	movs	r3, #0
 800656a:	4680      	mov	r8, r0
 800656c:	4689      	mov	r9, r1
 800656e:	f7fa fb33 	bl	8000bd8 <__aeabi_dcmpeq>
 8006572:	2800      	cmp	r0, #0
 8006574:	d0c0      	beq.n	80064f8 <_strtod_l+0x8d0>
 8006576:	e606      	b.n	8006186 <_strtod_l+0x55e>
 8006578:	4659      	mov	r1, fp
 800657a:	4630      	mov	r0, r6
 800657c:	f001 fc74 	bl	8007e68 <__ratio>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006588:	2200      	movs	r2, #0
 800658a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800658e:	f7fa fb37 	bl	8000c00 <__aeabi_dcmple>
 8006592:	2800      	cmp	r0, #0
 8006594:	d06f      	beq.n	8006676 <_strtod_l+0xa4e>
 8006596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006598:	2b00      	cmp	r3, #0
 800659a:	d17c      	bne.n	8006696 <_strtod_l+0xa6e>
 800659c:	f1b8 0f00 	cmp.w	r8, #0
 80065a0:	d159      	bne.n	8006656 <_strtod_l+0xa2e>
 80065a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d17b      	bne.n	80066a2 <_strtod_l+0xa7a>
 80065aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065ae:	2200      	movs	r2, #0
 80065b0:	4b62      	ldr	r3, [pc, #392]	; (800673c <_strtod_l+0xb14>)
 80065b2:	f7fa fb1b 	bl	8000bec <__aeabi_dcmplt>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d15a      	bne.n	8006670 <_strtod_l+0xa48>
 80065ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065be:	2200      	movs	r2, #0
 80065c0:	4b5f      	ldr	r3, [pc, #380]	; (8006740 <_strtod_l+0xb18>)
 80065c2:	f7fa f8a1 	bl	8000708 <__aeabi_dmul>
 80065c6:	4605      	mov	r5, r0
 80065c8:	460f      	mov	r7, r1
 80065ca:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80065ce:	9506      	str	r5, [sp, #24]
 80065d0:	9307      	str	r3, [sp, #28]
 80065d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80065da:	4b56      	ldr	r3, [pc, #344]	; (8006734 <_strtod_l+0xb0c>)
 80065dc:	4a55      	ldr	r2, [pc, #340]	; (8006734 <_strtod_l+0xb0c>)
 80065de:	ea0a 0303 	and.w	r3, sl, r3
 80065e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80065e4:	4b57      	ldr	r3, [pc, #348]	; (8006744 <_strtod_l+0xb1c>)
 80065e6:	ea0a 0202 	and.w	r2, sl, r2
 80065ea:	429a      	cmp	r2, r3
 80065ec:	f040 80b0 	bne.w	8006750 <_strtod_l+0xb28>
 80065f0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80065f4:	4640      	mov	r0, r8
 80065f6:	4649      	mov	r1, r9
 80065f8:	f001 fb78 	bl	8007cec <__ulp>
 80065fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006600:	f7fa f882 	bl	8000708 <__aeabi_dmul>
 8006604:	4642      	mov	r2, r8
 8006606:	464b      	mov	r3, r9
 8006608:	f7f9 fec8 	bl	800039c <__adddf3>
 800660c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8006734 <_strtod_l+0xb0c>
 8006610:	4a4d      	ldr	r2, [pc, #308]	; (8006748 <_strtod_l+0xb20>)
 8006612:	ea01 0a0a 	and.w	sl, r1, sl
 8006616:	4592      	cmp	sl, r2
 8006618:	4680      	mov	r8, r0
 800661a:	d948      	bls.n	80066ae <_strtod_l+0xa86>
 800661c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800661e:	4b46      	ldr	r3, [pc, #280]	; (8006738 <_strtod_l+0xb10>)
 8006620:	429a      	cmp	r2, r3
 8006622:	d103      	bne.n	800662c <_strtod_l+0xa04>
 8006624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006626:	3301      	adds	r3, #1
 8006628:	f43f ad3c 	beq.w	80060a4 <_strtod_l+0x47c>
 800662c:	f04f 38ff 	mov.w	r8, #4294967295
 8006630:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8006738 <_strtod_l+0xb10>
 8006634:	4620      	mov	r0, r4
 8006636:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006638:	f001 f82c 	bl	8007694 <_Bfree>
 800663c:	4620      	mov	r0, r4
 800663e:	9908      	ldr	r1, [sp, #32]
 8006640:	f001 f828 	bl	8007694 <_Bfree>
 8006644:	4659      	mov	r1, fp
 8006646:	4620      	mov	r0, r4
 8006648:	f001 f824 	bl	8007694 <_Bfree>
 800664c:	4631      	mov	r1, r6
 800664e:	4620      	mov	r0, r4
 8006650:	f001 f820 	bl	8007694 <_Bfree>
 8006654:	e605      	b.n	8006262 <_strtod_l+0x63a>
 8006656:	f1b8 0f01 	cmp.w	r8, #1
 800665a:	d103      	bne.n	8006664 <_strtod_l+0xa3c>
 800665c:	f1b9 0f00 	cmp.w	r9, #0
 8006660:	f43f ad91 	beq.w	8006186 <_strtod_l+0x55e>
 8006664:	2200      	movs	r2, #0
 8006666:	4b39      	ldr	r3, [pc, #228]	; (800674c <_strtod_l+0xb24>)
 8006668:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800666a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800666e:	e016      	b.n	800669e <_strtod_l+0xa76>
 8006670:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006672:	4f33      	ldr	r7, [pc, #204]	; (8006740 <_strtod_l+0xb18>)
 8006674:	e7a9      	b.n	80065ca <_strtod_l+0x9a2>
 8006676:	4b32      	ldr	r3, [pc, #200]	; (8006740 <_strtod_l+0xb18>)
 8006678:	2200      	movs	r2, #0
 800667a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800667e:	f7fa f843 	bl	8000708 <__aeabi_dmul>
 8006682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006684:	4605      	mov	r5, r0
 8006686:	460f      	mov	r7, r1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d09e      	beq.n	80065ca <_strtod_l+0x9a2>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006694:	e79d      	b.n	80065d2 <_strtod_l+0x9aa>
 8006696:	2200      	movs	r2, #0
 8006698:	4b28      	ldr	r3, [pc, #160]	; (800673c <_strtod_l+0xb14>)
 800669a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800669e:	4f27      	ldr	r7, [pc, #156]	; (800673c <_strtod_l+0xb14>)
 80066a0:	e797      	b.n	80065d2 <_strtod_l+0x9aa>
 80066a2:	2200      	movs	r2, #0
 80066a4:	4b29      	ldr	r3, [pc, #164]	; (800674c <_strtod_l+0xb24>)
 80066a6:	4645      	mov	r5, r8
 80066a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80066ac:	e7f7      	b.n	800669e <_strtod_l+0xa76>
 80066ae:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80066b2:	9b05      	ldr	r3, [sp, #20]
 80066b4:	46ca      	mov	sl, r9
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1bc      	bne.n	8006634 <_strtod_l+0xa0c>
 80066ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066c0:	0d1b      	lsrs	r3, r3, #20
 80066c2:	051b      	lsls	r3, r3, #20
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d1b5      	bne.n	8006634 <_strtod_l+0xa0c>
 80066c8:	4628      	mov	r0, r5
 80066ca:	4639      	mov	r1, r7
 80066cc:	f7fa fcd0 	bl	8001070 <__aeabi_d2lz>
 80066d0:	f7f9 ffec 	bl	80006ac <__aeabi_l2d>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4628      	mov	r0, r5
 80066da:	4639      	mov	r1, r7
 80066dc:	f7f9 fe5c 	bl	8000398 <__aeabi_dsub>
 80066e0:	460b      	mov	r3, r1
 80066e2:	4602      	mov	r2, r0
 80066e4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80066e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80066ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ee:	ea4a 0a08 	orr.w	sl, sl, r8
 80066f2:	ea5a 0a03 	orrs.w	sl, sl, r3
 80066f6:	d06c      	beq.n	80067d2 <_strtod_l+0xbaa>
 80066f8:	a309      	add	r3, pc, #36	; (adr r3, 8006720 <_strtod_l+0xaf8>)
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	f7fa fa75 	bl	8000bec <__aeabi_dcmplt>
 8006702:	2800      	cmp	r0, #0
 8006704:	f47f acd8 	bne.w	80060b8 <_strtod_l+0x490>
 8006708:	a307      	add	r3, pc, #28	; (adr r3, 8006728 <_strtod_l+0xb00>)
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006712:	f7fa fa89 	bl	8000c28 <__aeabi_dcmpgt>
 8006716:	2800      	cmp	r0, #0
 8006718:	d08c      	beq.n	8006634 <_strtod_l+0xa0c>
 800671a:	e4cd      	b.n	80060b8 <_strtod_l+0x490>
 800671c:	f3af 8000 	nop.w
 8006720:	94a03595 	.word	0x94a03595
 8006724:	3fdfffff 	.word	0x3fdfffff
 8006728:	35afe535 	.word	0x35afe535
 800672c:	3fe00000 	.word	0x3fe00000
 8006730:	000fffff 	.word	0x000fffff
 8006734:	7ff00000 	.word	0x7ff00000
 8006738:	7fefffff 	.word	0x7fefffff
 800673c:	3ff00000 	.word	0x3ff00000
 8006740:	3fe00000 	.word	0x3fe00000
 8006744:	7fe00000 	.word	0x7fe00000
 8006748:	7c9fffff 	.word	0x7c9fffff
 800674c:	bff00000 	.word	0xbff00000
 8006750:	9b05      	ldr	r3, [sp, #20]
 8006752:	b333      	cbz	r3, 80067a2 <_strtod_l+0xb7a>
 8006754:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006756:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800675a:	d822      	bhi.n	80067a2 <_strtod_l+0xb7a>
 800675c:	a328      	add	r3, pc, #160	; (adr r3, 8006800 <_strtod_l+0xbd8>)
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	4628      	mov	r0, r5
 8006764:	4639      	mov	r1, r7
 8006766:	f7fa fa4b 	bl	8000c00 <__aeabi_dcmple>
 800676a:	b1a0      	cbz	r0, 8006796 <_strtod_l+0xb6e>
 800676c:	4639      	mov	r1, r7
 800676e:	4628      	mov	r0, r5
 8006770:	f7fa fa64 	bl	8000c3c <__aeabi_d2uiz>
 8006774:	2801      	cmp	r0, #1
 8006776:	bf38      	it	cc
 8006778:	2001      	movcc	r0, #1
 800677a:	f7f9 ff4b 	bl	8000614 <__aeabi_ui2d>
 800677e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006780:	4605      	mov	r5, r0
 8006782:	460f      	mov	r7, r1
 8006784:	bb03      	cbnz	r3, 80067c8 <_strtod_l+0xba0>
 8006786:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800678a:	9014      	str	r0, [sp, #80]	; 0x50
 800678c:	9315      	str	r3, [sp, #84]	; 0x54
 800678e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006792:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006796:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006798:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800679a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	9311      	str	r3, [sp, #68]	; 0x44
 80067a2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80067a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80067a6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80067aa:	f001 fa9f 	bl	8007cec <__ulp>
 80067ae:	4602      	mov	r2, r0
 80067b0:	460b      	mov	r3, r1
 80067b2:	4640      	mov	r0, r8
 80067b4:	4649      	mov	r1, r9
 80067b6:	f7f9 ffa7 	bl	8000708 <__aeabi_dmul>
 80067ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067be:	f7f9 fded 	bl	800039c <__adddf3>
 80067c2:	4680      	mov	r8, r0
 80067c4:	4689      	mov	r9, r1
 80067c6:	e774      	b.n	80066b2 <_strtod_l+0xa8a>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80067d0:	e7dd      	b.n	800678e <_strtod_l+0xb66>
 80067d2:	a30d      	add	r3, pc, #52	; (adr r3, 8006808 <_strtod_l+0xbe0>)
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	f7fa fa08 	bl	8000bec <__aeabi_dcmplt>
 80067dc:	e79b      	b.n	8006716 <_strtod_l+0xaee>
 80067de:	2300      	movs	r3, #0
 80067e0:	930e      	str	r3, [sp, #56]	; 0x38
 80067e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	f7ff ba5b 	b.w	8005ca2 <_strtod_l+0x7a>
 80067ec:	2a65      	cmp	r2, #101	; 0x65
 80067ee:	f43f ab52 	beq.w	8005e96 <_strtod_l+0x26e>
 80067f2:	2a45      	cmp	r2, #69	; 0x45
 80067f4:	f43f ab4f 	beq.w	8005e96 <_strtod_l+0x26e>
 80067f8:	2301      	movs	r3, #1
 80067fa:	f7ff bb87 	b.w	8005f0c <_strtod_l+0x2e4>
 80067fe:	bf00      	nop
 8006800:	ffc00000 	.word	0xffc00000
 8006804:	41dfffff 	.word	0x41dfffff
 8006808:	94a03595 	.word	0x94a03595
 800680c:	3fcfffff 	.word	0x3fcfffff

08006810 <strtod>:
 8006810:	460a      	mov	r2, r1
 8006812:	4601      	mov	r1, r0
 8006814:	4802      	ldr	r0, [pc, #8]	; (8006820 <strtod+0x10>)
 8006816:	4b03      	ldr	r3, [pc, #12]	; (8006824 <strtod+0x14>)
 8006818:	6800      	ldr	r0, [r0, #0]
 800681a:	f7ff ba05 	b.w	8005c28 <_strtod_l>
 800681e:	bf00      	nop
 8006820:	200001d0 	.word	0x200001d0
 8006824:	20000018 	.word	0x20000018

08006828 <std>:
 8006828:	2300      	movs	r3, #0
 800682a:	b510      	push	{r4, lr}
 800682c:	4604      	mov	r4, r0
 800682e:	e9c0 3300 	strd	r3, r3, [r0]
 8006832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006836:	6083      	str	r3, [r0, #8]
 8006838:	8181      	strh	r1, [r0, #12]
 800683a:	6643      	str	r3, [r0, #100]	; 0x64
 800683c:	81c2      	strh	r2, [r0, #14]
 800683e:	6183      	str	r3, [r0, #24]
 8006840:	4619      	mov	r1, r3
 8006842:	2208      	movs	r2, #8
 8006844:	305c      	adds	r0, #92	; 0x5c
 8006846:	f000 f9e5 	bl	8006c14 <memset>
 800684a:	4b05      	ldr	r3, [pc, #20]	; (8006860 <std+0x38>)
 800684c:	6224      	str	r4, [r4, #32]
 800684e:	6263      	str	r3, [r4, #36]	; 0x24
 8006850:	4b04      	ldr	r3, [pc, #16]	; (8006864 <std+0x3c>)
 8006852:	62a3      	str	r3, [r4, #40]	; 0x28
 8006854:	4b04      	ldr	r3, [pc, #16]	; (8006868 <std+0x40>)
 8006856:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006858:	4b04      	ldr	r3, [pc, #16]	; (800686c <std+0x44>)
 800685a:	6323      	str	r3, [r4, #48]	; 0x30
 800685c:	bd10      	pop	{r4, pc}
 800685e:	bf00      	nop
 8006860:	08006a65 	.word	0x08006a65
 8006864:	08006a87 	.word	0x08006a87
 8006868:	08006abf 	.word	0x08006abf
 800686c:	08006ae3 	.word	0x08006ae3

08006870 <stdio_exit_handler>:
 8006870:	4a02      	ldr	r2, [pc, #8]	; (800687c <stdio_exit_handler+0xc>)
 8006872:	4903      	ldr	r1, [pc, #12]	; (8006880 <stdio_exit_handler+0x10>)
 8006874:	4803      	ldr	r0, [pc, #12]	; (8006884 <stdio_exit_handler+0x14>)
 8006876:	f000 b869 	b.w	800694c <_fwalk_sglue>
 800687a:	bf00      	nop
 800687c:	2000000c 	.word	0x2000000c
 8006880:	08008615 	.word	0x08008615
 8006884:	20000184 	.word	0x20000184

08006888 <cleanup_stdio>:
 8006888:	6841      	ldr	r1, [r0, #4]
 800688a:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <cleanup_stdio+0x34>)
 800688c:	b510      	push	{r4, lr}
 800688e:	4299      	cmp	r1, r3
 8006890:	4604      	mov	r4, r0
 8006892:	d001      	beq.n	8006898 <cleanup_stdio+0x10>
 8006894:	f001 febe 	bl	8008614 <_fflush_r>
 8006898:	68a1      	ldr	r1, [r4, #8]
 800689a:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <cleanup_stdio+0x38>)
 800689c:	4299      	cmp	r1, r3
 800689e:	d002      	beq.n	80068a6 <cleanup_stdio+0x1e>
 80068a0:	4620      	mov	r0, r4
 80068a2:	f001 feb7 	bl	8008614 <_fflush_r>
 80068a6:	68e1      	ldr	r1, [r4, #12]
 80068a8:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <cleanup_stdio+0x3c>)
 80068aa:	4299      	cmp	r1, r3
 80068ac:	d004      	beq.n	80068b8 <cleanup_stdio+0x30>
 80068ae:	4620      	mov	r0, r4
 80068b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068b4:	f001 beae 	b.w	8008614 <_fflush_r>
 80068b8:	bd10      	pop	{r4, pc}
 80068ba:	bf00      	nop
 80068bc:	200006a0 	.word	0x200006a0
 80068c0:	20000708 	.word	0x20000708
 80068c4:	20000770 	.word	0x20000770

080068c8 <global_stdio_init.part.0>:
 80068c8:	b510      	push	{r4, lr}
 80068ca:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <global_stdio_init.part.0+0x30>)
 80068cc:	4c0b      	ldr	r4, [pc, #44]	; (80068fc <global_stdio_init.part.0+0x34>)
 80068ce:	4a0c      	ldr	r2, [pc, #48]	; (8006900 <global_stdio_init.part.0+0x38>)
 80068d0:	4620      	mov	r0, r4
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	2104      	movs	r1, #4
 80068d6:	2200      	movs	r2, #0
 80068d8:	f7ff ffa6 	bl	8006828 <std>
 80068dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80068e0:	2201      	movs	r2, #1
 80068e2:	2109      	movs	r1, #9
 80068e4:	f7ff ffa0 	bl	8006828 <std>
 80068e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80068ec:	2202      	movs	r2, #2
 80068ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f2:	2112      	movs	r1, #18
 80068f4:	f7ff bf98 	b.w	8006828 <std>
 80068f8:	200007d8 	.word	0x200007d8
 80068fc:	200006a0 	.word	0x200006a0
 8006900:	08006871 	.word	0x08006871

08006904 <__sfp_lock_acquire>:
 8006904:	4801      	ldr	r0, [pc, #4]	; (800690c <__sfp_lock_acquire+0x8>)
 8006906:	f000 ba0f 	b.w	8006d28 <__retarget_lock_acquire_recursive>
 800690a:	bf00      	nop
 800690c:	200007e1 	.word	0x200007e1

08006910 <__sfp_lock_release>:
 8006910:	4801      	ldr	r0, [pc, #4]	; (8006918 <__sfp_lock_release+0x8>)
 8006912:	f000 ba0a 	b.w	8006d2a <__retarget_lock_release_recursive>
 8006916:	bf00      	nop
 8006918:	200007e1 	.word	0x200007e1

0800691c <__sinit>:
 800691c:	b510      	push	{r4, lr}
 800691e:	4604      	mov	r4, r0
 8006920:	f7ff fff0 	bl	8006904 <__sfp_lock_acquire>
 8006924:	6a23      	ldr	r3, [r4, #32]
 8006926:	b11b      	cbz	r3, 8006930 <__sinit+0x14>
 8006928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800692c:	f7ff bff0 	b.w	8006910 <__sfp_lock_release>
 8006930:	4b04      	ldr	r3, [pc, #16]	; (8006944 <__sinit+0x28>)
 8006932:	6223      	str	r3, [r4, #32]
 8006934:	4b04      	ldr	r3, [pc, #16]	; (8006948 <__sinit+0x2c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1f5      	bne.n	8006928 <__sinit+0xc>
 800693c:	f7ff ffc4 	bl	80068c8 <global_stdio_init.part.0>
 8006940:	e7f2      	b.n	8006928 <__sinit+0xc>
 8006942:	bf00      	nop
 8006944:	08006889 	.word	0x08006889
 8006948:	200007d8 	.word	0x200007d8

0800694c <_fwalk_sglue>:
 800694c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006950:	4607      	mov	r7, r0
 8006952:	4688      	mov	r8, r1
 8006954:	4614      	mov	r4, r2
 8006956:	2600      	movs	r6, #0
 8006958:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800695c:	f1b9 0901 	subs.w	r9, r9, #1
 8006960:	d505      	bpl.n	800696e <_fwalk_sglue+0x22>
 8006962:	6824      	ldr	r4, [r4, #0]
 8006964:	2c00      	cmp	r4, #0
 8006966:	d1f7      	bne.n	8006958 <_fwalk_sglue+0xc>
 8006968:	4630      	mov	r0, r6
 800696a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800696e:	89ab      	ldrh	r3, [r5, #12]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d907      	bls.n	8006984 <_fwalk_sglue+0x38>
 8006974:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006978:	3301      	adds	r3, #1
 800697a:	d003      	beq.n	8006984 <_fwalk_sglue+0x38>
 800697c:	4629      	mov	r1, r5
 800697e:	4638      	mov	r0, r7
 8006980:	47c0      	blx	r8
 8006982:	4306      	orrs	r6, r0
 8006984:	3568      	adds	r5, #104	; 0x68
 8006986:	e7e9      	b.n	800695c <_fwalk_sglue+0x10>

08006988 <iprintf>:
 8006988:	b40f      	push	{r0, r1, r2, r3}
 800698a:	b507      	push	{r0, r1, r2, lr}
 800698c:	4906      	ldr	r1, [pc, #24]	; (80069a8 <iprintf+0x20>)
 800698e:	ab04      	add	r3, sp, #16
 8006990:	6808      	ldr	r0, [r1, #0]
 8006992:	f853 2b04 	ldr.w	r2, [r3], #4
 8006996:	6881      	ldr	r1, [r0, #8]
 8006998:	9301      	str	r3, [sp, #4]
 800699a:	f001 fb0b 	bl	8007fb4 <_vfiprintf_r>
 800699e:	b003      	add	sp, #12
 80069a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069a4:	b004      	add	sp, #16
 80069a6:	4770      	bx	lr
 80069a8:	200001d0 	.word	0x200001d0

080069ac <_puts_r>:
 80069ac:	6a03      	ldr	r3, [r0, #32]
 80069ae:	b570      	push	{r4, r5, r6, lr}
 80069b0:	4605      	mov	r5, r0
 80069b2:	460e      	mov	r6, r1
 80069b4:	6884      	ldr	r4, [r0, #8]
 80069b6:	b90b      	cbnz	r3, 80069bc <_puts_r+0x10>
 80069b8:	f7ff ffb0 	bl	800691c <__sinit>
 80069bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069be:	07db      	lsls	r3, r3, #31
 80069c0:	d405      	bmi.n	80069ce <_puts_r+0x22>
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	0598      	lsls	r0, r3, #22
 80069c6:	d402      	bmi.n	80069ce <_puts_r+0x22>
 80069c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069ca:	f000 f9ad 	bl	8006d28 <__retarget_lock_acquire_recursive>
 80069ce:	89a3      	ldrh	r3, [r4, #12]
 80069d0:	0719      	lsls	r1, r3, #28
 80069d2:	d513      	bpl.n	80069fc <_puts_r+0x50>
 80069d4:	6923      	ldr	r3, [r4, #16]
 80069d6:	b18b      	cbz	r3, 80069fc <_puts_r+0x50>
 80069d8:	3e01      	subs	r6, #1
 80069da:	68a3      	ldr	r3, [r4, #8]
 80069dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80069e0:	3b01      	subs	r3, #1
 80069e2:	60a3      	str	r3, [r4, #8]
 80069e4:	b9e9      	cbnz	r1, 8006a22 <_puts_r+0x76>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da2e      	bge.n	8006a48 <_puts_r+0x9c>
 80069ea:	4622      	mov	r2, r4
 80069ec:	210a      	movs	r1, #10
 80069ee:	4628      	mov	r0, r5
 80069f0:	f000 f87b 	bl	8006aea <__swbuf_r>
 80069f4:	3001      	adds	r0, #1
 80069f6:	d007      	beq.n	8006a08 <_puts_r+0x5c>
 80069f8:	250a      	movs	r5, #10
 80069fa:	e007      	b.n	8006a0c <_puts_r+0x60>
 80069fc:	4621      	mov	r1, r4
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 f8b0 	bl	8006b64 <__swsetup_r>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d0e7      	beq.n	80069d8 <_puts_r+0x2c>
 8006a08:	f04f 35ff 	mov.w	r5, #4294967295
 8006a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a0e:	07da      	lsls	r2, r3, #31
 8006a10:	d405      	bmi.n	8006a1e <_puts_r+0x72>
 8006a12:	89a3      	ldrh	r3, [r4, #12]
 8006a14:	059b      	lsls	r3, r3, #22
 8006a16:	d402      	bmi.n	8006a1e <_puts_r+0x72>
 8006a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a1a:	f000 f986 	bl	8006d2a <__retarget_lock_release_recursive>
 8006a1e:	4628      	mov	r0, r5
 8006a20:	bd70      	pop	{r4, r5, r6, pc}
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	da04      	bge.n	8006a30 <_puts_r+0x84>
 8006a26:	69a2      	ldr	r2, [r4, #24]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	dc06      	bgt.n	8006a3a <_puts_r+0x8e>
 8006a2c:	290a      	cmp	r1, #10
 8006a2e:	d004      	beq.n	8006a3a <_puts_r+0x8e>
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	6022      	str	r2, [r4, #0]
 8006a36:	7019      	strb	r1, [r3, #0]
 8006a38:	e7cf      	b.n	80069da <_puts_r+0x2e>
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	f000 f854 	bl	8006aea <__swbuf_r>
 8006a42:	3001      	adds	r0, #1
 8006a44:	d1c9      	bne.n	80069da <_puts_r+0x2e>
 8006a46:	e7df      	b.n	8006a08 <_puts_r+0x5c>
 8006a48:	250a      	movs	r5, #10
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	6022      	str	r2, [r4, #0]
 8006a50:	701d      	strb	r5, [r3, #0]
 8006a52:	e7db      	b.n	8006a0c <_puts_r+0x60>

08006a54 <puts>:
 8006a54:	4b02      	ldr	r3, [pc, #8]	; (8006a60 <puts+0xc>)
 8006a56:	4601      	mov	r1, r0
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	f7ff bfa7 	b.w	80069ac <_puts_r>
 8006a5e:	bf00      	nop
 8006a60:	200001d0 	.word	0x200001d0

08006a64 <__sread>:
 8006a64:	b510      	push	{r4, lr}
 8006a66:	460c      	mov	r4, r1
 8006a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a6c:	f000 f90e 	bl	8006c8c <_read_r>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	bfab      	itete	ge
 8006a74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a76:	89a3      	ldrhlt	r3, [r4, #12]
 8006a78:	181b      	addge	r3, r3, r0
 8006a7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a7e:	bfac      	ite	ge
 8006a80:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a82:	81a3      	strhlt	r3, [r4, #12]
 8006a84:	bd10      	pop	{r4, pc}

08006a86 <__swrite>:
 8006a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a8a:	461f      	mov	r7, r3
 8006a8c:	898b      	ldrh	r3, [r1, #12]
 8006a8e:	4605      	mov	r5, r0
 8006a90:	05db      	lsls	r3, r3, #23
 8006a92:	460c      	mov	r4, r1
 8006a94:	4616      	mov	r6, r2
 8006a96:	d505      	bpl.n	8006aa4 <__swrite+0x1e>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa0:	f000 f8e2 	bl	8006c68 <_lseek_r>
 8006aa4:	89a3      	ldrh	r3, [r4, #12]
 8006aa6:	4632      	mov	r2, r6
 8006aa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006aac:	81a3      	strh	r3, [r4, #12]
 8006aae:	4628      	mov	r0, r5
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aba:	f000 b8f9 	b.w	8006cb0 <_write_r>

08006abe <__sseek>:
 8006abe:	b510      	push	{r4, lr}
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac6:	f000 f8cf 	bl	8006c68 <_lseek_r>
 8006aca:	1c43      	adds	r3, r0, #1
 8006acc:	89a3      	ldrh	r3, [r4, #12]
 8006ace:	bf15      	itete	ne
 8006ad0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ad2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ad6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ada:	81a3      	strheq	r3, [r4, #12]
 8006adc:	bf18      	it	ne
 8006ade:	81a3      	strhne	r3, [r4, #12]
 8006ae0:	bd10      	pop	{r4, pc}

08006ae2 <__sclose>:
 8006ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae6:	f000 b8af 	b.w	8006c48 <_close_r>

08006aea <__swbuf_r>:
 8006aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aec:	460e      	mov	r6, r1
 8006aee:	4614      	mov	r4, r2
 8006af0:	4605      	mov	r5, r0
 8006af2:	b118      	cbz	r0, 8006afc <__swbuf_r+0x12>
 8006af4:	6a03      	ldr	r3, [r0, #32]
 8006af6:	b90b      	cbnz	r3, 8006afc <__swbuf_r+0x12>
 8006af8:	f7ff ff10 	bl	800691c <__sinit>
 8006afc:	69a3      	ldr	r3, [r4, #24]
 8006afe:	60a3      	str	r3, [r4, #8]
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	071a      	lsls	r2, r3, #28
 8006b04:	d525      	bpl.n	8006b52 <__swbuf_r+0x68>
 8006b06:	6923      	ldr	r3, [r4, #16]
 8006b08:	b31b      	cbz	r3, 8006b52 <__swbuf_r+0x68>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	6922      	ldr	r2, [r4, #16]
 8006b0e:	b2f6      	uxtb	r6, r6
 8006b10:	1a98      	subs	r0, r3, r2
 8006b12:	6963      	ldr	r3, [r4, #20]
 8006b14:	4637      	mov	r7, r6
 8006b16:	4283      	cmp	r3, r0
 8006b18:	dc04      	bgt.n	8006b24 <__swbuf_r+0x3a>
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	f001 fd79 	bl	8008614 <_fflush_r>
 8006b22:	b9e0      	cbnz	r0, 8006b5e <__swbuf_r+0x74>
 8006b24:	68a3      	ldr	r3, [r4, #8]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	60a3      	str	r3, [r4, #8]
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	6022      	str	r2, [r4, #0]
 8006b30:	701e      	strb	r6, [r3, #0]
 8006b32:	6962      	ldr	r2, [r4, #20]
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d004      	beq.n	8006b44 <__swbuf_r+0x5a>
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	07db      	lsls	r3, r3, #31
 8006b3e:	d506      	bpl.n	8006b4e <__swbuf_r+0x64>
 8006b40:	2e0a      	cmp	r6, #10
 8006b42:	d104      	bne.n	8006b4e <__swbuf_r+0x64>
 8006b44:	4621      	mov	r1, r4
 8006b46:	4628      	mov	r0, r5
 8006b48:	f001 fd64 	bl	8008614 <_fflush_r>
 8006b4c:	b938      	cbnz	r0, 8006b5e <__swbuf_r+0x74>
 8006b4e:	4638      	mov	r0, r7
 8006b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b52:	4621      	mov	r1, r4
 8006b54:	4628      	mov	r0, r5
 8006b56:	f000 f805 	bl	8006b64 <__swsetup_r>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d0d5      	beq.n	8006b0a <__swbuf_r+0x20>
 8006b5e:	f04f 37ff 	mov.w	r7, #4294967295
 8006b62:	e7f4      	b.n	8006b4e <__swbuf_r+0x64>

08006b64 <__swsetup_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	4b2a      	ldr	r3, [pc, #168]	; (8006c10 <__swsetup_r+0xac>)
 8006b68:	4605      	mov	r5, r0
 8006b6a:	6818      	ldr	r0, [r3, #0]
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	b118      	cbz	r0, 8006b78 <__swsetup_r+0x14>
 8006b70:	6a03      	ldr	r3, [r0, #32]
 8006b72:	b90b      	cbnz	r3, 8006b78 <__swsetup_r+0x14>
 8006b74:	f7ff fed2 	bl	800691c <__sinit>
 8006b78:	89a3      	ldrh	r3, [r4, #12]
 8006b7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b7e:	0718      	lsls	r0, r3, #28
 8006b80:	d422      	bmi.n	8006bc8 <__swsetup_r+0x64>
 8006b82:	06d9      	lsls	r1, r3, #27
 8006b84:	d407      	bmi.n	8006b96 <__swsetup_r+0x32>
 8006b86:	2309      	movs	r3, #9
 8006b88:	602b      	str	r3, [r5, #0]
 8006b8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b92:	81a3      	strh	r3, [r4, #12]
 8006b94:	e034      	b.n	8006c00 <__swsetup_r+0x9c>
 8006b96:	0758      	lsls	r0, r3, #29
 8006b98:	d512      	bpl.n	8006bc0 <__swsetup_r+0x5c>
 8006b9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b9c:	b141      	cbz	r1, 8006bb0 <__swsetup_r+0x4c>
 8006b9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ba2:	4299      	cmp	r1, r3
 8006ba4:	d002      	beq.n	8006bac <__swsetup_r+0x48>
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f000 f8d4 	bl	8006d54 <_free_r>
 8006bac:	2300      	movs	r3, #0
 8006bae:	6363      	str	r3, [r4, #52]	; 0x34
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bb6:	81a3      	strh	r3, [r4, #12]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	6063      	str	r3, [r4, #4]
 8006bbc:	6923      	ldr	r3, [r4, #16]
 8006bbe:	6023      	str	r3, [r4, #0]
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	f043 0308 	orr.w	r3, r3, #8
 8006bc6:	81a3      	strh	r3, [r4, #12]
 8006bc8:	6923      	ldr	r3, [r4, #16]
 8006bca:	b94b      	cbnz	r3, 8006be0 <__swsetup_r+0x7c>
 8006bcc:	89a3      	ldrh	r3, [r4, #12]
 8006bce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd6:	d003      	beq.n	8006be0 <__swsetup_r+0x7c>
 8006bd8:	4621      	mov	r1, r4
 8006bda:	4628      	mov	r0, r5
 8006bdc:	f001 fd67 	bl	80086ae <__smakebuf_r>
 8006be0:	89a0      	ldrh	r0, [r4, #12]
 8006be2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006be6:	f010 0301 	ands.w	r3, r0, #1
 8006bea:	d00a      	beq.n	8006c02 <__swsetup_r+0x9e>
 8006bec:	2300      	movs	r3, #0
 8006bee:	60a3      	str	r3, [r4, #8]
 8006bf0:	6963      	ldr	r3, [r4, #20]
 8006bf2:	425b      	negs	r3, r3
 8006bf4:	61a3      	str	r3, [r4, #24]
 8006bf6:	6923      	ldr	r3, [r4, #16]
 8006bf8:	b943      	cbnz	r3, 8006c0c <__swsetup_r+0xa8>
 8006bfa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006bfe:	d1c4      	bne.n	8006b8a <__swsetup_r+0x26>
 8006c00:	bd38      	pop	{r3, r4, r5, pc}
 8006c02:	0781      	lsls	r1, r0, #30
 8006c04:	bf58      	it	pl
 8006c06:	6963      	ldrpl	r3, [r4, #20]
 8006c08:	60a3      	str	r3, [r4, #8]
 8006c0a:	e7f4      	b.n	8006bf6 <__swsetup_r+0x92>
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	e7f7      	b.n	8006c00 <__swsetup_r+0x9c>
 8006c10:	200001d0 	.word	0x200001d0

08006c14 <memset>:
 8006c14:	4603      	mov	r3, r0
 8006c16:	4402      	add	r2, r0
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d100      	bne.n	8006c1e <memset+0xa>
 8006c1c:	4770      	bx	lr
 8006c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c22:	e7f9      	b.n	8006c18 <memset+0x4>

08006c24 <strncmp>:
 8006c24:	b510      	push	{r4, lr}
 8006c26:	b16a      	cbz	r2, 8006c44 <strncmp+0x20>
 8006c28:	3901      	subs	r1, #1
 8006c2a:	1884      	adds	r4, r0, r2
 8006c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d103      	bne.n	8006c40 <strncmp+0x1c>
 8006c38:	42a0      	cmp	r0, r4
 8006c3a:	d001      	beq.n	8006c40 <strncmp+0x1c>
 8006c3c:	2a00      	cmp	r2, #0
 8006c3e:	d1f5      	bne.n	8006c2c <strncmp+0x8>
 8006c40:	1ad0      	subs	r0, r2, r3
 8006c42:	bd10      	pop	{r4, pc}
 8006c44:	4610      	mov	r0, r2
 8006c46:	e7fc      	b.n	8006c42 <strncmp+0x1e>

08006c48 <_close_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	4d05      	ldr	r5, [pc, #20]	; (8006c64 <_close_r+0x1c>)
 8006c4e:	4604      	mov	r4, r0
 8006c50:	4608      	mov	r0, r1
 8006c52:	602b      	str	r3, [r5, #0]
 8006c54:	f7fa ffa0 	bl	8001b98 <_close>
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	d102      	bne.n	8006c62 <_close_r+0x1a>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	b103      	cbz	r3, 8006c62 <_close_r+0x1a>
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
 8006c64:	200007dc 	.word	0x200007dc

08006c68 <_lseek_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	4611      	mov	r1, r2
 8006c70:	2200      	movs	r2, #0
 8006c72:	4d05      	ldr	r5, [pc, #20]	; (8006c88 <_lseek_r+0x20>)
 8006c74:	602a      	str	r2, [r5, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	f7fa ffb2 	bl	8001be0 <_lseek>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d102      	bne.n	8006c86 <_lseek_r+0x1e>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	b103      	cbz	r3, 8006c86 <_lseek_r+0x1e>
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	200007dc 	.word	0x200007dc

08006c8c <_read_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4604      	mov	r4, r0
 8006c90:	4608      	mov	r0, r1
 8006c92:	4611      	mov	r1, r2
 8006c94:	2200      	movs	r2, #0
 8006c96:	4d05      	ldr	r5, [pc, #20]	; (8006cac <_read_r+0x20>)
 8006c98:	602a      	str	r2, [r5, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f7fa ff43 	bl	8001b26 <_read>
 8006ca0:	1c43      	adds	r3, r0, #1
 8006ca2:	d102      	bne.n	8006caa <_read_r+0x1e>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	b103      	cbz	r3, 8006caa <_read_r+0x1e>
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	200007dc 	.word	0x200007dc

08006cb0 <_write_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	2200      	movs	r2, #0
 8006cba:	4d05      	ldr	r5, [pc, #20]	; (8006cd0 <_write_r+0x20>)
 8006cbc:	602a      	str	r2, [r5, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f7fa ff4e 	bl	8001b60 <_write>
 8006cc4:	1c43      	adds	r3, r0, #1
 8006cc6:	d102      	bne.n	8006cce <_write_r+0x1e>
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	b103      	cbz	r3, 8006cce <_write_r+0x1e>
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	bd38      	pop	{r3, r4, r5, pc}
 8006cd0:	200007dc 	.word	0x200007dc

08006cd4 <__errno>:
 8006cd4:	4b01      	ldr	r3, [pc, #4]	; (8006cdc <__errno+0x8>)
 8006cd6:	6818      	ldr	r0, [r3, #0]
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	200001d0 	.word	0x200001d0

08006ce0 <__libc_init_array>:
 8006ce0:	b570      	push	{r4, r5, r6, lr}
 8006ce2:	2600      	movs	r6, #0
 8006ce4:	4d0c      	ldr	r5, [pc, #48]	; (8006d18 <__libc_init_array+0x38>)
 8006ce6:	4c0d      	ldr	r4, [pc, #52]	; (8006d1c <__libc_init_array+0x3c>)
 8006ce8:	1b64      	subs	r4, r4, r5
 8006cea:	10a4      	asrs	r4, r4, #2
 8006cec:	42a6      	cmp	r6, r4
 8006cee:	d109      	bne.n	8006d04 <__libc_init_array+0x24>
 8006cf0:	f001 fdf2 	bl	80088d8 <_init>
 8006cf4:	2600      	movs	r6, #0
 8006cf6:	4d0a      	ldr	r5, [pc, #40]	; (8006d20 <__libc_init_array+0x40>)
 8006cf8:	4c0a      	ldr	r4, [pc, #40]	; (8006d24 <__libc_init_array+0x44>)
 8006cfa:	1b64      	subs	r4, r4, r5
 8006cfc:	10a4      	asrs	r4, r4, #2
 8006cfe:	42a6      	cmp	r6, r4
 8006d00:	d105      	bne.n	8006d0e <__libc_init_array+0x2e>
 8006d02:	bd70      	pop	{r4, r5, r6, pc}
 8006d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d08:	4798      	blx	r3
 8006d0a:	3601      	adds	r6, #1
 8006d0c:	e7ee      	b.n	8006cec <__libc_init_array+0xc>
 8006d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d12:	4798      	blx	r3
 8006d14:	3601      	adds	r6, #1
 8006d16:	e7f2      	b.n	8006cfe <__libc_init_array+0x1e>
 8006d18:	08008ce4 	.word	0x08008ce4
 8006d1c:	08008ce4 	.word	0x08008ce4
 8006d20:	08008ce4 	.word	0x08008ce4
 8006d24:	08008ce8 	.word	0x08008ce8

08006d28 <__retarget_lock_acquire_recursive>:
 8006d28:	4770      	bx	lr

08006d2a <__retarget_lock_release_recursive>:
 8006d2a:	4770      	bx	lr

08006d2c <memcpy>:
 8006d2c:	440a      	add	r2, r1
 8006d2e:	4291      	cmp	r1, r2
 8006d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d34:	d100      	bne.n	8006d38 <memcpy+0xc>
 8006d36:	4770      	bx	lr
 8006d38:	b510      	push	{r4, lr}
 8006d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d3e:	4291      	cmp	r1, r2
 8006d40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d44:	d1f9      	bne.n	8006d3a <memcpy+0xe>
 8006d46:	bd10      	pop	{r4, pc}

08006d48 <nan>:
 8006d48:	2000      	movs	r0, #0
 8006d4a:	4901      	ldr	r1, [pc, #4]	; (8006d50 <nan+0x8>)
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	7ff80000 	.word	0x7ff80000

08006d54 <_free_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4605      	mov	r5, r0
 8006d58:	2900      	cmp	r1, #0
 8006d5a:	d040      	beq.n	8006dde <_free_r+0x8a>
 8006d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d60:	1f0c      	subs	r4, r1, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	bfb8      	it	lt
 8006d66:	18e4      	addlt	r4, r4, r3
 8006d68:	f000 fc48 	bl	80075fc <__malloc_lock>
 8006d6c:	4a1c      	ldr	r2, [pc, #112]	; (8006de0 <_free_r+0x8c>)
 8006d6e:	6813      	ldr	r3, [r2, #0]
 8006d70:	b933      	cbnz	r3, 8006d80 <_free_r+0x2c>
 8006d72:	6063      	str	r3, [r4, #4]
 8006d74:	6014      	str	r4, [r2, #0]
 8006d76:	4628      	mov	r0, r5
 8006d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d7c:	f000 bc44 	b.w	8007608 <__malloc_unlock>
 8006d80:	42a3      	cmp	r3, r4
 8006d82:	d908      	bls.n	8006d96 <_free_r+0x42>
 8006d84:	6820      	ldr	r0, [r4, #0]
 8006d86:	1821      	adds	r1, r4, r0
 8006d88:	428b      	cmp	r3, r1
 8006d8a:	bf01      	itttt	eq
 8006d8c:	6819      	ldreq	r1, [r3, #0]
 8006d8e:	685b      	ldreq	r3, [r3, #4]
 8006d90:	1809      	addeq	r1, r1, r0
 8006d92:	6021      	streq	r1, [r4, #0]
 8006d94:	e7ed      	b.n	8006d72 <_free_r+0x1e>
 8006d96:	461a      	mov	r2, r3
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	b10b      	cbz	r3, 8006da0 <_free_r+0x4c>
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	d9fa      	bls.n	8006d96 <_free_r+0x42>
 8006da0:	6811      	ldr	r1, [r2, #0]
 8006da2:	1850      	adds	r0, r2, r1
 8006da4:	42a0      	cmp	r0, r4
 8006da6:	d10b      	bne.n	8006dc0 <_free_r+0x6c>
 8006da8:	6820      	ldr	r0, [r4, #0]
 8006daa:	4401      	add	r1, r0
 8006dac:	1850      	adds	r0, r2, r1
 8006dae:	4283      	cmp	r3, r0
 8006db0:	6011      	str	r1, [r2, #0]
 8006db2:	d1e0      	bne.n	8006d76 <_free_r+0x22>
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	4408      	add	r0, r1
 8006dba:	6010      	str	r0, [r2, #0]
 8006dbc:	6053      	str	r3, [r2, #4]
 8006dbe:	e7da      	b.n	8006d76 <_free_r+0x22>
 8006dc0:	d902      	bls.n	8006dc8 <_free_r+0x74>
 8006dc2:	230c      	movs	r3, #12
 8006dc4:	602b      	str	r3, [r5, #0]
 8006dc6:	e7d6      	b.n	8006d76 <_free_r+0x22>
 8006dc8:	6820      	ldr	r0, [r4, #0]
 8006dca:	1821      	adds	r1, r4, r0
 8006dcc:	428b      	cmp	r3, r1
 8006dce:	bf01      	itttt	eq
 8006dd0:	6819      	ldreq	r1, [r3, #0]
 8006dd2:	685b      	ldreq	r3, [r3, #4]
 8006dd4:	1809      	addeq	r1, r1, r0
 8006dd6:	6021      	streq	r1, [r4, #0]
 8006dd8:	6063      	str	r3, [r4, #4]
 8006dda:	6054      	str	r4, [r2, #4]
 8006ddc:	e7cb      	b.n	8006d76 <_free_r+0x22>
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	200007e4 	.word	0x200007e4

08006de4 <rshift>:
 8006de4:	6903      	ldr	r3, [r0, #16]
 8006de6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006dee:	f100 0414 	add.w	r4, r0, #20
 8006df2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006df6:	dd46      	ble.n	8006e86 <rshift+0xa2>
 8006df8:	f011 011f 	ands.w	r1, r1, #31
 8006dfc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006e00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006e04:	d10c      	bne.n	8006e20 <rshift+0x3c>
 8006e06:	4629      	mov	r1, r5
 8006e08:	f100 0710 	add.w	r7, r0, #16
 8006e0c:	42b1      	cmp	r1, r6
 8006e0e:	d335      	bcc.n	8006e7c <rshift+0x98>
 8006e10:	1a9b      	subs	r3, r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	1eea      	subs	r2, r5, #3
 8006e16:	4296      	cmp	r6, r2
 8006e18:	bf38      	it	cc
 8006e1a:	2300      	movcc	r3, #0
 8006e1c:	4423      	add	r3, r4
 8006e1e:	e015      	b.n	8006e4c <rshift+0x68>
 8006e20:	46a1      	mov	r9, r4
 8006e22:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006e26:	f1c1 0820 	rsb	r8, r1, #32
 8006e2a:	40cf      	lsrs	r7, r1
 8006e2c:	f105 0e04 	add.w	lr, r5, #4
 8006e30:	4576      	cmp	r6, lr
 8006e32:	46f4      	mov	ip, lr
 8006e34:	d816      	bhi.n	8006e64 <rshift+0x80>
 8006e36:	1a9a      	subs	r2, r3, r2
 8006e38:	0092      	lsls	r2, r2, #2
 8006e3a:	3a04      	subs	r2, #4
 8006e3c:	3501      	adds	r5, #1
 8006e3e:	42ae      	cmp	r6, r5
 8006e40:	bf38      	it	cc
 8006e42:	2200      	movcc	r2, #0
 8006e44:	18a3      	adds	r3, r4, r2
 8006e46:	50a7      	str	r7, [r4, r2]
 8006e48:	b107      	cbz	r7, 8006e4c <rshift+0x68>
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	42a3      	cmp	r3, r4
 8006e4e:	eba3 0204 	sub.w	r2, r3, r4
 8006e52:	bf08      	it	eq
 8006e54:	2300      	moveq	r3, #0
 8006e56:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006e5a:	6102      	str	r2, [r0, #16]
 8006e5c:	bf08      	it	eq
 8006e5e:	6143      	streq	r3, [r0, #20]
 8006e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e64:	f8dc c000 	ldr.w	ip, [ip]
 8006e68:	fa0c fc08 	lsl.w	ip, ip, r8
 8006e6c:	ea4c 0707 	orr.w	r7, ip, r7
 8006e70:	f849 7b04 	str.w	r7, [r9], #4
 8006e74:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e78:	40cf      	lsrs	r7, r1
 8006e7a:	e7d9      	b.n	8006e30 <rshift+0x4c>
 8006e7c:	f851 cb04 	ldr.w	ip, [r1], #4
 8006e80:	f847 cf04 	str.w	ip, [r7, #4]!
 8006e84:	e7c2      	b.n	8006e0c <rshift+0x28>
 8006e86:	4623      	mov	r3, r4
 8006e88:	e7e0      	b.n	8006e4c <rshift+0x68>

08006e8a <__hexdig_fun>:
 8006e8a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006e8e:	2b09      	cmp	r3, #9
 8006e90:	d802      	bhi.n	8006e98 <__hexdig_fun+0xe>
 8006e92:	3820      	subs	r0, #32
 8006e94:	b2c0      	uxtb	r0, r0
 8006e96:	4770      	bx	lr
 8006e98:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006e9c:	2b05      	cmp	r3, #5
 8006e9e:	d801      	bhi.n	8006ea4 <__hexdig_fun+0x1a>
 8006ea0:	3847      	subs	r0, #71	; 0x47
 8006ea2:	e7f7      	b.n	8006e94 <__hexdig_fun+0xa>
 8006ea4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006ea8:	2b05      	cmp	r3, #5
 8006eaa:	d801      	bhi.n	8006eb0 <__hexdig_fun+0x26>
 8006eac:	3827      	subs	r0, #39	; 0x27
 8006eae:	e7f1      	b.n	8006e94 <__hexdig_fun+0xa>
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	4770      	bx	lr

08006eb4 <__gethex>:
 8006eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb8:	4681      	mov	r9, r0
 8006eba:	468a      	mov	sl, r1
 8006ebc:	4617      	mov	r7, r2
 8006ebe:	680a      	ldr	r2, [r1, #0]
 8006ec0:	b085      	sub	sp, #20
 8006ec2:	f102 0b02 	add.w	fp, r2, #2
 8006ec6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006eca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006ece:	9302      	str	r3, [sp, #8]
 8006ed0:	32fe      	adds	r2, #254	; 0xfe
 8006ed2:	eb02 030b 	add.w	r3, r2, fp
 8006ed6:	46d8      	mov	r8, fp
 8006ed8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	2830      	cmp	r0, #48	; 0x30
 8006ee0:	d0f7      	beq.n	8006ed2 <__gethex+0x1e>
 8006ee2:	f7ff ffd2 	bl	8006e8a <__hexdig_fun>
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d138      	bne.n	8006f5e <__gethex+0xaa>
 8006eec:	2201      	movs	r2, #1
 8006eee:	4640      	mov	r0, r8
 8006ef0:	49a7      	ldr	r1, [pc, #668]	; (8007190 <__gethex+0x2dc>)
 8006ef2:	f7ff fe97 	bl	8006c24 <strncmp>
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	d169      	bne.n	8006fd0 <__gethex+0x11c>
 8006efc:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006f00:	465d      	mov	r5, fp
 8006f02:	f7ff ffc2 	bl	8006e8a <__hexdig_fun>
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d064      	beq.n	8006fd4 <__gethex+0x120>
 8006f0a:	465a      	mov	r2, fp
 8006f0c:	7810      	ldrb	r0, [r2, #0]
 8006f0e:	4690      	mov	r8, r2
 8006f10:	2830      	cmp	r0, #48	; 0x30
 8006f12:	f102 0201 	add.w	r2, r2, #1
 8006f16:	d0f9      	beq.n	8006f0c <__gethex+0x58>
 8006f18:	f7ff ffb7 	bl	8006e8a <__hexdig_fun>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	fab0 f480 	clz	r4, r0
 8006f22:	465e      	mov	r6, fp
 8006f24:	0964      	lsrs	r4, r4, #5
 8006f26:	9301      	str	r3, [sp, #4]
 8006f28:	4642      	mov	r2, r8
 8006f2a:	4615      	mov	r5, r2
 8006f2c:	7828      	ldrb	r0, [r5, #0]
 8006f2e:	3201      	adds	r2, #1
 8006f30:	f7ff ffab 	bl	8006e8a <__hexdig_fun>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d1f8      	bne.n	8006f2a <__gethex+0x76>
 8006f38:	2201      	movs	r2, #1
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	4994      	ldr	r1, [pc, #592]	; (8007190 <__gethex+0x2dc>)
 8006f3e:	f7ff fe71 	bl	8006c24 <strncmp>
 8006f42:	b978      	cbnz	r0, 8006f64 <__gethex+0xb0>
 8006f44:	b946      	cbnz	r6, 8006f58 <__gethex+0xa4>
 8006f46:	1c6e      	adds	r6, r5, #1
 8006f48:	4632      	mov	r2, r6
 8006f4a:	4615      	mov	r5, r2
 8006f4c:	7828      	ldrb	r0, [r5, #0]
 8006f4e:	3201      	adds	r2, #1
 8006f50:	f7ff ff9b 	bl	8006e8a <__hexdig_fun>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d1f8      	bne.n	8006f4a <__gethex+0x96>
 8006f58:	1b73      	subs	r3, r6, r5
 8006f5a:	009e      	lsls	r6, r3, #2
 8006f5c:	e004      	b.n	8006f68 <__gethex+0xb4>
 8006f5e:	2400      	movs	r4, #0
 8006f60:	4626      	mov	r6, r4
 8006f62:	e7e1      	b.n	8006f28 <__gethex+0x74>
 8006f64:	2e00      	cmp	r6, #0
 8006f66:	d1f7      	bne.n	8006f58 <__gethex+0xa4>
 8006f68:	782b      	ldrb	r3, [r5, #0]
 8006f6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006f6e:	2b50      	cmp	r3, #80	; 0x50
 8006f70:	d13d      	bne.n	8006fee <__gethex+0x13a>
 8006f72:	786b      	ldrb	r3, [r5, #1]
 8006f74:	2b2b      	cmp	r3, #43	; 0x2b
 8006f76:	d02f      	beq.n	8006fd8 <__gethex+0x124>
 8006f78:	2b2d      	cmp	r3, #45	; 0x2d
 8006f7a:	d031      	beq.n	8006fe0 <__gethex+0x12c>
 8006f7c:	f04f 0b00 	mov.w	fp, #0
 8006f80:	1c69      	adds	r1, r5, #1
 8006f82:	7808      	ldrb	r0, [r1, #0]
 8006f84:	f7ff ff81 	bl	8006e8a <__hexdig_fun>
 8006f88:	1e42      	subs	r2, r0, #1
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	2a18      	cmp	r2, #24
 8006f8e:	d82e      	bhi.n	8006fee <__gethex+0x13a>
 8006f90:	f1a0 0210 	sub.w	r2, r0, #16
 8006f94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006f98:	f7ff ff77 	bl	8006e8a <__hexdig_fun>
 8006f9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8006fa0:	fa5f fc8c 	uxtb.w	ip, ip
 8006fa4:	f1bc 0f18 	cmp.w	ip, #24
 8006fa8:	d91d      	bls.n	8006fe6 <__gethex+0x132>
 8006faa:	f1bb 0f00 	cmp.w	fp, #0
 8006fae:	d000      	beq.n	8006fb2 <__gethex+0xfe>
 8006fb0:	4252      	negs	r2, r2
 8006fb2:	4416      	add	r6, r2
 8006fb4:	f8ca 1000 	str.w	r1, [sl]
 8006fb8:	b1dc      	cbz	r4, 8006ff2 <__gethex+0x13e>
 8006fba:	9b01      	ldr	r3, [sp, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	bf14      	ite	ne
 8006fc0:	f04f 0800 	movne.w	r8, #0
 8006fc4:	f04f 0806 	moveq.w	r8, #6
 8006fc8:	4640      	mov	r0, r8
 8006fca:	b005      	add	sp, #20
 8006fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd0:	4645      	mov	r5, r8
 8006fd2:	4626      	mov	r6, r4
 8006fd4:	2401      	movs	r4, #1
 8006fd6:	e7c7      	b.n	8006f68 <__gethex+0xb4>
 8006fd8:	f04f 0b00 	mov.w	fp, #0
 8006fdc:	1ca9      	adds	r1, r5, #2
 8006fde:	e7d0      	b.n	8006f82 <__gethex+0xce>
 8006fe0:	f04f 0b01 	mov.w	fp, #1
 8006fe4:	e7fa      	b.n	8006fdc <__gethex+0x128>
 8006fe6:	230a      	movs	r3, #10
 8006fe8:	fb03 0002 	mla	r0, r3, r2, r0
 8006fec:	e7d0      	b.n	8006f90 <__gethex+0xdc>
 8006fee:	4629      	mov	r1, r5
 8006ff0:	e7e0      	b.n	8006fb4 <__gethex+0x100>
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	eba5 0308 	sub.w	r3, r5, r8
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	2b07      	cmp	r3, #7
 8006ffc:	dc0a      	bgt.n	8007014 <__gethex+0x160>
 8006ffe:	4648      	mov	r0, r9
 8007000:	f000 fb08 	bl	8007614 <_Balloc>
 8007004:	4604      	mov	r4, r0
 8007006:	b940      	cbnz	r0, 800701a <__gethex+0x166>
 8007008:	4602      	mov	r2, r0
 800700a:	21e4      	movs	r1, #228	; 0xe4
 800700c:	4b61      	ldr	r3, [pc, #388]	; (8007194 <__gethex+0x2e0>)
 800700e:	4862      	ldr	r0, [pc, #392]	; (8007198 <__gethex+0x2e4>)
 8007010:	f001 fbca 	bl	80087a8 <__assert_func>
 8007014:	3101      	adds	r1, #1
 8007016:	105b      	asrs	r3, r3, #1
 8007018:	e7ef      	b.n	8006ffa <__gethex+0x146>
 800701a:	2300      	movs	r3, #0
 800701c:	469b      	mov	fp, r3
 800701e:	f100 0a14 	add.w	sl, r0, #20
 8007022:	f8cd a004 	str.w	sl, [sp, #4]
 8007026:	45a8      	cmp	r8, r5
 8007028:	d344      	bcc.n	80070b4 <__gethex+0x200>
 800702a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800702e:	4658      	mov	r0, fp
 8007030:	f848 bb04 	str.w	fp, [r8], #4
 8007034:	eba8 080a 	sub.w	r8, r8, sl
 8007038:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800703c:	6122      	str	r2, [r4, #16]
 800703e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8007042:	f000 fbd9 	bl	80077f8 <__hi0bits>
 8007046:	683d      	ldr	r5, [r7, #0]
 8007048:	eba8 0800 	sub.w	r8, r8, r0
 800704c:	45a8      	cmp	r8, r5
 800704e:	dd59      	ble.n	8007104 <__gethex+0x250>
 8007050:	eba8 0805 	sub.w	r8, r8, r5
 8007054:	4641      	mov	r1, r8
 8007056:	4620      	mov	r0, r4
 8007058:	f000 ff57 	bl	8007f0a <__any_on>
 800705c:	4683      	mov	fp, r0
 800705e:	b1b8      	cbz	r0, 8007090 <__gethex+0x1dc>
 8007060:	f04f 0b01 	mov.w	fp, #1
 8007064:	f108 33ff 	add.w	r3, r8, #4294967295
 8007068:	1159      	asrs	r1, r3, #5
 800706a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800706e:	f003 021f 	and.w	r2, r3, #31
 8007072:	fa0b f202 	lsl.w	r2, fp, r2
 8007076:	420a      	tst	r2, r1
 8007078:	d00a      	beq.n	8007090 <__gethex+0x1dc>
 800707a:	455b      	cmp	r3, fp
 800707c:	dd06      	ble.n	800708c <__gethex+0x1d8>
 800707e:	4620      	mov	r0, r4
 8007080:	f1a8 0102 	sub.w	r1, r8, #2
 8007084:	f000 ff41 	bl	8007f0a <__any_on>
 8007088:	2800      	cmp	r0, #0
 800708a:	d138      	bne.n	80070fe <__gethex+0x24a>
 800708c:	f04f 0b02 	mov.w	fp, #2
 8007090:	4641      	mov	r1, r8
 8007092:	4620      	mov	r0, r4
 8007094:	f7ff fea6 	bl	8006de4 <rshift>
 8007098:	4446      	add	r6, r8
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	42b3      	cmp	r3, r6
 800709e:	da41      	bge.n	8007124 <__gethex+0x270>
 80070a0:	4621      	mov	r1, r4
 80070a2:	4648      	mov	r0, r9
 80070a4:	f000 faf6 	bl	8007694 <_Bfree>
 80070a8:	2300      	movs	r3, #0
 80070aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070ac:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	e789      	b.n	8006fc8 <__gethex+0x114>
 80070b4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80070b8:	2a2e      	cmp	r2, #46	; 0x2e
 80070ba:	d014      	beq.n	80070e6 <__gethex+0x232>
 80070bc:	2b20      	cmp	r3, #32
 80070be:	d106      	bne.n	80070ce <__gethex+0x21a>
 80070c0:	9b01      	ldr	r3, [sp, #4]
 80070c2:	f843 bb04 	str.w	fp, [r3], #4
 80070c6:	f04f 0b00 	mov.w	fp, #0
 80070ca:	9301      	str	r3, [sp, #4]
 80070cc:	465b      	mov	r3, fp
 80070ce:	7828      	ldrb	r0, [r5, #0]
 80070d0:	9303      	str	r3, [sp, #12]
 80070d2:	f7ff feda 	bl	8006e8a <__hexdig_fun>
 80070d6:	9b03      	ldr	r3, [sp, #12]
 80070d8:	f000 000f 	and.w	r0, r0, #15
 80070dc:	4098      	lsls	r0, r3
 80070de:	ea4b 0b00 	orr.w	fp, fp, r0
 80070e2:	3304      	adds	r3, #4
 80070e4:	e79f      	b.n	8007026 <__gethex+0x172>
 80070e6:	45a8      	cmp	r8, r5
 80070e8:	d8e8      	bhi.n	80070bc <__gethex+0x208>
 80070ea:	2201      	movs	r2, #1
 80070ec:	4628      	mov	r0, r5
 80070ee:	4928      	ldr	r1, [pc, #160]	; (8007190 <__gethex+0x2dc>)
 80070f0:	9303      	str	r3, [sp, #12]
 80070f2:	f7ff fd97 	bl	8006c24 <strncmp>
 80070f6:	9b03      	ldr	r3, [sp, #12]
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d1df      	bne.n	80070bc <__gethex+0x208>
 80070fc:	e793      	b.n	8007026 <__gethex+0x172>
 80070fe:	f04f 0b03 	mov.w	fp, #3
 8007102:	e7c5      	b.n	8007090 <__gethex+0x1dc>
 8007104:	da0b      	bge.n	800711e <__gethex+0x26a>
 8007106:	eba5 0808 	sub.w	r8, r5, r8
 800710a:	4621      	mov	r1, r4
 800710c:	4642      	mov	r2, r8
 800710e:	4648      	mov	r0, r9
 8007110:	f000 fcd8 	bl	8007ac4 <__lshift>
 8007114:	4604      	mov	r4, r0
 8007116:	eba6 0608 	sub.w	r6, r6, r8
 800711a:	f100 0a14 	add.w	sl, r0, #20
 800711e:	f04f 0b00 	mov.w	fp, #0
 8007122:	e7ba      	b.n	800709a <__gethex+0x1e6>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	42b3      	cmp	r3, r6
 8007128:	dd74      	ble.n	8007214 <__gethex+0x360>
 800712a:	1b9e      	subs	r6, r3, r6
 800712c:	42b5      	cmp	r5, r6
 800712e:	dc35      	bgt.n	800719c <__gethex+0x2e8>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b02      	cmp	r3, #2
 8007134:	d023      	beq.n	800717e <__gethex+0x2ca>
 8007136:	2b03      	cmp	r3, #3
 8007138:	d025      	beq.n	8007186 <__gethex+0x2d2>
 800713a:	2b01      	cmp	r3, #1
 800713c:	d115      	bne.n	800716a <__gethex+0x2b6>
 800713e:	42b5      	cmp	r5, r6
 8007140:	d113      	bne.n	800716a <__gethex+0x2b6>
 8007142:	2d01      	cmp	r5, #1
 8007144:	d10b      	bne.n	800715e <__gethex+0x2aa>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	9a02      	ldr	r2, [sp, #8]
 800714a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	2301      	movs	r3, #1
 8007152:	6123      	str	r3, [r4, #16]
 8007154:	f8ca 3000 	str.w	r3, [sl]
 8007158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800715a:	601c      	str	r4, [r3, #0]
 800715c:	e734      	b.n	8006fc8 <__gethex+0x114>
 800715e:	4620      	mov	r0, r4
 8007160:	1e69      	subs	r1, r5, #1
 8007162:	f000 fed2 	bl	8007f0a <__any_on>
 8007166:	2800      	cmp	r0, #0
 8007168:	d1ed      	bne.n	8007146 <__gethex+0x292>
 800716a:	4621      	mov	r1, r4
 800716c:	4648      	mov	r0, r9
 800716e:	f000 fa91 	bl	8007694 <_Bfree>
 8007172:	2300      	movs	r3, #0
 8007174:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007176:	f04f 0850 	mov.w	r8, #80	; 0x50
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	e724      	b.n	8006fc8 <__gethex+0x114>
 800717e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1f2      	bne.n	800716a <__gethex+0x2b6>
 8007184:	e7df      	b.n	8007146 <__gethex+0x292>
 8007186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1dc      	bne.n	8007146 <__gethex+0x292>
 800718c:	e7ed      	b.n	800716a <__gethex+0x2b6>
 800718e:	bf00      	nop
 8007190:	08008926 	.word	0x08008926
 8007194:	08008990 	.word	0x08008990
 8007198:	080089a1 	.word	0x080089a1
 800719c:	f106 38ff 	add.w	r8, r6, #4294967295
 80071a0:	f1bb 0f00 	cmp.w	fp, #0
 80071a4:	d133      	bne.n	800720e <__gethex+0x35a>
 80071a6:	f1b8 0f00 	cmp.w	r8, #0
 80071aa:	d004      	beq.n	80071b6 <__gethex+0x302>
 80071ac:	4641      	mov	r1, r8
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 feab 	bl	8007f0a <__any_on>
 80071b4:	4683      	mov	fp, r0
 80071b6:	2301      	movs	r3, #1
 80071b8:	ea4f 1268 	mov.w	r2, r8, asr #5
 80071bc:	f008 081f 	and.w	r8, r8, #31
 80071c0:	fa03 f308 	lsl.w	r3, r3, r8
 80071c4:	f04f 0802 	mov.w	r8, #2
 80071c8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80071cc:	4631      	mov	r1, r6
 80071ce:	4213      	tst	r3, r2
 80071d0:	4620      	mov	r0, r4
 80071d2:	bf18      	it	ne
 80071d4:	f04b 0b02 	orrne.w	fp, fp, #2
 80071d8:	1bad      	subs	r5, r5, r6
 80071da:	f7ff fe03 	bl	8006de4 <rshift>
 80071de:	687e      	ldr	r6, [r7, #4]
 80071e0:	f1bb 0f00 	cmp.w	fp, #0
 80071e4:	d04a      	beq.n	800727c <__gethex+0x3c8>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d016      	beq.n	800721a <__gethex+0x366>
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	d018      	beq.n	8007222 <__gethex+0x36e>
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d109      	bne.n	8007208 <__gethex+0x354>
 80071f4:	f01b 0f02 	tst.w	fp, #2
 80071f8:	d006      	beq.n	8007208 <__gethex+0x354>
 80071fa:	f8da 3000 	ldr.w	r3, [sl]
 80071fe:	ea4b 0b03 	orr.w	fp, fp, r3
 8007202:	f01b 0f01 	tst.w	fp, #1
 8007206:	d10f      	bne.n	8007228 <__gethex+0x374>
 8007208:	f048 0810 	orr.w	r8, r8, #16
 800720c:	e036      	b.n	800727c <__gethex+0x3c8>
 800720e:	f04f 0b01 	mov.w	fp, #1
 8007212:	e7d0      	b.n	80071b6 <__gethex+0x302>
 8007214:	f04f 0801 	mov.w	r8, #1
 8007218:	e7e2      	b.n	80071e0 <__gethex+0x32c>
 800721a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800721c:	f1c3 0301 	rsb	r3, r3, #1
 8007220:	930f      	str	r3, [sp, #60]	; 0x3c
 8007222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0ef      	beq.n	8007208 <__gethex+0x354>
 8007228:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800722c:	f104 0214 	add.w	r2, r4, #20
 8007230:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	2300      	movs	r3, #0
 8007238:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800723c:	4694      	mov	ip, r2
 800723e:	f852 1b04 	ldr.w	r1, [r2], #4
 8007242:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007246:	d01e      	beq.n	8007286 <__gethex+0x3d2>
 8007248:	3101      	adds	r1, #1
 800724a:	f8cc 1000 	str.w	r1, [ip]
 800724e:	f1b8 0f02 	cmp.w	r8, #2
 8007252:	f104 0214 	add.w	r2, r4, #20
 8007256:	d13d      	bne.n	80072d4 <__gethex+0x420>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	3b01      	subs	r3, #1
 800725c:	42ab      	cmp	r3, r5
 800725e:	d10b      	bne.n	8007278 <__gethex+0x3c4>
 8007260:	2301      	movs	r3, #1
 8007262:	1169      	asrs	r1, r5, #5
 8007264:	f005 051f 	and.w	r5, r5, #31
 8007268:	fa03 f505 	lsl.w	r5, r3, r5
 800726c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007270:	421d      	tst	r5, r3
 8007272:	bf18      	it	ne
 8007274:	f04f 0801 	movne.w	r8, #1
 8007278:	f048 0820 	orr.w	r8, r8, #32
 800727c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800727e:	601c      	str	r4, [r3, #0]
 8007280:	9b02      	ldr	r3, [sp, #8]
 8007282:	601e      	str	r6, [r3, #0]
 8007284:	e6a0      	b.n	8006fc8 <__gethex+0x114>
 8007286:	4290      	cmp	r0, r2
 8007288:	f842 3c04 	str.w	r3, [r2, #-4]
 800728c:	d8d6      	bhi.n	800723c <__gethex+0x388>
 800728e:	68a2      	ldr	r2, [r4, #8]
 8007290:	4593      	cmp	fp, r2
 8007292:	db17      	blt.n	80072c4 <__gethex+0x410>
 8007294:	6861      	ldr	r1, [r4, #4]
 8007296:	4648      	mov	r0, r9
 8007298:	3101      	adds	r1, #1
 800729a:	f000 f9bb 	bl	8007614 <_Balloc>
 800729e:	4682      	mov	sl, r0
 80072a0:	b918      	cbnz	r0, 80072aa <__gethex+0x3f6>
 80072a2:	4602      	mov	r2, r0
 80072a4:	2184      	movs	r1, #132	; 0x84
 80072a6:	4b1a      	ldr	r3, [pc, #104]	; (8007310 <__gethex+0x45c>)
 80072a8:	e6b1      	b.n	800700e <__gethex+0x15a>
 80072aa:	6922      	ldr	r2, [r4, #16]
 80072ac:	f104 010c 	add.w	r1, r4, #12
 80072b0:	3202      	adds	r2, #2
 80072b2:	0092      	lsls	r2, r2, #2
 80072b4:	300c      	adds	r0, #12
 80072b6:	f7ff fd39 	bl	8006d2c <memcpy>
 80072ba:	4621      	mov	r1, r4
 80072bc:	4648      	mov	r0, r9
 80072be:	f000 f9e9 	bl	8007694 <_Bfree>
 80072c2:	4654      	mov	r4, sl
 80072c4:	6922      	ldr	r2, [r4, #16]
 80072c6:	1c51      	adds	r1, r2, #1
 80072c8:	6121      	str	r1, [r4, #16]
 80072ca:	2101      	movs	r1, #1
 80072cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80072d0:	6151      	str	r1, [r2, #20]
 80072d2:	e7bc      	b.n	800724e <__gethex+0x39a>
 80072d4:	6921      	ldr	r1, [r4, #16]
 80072d6:	4559      	cmp	r1, fp
 80072d8:	dd0b      	ble.n	80072f2 <__gethex+0x43e>
 80072da:	2101      	movs	r1, #1
 80072dc:	4620      	mov	r0, r4
 80072de:	f7ff fd81 	bl	8006de4 <rshift>
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	3601      	adds	r6, #1
 80072e6:	42b3      	cmp	r3, r6
 80072e8:	f6ff aeda 	blt.w	80070a0 <__gethex+0x1ec>
 80072ec:	f04f 0801 	mov.w	r8, #1
 80072f0:	e7c2      	b.n	8007278 <__gethex+0x3c4>
 80072f2:	f015 051f 	ands.w	r5, r5, #31
 80072f6:	d0f9      	beq.n	80072ec <__gethex+0x438>
 80072f8:	9b01      	ldr	r3, [sp, #4]
 80072fa:	f1c5 0520 	rsb	r5, r5, #32
 80072fe:	441a      	add	r2, r3
 8007300:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007304:	f000 fa78 	bl	80077f8 <__hi0bits>
 8007308:	42a8      	cmp	r0, r5
 800730a:	dbe6      	blt.n	80072da <__gethex+0x426>
 800730c:	e7ee      	b.n	80072ec <__gethex+0x438>
 800730e:	bf00      	nop
 8007310:	08008990 	.word	0x08008990

08007314 <L_shift>:
 8007314:	f1c2 0208 	rsb	r2, r2, #8
 8007318:	0092      	lsls	r2, r2, #2
 800731a:	b570      	push	{r4, r5, r6, lr}
 800731c:	f1c2 0620 	rsb	r6, r2, #32
 8007320:	6843      	ldr	r3, [r0, #4]
 8007322:	6804      	ldr	r4, [r0, #0]
 8007324:	fa03 f506 	lsl.w	r5, r3, r6
 8007328:	432c      	orrs	r4, r5
 800732a:	40d3      	lsrs	r3, r2
 800732c:	6004      	str	r4, [r0, #0]
 800732e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007332:	4288      	cmp	r0, r1
 8007334:	d3f4      	bcc.n	8007320 <L_shift+0xc>
 8007336:	bd70      	pop	{r4, r5, r6, pc}

08007338 <__match>:
 8007338:	b530      	push	{r4, r5, lr}
 800733a:	6803      	ldr	r3, [r0, #0]
 800733c:	3301      	adds	r3, #1
 800733e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007342:	b914      	cbnz	r4, 800734a <__match+0x12>
 8007344:	6003      	str	r3, [r0, #0]
 8007346:	2001      	movs	r0, #1
 8007348:	bd30      	pop	{r4, r5, pc}
 800734a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800734e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007352:	2d19      	cmp	r5, #25
 8007354:	bf98      	it	ls
 8007356:	3220      	addls	r2, #32
 8007358:	42a2      	cmp	r2, r4
 800735a:	d0f0      	beq.n	800733e <__match+0x6>
 800735c:	2000      	movs	r0, #0
 800735e:	e7f3      	b.n	8007348 <__match+0x10>

08007360 <__hexnan>:
 8007360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007364:	2500      	movs	r5, #0
 8007366:	680b      	ldr	r3, [r1, #0]
 8007368:	4682      	mov	sl, r0
 800736a:	115e      	asrs	r6, r3, #5
 800736c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007370:	f013 031f 	ands.w	r3, r3, #31
 8007374:	bf18      	it	ne
 8007376:	3604      	addne	r6, #4
 8007378:	1f37      	subs	r7, r6, #4
 800737a:	4690      	mov	r8, r2
 800737c:	46b9      	mov	r9, r7
 800737e:	463c      	mov	r4, r7
 8007380:	46ab      	mov	fp, r5
 8007382:	b087      	sub	sp, #28
 8007384:	6801      	ldr	r1, [r0, #0]
 8007386:	9301      	str	r3, [sp, #4]
 8007388:	f846 5c04 	str.w	r5, [r6, #-4]
 800738c:	9502      	str	r5, [sp, #8]
 800738e:	784a      	ldrb	r2, [r1, #1]
 8007390:	1c4b      	adds	r3, r1, #1
 8007392:	9303      	str	r3, [sp, #12]
 8007394:	b342      	cbz	r2, 80073e8 <__hexnan+0x88>
 8007396:	4610      	mov	r0, r2
 8007398:	9105      	str	r1, [sp, #20]
 800739a:	9204      	str	r2, [sp, #16]
 800739c:	f7ff fd75 	bl	8006e8a <__hexdig_fun>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d14f      	bne.n	8007444 <__hexnan+0xe4>
 80073a4:	9a04      	ldr	r2, [sp, #16]
 80073a6:	9905      	ldr	r1, [sp, #20]
 80073a8:	2a20      	cmp	r2, #32
 80073aa:	d818      	bhi.n	80073de <__hexnan+0x7e>
 80073ac:	9b02      	ldr	r3, [sp, #8]
 80073ae:	459b      	cmp	fp, r3
 80073b0:	dd13      	ble.n	80073da <__hexnan+0x7a>
 80073b2:	454c      	cmp	r4, r9
 80073b4:	d206      	bcs.n	80073c4 <__hexnan+0x64>
 80073b6:	2d07      	cmp	r5, #7
 80073b8:	dc04      	bgt.n	80073c4 <__hexnan+0x64>
 80073ba:	462a      	mov	r2, r5
 80073bc:	4649      	mov	r1, r9
 80073be:	4620      	mov	r0, r4
 80073c0:	f7ff ffa8 	bl	8007314 <L_shift>
 80073c4:	4544      	cmp	r4, r8
 80073c6:	d950      	bls.n	800746a <__hexnan+0x10a>
 80073c8:	2300      	movs	r3, #0
 80073ca:	f1a4 0904 	sub.w	r9, r4, #4
 80073ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80073d2:	461d      	mov	r5, r3
 80073d4:	464c      	mov	r4, r9
 80073d6:	f8cd b008 	str.w	fp, [sp, #8]
 80073da:	9903      	ldr	r1, [sp, #12]
 80073dc:	e7d7      	b.n	800738e <__hexnan+0x2e>
 80073de:	2a29      	cmp	r2, #41	; 0x29
 80073e0:	d155      	bne.n	800748e <__hexnan+0x12e>
 80073e2:	3102      	adds	r1, #2
 80073e4:	f8ca 1000 	str.w	r1, [sl]
 80073e8:	f1bb 0f00 	cmp.w	fp, #0
 80073ec:	d04f      	beq.n	800748e <__hexnan+0x12e>
 80073ee:	454c      	cmp	r4, r9
 80073f0:	d206      	bcs.n	8007400 <__hexnan+0xa0>
 80073f2:	2d07      	cmp	r5, #7
 80073f4:	dc04      	bgt.n	8007400 <__hexnan+0xa0>
 80073f6:	462a      	mov	r2, r5
 80073f8:	4649      	mov	r1, r9
 80073fa:	4620      	mov	r0, r4
 80073fc:	f7ff ff8a 	bl	8007314 <L_shift>
 8007400:	4544      	cmp	r4, r8
 8007402:	d934      	bls.n	800746e <__hexnan+0x10e>
 8007404:	4623      	mov	r3, r4
 8007406:	f1a8 0204 	sub.w	r2, r8, #4
 800740a:	f853 1b04 	ldr.w	r1, [r3], #4
 800740e:	429f      	cmp	r7, r3
 8007410:	f842 1f04 	str.w	r1, [r2, #4]!
 8007414:	d2f9      	bcs.n	800740a <__hexnan+0xaa>
 8007416:	1b3b      	subs	r3, r7, r4
 8007418:	f023 0303 	bic.w	r3, r3, #3
 800741c:	3304      	adds	r3, #4
 800741e:	3e03      	subs	r6, #3
 8007420:	3401      	adds	r4, #1
 8007422:	42a6      	cmp	r6, r4
 8007424:	bf38      	it	cc
 8007426:	2304      	movcc	r3, #4
 8007428:	2200      	movs	r2, #0
 800742a:	4443      	add	r3, r8
 800742c:	f843 2b04 	str.w	r2, [r3], #4
 8007430:	429f      	cmp	r7, r3
 8007432:	d2fb      	bcs.n	800742c <__hexnan+0xcc>
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	b91b      	cbnz	r3, 8007440 <__hexnan+0xe0>
 8007438:	4547      	cmp	r7, r8
 800743a:	d126      	bne.n	800748a <__hexnan+0x12a>
 800743c:	2301      	movs	r3, #1
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	2005      	movs	r0, #5
 8007442:	e025      	b.n	8007490 <__hexnan+0x130>
 8007444:	3501      	adds	r5, #1
 8007446:	2d08      	cmp	r5, #8
 8007448:	f10b 0b01 	add.w	fp, fp, #1
 800744c:	dd06      	ble.n	800745c <__hexnan+0xfc>
 800744e:	4544      	cmp	r4, r8
 8007450:	d9c3      	bls.n	80073da <__hexnan+0x7a>
 8007452:	2300      	movs	r3, #0
 8007454:	2501      	movs	r5, #1
 8007456:	f844 3c04 	str.w	r3, [r4, #-4]
 800745a:	3c04      	subs	r4, #4
 800745c:	6822      	ldr	r2, [r4, #0]
 800745e:	f000 000f 	and.w	r0, r0, #15
 8007462:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007466:	6020      	str	r0, [r4, #0]
 8007468:	e7b7      	b.n	80073da <__hexnan+0x7a>
 800746a:	2508      	movs	r5, #8
 800746c:	e7b5      	b.n	80073da <__hexnan+0x7a>
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d0df      	beq.n	8007434 <__hexnan+0xd4>
 8007474:	f04f 32ff 	mov.w	r2, #4294967295
 8007478:	f1c3 0320 	rsb	r3, r3, #32
 800747c:	40da      	lsrs	r2, r3
 800747e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007482:	4013      	ands	r3, r2
 8007484:	f846 3c04 	str.w	r3, [r6, #-4]
 8007488:	e7d4      	b.n	8007434 <__hexnan+0xd4>
 800748a:	3f04      	subs	r7, #4
 800748c:	e7d2      	b.n	8007434 <__hexnan+0xd4>
 800748e:	2004      	movs	r0, #4
 8007490:	b007      	add	sp, #28
 8007492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007498 <sbrk_aligned>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	4e0e      	ldr	r6, [pc, #56]	; (80074d4 <sbrk_aligned+0x3c>)
 800749c:	460c      	mov	r4, r1
 800749e:	6831      	ldr	r1, [r6, #0]
 80074a0:	4605      	mov	r5, r0
 80074a2:	b911      	cbnz	r1, 80074aa <sbrk_aligned+0x12>
 80074a4:	f001 f962 	bl	800876c <_sbrk_r>
 80074a8:	6030      	str	r0, [r6, #0]
 80074aa:	4621      	mov	r1, r4
 80074ac:	4628      	mov	r0, r5
 80074ae:	f001 f95d 	bl	800876c <_sbrk_r>
 80074b2:	1c43      	adds	r3, r0, #1
 80074b4:	d00a      	beq.n	80074cc <sbrk_aligned+0x34>
 80074b6:	1cc4      	adds	r4, r0, #3
 80074b8:	f024 0403 	bic.w	r4, r4, #3
 80074bc:	42a0      	cmp	r0, r4
 80074be:	d007      	beq.n	80074d0 <sbrk_aligned+0x38>
 80074c0:	1a21      	subs	r1, r4, r0
 80074c2:	4628      	mov	r0, r5
 80074c4:	f001 f952 	bl	800876c <_sbrk_r>
 80074c8:	3001      	adds	r0, #1
 80074ca:	d101      	bne.n	80074d0 <sbrk_aligned+0x38>
 80074cc:	f04f 34ff 	mov.w	r4, #4294967295
 80074d0:	4620      	mov	r0, r4
 80074d2:	bd70      	pop	{r4, r5, r6, pc}
 80074d4:	200007e8 	.word	0x200007e8

080074d8 <_malloc_r>:
 80074d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074dc:	1ccd      	adds	r5, r1, #3
 80074de:	f025 0503 	bic.w	r5, r5, #3
 80074e2:	3508      	adds	r5, #8
 80074e4:	2d0c      	cmp	r5, #12
 80074e6:	bf38      	it	cc
 80074e8:	250c      	movcc	r5, #12
 80074ea:	2d00      	cmp	r5, #0
 80074ec:	4607      	mov	r7, r0
 80074ee:	db01      	blt.n	80074f4 <_malloc_r+0x1c>
 80074f0:	42a9      	cmp	r1, r5
 80074f2:	d905      	bls.n	8007500 <_malloc_r+0x28>
 80074f4:	230c      	movs	r3, #12
 80074f6:	2600      	movs	r6, #0
 80074f8:	603b      	str	r3, [r7, #0]
 80074fa:	4630      	mov	r0, r6
 80074fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007500:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80075d4 <_malloc_r+0xfc>
 8007504:	f000 f87a 	bl	80075fc <__malloc_lock>
 8007508:	f8d8 3000 	ldr.w	r3, [r8]
 800750c:	461c      	mov	r4, r3
 800750e:	bb5c      	cbnz	r4, 8007568 <_malloc_r+0x90>
 8007510:	4629      	mov	r1, r5
 8007512:	4638      	mov	r0, r7
 8007514:	f7ff ffc0 	bl	8007498 <sbrk_aligned>
 8007518:	1c43      	adds	r3, r0, #1
 800751a:	4604      	mov	r4, r0
 800751c:	d155      	bne.n	80075ca <_malloc_r+0xf2>
 800751e:	f8d8 4000 	ldr.w	r4, [r8]
 8007522:	4626      	mov	r6, r4
 8007524:	2e00      	cmp	r6, #0
 8007526:	d145      	bne.n	80075b4 <_malloc_r+0xdc>
 8007528:	2c00      	cmp	r4, #0
 800752a:	d048      	beq.n	80075be <_malloc_r+0xe6>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	4631      	mov	r1, r6
 8007530:	4638      	mov	r0, r7
 8007532:	eb04 0903 	add.w	r9, r4, r3
 8007536:	f001 f919 	bl	800876c <_sbrk_r>
 800753a:	4581      	cmp	r9, r0
 800753c:	d13f      	bne.n	80075be <_malloc_r+0xe6>
 800753e:	6821      	ldr	r1, [r4, #0]
 8007540:	4638      	mov	r0, r7
 8007542:	1a6d      	subs	r5, r5, r1
 8007544:	4629      	mov	r1, r5
 8007546:	f7ff ffa7 	bl	8007498 <sbrk_aligned>
 800754a:	3001      	adds	r0, #1
 800754c:	d037      	beq.n	80075be <_malloc_r+0xe6>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	442b      	add	r3, r5
 8007552:	6023      	str	r3, [r4, #0]
 8007554:	f8d8 3000 	ldr.w	r3, [r8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d038      	beq.n	80075ce <_malloc_r+0xf6>
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	42a2      	cmp	r2, r4
 8007560:	d12b      	bne.n	80075ba <_malloc_r+0xe2>
 8007562:	2200      	movs	r2, #0
 8007564:	605a      	str	r2, [r3, #4]
 8007566:	e00f      	b.n	8007588 <_malloc_r+0xb0>
 8007568:	6822      	ldr	r2, [r4, #0]
 800756a:	1b52      	subs	r2, r2, r5
 800756c:	d41f      	bmi.n	80075ae <_malloc_r+0xd6>
 800756e:	2a0b      	cmp	r2, #11
 8007570:	d917      	bls.n	80075a2 <_malloc_r+0xca>
 8007572:	1961      	adds	r1, r4, r5
 8007574:	42a3      	cmp	r3, r4
 8007576:	6025      	str	r5, [r4, #0]
 8007578:	bf18      	it	ne
 800757a:	6059      	strne	r1, [r3, #4]
 800757c:	6863      	ldr	r3, [r4, #4]
 800757e:	bf08      	it	eq
 8007580:	f8c8 1000 	streq.w	r1, [r8]
 8007584:	5162      	str	r2, [r4, r5]
 8007586:	604b      	str	r3, [r1, #4]
 8007588:	4638      	mov	r0, r7
 800758a:	f104 060b 	add.w	r6, r4, #11
 800758e:	f000 f83b 	bl	8007608 <__malloc_unlock>
 8007592:	f026 0607 	bic.w	r6, r6, #7
 8007596:	1d23      	adds	r3, r4, #4
 8007598:	1af2      	subs	r2, r6, r3
 800759a:	d0ae      	beq.n	80074fa <_malloc_r+0x22>
 800759c:	1b9b      	subs	r3, r3, r6
 800759e:	50a3      	str	r3, [r4, r2]
 80075a0:	e7ab      	b.n	80074fa <_malloc_r+0x22>
 80075a2:	42a3      	cmp	r3, r4
 80075a4:	6862      	ldr	r2, [r4, #4]
 80075a6:	d1dd      	bne.n	8007564 <_malloc_r+0x8c>
 80075a8:	f8c8 2000 	str.w	r2, [r8]
 80075ac:	e7ec      	b.n	8007588 <_malloc_r+0xb0>
 80075ae:	4623      	mov	r3, r4
 80075b0:	6864      	ldr	r4, [r4, #4]
 80075b2:	e7ac      	b.n	800750e <_malloc_r+0x36>
 80075b4:	4634      	mov	r4, r6
 80075b6:	6876      	ldr	r6, [r6, #4]
 80075b8:	e7b4      	b.n	8007524 <_malloc_r+0x4c>
 80075ba:	4613      	mov	r3, r2
 80075bc:	e7cc      	b.n	8007558 <_malloc_r+0x80>
 80075be:	230c      	movs	r3, #12
 80075c0:	4638      	mov	r0, r7
 80075c2:	603b      	str	r3, [r7, #0]
 80075c4:	f000 f820 	bl	8007608 <__malloc_unlock>
 80075c8:	e797      	b.n	80074fa <_malloc_r+0x22>
 80075ca:	6025      	str	r5, [r4, #0]
 80075cc:	e7dc      	b.n	8007588 <_malloc_r+0xb0>
 80075ce:	605b      	str	r3, [r3, #4]
 80075d0:	deff      	udf	#255	; 0xff
 80075d2:	bf00      	nop
 80075d4:	200007e4 	.word	0x200007e4

080075d8 <__ascii_mbtowc>:
 80075d8:	b082      	sub	sp, #8
 80075da:	b901      	cbnz	r1, 80075de <__ascii_mbtowc+0x6>
 80075dc:	a901      	add	r1, sp, #4
 80075de:	b142      	cbz	r2, 80075f2 <__ascii_mbtowc+0x1a>
 80075e0:	b14b      	cbz	r3, 80075f6 <__ascii_mbtowc+0x1e>
 80075e2:	7813      	ldrb	r3, [r2, #0]
 80075e4:	600b      	str	r3, [r1, #0]
 80075e6:	7812      	ldrb	r2, [r2, #0]
 80075e8:	1e10      	subs	r0, r2, #0
 80075ea:	bf18      	it	ne
 80075ec:	2001      	movne	r0, #1
 80075ee:	b002      	add	sp, #8
 80075f0:	4770      	bx	lr
 80075f2:	4610      	mov	r0, r2
 80075f4:	e7fb      	b.n	80075ee <__ascii_mbtowc+0x16>
 80075f6:	f06f 0001 	mvn.w	r0, #1
 80075fa:	e7f8      	b.n	80075ee <__ascii_mbtowc+0x16>

080075fc <__malloc_lock>:
 80075fc:	4801      	ldr	r0, [pc, #4]	; (8007604 <__malloc_lock+0x8>)
 80075fe:	f7ff bb93 	b.w	8006d28 <__retarget_lock_acquire_recursive>
 8007602:	bf00      	nop
 8007604:	200007e0 	.word	0x200007e0

08007608 <__malloc_unlock>:
 8007608:	4801      	ldr	r0, [pc, #4]	; (8007610 <__malloc_unlock+0x8>)
 800760a:	f7ff bb8e 	b.w	8006d2a <__retarget_lock_release_recursive>
 800760e:	bf00      	nop
 8007610:	200007e0 	.word	0x200007e0

08007614 <_Balloc>:
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	69c6      	ldr	r6, [r0, #28]
 8007618:	4604      	mov	r4, r0
 800761a:	460d      	mov	r5, r1
 800761c:	b976      	cbnz	r6, 800763c <_Balloc+0x28>
 800761e:	2010      	movs	r0, #16
 8007620:	f001 f8f4 	bl	800880c <malloc>
 8007624:	4602      	mov	r2, r0
 8007626:	61e0      	str	r0, [r4, #28]
 8007628:	b920      	cbnz	r0, 8007634 <_Balloc+0x20>
 800762a:	216b      	movs	r1, #107	; 0x6b
 800762c:	4b17      	ldr	r3, [pc, #92]	; (800768c <_Balloc+0x78>)
 800762e:	4818      	ldr	r0, [pc, #96]	; (8007690 <_Balloc+0x7c>)
 8007630:	f001 f8ba 	bl	80087a8 <__assert_func>
 8007634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007638:	6006      	str	r6, [r0, #0]
 800763a:	60c6      	str	r6, [r0, #12]
 800763c:	69e6      	ldr	r6, [r4, #28]
 800763e:	68f3      	ldr	r3, [r6, #12]
 8007640:	b183      	cbz	r3, 8007664 <_Balloc+0x50>
 8007642:	69e3      	ldr	r3, [r4, #28]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800764a:	b9b8      	cbnz	r0, 800767c <_Balloc+0x68>
 800764c:	2101      	movs	r1, #1
 800764e:	fa01 f605 	lsl.w	r6, r1, r5
 8007652:	1d72      	adds	r2, r6, #5
 8007654:	4620      	mov	r0, r4
 8007656:	0092      	lsls	r2, r2, #2
 8007658:	f001 f8c4 	bl	80087e4 <_calloc_r>
 800765c:	b160      	cbz	r0, 8007678 <_Balloc+0x64>
 800765e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007662:	e00e      	b.n	8007682 <_Balloc+0x6e>
 8007664:	2221      	movs	r2, #33	; 0x21
 8007666:	2104      	movs	r1, #4
 8007668:	4620      	mov	r0, r4
 800766a:	f001 f8bb 	bl	80087e4 <_calloc_r>
 800766e:	69e3      	ldr	r3, [r4, #28]
 8007670:	60f0      	str	r0, [r6, #12]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e4      	bne.n	8007642 <_Balloc+0x2e>
 8007678:	2000      	movs	r0, #0
 800767a:	bd70      	pop	{r4, r5, r6, pc}
 800767c:	6802      	ldr	r2, [r0, #0]
 800767e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007682:	2300      	movs	r3, #0
 8007684:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007688:	e7f7      	b.n	800767a <_Balloc+0x66>
 800768a:	bf00      	nop
 800768c:	08008a01 	.word	0x08008a01
 8007690:	08008a18 	.word	0x08008a18

08007694 <_Bfree>:
 8007694:	b570      	push	{r4, r5, r6, lr}
 8007696:	69c6      	ldr	r6, [r0, #28]
 8007698:	4605      	mov	r5, r0
 800769a:	460c      	mov	r4, r1
 800769c:	b976      	cbnz	r6, 80076bc <_Bfree+0x28>
 800769e:	2010      	movs	r0, #16
 80076a0:	f001 f8b4 	bl	800880c <malloc>
 80076a4:	4602      	mov	r2, r0
 80076a6:	61e8      	str	r0, [r5, #28]
 80076a8:	b920      	cbnz	r0, 80076b4 <_Bfree+0x20>
 80076aa:	218f      	movs	r1, #143	; 0x8f
 80076ac:	4b08      	ldr	r3, [pc, #32]	; (80076d0 <_Bfree+0x3c>)
 80076ae:	4809      	ldr	r0, [pc, #36]	; (80076d4 <_Bfree+0x40>)
 80076b0:	f001 f87a 	bl	80087a8 <__assert_func>
 80076b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076b8:	6006      	str	r6, [r0, #0]
 80076ba:	60c6      	str	r6, [r0, #12]
 80076bc:	b13c      	cbz	r4, 80076ce <_Bfree+0x3a>
 80076be:	69eb      	ldr	r3, [r5, #28]
 80076c0:	6862      	ldr	r2, [r4, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076c8:	6021      	str	r1, [r4, #0]
 80076ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80076ce:	bd70      	pop	{r4, r5, r6, pc}
 80076d0:	08008a01 	.word	0x08008a01
 80076d4:	08008a18 	.word	0x08008a18

080076d8 <__multadd>:
 80076d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076dc:	4607      	mov	r7, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	461e      	mov	r6, r3
 80076e2:	2000      	movs	r0, #0
 80076e4:	690d      	ldr	r5, [r1, #16]
 80076e6:	f101 0c14 	add.w	ip, r1, #20
 80076ea:	f8dc 3000 	ldr.w	r3, [ip]
 80076ee:	3001      	adds	r0, #1
 80076f0:	b299      	uxth	r1, r3
 80076f2:	fb02 6101 	mla	r1, r2, r1, r6
 80076f6:	0c1e      	lsrs	r6, r3, #16
 80076f8:	0c0b      	lsrs	r3, r1, #16
 80076fa:	fb02 3306 	mla	r3, r2, r6, r3
 80076fe:	b289      	uxth	r1, r1
 8007700:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007704:	4285      	cmp	r5, r0
 8007706:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800770a:	f84c 1b04 	str.w	r1, [ip], #4
 800770e:	dcec      	bgt.n	80076ea <__multadd+0x12>
 8007710:	b30e      	cbz	r6, 8007756 <__multadd+0x7e>
 8007712:	68a3      	ldr	r3, [r4, #8]
 8007714:	42ab      	cmp	r3, r5
 8007716:	dc19      	bgt.n	800774c <__multadd+0x74>
 8007718:	6861      	ldr	r1, [r4, #4]
 800771a:	4638      	mov	r0, r7
 800771c:	3101      	adds	r1, #1
 800771e:	f7ff ff79 	bl	8007614 <_Balloc>
 8007722:	4680      	mov	r8, r0
 8007724:	b928      	cbnz	r0, 8007732 <__multadd+0x5a>
 8007726:	4602      	mov	r2, r0
 8007728:	21ba      	movs	r1, #186	; 0xba
 800772a:	4b0c      	ldr	r3, [pc, #48]	; (800775c <__multadd+0x84>)
 800772c:	480c      	ldr	r0, [pc, #48]	; (8007760 <__multadd+0x88>)
 800772e:	f001 f83b 	bl	80087a8 <__assert_func>
 8007732:	6922      	ldr	r2, [r4, #16]
 8007734:	f104 010c 	add.w	r1, r4, #12
 8007738:	3202      	adds	r2, #2
 800773a:	0092      	lsls	r2, r2, #2
 800773c:	300c      	adds	r0, #12
 800773e:	f7ff faf5 	bl	8006d2c <memcpy>
 8007742:	4621      	mov	r1, r4
 8007744:	4638      	mov	r0, r7
 8007746:	f7ff ffa5 	bl	8007694 <_Bfree>
 800774a:	4644      	mov	r4, r8
 800774c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007750:	3501      	adds	r5, #1
 8007752:	615e      	str	r6, [r3, #20]
 8007754:	6125      	str	r5, [r4, #16]
 8007756:	4620      	mov	r0, r4
 8007758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800775c:	08008990 	.word	0x08008990
 8007760:	08008a18 	.word	0x08008a18

08007764 <__s2b>:
 8007764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007768:	4615      	mov	r5, r2
 800776a:	2209      	movs	r2, #9
 800776c:	461f      	mov	r7, r3
 800776e:	3308      	adds	r3, #8
 8007770:	460c      	mov	r4, r1
 8007772:	fb93 f3f2 	sdiv	r3, r3, r2
 8007776:	4606      	mov	r6, r0
 8007778:	2201      	movs	r2, #1
 800777a:	2100      	movs	r1, #0
 800777c:	429a      	cmp	r2, r3
 800777e:	db09      	blt.n	8007794 <__s2b+0x30>
 8007780:	4630      	mov	r0, r6
 8007782:	f7ff ff47 	bl	8007614 <_Balloc>
 8007786:	b940      	cbnz	r0, 800779a <__s2b+0x36>
 8007788:	4602      	mov	r2, r0
 800778a:	21d3      	movs	r1, #211	; 0xd3
 800778c:	4b18      	ldr	r3, [pc, #96]	; (80077f0 <__s2b+0x8c>)
 800778e:	4819      	ldr	r0, [pc, #100]	; (80077f4 <__s2b+0x90>)
 8007790:	f001 f80a 	bl	80087a8 <__assert_func>
 8007794:	0052      	lsls	r2, r2, #1
 8007796:	3101      	adds	r1, #1
 8007798:	e7f0      	b.n	800777c <__s2b+0x18>
 800779a:	9b08      	ldr	r3, [sp, #32]
 800779c:	2d09      	cmp	r5, #9
 800779e:	6143      	str	r3, [r0, #20]
 80077a0:	f04f 0301 	mov.w	r3, #1
 80077a4:	6103      	str	r3, [r0, #16]
 80077a6:	dd16      	ble.n	80077d6 <__s2b+0x72>
 80077a8:	f104 0909 	add.w	r9, r4, #9
 80077ac:	46c8      	mov	r8, r9
 80077ae:	442c      	add	r4, r5
 80077b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80077b4:	4601      	mov	r1, r0
 80077b6:	220a      	movs	r2, #10
 80077b8:	4630      	mov	r0, r6
 80077ba:	3b30      	subs	r3, #48	; 0x30
 80077bc:	f7ff ff8c 	bl	80076d8 <__multadd>
 80077c0:	45a0      	cmp	r8, r4
 80077c2:	d1f5      	bne.n	80077b0 <__s2b+0x4c>
 80077c4:	f1a5 0408 	sub.w	r4, r5, #8
 80077c8:	444c      	add	r4, r9
 80077ca:	1b2d      	subs	r5, r5, r4
 80077cc:	1963      	adds	r3, r4, r5
 80077ce:	42bb      	cmp	r3, r7
 80077d0:	db04      	blt.n	80077dc <__s2b+0x78>
 80077d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077d6:	2509      	movs	r5, #9
 80077d8:	340a      	adds	r4, #10
 80077da:	e7f6      	b.n	80077ca <__s2b+0x66>
 80077dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80077e0:	4601      	mov	r1, r0
 80077e2:	220a      	movs	r2, #10
 80077e4:	4630      	mov	r0, r6
 80077e6:	3b30      	subs	r3, #48	; 0x30
 80077e8:	f7ff ff76 	bl	80076d8 <__multadd>
 80077ec:	e7ee      	b.n	80077cc <__s2b+0x68>
 80077ee:	bf00      	nop
 80077f0:	08008990 	.word	0x08008990
 80077f4:	08008a18 	.word	0x08008a18

080077f8 <__hi0bits>:
 80077f8:	0c02      	lsrs	r2, r0, #16
 80077fa:	0412      	lsls	r2, r2, #16
 80077fc:	4603      	mov	r3, r0
 80077fe:	b9ca      	cbnz	r2, 8007834 <__hi0bits+0x3c>
 8007800:	0403      	lsls	r3, r0, #16
 8007802:	2010      	movs	r0, #16
 8007804:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007808:	bf04      	itt	eq
 800780a:	021b      	lsleq	r3, r3, #8
 800780c:	3008      	addeq	r0, #8
 800780e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007812:	bf04      	itt	eq
 8007814:	011b      	lsleq	r3, r3, #4
 8007816:	3004      	addeq	r0, #4
 8007818:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800781c:	bf04      	itt	eq
 800781e:	009b      	lsleq	r3, r3, #2
 8007820:	3002      	addeq	r0, #2
 8007822:	2b00      	cmp	r3, #0
 8007824:	db05      	blt.n	8007832 <__hi0bits+0x3a>
 8007826:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800782a:	f100 0001 	add.w	r0, r0, #1
 800782e:	bf08      	it	eq
 8007830:	2020      	moveq	r0, #32
 8007832:	4770      	bx	lr
 8007834:	2000      	movs	r0, #0
 8007836:	e7e5      	b.n	8007804 <__hi0bits+0xc>

08007838 <__lo0bits>:
 8007838:	6803      	ldr	r3, [r0, #0]
 800783a:	4602      	mov	r2, r0
 800783c:	f013 0007 	ands.w	r0, r3, #7
 8007840:	d00b      	beq.n	800785a <__lo0bits+0x22>
 8007842:	07d9      	lsls	r1, r3, #31
 8007844:	d421      	bmi.n	800788a <__lo0bits+0x52>
 8007846:	0798      	lsls	r0, r3, #30
 8007848:	bf49      	itett	mi
 800784a:	085b      	lsrmi	r3, r3, #1
 800784c:	089b      	lsrpl	r3, r3, #2
 800784e:	2001      	movmi	r0, #1
 8007850:	6013      	strmi	r3, [r2, #0]
 8007852:	bf5c      	itt	pl
 8007854:	2002      	movpl	r0, #2
 8007856:	6013      	strpl	r3, [r2, #0]
 8007858:	4770      	bx	lr
 800785a:	b299      	uxth	r1, r3
 800785c:	b909      	cbnz	r1, 8007862 <__lo0bits+0x2a>
 800785e:	2010      	movs	r0, #16
 8007860:	0c1b      	lsrs	r3, r3, #16
 8007862:	b2d9      	uxtb	r1, r3
 8007864:	b909      	cbnz	r1, 800786a <__lo0bits+0x32>
 8007866:	3008      	adds	r0, #8
 8007868:	0a1b      	lsrs	r3, r3, #8
 800786a:	0719      	lsls	r1, r3, #28
 800786c:	bf04      	itt	eq
 800786e:	091b      	lsreq	r3, r3, #4
 8007870:	3004      	addeq	r0, #4
 8007872:	0799      	lsls	r1, r3, #30
 8007874:	bf04      	itt	eq
 8007876:	089b      	lsreq	r3, r3, #2
 8007878:	3002      	addeq	r0, #2
 800787a:	07d9      	lsls	r1, r3, #31
 800787c:	d403      	bmi.n	8007886 <__lo0bits+0x4e>
 800787e:	085b      	lsrs	r3, r3, #1
 8007880:	f100 0001 	add.w	r0, r0, #1
 8007884:	d003      	beq.n	800788e <__lo0bits+0x56>
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	4770      	bx	lr
 800788a:	2000      	movs	r0, #0
 800788c:	4770      	bx	lr
 800788e:	2020      	movs	r0, #32
 8007890:	4770      	bx	lr
	...

08007894 <__i2b>:
 8007894:	b510      	push	{r4, lr}
 8007896:	460c      	mov	r4, r1
 8007898:	2101      	movs	r1, #1
 800789a:	f7ff febb 	bl	8007614 <_Balloc>
 800789e:	4602      	mov	r2, r0
 80078a0:	b928      	cbnz	r0, 80078ae <__i2b+0x1a>
 80078a2:	f240 1145 	movw	r1, #325	; 0x145
 80078a6:	4b04      	ldr	r3, [pc, #16]	; (80078b8 <__i2b+0x24>)
 80078a8:	4804      	ldr	r0, [pc, #16]	; (80078bc <__i2b+0x28>)
 80078aa:	f000 ff7d 	bl	80087a8 <__assert_func>
 80078ae:	2301      	movs	r3, #1
 80078b0:	6144      	str	r4, [r0, #20]
 80078b2:	6103      	str	r3, [r0, #16]
 80078b4:	bd10      	pop	{r4, pc}
 80078b6:	bf00      	nop
 80078b8:	08008990 	.word	0x08008990
 80078bc:	08008a18 	.word	0x08008a18

080078c0 <__multiply>:
 80078c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	4691      	mov	r9, r2
 80078c6:	690a      	ldr	r2, [r1, #16]
 80078c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80078cc:	460c      	mov	r4, r1
 80078ce:	429a      	cmp	r2, r3
 80078d0:	bfbe      	ittt	lt
 80078d2:	460b      	movlt	r3, r1
 80078d4:	464c      	movlt	r4, r9
 80078d6:	4699      	movlt	r9, r3
 80078d8:	6927      	ldr	r7, [r4, #16]
 80078da:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80078de:	68a3      	ldr	r3, [r4, #8]
 80078e0:	6861      	ldr	r1, [r4, #4]
 80078e2:	eb07 060a 	add.w	r6, r7, sl
 80078e6:	42b3      	cmp	r3, r6
 80078e8:	b085      	sub	sp, #20
 80078ea:	bfb8      	it	lt
 80078ec:	3101      	addlt	r1, #1
 80078ee:	f7ff fe91 	bl	8007614 <_Balloc>
 80078f2:	b930      	cbnz	r0, 8007902 <__multiply+0x42>
 80078f4:	4602      	mov	r2, r0
 80078f6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80078fa:	4b43      	ldr	r3, [pc, #268]	; (8007a08 <__multiply+0x148>)
 80078fc:	4843      	ldr	r0, [pc, #268]	; (8007a0c <__multiply+0x14c>)
 80078fe:	f000 ff53 	bl	80087a8 <__assert_func>
 8007902:	f100 0514 	add.w	r5, r0, #20
 8007906:	462b      	mov	r3, r5
 8007908:	2200      	movs	r2, #0
 800790a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800790e:	4543      	cmp	r3, r8
 8007910:	d321      	bcc.n	8007956 <__multiply+0x96>
 8007912:	f104 0314 	add.w	r3, r4, #20
 8007916:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800791a:	f109 0314 	add.w	r3, r9, #20
 800791e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007922:	9202      	str	r2, [sp, #8]
 8007924:	1b3a      	subs	r2, r7, r4
 8007926:	3a15      	subs	r2, #21
 8007928:	f022 0203 	bic.w	r2, r2, #3
 800792c:	3204      	adds	r2, #4
 800792e:	f104 0115 	add.w	r1, r4, #21
 8007932:	428f      	cmp	r7, r1
 8007934:	bf38      	it	cc
 8007936:	2204      	movcc	r2, #4
 8007938:	9201      	str	r2, [sp, #4]
 800793a:	9a02      	ldr	r2, [sp, #8]
 800793c:	9303      	str	r3, [sp, #12]
 800793e:	429a      	cmp	r2, r3
 8007940:	d80c      	bhi.n	800795c <__multiply+0x9c>
 8007942:	2e00      	cmp	r6, #0
 8007944:	dd03      	ble.n	800794e <__multiply+0x8e>
 8007946:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800794a:	2b00      	cmp	r3, #0
 800794c:	d05a      	beq.n	8007a04 <__multiply+0x144>
 800794e:	6106      	str	r6, [r0, #16]
 8007950:	b005      	add	sp, #20
 8007952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007956:	f843 2b04 	str.w	r2, [r3], #4
 800795a:	e7d8      	b.n	800790e <__multiply+0x4e>
 800795c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007960:	f1ba 0f00 	cmp.w	sl, #0
 8007964:	d023      	beq.n	80079ae <__multiply+0xee>
 8007966:	46a9      	mov	r9, r5
 8007968:	f04f 0c00 	mov.w	ip, #0
 800796c:	f104 0e14 	add.w	lr, r4, #20
 8007970:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007974:	f8d9 1000 	ldr.w	r1, [r9]
 8007978:	fa1f fb82 	uxth.w	fp, r2
 800797c:	b289      	uxth	r1, r1
 800797e:	fb0a 110b 	mla	r1, sl, fp, r1
 8007982:	4461      	add	r1, ip
 8007984:	f8d9 c000 	ldr.w	ip, [r9]
 8007988:	0c12      	lsrs	r2, r2, #16
 800798a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800798e:	fb0a c202 	mla	r2, sl, r2, ip
 8007992:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007996:	b289      	uxth	r1, r1
 8007998:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800799c:	4577      	cmp	r7, lr
 800799e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079a2:	f849 1b04 	str.w	r1, [r9], #4
 80079a6:	d8e3      	bhi.n	8007970 <__multiply+0xb0>
 80079a8:	9a01      	ldr	r2, [sp, #4]
 80079aa:	f845 c002 	str.w	ip, [r5, r2]
 80079ae:	9a03      	ldr	r2, [sp, #12]
 80079b0:	3304      	adds	r3, #4
 80079b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80079b6:	f1b9 0f00 	cmp.w	r9, #0
 80079ba:	d021      	beq.n	8007a00 <__multiply+0x140>
 80079bc:	46ae      	mov	lr, r5
 80079be:	f04f 0a00 	mov.w	sl, #0
 80079c2:	6829      	ldr	r1, [r5, #0]
 80079c4:	f104 0c14 	add.w	ip, r4, #20
 80079c8:	f8bc b000 	ldrh.w	fp, [ip]
 80079cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80079d0:	b289      	uxth	r1, r1
 80079d2:	fb09 220b 	mla	r2, r9, fp, r2
 80079d6:	4452      	add	r2, sl
 80079d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80079dc:	f84e 1b04 	str.w	r1, [lr], #4
 80079e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80079e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80079e8:	f8be 1000 	ldrh.w	r1, [lr]
 80079ec:	4567      	cmp	r7, ip
 80079ee:	fb09 110a 	mla	r1, r9, sl, r1
 80079f2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80079f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80079fa:	d8e5      	bhi.n	80079c8 <__multiply+0x108>
 80079fc:	9a01      	ldr	r2, [sp, #4]
 80079fe:	50a9      	str	r1, [r5, r2]
 8007a00:	3504      	adds	r5, #4
 8007a02:	e79a      	b.n	800793a <__multiply+0x7a>
 8007a04:	3e01      	subs	r6, #1
 8007a06:	e79c      	b.n	8007942 <__multiply+0x82>
 8007a08:	08008990 	.word	0x08008990
 8007a0c:	08008a18 	.word	0x08008a18

08007a10 <__pow5mult>:
 8007a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a14:	4615      	mov	r5, r2
 8007a16:	f012 0203 	ands.w	r2, r2, #3
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	460f      	mov	r7, r1
 8007a1e:	d007      	beq.n	8007a30 <__pow5mult+0x20>
 8007a20:	4c25      	ldr	r4, [pc, #148]	; (8007ab8 <__pow5mult+0xa8>)
 8007a22:	3a01      	subs	r2, #1
 8007a24:	2300      	movs	r3, #0
 8007a26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a2a:	f7ff fe55 	bl	80076d8 <__multadd>
 8007a2e:	4607      	mov	r7, r0
 8007a30:	10ad      	asrs	r5, r5, #2
 8007a32:	d03d      	beq.n	8007ab0 <__pow5mult+0xa0>
 8007a34:	69f4      	ldr	r4, [r6, #28]
 8007a36:	b97c      	cbnz	r4, 8007a58 <__pow5mult+0x48>
 8007a38:	2010      	movs	r0, #16
 8007a3a:	f000 fee7 	bl	800880c <malloc>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	61f0      	str	r0, [r6, #28]
 8007a42:	b928      	cbnz	r0, 8007a50 <__pow5mult+0x40>
 8007a44:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007a48:	4b1c      	ldr	r3, [pc, #112]	; (8007abc <__pow5mult+0xac>)
 8007a4a:	481d      	ldr	r0, [pc, #116]	; (8007ac0 <__pow5mult+0xb0>)
 8007a4c:	f000 feac 	bl	80087a8 <__assert_func>
 8007a50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a54:	6004      	str	r4, [r0, #0]
 8007a56:	60c4      	str	r4, [r0, #12]
 8007a58:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007a5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a60:	b94c      	cbnz	r4, 8007a76 <__pow5mult+0x66>
 8007a62:	f240 2171 	movw	r1, #625	; 0x271
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7ff ff14 	bl	8007894 <__i2b>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4604      	mov	r4, r0
 8007a70:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a74:	6003      	str	r3, [r0, #0]
 8007a76:	f04f 0900 	mov.w	r9, #0
 8007a7a:	07eb      	lsls	r3, r5, #31
 8007a7c:	d50a      	bpl.n	8007a94 <__pow5mult+0x84>
 8007a7e:	4639      	mov	r1, r7
 8007a80:	4622      	mov	r2, r4
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7ff ff1c 	bl	80078c0 <__multiply>
 8007a88:	4680      	mov	r8, r0
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	f7ff fe01 	bl	8007694 <_Bfree>
 8007a92:	4647      	mov	r7, r8
 8007a94:	106d      	asrs	r5, r5, #1
 8007a96:	d00b      	beq.n	8007ab0 <__pow5mult+0xa0>
 8007a98:	6820      	ldr	r0, [r4, #0]
 8007a9a:	b938      	cbnz	r0, 8007aac <__pow5mult+0x9c>
 8007a9c:	4622      	mov	r2, r4
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f7ff ff0d 	bl	80078c0 <__multiply>
 8007aa6:	6020      	str	r0, [r4, #0]
 8007aa8:	f8c0 9000 	str.w	r9, [r0]
 8007aac:	4604      	mov	r4, r0
 8007aae:	e7e4      	b.n	8007a7a <__pow5mult+0x6a>
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ab6:	bf00      	nop
 8007ab8:	08008b68 	.word	0x08008b68
 8007abc:	08008a01 	.word	0x08008a01
 8007ac0:	08008a18 	.word	0x08008a18

08007ac4 <__lshift>:
 8007ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac8:	460c      	mov	r4, r1
 8007aca:	4607      	mov	r7, r0
 8007acc:	4691      	mov	r9, r2
 8007ace:	6923      	ldr	r3, [r4, #16]
 8007ad0:	6849      	ldr	r1, [r1, #4]
 8007ad2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ad6:	68a3      	ldr	r3, [r4, #8]
 8007ad8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007adc:	f108 0601 	add.w	r6, r8, #1
 8007ae0:	42b3      	cmp	r3, r6
 8007ae2:	db0b      	blt.n	8007afc <__lshift+0x38>
 8007ae4:	4638      	mov	r0, r7
 8007ae6:	f7ff fd95 	bl	8007614 <_Balloc>
 8007aea:	4605      	mov	r5, r0
 8007aec:	b948      	cbnz	r0, 8007b02 <__lshift+0x3e>
 8007aee:	4602      	mov	r2, r0
 8007af0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007af4:	4b27      	ldr	r3, [pc, #156]	; (8007b94 <__lshift+0xd0>)
 8007af6:	4828      	ldr	r0, [pc, #160]	; (8007b98 <__lshift+0xd4>)
 8007af8:	f000 fe56 	bl	80087a8 <__assert_func>
 8007afc:	3101      	adds	r1, #1
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	e7ee      	b.n	8007ae0 <__lshift+0x1c>
 8007b02:	2300      	movs	r3, #0
 8007b04:	f100 0114 	add.w	r1, r0, #20
 8007b08:	f100 0210 	add.w	r2, r0, #16
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	4553      	cmp	r3, sl
 8007b10:	db33      	blt.n	8007b7a <__lshift+0xb6>
 8007b12:	6920      	ldr	r0, [r4, #16]
 8007b14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b18:	f104 0314 	add.w	r3, r4, #20
 8007b1c:	f019 091f 	ands.w	r9, r9, #31
 8007b20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b28:	d02b      	beq.n	8007b82 <__lshift+0xbe>
 8007b2a:	468a      	mov	sl, r1
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f1c9 0e20 	rsb	lr, r9, #32
 8007b32:	6818      	ldr	r0, [r3, #0]
 8007b34:	fa00 f009 	lsl.w	r0, r0, r9
 8007b38:	4310      	orrs	r0, r2
 8007b3a:	f84a 0b04 	str.w	r0, [sl], #4
 8007b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b42:	459c      	cmp	ip, r3
 8007b44:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b48:	d8f3      	bhi.n	8007b32 <__lshift+0x6e>
 8007b4a:	ebac 0304 	sub.w	r3, ip, r4
 8007b4e:	3b15      	subs	r3, #21
 8007b50:	f023 0303 	bic.w	r3, r3, #3
 8007b54:	3304      	adds	r3, #4
 8007b56:	f104 0015 	add.w	r0, r4, #21
 8007b5a:	4584      	cmp	ip, r0
 8007b5c:	bf38      	it	cc
 8007b5e:	2304      	movcc	r3, #4
 8007b60:	50ca      	str	r2, [r1, r3]
 8007b62:	b10a      	cbz	r2, 8007b68 <__lshift+0xa4>
 8007b64:	f108 0602 	add.w	r6, r8, #2
 8007b68:	3e01      	subs	r6, #1
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	612e      	str	r6, [r5, #16]
 8007b70:	f7ff fd90 	bl	8007694 <_Bfree>
 8007b74:	4628      	mov	r0, r5
 8007b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b7e:	3301      	adds	r3, #1
 8007b80:	e7c5      	b.n	8007b0e <__lshift+0x4a>
 8007b82:	3904      	subs	r1, #4
 8007b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b88:	459c      	cmp	ip, r3
 8007b8a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b8e:	d8f9      	bhi.n	8007b84 <__lshift+0xc0>
 8007b90:	e7ea      	b.n	8007b68 <__lshift+0xa4>
 8007b92:	bf00      	nop
 8007b94:	08008990 	.word	0x08008990
 8007b98:	08008a18 	.word	0x08008a18

08007b9c <__mcmp>:
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	690a      	ldr	r2, [r1, #16]
 8007ba0:	6900      	ldr	r0, [r0, #16]
 8007ba2:	b530      	push	{r4, r5, lr}
 8007ba4:	1a80      	subs	r0, r0, r2
 8007ba6:	d10d      	bne.n	8007bc4 <__mcmp+0x28>
 8007ba8:	3314      	adds	r3, #20
 8007baa:	3114      	adds	r1, #20
 8007bac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007bb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007bb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007bb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007bbc:	4295      	cmp	r5, r2
 8007bbe:	d002      	beq.n	8007bc6 <__mcmp+0x2a>
 8007bc0:	d304      	bcc.n	8007bcc <__mcmp+0x30>
 8007bc2:	2001      	movs	r0, #1
 8007bc4:	bd30      	pop	{r4, r5, pc}
 8007bc6:	42a3      	cmp	r3, r4
 8007bc8:	d3f4      	bcc.n	8007bb4 <__mcmp+0x18>
 8007bca:	e7fb      	b.n	8007bc4 <__mcmp+0x28>
 8007bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd0:	e7f8      	b.n	8007bc4 <__mcmp+0x28>
	...

08007bd4 <__mdiff>:
 8007bd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd8:	460d      	mov	r5, r1
 8007bda:	4607      	mov	r7, r0
 8007bdc:	4611      	mov	r1, r2
 8007bde:	4628      	mov	r0, r5
 8007be0:	4614      	mov	r4, r2
 8007be2:	f7ff ffdb 	bl	8007b9c <__mcmp>
 8007be6:	1e06      	subs	r6, r0, #0
 8007be8:	d111      	bne.n	8007c0e <__mdiff+0x3a>
 8007bea:	4631      	mov	r1, r6
 8007bec:	4638      	mov	r0, r7
 8007bee:	f7ff fd11 	bl	8007614 <_Balloc>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	b928      	cbnz	r0, 8007c02 <__mdiff+0x2e>
 8007bf6:	f240 2137 	movw	r1, #567	; 0x237
 8007bfa:	4b3a      	ldr	r3, [pc, #232]	; (8007ce4 <__mdiff+0x110>)
 8007bfc:	483a      	ldr	r0, [pc, #232]	; (8007ce8 <__mdiff+0x114>)
 8007bfe:	f000 fdd3 	bl	80087a8 <__assert_func>
 8007c02:	2301      	movs	r3, #1
 8007c04:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007c08:	4610      	mov	r0, r2
 8007c0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0e:	bfa4      	itt	ge
 8007c10:	4623      	movge	r3, r4
 8007c12:	462c      	movge	r4, r5
 8007c14:	4638      	mov	r0, r7
 8007c16:	6861      	ldr	r1, [r4, #4]
 8007c18:	bfa6      	itte	ge
 8007c1a:	461d      	movge	r5, r3
 8007c1c:	2600      	movge	r6, #0
 8007c1e:	2601      	movlt	r6, #1
 8007c20:	f7ff fcf8 	bl	8007614 <_Balloc>
 8007c24:	4602      	mov	r2, r0
 8007c26:	b918      	cbnz	r0, 8007c30 <__mdiff+0x5c>
 8007c28:	f240 2145 	movw	r1, #581	; 0x245
 8007c2c:	4b2d      	ldr	r3, [pc, #180]	; (8007ce4 <__mdiff+0x110>)
 8007c2e:	e7e5      	b.n	8007bfc <__mdiff+0x28>
 8007c30:	f102 0814 	add.w	r8, r2, #20
 8007c34:	46c2      	mov	sl, r8
 8007c36:	f04f 0c00 	mov.w	ip, #0
 8007c3a:	6927      	ldr	r7, [r4, #16]
 8007c3c:	60c6      	str	r6, [r0, #12]
 8007c3e:	692e      	ldr	r6, [r5, #16]
 8007c40:	f104 0014 	add.w	r0, r4, #20
 8007c44:	f105 0914 	add.w	r9, r5, #20
 8007c48:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007c4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007c50:	3410      	adds	r4, #16
 8007c52:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007c56:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c5a:	fa1f f18b 	uxth.w	r1, fp
 8007c5e:	4461      	add	r1, ip
 8007c60:	fa1f fc83 	uxth.w	ip, r3
 8007c64:	0c1b      	lsrs	r3, r3, #16
 8007c66:	eba1 010c 	sub.w	r1, r1, ip
 8007c6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007c6e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007c72:	b289      	uxth	r1, r1
 8007c74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007c78:	454e      	cmp	r6, r9
 8007c7a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007c7e:	f84a 1b04 	str.w	r1, [sl], #4
 8007c82:	d8e6      	bhi.n	8007c52 <__mdiff+0x7e>
 8007c84:	1b73      	subs	r3, r6, r5
 8007c86:	3b15      	subs	r3, #21
 8007c88:	f023 0303 	bic.w	r3, r3, #3
 8007c8c:	3515      	adds	r5, #21
 8007c8e:	3304      	adds	r3, #4
 8007c90:	42ae      	cmp	r6, r5
 8007c92:	bf38      	it	cc
 8007c94:	2304      	movcc	r3, #4
 8007c96:	4418      	add	r0, r3
 8007c98:	4443      	add	r3, r8
 8007c9a:	461e      	mov	r6, r3
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	4575      	cmp	r5, lr
 8007ca0:	d30e      	bcc.n	8007cc0 <__mdiff+0xec>
 8007ca2:	f10e 0103 	add.w	r1, lr, #3
 8007ca6:	1a09      	subs	r1, r1, r0
 8007ca8:	f021 0103 	bic.w	r1, r1, #3
 8007cac:	3803      	subs	r0, #3
 8007cae:	4586      	cmp	lr, r0
 8007cb0:	bf38      	it	cc
 8007cb2:	2100      	movcc	r1, #0
 8007cb4:	440b      	add	r3, r1
 8007cb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cba:	b189      	cbz	r1, 8007ce0 <__mdiff+0x10c>
 8007cbc:	6117      	str	r7, [r2, #16]
 8007cbe:	e7a3      	b.n	8007c08 <__mdiff+0x34>
 8007cc0:	f855 8b04 	ldr.w	r8, [r5], #4
 8007cc4:	fa1f f188 	uxth.w	r1, r8
 8007cc8:	4461      	add	r1, ip
 8007cca:	140c      	asrs	r4, r1, #16
 8007ccc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007cd0:	b289      	uxth	r1, r1
 8007cd2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007cd6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007cda:	f846 1b04 	str.w	r1, [r6], #4
 8007cde:	e7de      	b.n	8007c9e <__mdiff+0xca>
 8007ce0:	3f01      	subs	r7, #1
 8007ce2:	e7e8      	b.n	8007cb6 <__mdiff+0xe2>
 8007ce4:	08008990 	.word	0x08008990
 8007ce8:	08008a18 	.word	0x08008a18

08007cec <__ulp>:
 8007cec:	4b0e      	ldr	r3, [pc, #56]	; (8007d28 <__ulp+0x3c>)
 8007cee:	400b      	ands	r3, r1
 8007cf0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	dc08      	bgt.n	8007d0a <__ulp+0x1e>
 8007cf8:	425b      	negs	r3, r3
 8007cfa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007cfe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007d02:	da04      	bge.n	8007d0e <__ulp+0x22>
 8007d04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d08:	4113      	asrs	r3, r2
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	e008      	b.n	8007d20 <__ulp+0x34>
 8007d0e:	f1a2 0314 	sub.w	r3, r2, #20
 8007d12:	2b1e      	cmp	r3, #30
 8007d14:	bfd6      	itet	le
 8007d16:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007d1a:	2201      	movgt	r2, #1
 8007d1c:	40da      	lsrle	r2, r3
 8007d1e:	2300      	movs	r3, #0
 8007d20:	4619      	mov	r1, r3
 8007d22:	4610      	mov	r0, r2
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	7ff00000 	.word	0x7ff00000

08007d2c <__b2d>:
 8007d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2e:	6905      	ldr	r5, [r0, #16]
 8007d30:	f100 0714 	add.w	r7, r0, #20
 8007d34:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007d38:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007d3c:	1f2e      	subs	r6, r5, #4
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f7ff fd5a 	bl	80077f8 <__hi0bits>
 8007d44:	f1c0 0220 	rsb	r2, r0, #32
 8007d48:	280a      	cmp	r0, #10
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007db8 <__b2d+0x8c>
 8007d50:	600a      	str	r2, [r1, #0]
 8007d52:	dc12      	bgt.n	8007d7a <__b2d+0x4e>
 8007d54:	f1c0 0e0b 	rsb	lr, r0, #11
 8007d58:	fa24 f20e 	lsr.w	r2, r4, lr
 8007d5c:	42b7      	cmp	r7, r6
 8007d5e:	ea42 010c 	orr.w	r1, r2, ip
 8007d62:	bf2c      	ite	cs
 8007d64:	2200      	movcs	r2, #0
 8007d66:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007d6a:	3315      	adds	r3, #21
 8007d6c:	fa04 f303 	lsl.w	r3, r4, r3
 8007d70:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d74:	431a      	orrs	r2, r3
 8007d76:	4610      	mov	r0, r2
 8007d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d7a:	42b7      	cmp	r7, r6
 8007d7c:	bf2e      	itee	cs
 8007d7e:	2200      	movcs	r2, #0
 8007d80:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007d84:	f1a5 0608 	subcc.w	r6, r5, #8
 8007d88:	3b0b      	subs	r3, #11
 8007d8a:	d012      	beq.n	8007db2 <__b2d+0x86>
 8007d8c:	f1c3 0520 	rsb	r5, r3, #32
 8007d90:	fa22 f105 	lsr.w	r1, r2, r5
 8007d94:	409c      	lsls	r4, r3
 8007d96:	430c      	orrs	r4, r1
 8007d98:	42be      	cmp	r6, r7
 8007d9a:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007d9e:	bf94      	ite	ls
 8007da0:	2400      	movls	r4, #0
 8007da2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007da6:	409a      	lsls	r2, r3
 8007da8:	40ec      	lsrs	r4, r5
 8007daa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007dae:	4322      	orrs	r2, r4
 8007db0:	e7e1      	b.n	8007d76 <__b2d+0x4a>
 8007db2:	ea44 010c 	orr.w	r1, r4, ip
 8007db6:	e7de      	b.n	8007d76 <__b2d+0x4a>
 8007db8:	3ff00000 	.word	0x3ff00000

08007dbc <__d2b>:
 8007dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	4617      	mov	r7, r2
 8007dc2:	461c      	mov	r4, r3
 8007dc4:	9e08      	ldr	r6, [sp, #32]
 8007dc6:	f7ff fc25 	bl	8007614 <_Balloc>
 8007dca:	4605      	mov	r5, r0
 8007dcc:	b930      	cbnz	r0, 8007ddc <__d2b+0x20>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	f240 310f 	movw	r1, #783	; 0x30f
 8007dd4:	4b22      	ldr	r3, [pc, #136]	; (8007e60 <__d2b+0xa4>)
 8007dd6:	4823      	ldr	r0, [pc, #140]	; (8007e64 <__d2b+0xa8>)
 8007dd8:	f000 fce6 	bl	80087a8 <__assert_func>
 8007ddc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007de0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007de4:	bb24      	cbnz	r4, 8007e30 <__d2b+0x74>
 8007de6:	2f00      	cmp	r7, #0
 8007de8:	9301      	str	r3, [sp, #4]
 8007dea:	d026      	beq.n	8007e3a <__d2b+0x7e>
 8007dec:	4668      	mov	r0, sp
 8007dee:	9700      	str	r7, [sp, #0]
 8007df0:	f7ff fd22 	bl	8007838 <__lo0bits>
 8007df4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007df8:	b1e8      	cbz	r0, 8007e36 <__d2b+0x7a>
 8007dfa:	f1c0 0320 	rsb	r3, r0, #32
 8007dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007e02:	430b      	orrs	r3, r1
 8007e04:	40c2      	lsrs	r2, r0
 8007e06:	616b      	str	r3, [r5, #20]
 8007e08:	9201      	str	r2, [sp, #4]
 8007e0a:	9b01      	ldr	r3, [sp, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	bf14      	ite	ne
 8007e10:	2102      	movne	r1, #2
 8007e12:	2101      	moveq	r1, #1
 8007e14:	61ab      	str	r3, [r5, #24]
 8007e16:	6129      	str	r1, [r5, #16]
 8007e18:	b1bc      	cbz	r4, 8007e4a <__d2b+0x8e>
 8007e1a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007e1e:	4404      	add	r4, r0
 8007e20:	6034      	str	r4, [r6, #0]
 8007e22:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e28:	6018      	str	r0, [r3, #0]
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	b003      	add	sp, #12
 8007e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e34:	e7d7      	b.n	8007de6 <__d2b+0x2a>
 8007e36:	6169      	str	r1, [r5, #20]
 8007e38:	e7e7      	b.n	8007e0a <__d2b+0x4e>
 8007e3a:	a801      	add	r0, sp, #4
 8007e3c:	f7ff fcfc 	bl	8007838 <__lo0bits>
 8007e40:	9b01      	ldr	r3, [sp, #4]
 8007e42:	2101      	movs	r1, #1
 8007e44:	616b      	str	r3, [r5, #20]
 8007e46:	3020      	adds	r0, #32
 8007e48:	e7e5      	b.n	8007e16 <__d2b+0x5a>
 8007e4a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e4e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007e52:	6030      	str	r0, [r6, #0]
 8007e54:	6918      	ldr	r0, [r3, #16]
 8007e56:	f7ff fccf 	bl	80077f8 <__hi0bits>
 8007e5a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007e5e:	e7e2      	b.n	8007e26 <__d2b+0x6a>
 8007e60:	08008990 	.word	0x08008990
 8007e64:	08008a18 	.word	0x08008a18

08007e68 <__ratio>:
 8007e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	4688      	mov	r8, r1
 8007e6e:	4669      	mov	r1, sp
 8007e70:	4681      	mov	r9, r0
 8007e72:	f7ff ff5b 	bl	8007d2c <__b2d>
 8007e76:	460f      	mov	r7, r1
 8007e78:	4604      	mov	r4, r0
 8007e7a:	460d      	mov	r5, r1
 8007e7c:	4640      	mov	r0, r8
 8007e7e:	a901      	add	r1, sp, #4
 8007e80:	f7ff ff54 	bl	8007d2c <__b2d>
 8007e84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e88:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007e8c:	468b      	mov	fp, r1
 8007e8e:	eba3 0c02 	sub.w	ip, r3, r2
 8007e92:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007e96:	1a9b      	subs	r3, r3, r2
 8007e98:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	bfd5      	itete	le
 8007ea0:	460a      	movle	r2, r1
 8007ea2:	462a      	movgt	r2, r5
 8007ea4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007ea8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007eac:	bfd8      	it	le
 8007eae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007eb2:	465b      	mov	r3, fp
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	4639      	mov	r1, r7
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f7f8 fd4f 	bl	800095c <__aeabi_ddiv>
 8007ebe:	b003      	add	sp, #12
 8007ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ec4 <__copybits>:
 8007ec4:	3901      	subs	r1, #1
 8007ec6:	b570      	push	{r4, r5, r6, lr}
 8007ec8:	1149      	asrs	r1, r1, #5
 8007eca:	6914      	ldr	r4, [r2, #16]
 8007ecc:	3101      	adds	r1, #1
 8007ece:	f102 0314 	add.w	r3, r2, #20
 8007ed2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ed6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007eda:	1f05      	subs	r5, r0, #4
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	d30c      	bcc.n	8007efa <__copybits+0x36>
 8007ee0:	1aa3      	subs	r3, r4, r2
 8007ee2:	3b11      	subs	r3, #17
 8007ee4:	f023 0303 	bic.w	r3, r3, #3
 8007ee8:	3211      	adds	r2, #17
 8007eea:	42a2      	cmp	r2, r4
 8007eec:	bf88      	it	hi
 8007eee:	2300      	movhi	r3, #0
 8007ef0:	4418      	add	r0, r3
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4288      	cmp	r0, r1
 8007ef6:	d305      	bcc.n	8007f04 <__copybits+0x40>
 8007ef8:	bd70      	pop	{r4, r5, r6, pc}
 8007efa:	f853 6b04 	ldr.w	r6, [r3], #4
 8007efe:	f845 6f04 	str.w	r6, [r5, #4]!
 8007f02:	e7eb      	b.n	8007edc <__copybits+0x18>
 8007f04:	f840 3b04 	str.w	r3, [r0], #4
 8007f08:	e7f4      	b.n	8007ef4 <__copybits+0x30>

08007f0a <__any_on>:
 8007f0a:	f100 0214 	add.w	r2, r0, #20
 8007f0e:	6900      	ldr	r0, [r0, #16]
 8007f10:	114b      	asrs	r3, r1, #5
 8007f12:	4298      	cmp	r0, r3
 8007f14:	b510      	push	{r4, lr}
 8007f16:	db11      	blt.n	8007f3c <__any_on+0x32>
 8007f18:	dd0a      	ble.n	8007f30 <__any_on+0x26>
 8007f1a:	f011 011f 	ands.w	r1, r1, #31
 8007f1e:	d007      	beq.n	8007f30 <__any_on+0x26>
 8007f20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007f24:	fa24 f001 	lsr.w	r0, r4, r1
 8007f28:	fa00 f101 	lsl.w	r1, r0, r1
 8007f2c:	428c      	cmp	r4, r1
 8007f2e:	d10b      	bne.n	8007f48 <__any_on+0x3e>
 8007f30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d803      	bhi.n	8007f40 <__any_on+0x36>
 8007f38:	2000      	movs	r0, #0
 8007f3a:	bd10      	pop	{r4, pc}
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	e7f7      	b.n	8007f30 <__any_on+0x26>
 8007f40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f44:	2900      	cmp	r1, #0
 8007f46:	d0f5      	beq.n	8007f34 <__any_on+0x2a>
 8007f48:	2001      	movs	r0, #1
 8007f4a:	e7f6      	b.n	8007f3a <__any_on+0x30>

08007f4c <__ascii_wctomb>:
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	4608      	mov	r0, r1
 8007f50:	b141      	cbz	r1, 8007f64 <__ascii_wctomb+0x18>
 8007f52:	2aff      	cmp	r2, #255	; 0xff
 8007f54:	d904      	bls.n	8007f60 <__ascii_wctomb+0x14>
 8007f56:	228a      	movs	r2, #138	; 0x8a
 8007f58:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	4770      	bx	lr
 8007f60:	2001      	movs	r0, #1
 8007f62:	700a      	strb	r2, [r1, #0]
 8007f64:	4770      	bx	lr

08007f66 <__sfputc_r>:
 8007f66:	6893      	ldr	r3, [r2, #8]
 8007f68:	b410      	push	{r4}
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	6093      	str	r3, [r2, #8]
 8007f70:	da07      	bge.n	8007f82 <__sfputc_r+0x1c>
 8007f72:	6994      	ldr	r4, [r2, #24]
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	db01      	blt.n	8007f7c <__sfputc_r+0x16>
 8007f78:	290a      	cmp	r1, #10
 8007f7a:	d102      	bne.n	8007f82 <__sfputc_r+0x1c>
 8007f7c:	bc10      	pop	{r4}
 8007f7e:	f7fe bdb4 	b.w	8006aea <__swbuf_r>
 8007f82:	6813      	ldr	r3, [r2, #0]
 8007f84:	1c58      	adds	r0, r3, #1
 8007f86:	6010      	str	r0, [r2, #0]
 8007f88:	7019      	strb	r1, [r3, #0]
 8007f8a:	4608      	mov	r0, r1
 8007f8c:	bc10      	pop	{r4}
 8007f8e:	4770      	bx	lr

08007f90 <__sfputs_r>:
 8007f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f92:	4606      	mov	r6, r0
 8007f94:	460f      	mov	r7, r1
 8007f96:	4614      	mov	r4, r2
 8007f98:	18d5      	adds	r5, r2, r3
 8007f9a:	42ac      	cmp	r4, r5
 8007f9c:	d101      	bne.n	8007fa2 <__sfputs_r+0x12>
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	e007      	b.n	8007fb2 <__sfputs_r+0x22>
 8007fa2:	463a      	mov	r2, r7
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007faa:	f7ff ffdc 	bl	8007f66 <__sfputc_r>
 8007fae:	1c43      	adds	r3, r0, #1
 8007fb0:	d1f3      	bne.n	8007f9a <__sfputs_r+0xa>
 8007fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fb4 <_vfiprintf_r>:
 8007fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb8:	460d      	mov	r5, r1
 8007fba:	4614      	mov	r4, r2
 8007fbc:	4698      	mov	r8, r3
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	b09d      	sub	sp, #116	; 0x74
 8007fc2:	b118      	cbz	r0, 8007fcc <_vfiprintf_r+0x18>
 8007fc4:	6a03      	ldr	r3, [r0, #32]
 8007fc6:	b90b      	cbnz	r3, 8007fcc <_vfiprintf_r+0x18>
 8007fc8:	f7fe fca8 	bl	800691c <__sinit>
 8007fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fce:	07d9      	lsls	r1, r3, #31
 8007fd0:	d405      	bmi.n	8007fde <_vfiprintf_r+0x2a>
 8007fd2:	89ab      	ldrh	r3, [r5, #12]
 8007fd4:	059a      	lsls	r2, r3, #22
 8007fd6:	d402      	bmi.n	8007fde <_vfiprintf_r+0x2a>
 8007fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fda:	f7fe fea5 	bl	8006d28 <__retarget_lock_acquire_recursive>
 8007fde:	89ab      	ldrh	r3, [r5, #12]
 8007fe0:	071b      	lsls	r3, r3, #28
 8007fe2:	d501      	bpl.n	8007fe8 <_vfiprintf_r+0x34>
 8007fe4:	692b      	ldr	r3, [r5, #16]
 8007fe6:	b99b      	cbnz	r3, 8008010 <_vfiprintf_r+0x5c>
 8007fe8:	4629      	mov	r1, r5
 8007fea:	4630      	mov	r0, r6
 8007fec:	f7fe fdba 	bl	8006b64 <__swsetup_r>
 8007ff0:	b170      	cbz	r0, 8008010 <_vfiprintf_r+0x5c>
 8007ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ff4:	07dc      	lsls	r4, r3, #31
 8007ff6:	d504      	bpl.n	8008002 <_vfiprintf_r+0x4e>
 8007ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffc:	b01d      	add	sp, #116	; 0x74
 8007ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008002:	89ab      	ldrh	r3, [r5, #12]
 8008004:	0598      	lsls	r0, r3, #22
 8008006:	d4f7      	bmi.n	8007ff8 <_vfiprintf_r+0x44>
 8008008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800800a:	f7fe fe8e 	bl	8006d2a <__retarget_lock_release_recursive>
 800800e:	e7f3      	b.n	8007ff8 <_vfiprintf_r+0x44>
 8008010:	2300      	movs	r3, #0
 8008012:	9309      	str	r3, [sp, #36]	; 0x24
 8008014:	2320      	movs	r3, #32
 8008016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800801a:	2330      	movs	r3, #48	; 0x30
 800801c:	f04f 0901 	mov.w	r9, #1
 8008020:	f8cd 800c 	str.w	r8, [sp, #12]
 8008024:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80081d4 <_vfiprintf_r+0x220>
 8008028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800802c:	4623      	mov	r3, r4
 800802e:	469a      	mov	sl, r3
 8008030:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008034:	b10a      	cbz	r2, 800803a <_vfiprintf_r+0x86>
 8008036:	2a25      	cmp	r2, #37	; 0x25
 8008038:	d1f9      	bne.n	800802e <_vfiprintf_r+0x7a>
 800803a:	ebba 0b04 	subs.w	fp, sl, r4
 800803e:	d00b      	beq.n	8008058 <_vfiprintf_r+0xa4>
 8008040:	465b      	mov	r3, fp
 8008042:	4622      	mov	r2, r4
 8008044:	4629      	mov	r1, r5
 8008046:	4630      	mov	r0, r6
 8008048:	f7ff ffa2 	bl	8007f90 <__sfputs_r>
 800804c:	3001      	adds	r0, #1
 800804e:	f000 80a9 	beq.w	80081a4 <_vfiprintf_r+0x1f0>
 8008052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008054:	445a      	add	r2, fp
 8008056:	9209      	str	r2, [sp, #36]	; 0x24
 8008058:	f89a 3000 	ldrb.w	r3, [sl]
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 80a1 	beq.w	80081a4 <_vfiprintf_r+0x1f0>
 8008062:	2300      	movs	r3, #0
 8008064:	f04f 32ff 	mov.w	r2, #4294967295
 8008068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800806c:	f10a 0a01 	add.w	sl, sl, #1
 8008070:	9304      	str	r3, [sp, #16]
 8008072:	9307      	str	r3, [sp, #28]
 8008074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008078:	931a      	str	r3, [sp, #104]	; 0x68
 800807a:	4654      	mov	r4, sl
 800807c:	2205      	movs	r2, #5
 800807e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008082:	4854      	ldr	r0, [pc, #336]	; (80081d4 <_vfiprintf_r+0x220>)
 8008084:	f000 fb82 	bl	800878c <memchr>
 8008088:	9a04      	ldr	r2, [sp, #16]
 800808a:	b9d8      	cbnz	r0, 80080c4 <_vfiprintf_r+0x110>
 800808c:	06d1      	lsls	r1, r2, #27
 800808e:	bf44      	itt	mi
 8008090:	2320      	movmi	r3, #32
 8008092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008096:	0713      	lsls	r3, r2, #28
 8008098:	bf44      	itt	mi
 800809a:	232b      	movmi	r3, #43	; 0x2b
 800809c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080a0:	f89a 3000 	ldrb.w	r3, [sl]
 80080a4:	2b2a      	cmp	r3, #42	; 0x2a
 80080a6:	d015      	beq.n	80080d4 <_vfiprintf_r+0x120>
 80080a8:	4654      	mov	r4, sl
 80080aa:	2000      	movs	r0, #0
 80080ac:	f04f 0c0a 	mov.w	ip, #10
 80080b0:	9a07      	ldr	r2, [sp, #28]
 80080b2:	4621      	mov	r1, r4
 80080b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080b8:	3b30      	subs	r3, #48	; 0x30
 80080ba:	2b09      	cmp	r3, #9
 80080bc:	d94d      	bls.n	800815a <_vfiprintf_r+0x1a6>
 80080be:	b1b0      	cbz	r0, 80080ee <_vfiprintf_r+0x13a>
 80080c0:	9207      	str	r2, [sp, #28]
 80080c2:	e014      	b.n	80080ee <_vfiprintf_r+0x13a>
 80080c4:	eba0 0308 	sub.w	r3, r0, r8
 80080c8:	fa09 f303 	lsl.w	r3, r9, r3
 80080cc:	4313      	orrs	r3, r2
 80080ce:	46a2      	mov	sl, r4
 80080d0:	9304      	str	r3, [sp, #16]
 80080d2:	e7d2      	b.n	800807a <_vfiprintf_r+0xc6>
 80080d4:	9b03      	ldr	r3, [sp, #12]
 80080d6:	1d19      	adds	r1, r3, #4
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	9103      	str	r1, [sp, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	bfbb      	ittet	lt
 80080e0:	425b      	neglt	r3, r3
 80080e2:	f042 0202 	orrlt.w	r2, r2, #2
 80080e6:	9307      	strge	r3, [sp, #28]
 80080e8:	9307      	strlt	r3, [sp, #28]
 80080ea:	bfb8      	it	lt
 80080ec:	9204      	strlt	r2, [sp, #16]
 80080ee:	7823      	ldrb	r3, [r4, #0]
 80080f0:	2b2e      	cmp	r3, #46	; 0x2e
 80080f2:	d10c      	bne.n	800810e <_vfiprintf_r+0x15a>
 80080f4:	7863      	ldrb	r3, [r4, #1]
 80080f6:	2b2a      	cmp	r3, #42	; 0x2a
 80080f8:	d134      	bne.n	8008164 <_vfiprintf_r+0x1b0>
 80080fa:	9b03      	ldr	r3, [sp, #12]
 80080fc:	3402      	adds	r4, #2
 80080fe:	1d1a      	adds	r2, r3, #4
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	9203      	str	r2, [sp, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	bfb8      	it	lt
 8008108:	f04f 33ff 	movlt.w	r3, #4294967295
 800810c:	9305      	str	r3, [sp, #20]
 800810e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80081d8 <_vfiprintf_r+0x224>
 8008112:	2203      	movs	r2, #3
 8008114:	4650      	mov	r0, sl
 8008116:	7821      	ldrb	r1, [r4, #0]
 8008118:	f000 fb38 	bl	800878c <memchr>
 800811c:	b138      	cbz	r0, 800812e <_vfiprintf_r+0x17a>
 800811e:	2240      	movs	r2, #64	; 0x40
 8008120:	9b04      	ldr	r3, [sp, #16]
 8008122:	eba0 000a 	sub.w	r0, r0, sl
 8008126:	4082      	lsls	r2, r0
 8008128:	4313      	orrs	r3, r2
 800812a:	3401      	adds	r4, #1
 800812c:	9304      	str	r3, [sp, #16]
 800812e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008132:	2206      	movs	r2, #6
 8008134:	4829      	ldr	r0, [pc, #164]	; (80081dc <_vfiprintf_r+0x228>)
 8008136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800813a:	f000 fb27 	bl	800878c <memchr>
 800813e:	2800      	cmp	r0, #0
 8008140:	d03f      	beq.n	80081c2 <_vfiprintf_r+0x20e>
 8008142:	4b27      	ldr	r3, [pc, #156]	; (80081e0 <_vfiprintf_r+0x22c>)
 8008144:	bb1b      	cbnz	r3, 800818e <_vfiprintf_r+0x1da>
 8008146:	9b03      	ldr	r3, [sp, #12]
 8008148:	3307      	adds	r3, #7
 800814a:	f023 0307 	bic.w	r3, r3, #7
 800814e:	3308      	adds	r3, #8
 8008150:	9303      	str	r3, [sp, #12]
 8008152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008154:	443b      	add	r3, r7
 8008156:	9309      	str	r3, [sp, #36]	; 0x24
 8008158:	e768      	b.n	800802c <_vfiprintf_r+0x78>
 800815a:	460c      	mov	r4, r1
 800815c:	2001      	movs	r0, #1
 800815e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008162:	e7a6      	b.n	80080b2 <_vfiprintf_r+0xfe>
 8008164:	2300      	movs	r3, #0
 8008166:	f04f 0c0a 	mov.w	ip, #10
 800816a:	4619      	mov	r1, r3
 800816c:	3401      	adds	r4, #1
 800816e:	9305      	str	r3, [sp, #20]
 8008170:	4620      	mov	r0, r4
 8008172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008176:	3a30      	subs	r2, #48	; 0x30
 8008178:	2a09      	cmp	r2, #9
 800817a:	d903      	bls.n	8008184 <_vfiprintf_r+0x1d0>
 800817c:	2b00      	cmp	r3, #0
 800817e:	d0c6      	beq.n	800810e <_vfiprintf_r+0x15a>
 8008180:	9105      	str	r1, [sp, #20]
 8008182:	e7c4      	b.n	800810e <_vfiprintf_r+0x15a>
 8008184:	4604      	mov	r4, r0
 8008186:	2301      	movs	r3, #1
 8008188:	fb0c 2101 	mla	r1, ip, r1, r2
 800818c:	e7f0      	b.n	8008170 <_vfiprintf_r+0x1bc>
 800818e:	ab03      	add	r3, sp, #12
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	462a      	mov	r2, r5
 8008194:	4630      	mov	r0, r6
 8008196:	4b13      	ldr	r3, [pc, #76]	; (80081e4 <_vfiprintf_r+0x230>)
 8008198:	a904      	add	r1, sp, #16
 800819a:	f3af 8000 	nop.w
 800819e:	4607      	mov	r7, r0
 80081a0:	1c78      	adds	r0, r7, #1
 80081a2:	d1d6      	bne.n	8008152 <_vfiprintf_r+0x19e>
 80081a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081a6:	07d9      	lsls	r1, r3, #31
 80081a8:	d405      	bmi.n	80081b6 <_vfiprintf_r+0x202>
 80081aa:	89ab      	ldrh	r3, [r5, #12]
 80081ac:	059a      	lsls	r2, r3, #22
 80081ae:	d402      	bmi.n	80081b6 <_vfiprintf_r+0x202>
 80081b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081b2:	f7fe fdba 	bl	8006d2a <__retarget_lock_release_recursive>
 80081b6:	89ab      	ldrh	r3, [r5, #12]
 80081b8:	065b      	lsls	r3, r3, #25
 80081ba:	f53f af1d 	bmi.w	8007ff8 <_vfiprintf_r+0x44>
 80081be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081c0:	e71c      	b.n	8007ffc <_vfiprintf_r+0x48>
 80081c2:	ab03      	add	r3, sp, #12
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	462a      	mov	r2, r5
 80081c8:	4630      	mov	r0, r6
 80081ca:	4b06      	ldr	r3, [pc, #24]	; (80081e4 <_vfiprintf_r+0x230>)
 80081cc:	a904      	add	r1, sp, #16
 80081ce:	f000 f87d 	bl	80082cc <_printf_i>
 80081d2:	e7e4      	b.n	800819e <_vfiprintf_r+0x1ea>
 80081d4:	08008c75 	.word	0x08008c75
 80081d8:	08008c7b 	.word	0x08008c7b
 80081dc:	08008c7f 	.word	0x08008c7f
 80081e0:	00000000 	.word	0x00000000
 80081e4:	08007f91 	.word	0x08007f91

080081e8 <_printf_common>:
 80081e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081ec:	4616      	mov	r6, r2
 80081ee:	4699      	mov	r9, r3
 80081f0:	688a      	ldr	r2, [r1, #8]
 80081f2:	690b      	ldr	r3, [r1, #16]
 80081f4:	4607      	mov	r7, r0
 80081f6:	4293      	cmp	r3, r2
 80081f8:	bfb8      	it	lt
 80081fa:	4613      	movlt	r3, r2
 80081fc:	6033      	str	r3, [r6, #0]
 80081fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008202:	460c      	mov	r4, r1
 8008204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008208:	b10a      	cbz	r2, 800820e <_printf_common+0x26>
 800820a:	3301      	adds	r3, #1
 800820c:	6033      	str	r3, [r6, #0]
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	0699      	lsls	r1, r3, #26
 8008212:	bf42      	ittt	mi
 8008214:	6833      	ldrmi	r3, [r6, #0]
 8008216:	3302      	addmi	r3, #2
 8008218:	6033      	strmi	r3, [r6, #0]
 800821a:	6825      	ldr	r5, [r4, #0]
 800821c:	f015 0506 	ands.w	r5, r5, #6
 8008220:	d106      	bne.n	8008230 <_printf_common+0x48>
 8008222:	f104 0a19 	add.w	sl, r4, #25
 8008226:	68e3      	ldr	r3, [r4, #12]
 8008228:	6832      	ldr	r2, [r6, #0]
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	42ab      	cmp	r3, r5
 800822e:	dc2b      	bgt.n	8008288 <_printf_common+0xa0>
 8008230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008234:	1e13      	subs	r3, r2, #0
 8008236:	6822      	ldr	r2, [r4, #0]
 8008238:	bf18      	it	ne
 800823a:	2301      	movne	r3, #1
 800823c:	0692      	lsls	r2, r2, #26
 800823e:	d430      	bmi.n	80082a2 <_printf_common+0xba>
 8008240:	4649      	mov	r1, r9
 8008242:	4638      	mov	r0, r7
 8008244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008248:	47c0      	blx	r8
 800824a:	3001      	adds	r0, #1
 800824c:	d023      	beq.n	8008296 <_printf_common+0xae>
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	6922      	ldr	r2, [r4, #16]
 8008252:	f003 0306 	and.w	r3, r3, #6
 8008256:	2b04      	cmp	r3, #4
 8008258:	bf14      	ite	ne
 800825a:	2500      	movne	r5, #0
 800825c:	6833      	ldreq	r3, [r6, #0]
 800825e:	f04f 0600 	mov.w	r6, #0
 8008262:	bf08      	it	eq
 8008264:	68e5      	ldreq	r5, [r4, #12]
 8008266:	f104 041a 	add.w	r4, r4, #26
 800826a:	bf08      	it	eq
 800826c:	1aed      	subeq	r5, r5, r3
 800826e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008272:	bf08      	it	eq
 8008274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008278:	4293      	cmp	r3, r2
 800827a:	bfc4      	itt	gt
 800827c:	1a9b      	subgt	r3, r3, r2
 800827e:	18ed      	addgt	r5, r5, r3
 8008280:	42b5      	cmp	r5, r6
 8008282:	d11a      	bne.n	80082ba <_printf_common+0xd2>
 8008284:	2000      	movs	r0, #0
 8008286:	e008      	b.n	800829a <_printf_common+0xb2>
 8008288:	2301      	movs	r3, #1
 800828a:	4652      	mov	r2, sl
 800828c:	4649      	mov	r1, r9
 800828e:	4638      	mov	r0, r7
 8008290:	47c0      	blx	r8
 8008292:	3001      	adds	r0, #1
 8008294:	d103      	bne.n	800829e <_printf_common+0xb6>
 8008296:	f04f 30ff 	mov.w	r0, #4294967295
 800829a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829e:	3501      	adds	r5, #1
 80082a0:	e7c1      	b.n	8008226 <_printf_common+0x3e>
 80082a2:	2030      	movs	r0, #48	; 0x30
 80082a4:	18e1      	adds	r1, r4, r3
 80082a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082b0:	4422      	add	r2, r4
 80082b2:	3302      	adds	r3, #2
 80082b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082b8:	e7c2      	b.n	8008240 <_printf_common+0x58>
 80082ba:	2301      	movs	r3, #1
 80082bc:	4622      	mov	r2, r4
 80082be:	4649      	mov	r1, r9
 80082c0:	4638      	mov	r0, r7
 80082c2:	47c0      	blx	r8
 80082c4:	3001      	adds	r0, #1
 80082c6:	d0e6      	beq.n	8008296 <_printf_common+0xae>
 80082c8:	3601      	adds	r6, #1
 80082ca:	e7d9      	b.n	8008280 <_printf_common+0x98>

080082cc <_printf_i>:
 80082cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082d0:	7e0f      	ldrb	r7, [r1, #24]
 80082d2:	4691      	mov	r9, r2
 80082d4:	2f78      	cmp	r7, #120	; 0x78
 80082d6:	4680      	mov	r8, r0
 80082d8:	460c      	mov	r4, r1
 80082da:	469a      	mov	sl, r3
 80082dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082e2:	d807      	bhi.n	80082f4 <_printf_i+0x28>
 80082e4:	2f62      	cmp	r7, #98	; 0x62
 80082e6:	d80a      	bhi.n	80082fe <_printf_i+0x32>
 80082e8:	2f00      	cmp	r7, #0
 80082ea:	f000 80d5 	beq.w	8008498 <_printf_i+0x1cc>
 80082ee:	2f58      	cmp	r7, #88	; 0x58
 80082f0:	f000 80c1 	beq.w	8008476 <_printf_i+0x1aa>
 80082f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082fc:	e03a      	b.n	8008374 <_printf_i+0xa8>
 80082fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008302:	2b15      	cmp	r3, #21
 8008304:	d8f6      	bhi.n	80082f4 <_printf_i+0x28>
 8008306:	a101      	add	r1, pc, #4	; (adr r1, 800830c <_printf_i+0x40>)
 8008308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800830c:	08008365 	.word	0x08008365
 8008310:	08008379 	.word	0x08008379
 8008314:	080082f5 	.word	0x080082f5
 8008318:	080082f5 	.word	0x080082f5
 800831c:	080082f5 	.word	0x080082f5
 8008320:	080082f5 	.word	0x080082f5
 8008324:	08008379 	.word	0x08008379
 8008328:	080082f5 	.word	0x080082f5
 800832c:	080082f5 	.word	0x080082f5
 8008330:	080082f5 	.word	0x080082f5
 8008334:	080082f5 	.word	0x080082f5
 8008338:	0800847f 	.word	0x0800847f
 800833c:	080083a5 	.word	0x080083a5
 8008340:	08008439 	.word	0x08008439
 8008344:	080082f5 	.word	0x080082f5
 8008348:	080082f5 	.word	0x080082f5
 800834c:	080084a1 	.word	0x080084a1
 8008350:	080082f5 	.word	0x080082f5
 8008354:	080083a5 	.word	0x080083a5
 8008358:	080082f5 	.word	0x080082f5
 800835c:	080082f5 	.word	0x080082f5
 8008360:	08008441 	.word	0x08008441
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	1d1a      	adds	r2, r3, #4
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	602a      	str	r2, [r5, #0]
 800836c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008374:	2301      	movs	r3, #1
 8008376:	e0a0      	b.n	80084ba <_printf_i+0x1ee>
 8008378:	6820      	ldr	r0, [r4, #0]
 800837a:	682b      	ldr	r3, [r5, #0]
 800837c:	0607      	lsls	r7, r0, #24
 800837e:	f103 0104 	add.w	r1, r3, #4
 8008382:	6029      	str	r1, [r5, #0]
 8008384:	d501      	bpl.n	800838a <_printf_i+0xbe>
 8008386:	681e      	ldr	r6, [r3, #0]
 8008388:	e003      	b.n	8008392 <_printf_i+0xc6>
 800838a:	0646      	lsls	r6, r0, #25
 800838c:	d5fb      	bpl.n	8008386 <_printf_i+0xba>
 800838e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008392:	2e00      	cmp	r6, #0
 8008394:	da03      	bge.n	800839e <_printf_i+0xd2>
 8008396:	232d      	movs	r3, #45	; 0x2d
 8008398:	4276      	negs	r6, r6
 800839a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800839e:	230a      	movs	r3, #10
 80083a0:	4859      	ldr	r0, [pc, #356]	; (8008508 <_printf_i+0x23c>)
 80083a2:	e012      	b.n	80083ca <_printf_i+0xfe>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	6820      	ldr	r0, [r4, #0]
 80083a8:	1d19      	adds	r1, r3, #4
 80083aa:	6029      	str	r1, [r5, #0]
 80083ac:	0605      	lsls	r5, r0, #24
 80083ae:	d501      	bpl.n	80083b4 <_printf_i+0xe8>
 80083b0:	681e      	ldr	r6, [r3, #0]
 80083b2:	e002      	b.n	80083ba <_printf_i+0xee>
 80083b4:	0641      	lsls	r1, r0, #25
 80083b6:	d5fb      	bpl.n	80083b0 <_printf_i+0xe4>
 80083b8:	881e      	ldrh	r6, [r3, #0]
 80083ba:	2f6f      	cmp	r7, #111	; 0x6f
 80083bc:	bf0c      	ite	eq
 80083be:	2308      	moveq	r3, #8
 80083c0:	230a      	movne	r3, #10
 80083c2:	4851      	ldr	r0, [pc, #324]	; (8008508 <_printf_i+0x23c>)
 80083c4:	2100      	movs	r1, #0
 80083c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083ca:	6865      	ldr	r5, [r4, #4]
 80083cc:	2d00      	cmp	r5, #0
 80083ce:	bfa8      	it	ge
 80083d0:	6821      	ldrge	r1, [r4, #0]
 80083d2:	60a5      	str	r5, [r4, #8]
 80083d4:	bfa4      	itt	ge
 80083d6:	f021 0104 	bicge.w	r1, r1, #4
 80083da:	6021      	strge	r1, [r4, #0]
 80083dc:	b90e      	cbnz	r6, 80083e2 <_printf_i+0x116>
 80083de:	2d00      	cmp	r5, #0
 80083e0:	d04b      	beq.n	800847a <_printf_i+0x1ae>
 80083e2:	4615      	mov	r5, r2
 80083e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80083e8:	fb03 6711 	mls	r7, r3, r1, r6
 80083ec:	5dc7      	ldrb	r7, [r0, r7]
 80083ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083f2:	4637      	mov	r7, r6
 80083f4:	42bb      	cmp	r3, r7
 80083f6:	460e      	mov	r6, r1
 80083f8:	d9f4      	bls.n	80083e4 <_printf_i+0x118>
 80083fa:	2b08      	cmp	r3, #8
 80083fc:	d10b      	bne.n	8008416 <_printf_i+0x14a>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	07de      	lsls	r6, r3, #31
 8008402:	d508      	bpl.n	8008416 <_printf_i+0x14a>
 8008404:	6923      	ldr	r3, [r4, #16]
 8008406:	6861      	ldr	r1, [r4, #4]
 8008408:	4299      	cmp	r1, r3
 800840a:	bfde      	ittt	le
 800840c:	2330      	movle	r3, #48	; 0x30
 800840e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008412:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008416:	1b52      	subs	r2, r2, r5
 8008418:	6122      	str	r2, [r4, #16]
 800841a:	464b      	mov	r3, r9
 800841c:	4621      	mov	r1, r4
 800841e:	4640      	mov	r0, r8
 8008420:	f8cd a000 	str.w	sl, [sp]
 8008424:	aa03      	add	r2, sp, #12
 8008426:	f7ff fedf 	bl	80081e8 <_printf_common>
 800842a:	3001      	adds	r0, #1
 800842c:	d14a      	bne.n	80084c4 <_printf_i+0x1f8>
 800842e:	f04f 30ff 	mov.w	r0, #4294967295
 8008432:	b004      	add	sp, #16
 8008434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	f043 0320 	orr.w	r3, r3, #32
 800843e:	6023      	str	r3, [r4, #0]
 8008440:	2778      	movs	r7, #120	; 0x78
 8008442:	4832      	ldr	r0, [pc, #200]	; (800850c <_printf_i+0x240>)
 8008444:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	6829      	ldr	r1, [r5, #0]
 800844c:	061f      	lsls	r7, r3, #24
 800844e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008452:	d402      	bmi.n	800845a <_printf_i+0x18e>
 8008454:	065f      	lsls	r7, r3, #25
 8008456:	bf48      	it	mi
 8008458:	b2b6      	uxthmi	r6, r6
 800845a:	07df      	lsls	r7, r3, #31
 800845c:	bf48      	it	mi
 800845e:	f043 0320 	orrmi.w	r3, r3, #32
 8008462:	6029      	str	r1, [r5, #0]
 8008464:	bf48      	it	mi
 8008466:	6023      	strmi	r3, [r4, #0]
 8008468:	b91e      	cbnz	r6, 8008472 <_printf_i+0x1a6>
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	f023 0320 	bic.w	r3, r3, #32
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	2310      	movs	r3, #16
 8008474:	e7a6      	b.n	80083c4 <_printf_i+0xf8>
 8008476:	4824      	ldr	r0, [pc, #144]	; (8008508 <_printf_i+0x23c>)
 8008478:	e7e4      	b.n	8008444 <_printf_i+0x178>
 800847a:	4615      	mov	r5, r2
 800847c:	e7bd      	b.n	80083fa <_printf_i+0x12e>
 800847e:	682b      	ldr	r3, [r5, #0]
 8008480:	6826      	ldr	r6, [r4, #0]
 8008482:	1d18      	adds	r0, r3, #4
 8008484:	6961      	ldr	r1, [r4, #20]
 8008486:	6028      	str	r0, [r5, #0]
 8008488:	0635      	lsls	r5, r6, #24
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	d501      	bpl.n	8008492 <_printf_i+0x1c6>
 800848e:	6019      	str	r1, [r3, #0]
 8008490:	e002      	b.n	8008498 <_printf_i+0x1cc>
 8008492:	0670      	lsls	r0, r6, #25
 8008494:	d5fb      	bpl.n	800848e <_printf_i+0x1c2>
 8008496:	8019      	strh	r1, [r3, #0]
 8008498:	2300      	movs	r3, #0
 800849a:	4615      	mov	r5, r2
 800849c:	6123      	str	r3, [r4, #16]
 800849e:	e7bc      	b.n	800841a <_printf_i+0x14e>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	2100      	movs	r1, #0
 80084a4:	1d1a      	adds	r2, r3, #4
 80084a6:	602a      	str	r2, [r5, #0]
 80084a8:	681d      	ldr	r5, [r3, #0]
 80084aa:	6862      	ldr	r2, [r4, #4]
 80084ac:	4628      	mov	r0, r5
 80084ae:	f000 f96d 	bl	800878c <memchr>
 80084b2:	b108      	cbz	r0, 80084b8 <_printf_i+0x1ec>
 80084b4:	1b40      	subs	r0, r0, r5
 80084b6:	6060      	str	r0, [r4, #4]
 80084b8:	6863      	ldr	r3, [r4, #4]
 80084ba:	6123      	str	r3, [r4, #16]
 80084bc:	2300      	movs	r3, #0
 80084be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084c2:	e7aa      	b.n	800841a <_printf_i+0x14e>
 80084c4:	462a      	mov	r2, r5
 80084c6:	4649      	mov	r1, r9
 80084c8:	4640      	mov	r0, r8
 80084ca:	6923      	ldr	r3, [r4, #16]
 80084cc:	47d0      	blx	sl
 80084ce:	3001      	adds	r0, #1
 80084d0:	d0ad      	beq.n	800842e <_printf_i+0x162>
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	079b      	lsls	r3, r3, #30
 80084d6:	d413      	bmi.n	8008500 <_printf_i+0x234>
 80084d8:	68e0      	ldr	r0, [r4, #12]
 80084da:	9b03      	ldr	r3, [sp, #12]
 80084dc:	4298      	cmp	r0, r3
 80084de:	bfb8      	it	lt
 80084e0:	4618      	movlt	r0, r3
 80084e2:	e7a6      	b.n	8008432 <_printf_i+0x166>
 80084e4:	2301      	movs	r3, #1
 80084e6:	4632      	mov	r2, r6
 80084e8:	4649      	mov	r1, r9
 80084ea:	4640      	mov	r0, r8
 80084ec:	47d0      	blx	sl
 80084ee:	3001      	adds	r0, #1
 80084f0:	d09d      	beq.n	800842e <_printf_i+0x162>
 80084f2:	3501      	adds	r5, #1
 80084f4:	68e3      	ldr	r3, [r4, #12]
 80084f6:	9903      	ldr	r1, [sp, #12]
 80084f8:	1a5b      	subs	r3, r3, r1
 80084fa:	42ab      	cmp	r3, r5
 80084fc:	dcf2      	bgt.n	80084e4 <_printf_i+0x218>
 80084fe:	e7eb      	b.n	80084d8 <_printf_i+0x20c>
 8008500:	2500      	movs	r5, #0
 8008502:	f104 0619 	add.w	r6, r4, #25
 8008506:	e7f5      	b.n	80084f4 <_printf_i+0x228>
 8008508:	08008c86 	.word	0x08008c86
 800850c:	08008c97 	.word	0x08008c97

08008510 <__sflush_r>:
 8008510:	898a      	ldrh	r2, [r1, #12]
 8008512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008514:	4605      	mov	r5, r0
 8008516:	0710      	lsls	r0, r2, #28
 8008518:	460c      	mov	r4, r1
 800851a:	d457      	bmi.n	80085cc <__sflush_r+0xbc>
 800851c:	684b      	ldr	r3, [r1, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	dc04      	bgt.n	800852c <__sflush_r+0x1c>
 8008522:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008524:	2b00      	cmp	r3, #0
 8008526:	dc01      	bgt.n	800852c <__sflush_r+0x1c>
 8008528:	2000      	movs	r0, #0
 800852a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800852c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800852e:	2e00      	cmp	r6, #0
 8008530:	d0fa      	beq.n	8008528 <__sflush_r+0x18>
 8008532:	2300      	movs	r3, #0
 8008534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008538:	682f      	ldr	r7, [r5, #0]
 800853a:	6a21      	ldr	r1, [r4, #32]
 800853c:	602b      	str	r3, [r5, #0]
 800853e:	d032      	beq.n	80085a6 <__sflush_r+0x96>
 8008540:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	075a      	lsls	r2, r3, #29
 8008546:	d505      	bpl.n	8008554 <__sflush_r+0x44>
 8008548:	6863      	ldr	r3, [r4, #4]
 800854a:	1ac0      	subs	r0, r0, r3
 800854c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800854e:	b10b      	cbz	r3, 8008554 <__sflush_r+0x44>
 8008550:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008552:	1ac0      	subs	r0, r0, r3
 8008554:	2300      	movs	r3, #0
 8008556:	4602      	mov	r2, r0
 8008558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800855a:	4628      	mov	r0, r5
 800855c:	6a21      	ldr	r1, [r4, #32]
 800855e:	47b0      	blx	r6
 8008560:	1c43      	adds	r3, r0, #1
 8008562:	89a3      	ldrh	r3, [r4, #12]
 8008564:	d106      	bne.n	8008574 <__sflush_r+0x64>
 8008566:	6829      	ldr	r1, [r5, #0]
 8008568:	291d      	cmp	r1, #29
 800856a:	d82b      	bhi.n	80085c4 <__sflush_r+0xb4>
 800856c:	4a28      	ldr	r2, [pc, #160]	; (8008610 <__sflush_r+0x100>)
 800856e:	410a      	asrs	r2, r1
 8008570:	07d6      	lsls	r6, r2, #31
 8008572:	d427      	bmi.n	80085c4 <__sflush_r+0xb4>
 8008574:	2200      	movs	r2, #0
 8008576:	6062      	str	r2, [r4, #4]
 8008578:	6922      	ldr	r2, [r4, #16]
 800857a:	04d9      	lsls	r1, r3, #19
 800857c:	6022      	str	r2, [r4, #0]
 800857e:	d504      	bpl.n	800858a <__sflush_r+0x7a>
 8008580:	1c42      	adds	r2, r0, #1
 8008582:	d101      	bne.n	8008588 <__sflush_r+0x78>
 8008584:	682b      	ldr	r3, [r5, #0]
 8008586:	b903      	cbnz	r3, 800858a <__sflush_r+0x7a>
 8008588:	6560      	str	r0, [r4, #84]	; 0x54
 800858a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800858c:	602f      	str	r7, [r5, #0]
 800858e:	2900      	cmp	r1, #0
 8008590:	d0ca      	beq.n	8008528 <__sflush_r+0x18>
 8008592:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008596:	4299      	cmp	r1, r3
 8008598:	d002      	beq.n	80085a0 <__sflush_r+0x90>
 800859a:	4628      	mov	r0, r5
 800859c:	f7fe fbda 	bl	8006d54 <_free_r>
 80085a0:	2000      	movs	r0, #0
 80085a2:	6360      	str	r0, [r4, #52]	; 0x34
 80085a4:	e7c1      	b.n	800852a <__sflush_r+0x1a>
 80085a6:	2301      	movs	r3, #1
 80085a8:	4628      	mov	r0, r5
 80085aa:	47b0      	blx	r6
 80085ac:	1c41      	adds	r1, r0, #1
 80085ae:	d1c8      	bne.n	8008542 <__sflush_r+0x32>
 80085b0:	682b      	ldr	r3, [r5, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0c5      	beq.n	8008542 <__sflush_r+0x32>
 80085b6:	2b1d      	cmp	r3, #29
 80085b8:	d001      	beq.n	80085be <__sflush_r+0xae>
 80085ba:	2b16      	cmp	r3, #22
 80085bc:	d101      	bne.n	80085c2 <__sflush_r+0xb2>
 80085be:	602f      	str	r7, [r5, #0]
 80085c0:	e7b2      	b.n	8008528 <__sflush_r+0x18>
 80085c2:	89a3      	ldrh	r3, [r4, #12]
 80085c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085c8:	81a3      	strh	r3, [r4, #12]
 80085ca:	e7ae      	b.n	800852a <__sflush_r+0x1a>
 80085cc:	690f      	ldr	r7, [r1, #16]
 80085ce:	2f00      	cmp	r7, #0
 80085d0:	d0aa      	beq.n	8008528 <__sflush_r+0x18>
 80085d2:	0793      	lsls	r3, r2, #30
 80085d4:	bf18      	it	ne
 80085d6:	2300      	movne	r3, #0
 80085d8:	680e      	ldr	r6, [r1, #0]
 80085da:	bf08      	it	eq
 80085dc:	694b      	ldreq	r3, [r1, #20]
 80085de:	1bf6      	subs	r6, r6, r7
 80085e0:	600f      	str	r7, [r1, #0]
 80085e2:	608b      	str	r3, [r1, #8]
 80085e4:	2e00      	cmp	r6, #0
 80085e6:	dd9f      	ble.n	8008528 <__sflush_r+0x18>
 80085e8:	4633      	mov	r3, r6
 80085ea:	463a      	mov	r2, r7
 80085ec:	4628      	mov	r0, r5
 80085ee:	6a21      	ldr	r1, [r4, #32]
 80085f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80085f4:	47e0      	blx	ip
 80085f6:	2800      	cmp	r0, #0
 80085f8:	dc06      	bgt.n	8008608 <__sflush_r+0xf8>
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008604:	81a3      	strh	r3, [r4, #12]
 8008606:	e790      	b.n	800852a <__sflush_r+0x1a>
 8008608:	4407      	add	r7, r0
 800860a:	1a36      	subs	r6, r6, r0
 800860c:	e7ea      	b.n	80085e4 <__sflush_r+0xd4>
 800860e:	bf00      	nop
 8008610:	dfbffffe 	.word	0xdfbffffe

08008614 <_fflush_r>:
 8008614:	b538      	push	{r3, r4, r5, lr}
 8008616:	690b      	ldr	r3, [r1, #16]
 8008618:	4605      	mov	r5, r0
 800861a:	460c      	mov	r4, r1
 800861c:	b913      	cbnz	r3, 8008624 <_fflush_r+0x10>
 800861e:	2500      	movs	r5, #0
 8008620:	4628      	mov	r0, r5
 8008622:	bd38      	pop	{r3, r4, r5, pc}
 8008624:	b118      	cbz	r0, 800862e <_fflush_r+0x1a>
 8008626:	6a03      	ldr	r3, [r0, #32]
 8008628:	b90b      	cbnz	r3, 800862e <_fflush_r+0x1a>
 800862a:	f7fe f977 	bl	800691c <__sinit>
 800862e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d0f3      	beq.n	800861e <_fflush_r+0xa>
 8008636:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008638:	07d0      	lsls	r0, r2, #31
 800863a:	d404      	bmi.n	8008646 <_fflush_r+0x32>
 800863c:	0599      	lsls	r1, r3, #22
 800863e:	d402      	bmi.n	8008646 <_fflush_r+0x32>
 8008640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008642:	f7fe fb71 	bl	8006d28 <__retarget_lock_acquire_recursive>
 8008646:	4628      	mov	r0, r5
 8008648:	4621      	mov	r1, r4
 800864a:	f7ff ff61 	bl	8008510 <__sflush_r>
 800864e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008650:	4605      	mov	r5, r0
 8008652:	07da      	lsls	r2, r3, #31
 8008654:	d4e4      	bmi.n	8008620 <_fflush_r+0xc>
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	059b      	lsls	r3, r3, #22
 800865a:	d4e1      	bmi.n	8008620 <_fflush_r+0xc>
 800865c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800865e:	f7fe fb64 	bl	8006d2a <__retarget_lock_release_recursive>
 8008662:	e7dd      	b.n	8008620 <_fflush_r+0xc>

08008664 <__swhatbuf_r>:
 8008664:	b570      	push	{r4, r5, r6, lr}
 8008666:	460c      	mov	r4, r1
 8008668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800866c:	4615      	mov	r5, r2
 800866e:	2900      	cmp	r1, #0
 8008670:	461e      	mov	r6, r3
 8008672:	b096      	sub	sp, #88	; 0x58
 8008674:	da0c      	bge.n	8008690 <__swhatbuf_r+0x2c>
 8008676:	89a3      	ldrh	r3, [r4, #12]
 8008678:	2100      	movs	r1, #0
 800867a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800867e:	bf0c      	ite	eq
 8008680:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008684:	2340      	movne	r3, #64	; 0x40
 8008686:	2000      	movs	r0, #0
 8008688:	6031      	str	r1, [r6, #0]
 800868a:	602b      	str	r3, [r5, #0]
 800868c:	b016      	add	sp, #88	; 0x58
 800868e:	bd70      	pop	{r4, r5, r6, pc}
 8008690:	466a      	mov	r2, sp
 8008692:	f000 f849 	bl	8008728 <_fstat_r>
 8008696:	2800      	cmp	r0, #0
 8008698:	dbed      	blt.n	8008676 <__swhatbuf_r+0x12>
 800869a:	9901      	ldr	r1, [sp, #4]
 800869c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80086a0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80086a4:	4259      	negs	r1, r3
 80086a6:	4159      	adcs	r1, r3
 80086a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086ac:	e7eb      	b.n	8008686 <__swhatbuf_r+0x22>

080086ae <__smakebuf_r>:
 80086ae:	898b      	ldrh	r3, [r1, #12]
 80086b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086b2:	079d      	lsls	r5, r3, #30
 80086b4:	4606      	mov	r6, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	d507      	bpl.n	80086ca <__smakebuf_r+0x1c>
 80086ba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086be:	6023      	str	r3, [r4, #0]
 80086c0:	6123      	str	r3, [r4, #16]
 80086c2:	2301      	movs	r3, #1
 80086c4:	6163      	str	r3, [r4, #20]
 80086c6:	b002      	add	sp, #8
 80086c8:	bd70      	pop	{r4, r5, r6, pc}
 80086ca:	466a      	mov	r2, sp
 80086cc:	ab01      	add	r3, sp, #4
 80086ce:	f7ff ffc9 	bl	8008664 <__swhatbuf_r>
 80086d2:	9900      	ldr	r1, [sp, #0]
 80086d4:	4605      	mov	r5, r0
 80086d6:	4630      	mov	r0, r6
 80086d8:	f7fe fefe 	bl	80074d8 <_malloc_r>
 80086dc:	b948      	cbnz	r0, 80086f2 <__smakebuf_r+0x44>
 80086de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e2:	059a      	lsls	r2, r3, #22
 80086e4:	d4ef      	bmi.n	80086c6 <__smakebuf_r+0x18>
 80086e6:	f023 0303 	bic.w	r3, r3, #3
 80086ea:	f043 0302 	orr.w	r3, r3, #2
 80086ee:	81a3      	strh	r3, [r4, #12]
 80086f0:	e7e3      	b.n	80086ba <__smakebuf_r+0xc>
 80086f2:	89a3      	ldrh	r3, [r4, #12]
 80086f4:	6020      	str	r0, [r4, #0]
 80086f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086fa:	81a3      	strh	r3, [r4, #12]
 80086fc:	9b00      	ldr	r3, [sp, #0]
 80086fe:	6120      	str	r0, [r4, #16]
 8008700:	6163      	str	r3, [r4, #20]
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	b15b      	cbz	r3, 800871e <__smakebuf_r+0x70>
 8008706:	4630      	mov	r0, r6
 8008708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800870c:	f000 f81e 	bl	800874c <_isatty_r>
 8008710:	b128      	cbz	r0, 800871e <__smakebuf_r+0x70>
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	f023 0303 	bic.w	r3, r3, #3
 8008718:	f043 0301 	orr.w	r3, r3, #1
 800871c:	81a3      	strh	r3, [r4, #12]
 800871e:	89a3      	ldrh	r3, [r4, #12]
 8008720:	431d      	orrs	r5, r3
 8008722:	81a5      	strh	r5, [r4, #12]
 8008724:	e7cf      	b.n	80086c6 <__smakebuf_r+0x18>
	...

08008728 <_fstat_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	2300      	movs	r3, #0
 800872c:	4d06      	ldr	r5, [pc, #24]	; (8008748 <_fstat_r+0x20>)
 800872e:	4604      	mov	r4, r0
 8008730:	4608      	mov	r0, r1
 8008732:	4611      	mov	r1, r2
 8008734:	602b      	str	r3, [r5, #0]
 8008736:	f7f9 fa3a 	bl	8001bae <_fstat>
 800873a:	1c43      	adds	r3, r0, #1
 800873c:	d102      	bne.n	8008744 <_fstat_r+0x1c>
 800873e:	682b      	ldr	r3, [r5, #0]
 8008740:	b103      	cbz	r3, 8008744 <_fstat_r+0x1c>
 8008742:	6023      	str	r3, [r4, #0]
 8008744:	bd38      	pop	{r3, r4, r5, pc}
 8008746:	bf00      	nop
 8008748:	200007dc 	.word	0x200007dc

0800874c <_isatty_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	2300      	movs	r3, #0
 8008750:	4d05      	ldr	r5, [pc, #20]	; (8008768 <_isatty_r+0x1c>)
 8008752:	4604      	mov	r4, r0
 8008754:	4608      	mov	r0, r1
 8008756:	602b      	str	r3, [r5, #0]
 8008758:	f7f9 fa38 	bl	8001bcc <_isatty>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_isatty_r+0x1a>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_isatty_r+0x1a>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	200007dc 	.word	0x200007dc

0800876c <_sbrk_r>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	2300      	movs	r3, #0
 8008770:	4d05      	ldr	r5, [pc, #20]	; (8008788 <_sbrk_r+0x1c>)
 8008772:	4604      	mov	r4, r0
 8008774:	4608      	mov	r0, r1
 8008776:	602b      	str	r3, [r5, #0]
 8008778:	f7f9 fa3e 	bl	8001bf8 <_sbrk>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d102      	bne.n	8008786 <_sbrk_r+0x1a>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	b103      	cbz	r3, 8008786 <_sbrk_r+0x1a>
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	200007dc 	.word	0x200007dc

0800878c <memchr>:
 800878c:	4603      	mov	r3, r0
 800878e:	b510      	push	{r4, lr}
 8008790:	b2c9      	uxtb	r1, r1
 8008792:	4402      	add	r2, r0
 8008794:	4293      	cmp	r3, r2
 8008796:	4618      	mov	r0, r3
 8008798:	d101      	bne.n	800879e <memchr+0x12>
 800879a:	2000      	movs	r0, #0
 800879c:	e003      	b.n	80087a6 <memchr+0x1a>
 800879e:	7804      	ldrb	r4, [r0, #0]
 80087a0:	3301      	adds	r3, #1
 80087a2:	428c      	cmp	r4, r1
 80087a4:	d1f6      	bne.n	8008794 <memchr+0x8>
 80087a6:	bd10      	pop	{r4, pc}

080087a8 <__assert_func>:
 80087a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087aa:	4614      	mov	r4, r2
 80087ac:	461a      	mov	r2, r3
 80087ae:	4b09      	ldr	r3, [pc, #36]	; (80087d4 <__assert_func+0x2c>)
 80087b0:	4605      	mov	r5, r0
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68d8      	ldr	r0, [r3, #12]
 80087b6:	b14c      	cbz	r4, 80087cc <__assert_func+0x24>
 80087b8:	4b07      	ldr	r3, [pc, #28]	; (80087d8 <__assert_func+0x30>)
 80087ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087be:	9100      	str	r1, [sp, #0]
 80087c0:	462b      	mov	r3, r5
 80087c2:	4906      	ldr	r1, [pc, #24]	; (80087dc <__assert_func+0x34>)
 80087c4:	f000 f82a 	bl	800881c <fiprintf>
 80087c8:	f000 f83a 	bl	8008840 <abort>
 80087cc:	4b04      	ldr	r3, [pc, #16]	; (80087e0 <__assert_func+0x38>)
 80087ce:	461c      	mov	r4, r3
 80087d0:	e7f3      	b.n	80087ba <__assert_func+0x12>
 80087d2:	bf00      	nop
 80087d4:	200001d0 	.word	0x200001d0
 80087d8:	08008ca8 	.word	0x08008ca8
 80087dc:	08008cb5 	.word	0x08008cb5
 80087e0:	08008ce3 	.word	0x08008ce3

080087e4 <_calloc_r>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	fba1 5402 	umull	r5, r4, r1, r2
 80087ea:	b934      	cbnz	r4, 80087fa <_calloc_r+0x16>
 80087ec:	4629      	mov	r1, r5
 80087ee:	f7fe fe73 	bl	80074d8 <_malloc_r>
 80087f2:	4606      	mov	r6, r0
 80087f4:	b928      	cbnz	r0, 8008802 <_calloc_r+0x1e>
 80087f6:	4630      	mov	r0, r6
 80087f8:	bd70      	pop	{r4, r5, r6, pc}
 80087fa:	220c      	movs	r2, #12
 80087fc:	2600      	movs	r6, #0
 80087fe:	6002      	str	r2, [r0, #0]
 8008800:	e7f9      	b.n	80087f6 <_calloc_r+0x12>
 8008802:	462a      	mov	r2, r5
 8008804:	4621      	mov	r1, r4
 8008806:	f7fe fa05 	bl	8006c14 <memset>
 800880a:	e7f4      	b.n	80087f6 <_calloc_r+0x12>

0800880c <malloc>:
 800880c:	4b02      	ldr	r3, [pc, #8]	; (8008818 <malloc+0xc>)
 800880e:	4601      	mov	r1, r0
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	f7fe be61 	b.w	80074d8 <_malloc_r>
 8008816:	bf00      	nop
 8008818:	200001d0 	.word	0x200001d0

0800881c <fiprintf>:
 800881c:	b40e      	push	{r1, r2, r3}
 800881e:	b503      	push	{r0, r1, lr}
 8008820:	4601      	mov	r1, r0
 8008822:	ab03      	add	r3, sp, #12
 8008824:	4805      	ldr	r0, [pc, #20]	; (800883c <fiprintf+0x20>)
 8008826:	f853 2b04 	ldr.w	r2, [r3], #4
 800882a:	6800      	ldr	r0, [r0, #0]
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	f7ff fbc1 	bl	8007fb4 <_vfiprintf_r>
 8008832:	b002      	add	sp, #8
 8008834:	f85d eb04 	ldr.w	lr, [sp], #4
 8008838:	b003      	add	sp, #12
 800883a:	4770      	bx	lr
 800883c:	200001d0 	.word	0x200001d0

08008840 <abort>:
 8008840:	2006      	movs	r0, #6
 8008842:	b508      	push	{r3, lr}
 8008844:	f000 f82c 	bl	80088a0 <raise>
 8008848:	2001      	movs	r0, #1
 800884a:	f7f9 f962 	bl	8001b12 <_exit>

0800884e <_raise_r>:
 800884e:	291f      	cmp	r1, #31
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4604      	mov	r4, r0
 8008854:	460d      	mov	r5, r1
 8008856:	d904      	bls.n	8008862 <_raise_r+0x14>
 8008858:	2316      	movs	r3, #22
 800885a:	6003      	str	r3, [r0, #0]
 800885c:	f04f 30ff 	mov.w	r0, #4294967295
 8008860:	bd38      	pop	{r3, r4, r5, pc}
 8008862:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008864:	b112      	cbz	r2, 800886c <_raise_r+0x1e>
 8008866:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800886a:	b94b      	cbnz	r3, 8008880 <_raise_r+0x32>
 800886c:	4620      	mov	r0, r4
 800886e:	f000 f831 	bl	80088d4 <_getpid_r>
 8008872:	462a      	mov	r2, r5
 8008874:	4601      	mov	r1, r0
 8008876:	4620      	mov	r0, r4
 8008878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800887c:	f000 b818 	b.w	80088b0 <_kill_r>
 8008880:	2b01      	cmp	r3, #1
 8008882:	d00a      	beq.n	800889a <_raise_r+0x4c>
 8008884:	1c59      	adds	r1, r3, #1
 8008886:	d103      	bne.n	8008890 <_raise_r+0x42>
 8008888:	2316      	movs	r3, #22
 800888a:	6003      	str	r3, [r0, #0]
 800888c:	2001      	movs	r0, #1
 800888e:	e7e7      	b.n	8008860 <_raise_r+0x12>
 8008890:	2400      	movs	r4, #0
 8008892:	4628      	mov	r0, r5
 8008894:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008898:	4798      	blx	r3
 800889a:	2000      	movs	r0, #0
 800889c:	e7e0      	b.n	8008860 <_raise_r+0x12>
	...

080088a0 <raise>:
 80088a0:	4b02      	ldr	r3, [pc, #8]	; (80088ac <raise+0xc>)
 80088a2:	4601      	mov	r1, r0
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	f7ff bfd2 	b.w	800884e <_raise_r>
 80088aa:	bf00      	nop
 80088ac:	200001d0 	.word	0x200001d0

080088b0 <_kill_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	2300      	movs	r3, #0
 80088b4:	4d06      	ldr	r5, [pc, #24]	; (80088d0 <_kill_r+0x20>)
 80088b6:	4604      	mov	r4, r0
 80088b8:	4608      	mov	r0, r1
 80088ba:	4611      	mov	r1, r2
 80088bc:	602b      	str	r3, [r5, #0]
 80088be:	f7f9 f918 	bl	8001af2 <_kill>
 80088c2:	1c43      	adds	r3, r0, #1
 80088c4:	d102      	bne.n	80088cc <_kill_r+0x1c>
 80088c6:	682b      	ldr	r3, [r5, #0]
 80088c8:	b103      	cbz	r3, 80088cc <_kill_r+0x1c>
 80088ca:	6023      	str	r3, [r4, #0]
 80088cc:	bd38      	pop	{r3, r4, r5, pc}
 80088ce:	bf00      	nop
 80088d0:	200007dc 	.word	0x200007dc

080088d4 <_getpid_r>:
 80088d4:	f7f9 b906 	b.w	8001ae4 <_getpid>

080088d8 <_init>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	bf00      	nop
 80088dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088de:	bc08      	pop	{r3}
 80088e0:	469e      	mov	lr, r3
 80088e2:	4770      	bx	lr

080088e4 <_fini>:
 80088e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e6:	bf00      	nop
 80088e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ea:	bc08      	pop	{r3}
 80088ec:	469e      	mov	lr, r3
 80088ee:	4770      	bx	lr
