
Example3_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000942c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08009618  08009618  00019618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b08  08009b08  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009b08  08009b08  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b08  08009b08  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b08  08009b08  00019b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b0c  08009b0c  00019b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  200001d4  08009ce4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08009ce4  0002062c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd0d  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002167  00000000  00000000  0002cf4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  0002f0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6e  00000000  00000000  0002fe20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aaa9  00000000  00000000  0003088e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f8a2  00000000  00000000  0004b337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a44f  00000000  00000000  0005abd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d00  00000000  00000000  000f5028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000f9d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	080095fc 	.word	0x080095fc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	080095fc 	.word	0x080095fc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2uiz>:
 8000cc8:	004a      	lsls	r2, r1, #1
 8000cca:	d211      	bcs.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000ccc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd0:	d211      	bcs.n	8000cf6 <__aeabi_d2uiz+0x2e>
 8000cd2:	d50d      	bpl.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000cd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cdc:	d40e      	bmi.n	8000cfc <__aeabi_d2uiz+0x34>
 8000cde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ce6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cea:	fa23 f002 	lsr.w	r0, r3, r2
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cfa:	d102      	bne.n	8000d02 <__aeabi_d2uiz+0x3a>
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	4770      	bx	lr
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2f>:
 8000d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d10:	bf24      	itt	cs
 8000d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d1a:	d90d      	bls.n	8000d38 <__aeabi_d2f+0x30>
 8000d1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d3c:	d121      	bne.n	8000d82 <__aeabi_d2f+0x7a>
 8000d3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d42:	bfbc      	itt	lt
 8000d44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d48:	4770      	bxlt	lr
 8000d4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d52:	f1c2 0218 	rsb	r2, r2, #24
 8000d56:	f1c2 0c20 	rsb	ip, r2, #32
 8000d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d62:	bf18      	it	ne
 8000d64:	f040 0001 	orrne.w	r0, r0, #1
 8000d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d74:	ea40 000c 	orr.w	r0, r0, ip
 8000d78:	fa23 f302 	lsr.w	r3, r3, r2
 8000d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d80:	e7cc      	b.n	8000d1c <__aeabi_d2f+0x14>
 8000d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d86:	d107      	bne.n	8000d98 <__aeabi_d2f+0x90>
 8000d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d96:	4770      	bxne	lr
 8000d98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_frsub>:
 8000da8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dac:	e002      	b.n	8000db4 <__addsf3>
 8000dae:	bf00      	nop

08000db0 <__aeabi_fsub>:
 8000db0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000db4 <__addsf3>:
 8000db4:	0042      	lsls	r2, r0, #1
 8000db6:	bf1f      	itttt	ne
 8000db8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dbc:	ea92 0f03 	teqne	r2, r3
 8000dc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc8:	d06a      	beq.n	8000ea0 <__addsf3+0xec>
 8000dca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000dce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dd2:	bfc1      	itttt	gt
 8000dd4:	18d2      	addgt	r2, r2, r3
 8000dd6:	4041      	eorgt	r1, r0
 8000dd8:	4048      	eorgt	r0, r1
 8000dda:	4041      	eorgt	r1, r0
 8000ddc:	bfb8      	it	lt
 8000dde:	425b      	neglt	r3, r3
 8000de0:	2b19      	cmp	r3, #25
 8000de2:	bf88      	it	hi
 8000de4:	4770      	bxhi	lr
 8000de6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000df2:	bf18      	it	ne
 8000df4:	4240      	negne	r0, r0
 8000df6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000dfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e02:	bf18      	it	ne
 8000e04:	4249      	negne	r1, r1
 8000e06:	ea92 0f03 	teq	r2, r3
 8000e0a:	d03f      	beq.n	8000e8c <__addsf3+0xd8>
 8000e0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000e10:	fa41 fc03 	asr.w	ip, r1, r3
 8000e14:	eb10 000c 	adds.w	r0, r0, ip
 8000e18:	f1c3 0320 	rsb	r3, r3, #32
 8000e1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000e20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e24:	d502      	bpl.n	8000e2c <__addsf3+0x78>
 8000e26:	4249      	negs	r1, r1
 8000e28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e30:	d313      	bcc.n	8000e5a <__addsf3+0xa6>
 8000e32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e36:	d306      	bcc.n	8000e46 <__addsf3+0x92>
 8000e38:	0840      	lsrs	r0, r0, #1
 8000e3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e3e:	f102 0201 	add.w	r2, r2, #1
 8000e42:	2afe      	cmp	r2, #254	; 0xfe
 8000e44:	d251      	bcs.n	8000eea <__addsf3+0x136>
 8000e46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e4e:	bf08      	it	eq
 8000e50:	f020 0001 	biceq.w	r0, r0, #1
 8000e54:	ea40 0003 	orr.w	r0, r0, r3
 8000e58:	4770      	bx	lr
 8000e5a:	0049      	lsls	r1, r1, #1
 8000e5c:	eb40 0000 	adc.w	r0, r0, r0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	bf28      	it	cs
 8000e64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e68:	d2ed      	bcs.n	8000e46 <__addsf3+0x92>
 8000e6a:	fab0 fc80 	clz	ip, r0
 8000e6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e72:	ebb2 020c 	subs.w	r2, r2, ip
 8000e76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e7a:	bfaa      	itet	ge
 8000e7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e80:	4252      	neglt	r2, r2
 8000e82:	4318      	orrge	r0, r3
 8000e84:	bfbc      	itt	lt
 8000e86:	40d0      	lsrlt	r0, r2
 8000e88:	4318      	orrlt	r0, r3
 8000e8a:	4770      	bx	lr
 8000e8c:	f092 0f00 	teq	r2, #0
 8000e90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e94:	bf06      	itte	eq
 8000e96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e9a:	3201      	addeq	r2, #1
 8000e9c:	3b01      	subne	r3, #1
 8000e9e:	e7b5      	b.n	8000e0c <__addsf3+0x58>
 8000ea0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea8:	bf18      	it	ne
 8000eaa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eae:	d021      	beq.n	8000ef4 <__addsf3+0x140>
 8000eb0:	ea92 0f03 	teq	r2, r3
 8000eb4:	d004      	beq.n	8000ec0 <__addsf3+0x10c>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	bf08      	it	eq
 8000ebc:	4608      	moveq	r0, r1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea90 0f01 	teq	r0, r1
 8000ec4:	bf1c      	itt	ne
 8000ec6:	2000      	movne	r0, #0
 8000ec8:	4770      	bxne	lr
 8000eca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ece:	d104      	bne.n	8000eda <__addsf3+0x126>
 8000ed0:	0040      	lsls	r0, r0, #1
 8000ed2:	bf28      	it	cs
 8000ed4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ede:	bf3c      	itt	cc
 8000ee0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ee4:	4770      	bxcc	lr
 8000ee6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000eea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef2:	4770      	bx	lr
 8000ef4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ef8:	bf16      	itet	ne
 8000efa:	4608      	movne	r0, r1
 8000efc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f00:	4601      	movne	r1, r0
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	bf06      	itte	eq
 8000f06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f0a:	ea90 0f01 	teqeq	r0, r1
 8000f0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f12:	4770      	bx	lr

08000f14 <__aeabi_ui2f>:
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e004      	b.n	8000f24 <__aeabi_i2f+0x8>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_i2f>:
 8000f1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f20:	bf48      	it	mi
 8000f22:	4240      	negmi	r0, r0
 8000f24:	ea5f 0c00 	movs.w	ip, r0
 8000f28:	bf08      	it	eq
 8000f2a:	4770      	bxeq	lr
 8000f2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f30:	4601      	mov	r1, r0
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	e01c      	b.n	8000f72 <__aeabi_l2f+0x2a>

08000f38 <__aeabi_ul2f>:
 8000f38:	ea50 0201 	orrs.w	r2, r0, r1
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e00a      	b.n	8000f5c <__aeabi_l2f+0x14>
 8000f46:	bf00      	nop

08000f48 <__aeabi_l2f>:
 8000f48:	ea50 0201 	orrs.w	r2, r0, r1
 8000f4c:	bf08      	it	eq
 8000f4e:	4770      	bxeq	lr
 8000f50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f54:	d502      	bpl.n	8000f5c <__aeabi_l2f+0x14>
 8000f56:	4240      	negs	r0, r0
 8000f58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f5c:	ea5f 0c01 	movs.w	ip, r1
 8000f60:	bf02      	ittt	eq
 8000f62:	4684      	moveq	ip, r0
 8000f64:	4601      	moveq	r1, r0
 8000f66:	2000      	moveq	r0, #0
 8000f68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f6c:	bf08      	it	eq
 8000f6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f76:	fabc f28c 	clz	r2, ip
 8000f7a:	3a08      	subs	r2, #8
 8000f7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f80:	db10      	blt.n	8000fa4 <__aeabi_l2f+0x5c>
 8000f82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f86:	4463      	add	r3, ip
 8000f88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f8c:	f1c2 0220 	rsb	r2, r2, #32
 8000f90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	eb43 0002 	adc.w	r0, r3, r2
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f102 0220 	add.w	r2, r2, #32
 8000fa8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fac:	f1c2 0220 	rsb	r2, r2, #32
 8000fb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000fb8:	eb43 0002 	adc.w	r0, r3, r2
 8000fbc:	bf08      	it	eq
 8000fbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_f2iz>:
 8000fc4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fcc:	d30f      	bcc.n	8000fee <__aeabi_f2iz+0x2a>
 8000fce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fd2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fd6:	d90d      	bls.n	8000ff4 <__aeabi_f2iz+0x30>
 8000fd8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fe0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fe4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe8:	bf18      	it	ne
 8000fea:	4240      	negne	r0, r0
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr
 8000ff4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ff8:	d101      	bne.n	8000ffe <__aeabi_f2iz+0x3a>
 8000ffa:	0242      	lsls	r2, r0, #9
 8000ffc:	d105      	bne.n	800100a <__aeabi_f2iz+0x46>
 8000ffe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001002:	bf08      	it	eq
 8001004:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr

08001010 <__aeabi_d2lz>:
 8001010:	b538      	push	{r3, r4, r5, lr}
 8001012:	4605      	mov	r5, r0
 8001014:	460c      	mov	r4, r1
 8001016:	2200      	movs	r2, #0
 8001018:	2300      	movs	r3, #0
 800101a:	4628      	mov	r0, r5
 800101c:	4621      	mov	r1, r4
 800101e:	f7ff fded 	bl	8000bfc <__aeabi_dcmplt>
 8001022:	b928      	cbnz	r0, 8001030 <__aeabi_d2lz+0x20>
 8001024:	4628      	mov	r0, r5
 8001026:	4621      	mov	r1, r4
 8001028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800102c:	f000 b80a 	b.w	8001044 <__aeabi_d2ulz>
 8001030:	4628      	mov	r0, r5
 8001032:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001036:	f000 f805 	bl	8001044 <__aeabi_d2ulz>
 800103a:	4240      	negs	r0, r0
 800103c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001040:	bd38      	pop	{r3, r4, r5, pc}
 8001042:	bf00      	nop

08001044 <__aeabi_d2ulz>:
 8001044:	b5d0      	push	{r4, r6, r7, lr}
 8001046:	2200      	movs	r2, #0
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <__aeabi_d2ulz+0x34>)
 800104a:	4606      	mov	r6, r0
 800104c:	460f      	mov	r7, r1
 800104e:	f7ff fb63 	bl	8000718 <__aeabi_dmul>
 8001052:	f7ff fe39 	bl	8000cc8 <__aeabi_d2uiz>
 8001056:	4604      	mov	r4, r0
 8001058:	f7ff fae4 	bl	8000624 <__aeabi_ui2d>
 800105c:	2200      	movs	r2, #0
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <__aeabi_d2ulz+0x38>)
 8001060:	f7ff fb5a 	bl	8000718 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4630      	mov	r0, r6
 800106a:	4639      	mov	r1, r7
 800106c:	f7ff f99c 	bl	80003a8 <__aeabi_dsub>
 8001070:	f7ff fe2a 	bl	8000cc8 <__aeabi_d2uiz>
 8001074:	4621      	mov	r1, r4
 8001076:	bdd0      	pop	{r4, r6, r7, pc}
 8001078:	3df00000 	.word	0x3df00000
 800107c:	41f00000 	.word	0x41f00000

08001080 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001094:	4b37      	ldr	r3, [pc, #220]	; (8001174 <MX_GPIO_Init+0xf4>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a36      	ldr	r2, [pc, #216]	; (8001174 <MX_GPIO_Init+0xf4>)
 800109a:	f043 0320 	orr.w	r3, r3, #32
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b34      	ldr	r3, [pc, #208]	; (8001174 <MX_GPIO_Init+0xf4>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0320 	and.w	r3, r3, #32
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ac:	4b31      	ldr	r3, [pc, #196]	; (8001174 <MX_GPIO_Init+0xf4>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a30      	ldr	r2, [pc, #192]	; (8001174 <MX_GPIO_Init+0xf4>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <MX_GPIO_Init+0xf4>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0310 	and.w	r3, r3, #16
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <MX_GPIO_Init+0xf4>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a2a      	ldr	r2, [pc, #168]	; (8001174 <MX_GPIO_Init+0xf4>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <MX_GPIO_Init+0xf4>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010dc:	4b25      	ldr	r3, [pc, #148]	; (8001174 <MX_GPIO_Init+0xf4>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a24      	ldr	r2, [pc, #144]	; (8001174 <MX_GPIO_Init+0xf4>)
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <MX_GPIO_Init+0xf4>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	210f      	movs	r1, #15
 80010f8:	481f      	ldr	r0, [pc, #124]	; (8001178 <MX_GPIO_Init+0xf8>)
 80010fa:	f001 ff09 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001104:	481d      	ldr	r0, [pc, #116]	; (800117c <MX_GPIO_Init+0xfc>)
 8001106:	f001 ff03 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800110a:	230f      	movs	r3, #15
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2302      	movs	r3, #2
 8001118:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4619      	mov	r1, r3
 8001120:	4815      	ldr	r0, [pc, #84]	; (8001178 <MX_GPIO_Init+0xf8>)
 8001122:	f001 fd61 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001126:	2301      	movs	r3, #1
 8001128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <MX_GPIO_Init+0x100>)
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800112e:	2302      	movs	r3, #2
 8001130:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	4619      	mov	r1, r3
 8001138:	4810      	ldr	r0, [pc, #64]	; (800117c <MX_GPIO_Init+0xfc>)
 800113a:	f001 fd55 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800113e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2302      	movs	r3, #2
 800114e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	4619      	mov	r1, r3
 8001156:	4809      	ldr	r0, [pc, #36]	; (800117c <MX_GPIO_Init+0xfc>)
 8001158:	f001 fd46 	bl	8002be8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2006      	movs	r0, #6
 8001162:	f001 fd0a 	bl	8002b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001166:	2006      	movs	r0, #6
 8001168:	f001 fd23 	bl	8002bb2 <HAL_NVIC_EnableIRQ>

}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021000 	.word	0x40021000
 8001178:	40011000 	.word	0x40011000
 800117c:	40010c00 	.word	0x40010c00
 8001180:	10210000 	.word	0x10210000

08001184 <myabs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int myabs(int a)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	int temp;
	if(a<0)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	da03      	bge.n	800119a <myabs+0x16>
	  temp=-a;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	425b      	negs	r3, r3
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	e001      	b.n	800119e <myabs+0x1a>
	else
	  temp=a;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]
	return temp;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
	...

080011ac <ServoInit>:

//舵机相关初始�?
void ServoInit()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 80011b0:	2108      	movs	r1, #8
 80011b2:	4808      	ldr	r0, [pc, #32]	; (80011d4 <ServoInit+0x28>)
 80011b4:	f002 fbf4 	bl	80039a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);  //启动定时�?2的PWM模式
 80011b8:	210c      	movs	r1, #12
 80011ba:	4806      	ldr	r0, [pc, #24]	; (80011d4 <ServoInit+0x28>)
 80011bc:	f002 fbf0 	bl	80039a0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80011c0:	2108      	movs	r1, #8
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <ServoInit+0x2c>)
 80011c4:	f002 fbec 	bl	80039a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);  //启动定时�?4的PWM模式
 80011c8:	210c      	movs	r1, #12
 80011ca:	4803      	ldr	r0, [pc, #12]	; (80011d8 <ServoInit+0x2c>)
 80011cc:	f002 fbe8 	bl	80039a0 <HAL_TIM_PWM_Start>
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000254 	.word	0x20000254
 80011d8:	200002e4 	.word	0x200002e4

080011dc <Set_Servo_angle>:

void Set_Servo_angle(TIM_HandleTypeDef * htim,uint32_t Channel,uint8_t angle)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	4613      	mov	r3, r2
 80011e8:	71fb      	strb	r3, [r7, #7]
	uint16_t compare_value=0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	82fb      	strh	r3, [r7, #22]
	if(angle <= 180)   //限制角度�?180°
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2bb4      	cmp	r3, #180	; 0xb4
 80011f2:	d836      	bhi.n	8001262 <Set_Servo_angle+0x86>
	{
		//角度转化为数�?
		compare_value=0.5*2000/20+angle*2000/20/90;
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2264      	movs	r2, #100	; 0x64
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	4a1b      	ldr	r2, [pc, #108]	; (800126c <Set_Servo_angle+0x90>)
 80011fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001202:	441a      	add	r2, r3
 8001204:	1192      	asrs	r2, r2, #6
 8001206:	17db      	asrs	r3, r3, #31
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fa1a 	bl	8000644 <__aeabi_i2d>
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <Set_Servo_angle+0x94>)
 8001216:	f7ff f8c9 	bl	80003ac <__adddf3>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fd51 	bl	8000cc8 <__aeabi_d2uiz>
 8001226:	4603      	mov	r3, r0
 8001228:	82fb      	strh	r3, [r7, #22]
		__HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d104      	bne.n	800123a <Set_Servo_angle+0x5e>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	8afa      	ldrh	r2, [r7, #22]
 8001236:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001238:	e013      	b.n	8001262 <Set_Servo_angle+0x86>
		__HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b04      	cmp	r3, #4
 800123e:	d104      	bne.n	800124a <Set_Servo_angle+0x6e>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	8afb      	ldrh	r3, [r7, #22]
 8001246:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001248:	e00b      	b.n	8001262 <Set_Servo_angle+0x86>
		__HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	2b08      	cmp	r3, #8
 800124e:	d104      	bne.n	800125a <Set_Servo_angle+0x7e>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	8afb      	ldrh	r3, [r7, #22]
 8001256:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001258:	e003      	b.n	8001262 <Set_Servo_angle+0x86>
		__HAL_TIM_SET_COMPARE(htim, Channel, compare_value);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	8afb      	ldrh	r3, [r7, #22]
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	b60b60b7 	.word	0xb60b60b7
 8001270:	40490000 	.word	0x40490000
 8001274:	00000000 	.word	0x00000000

08001278 <ServoControl>:

void ServoControl()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0

	if((PPM_Databuf[2]<990)||(PPM_Databuf[2]>2010))
 800127c:	4b70      	ldr	r3, [pc, #448]	; (8001440 <ServoControl+0x1c8>)
 800127e:	889b      	ldrh	r3, [r3, #4]
 8001280:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001284:	4293      	cmp	r3, r2
 8001286:	d905      	bls.n	8001294 <ServoControl+0x1c>
 8001288:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <ServoControl+0x1c8>)
 800128a:	889b      	ldrh	r3, [r3, #4]
 800128c:	f240 72da 	movw	r2, #2010	; 0x7da
 8001290:	4293      	cmp	r3, r2
 8001292:	d905      	bls.n	80012a0 <ServoControl+0x28>
	{
		Set_Servo_angle(&htim4,TIM_CHANNEL_3,90);
 8001294:	225a      	movs	r2, #90	; 0x5a
 8001296:	2108      	movs	r1, #8
 8001298:	486a      	ldr	r0, [pc, #424]	; (8001444 <ServoControl+0x1cc>)
 800129a:	f7ff ff9f 	bl	80011dc <Set_Servo_angle>
 800129e:	e037      	b.n	8001310 <ServoControl+0x98>
	}
	else
	{
	if(PPM_Databuf[2]<1600&&PPM_Databuf[2]>1400){PPM_Databuf[2] = 1500;}
 80012a0:	4b67      	ldr	r3, [pc, #412]	; (8001440 <ServoControl+0x1c8>)
 80012a2:	889b      	ldrh	r3, [r3, #4]
 80012a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80012a8:	d208      	bcs.n	80012bc <ServoControl+0x44>
 80012aa:	4b65      	ldr	r3, [pc, #404]	; (8001440 <ServoControl+0x1c8>)
 80012ac:	889b      	ldrh	r3, [r3, #4]
 80012ae:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80012b2:	d903      	bls.n	80012bc <ServoControl+0x44>
 80012b4:	4b62      	ldr	r3, [pc, #392]	; (8001440 <ServoControl+0x1c8>)
 80012b6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80012ba:	809a      	strh	r2, [r3, #4]
	if(PPM_Databuf[3]<1600&&PPM_Databuf[3]>1400){PPM_Databuf[3] = 1500;}
 80012bc:	4b60      	ldr	r3, [pc, #384]	; (8001440 <ServoControl+0x1c8>)
 80012be:	88db      	ldrh	r3, [r3, #6]
 80012c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80012c4:	d208      	bcs.n	80012d8 <ServoControl+0x60>
 80012c6:	4b5e      	ldr	r3, [pc, #376]	; (8001440 <ServoControl+0x1c8>)
 80012c8:	88db      	ldrh	r3, [r3, #6]
 80012ca:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80012ce:	d903      	bls.n	80012d8 <ServoControl+0x60>
 80012d0:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <ServoControl+0x1c8>)
 80012d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80012d6:	80da      	strh	r2, [r3, #6]
	if(PPM_Databuf[6]<1000&&PPM_Databuf[6]>900){PPM_Databuf[6] = 1100;}
 80012d8:	4b59      	ldr	r3, [pc, #356]	; (8001440 <ServoControl+0x1c8>)
 80012da:	899b      	ldrh	r3, [r3, #12]
 80012dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012e0:	d208      	bcs.n	80012f4 <ServoControl+0x7c>
 80012e2:	4b57      	ldr	r3, [pc, #348]	; (8001440 <ServoControl+0x1c8>)
 80012e4:	899b      	ldrh	r3, [r3, #12]
 80012e6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80012ea:	d903      	bls.n	80012f4 <ServoControl+0x7c>
 80012ec:	4b54      	ldr	r3, [pc, #336]	; (8001440 <ServoControl+0x1c8>)
 80012ee:	f240 424c 	movw	r2, #1100	; 0x44c
 80012f2:	819a      	strh	r2, [r3, #12]
	if(PPM_Databuf[7]<1000&&PPM_Databuf[7]>900){PPM_Databuf[7] = 1000;}
 80012f4:	4b52      	ldr	r3, [pc, #328]	; (8001440 <ServoControl+0x1c8>)
 80012f6:	89db      	ldrh	r3, [r3, #14]
 80012f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012fc:	d208      	bcs.n	8001310 <ServoControl+0x98>
 80012fe:	4b50      	ldr	r3, [pc, #320]	; (8001440 <ServoControl+0x1c8>)
 8001300:	89db      	ldrh	r3, [r3, #14]
 8001302:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001306:	d903      	bls.n	8001310 <ServoControl+0x98>
 8001308:	4b4d      	ldr	r3, [pc, #308]	; (8001440 <ServoControl+0x1c8>)
 800130a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800130e:	81da      	strh	r2, [r3, #14]
	}


	Set_Servo_angle(&htim4,TIM_CHANNEL_4,myabs(0.18*PPM_Databuf[2]-180)); // 对应舵机2口�?��?�左边上下手柄的控制
 8001310:	4b4b      	ldr	r3, [pc, #300]	; (8001440 <ServoControl+0x1c8>)
 8001312:	889b      	ldrh	r3, [r3, #4]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f995 	bl	8000644 <__aeabi_i2d>
 800131a:	a347      	add	r3, pc, #284	; (adr r3, 8001438 <ServoControl+0x1c0>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7ff f9fa 	bl	8000718 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b45      	ldr	r3, [pc, #276]	; (8001448 <ServoControl+0x1d0>)
 8001332:	f7ff f839 	bl	80003a8 <__aeabi_dsub>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fc9b 	bl	8000c78 <__aeabi_d2iz>
 8001342:	4603      	mov	r3, r0
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff1d 	bl	8001184 <myabs>
 800134a:	4603      	mov	r3, r0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	210c      	movs	r1, #12
 8001352:	483c      	ldr	r0, [pc, #240]	; (8001444 <ServoControl+0x1cc>)
 8001354:	f7ff ff42 	bl	80011dc <Set_Servo_angle>
	Set_Servo_angle(&htim4,TIM_CHANNEL_3,myabs(0.18*PPM_Databuf[3]-180)); // 对应舵机1口�?��?�左边左右手柄的控制
 8001358:	4b39      	ldr	r3, [pc, #228]	; (8001440 <ServoControl+0x1c8>)
 800135a:	88db      	ldrh	r3, [r3, #6]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f971 	bl	8000644 <__aeabi_i2d>
 8001362:	a335      	add	r3, pc, #212	; (adr r3, 8001438 <ServoControl+0x1c0>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff f9d6 	bl	8000718 <__aeabi_dmul>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	4b33      	ldr	r3, [pc, #204]	; (8001448 <ServoControl+0x1d0>)
 800137a:	f7ff f815 	bl	80003a8 <__aeabi_dsub>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fc77 	bl	8000c78 <__aeabi_d2iz>
 800138a:	4603      	mov	r3, r0
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fef9 	bl	8001184 <myabs>
 8001392:	4603      	mov	r3, r0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	2108      	movs	r1, #8
 800139a:	482a      	ldr	r0, [pc, #168]	; (8001444 <ServoControl+0x1cc>)
 800139c:	f7ff ff1e 	bl	80011dc <Set_Servo_angle>

	Set_Servo_angle(&htim2,TIM_CHANNEL_4,myabs(0.18*PPM_Databuf[6]-180));
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <ServoControl+0x1c8>)
 80013a2:	899b      	ldrh	r3, [r3, #12]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f94d 	bl	8000644 <__aeabi_i2d>
 80013aa:	a323      	add	r3, pc, #140	; (adr r3, 8001438 <ServoControl+0x1c0>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7ff f9b2 	bl	8000718 <__aeabi_dmul>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	4b21      	ldr	r3, [pc, #132]	; (8001448 <ServoControl+0x1d0>)
 80013c2:	f7fe fff1 	bl	80003a8 <__aeabi_dsub>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fc53 	bl	8000c78 <__aeabi_d2iz>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fed5 	bl	8001184 <myabs>
 80013da:	4603      	mov	r3, r0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	210c      	movs	r1, #12
 80013e2:	481a      	ldr	r0, [pc, #104]	; (800144c <ServoControl+0x1d4>)
 80013e4:	f7ff fefa 	bl	80011dc <Set_Servo_angle>
	Set_Servo_angle(&htim2,TIM_CHANNEL_3,myabs(0.18*PPM_Databuf[7]-180));
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <ServoControl+0x1c8>)
 80013ea:	89db      	ldrh	r3, [r3, #14]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f929 	bl	8000644 <__aeabi_i2d>
 80013f2:	a311      	add	r3, pc, #68	; (adr r3, 8001438 <ServoControl+0x1c0>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	f7ff f98e 	bl	8000718 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <ServoControl+0x1d0>)
 800140a:	f7fe ffcd 	bl	80003a8 <__aeabi_dsub>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fc2f 	bl	8000c78 <__aeabi_d2iz>
 800141a:	4603      	mov	r3, r0
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff feb1 	bl	8001184 <myabs>
 8001422:	4603      	mov	r3, r0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	461a      	mov	r2, r3
 8001428:	2108      	movs	r1, #8
 800142a:	4808      	ldr	r0, [pc, #32]	; (800144c <ServoControl+0x1d4>)
 800142c:	f7ff fed6 	bl	80011dc <Set_Servo_angle>
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	f3af 8000 	nop.w
 8001438:	70a3d70a 	.word	0x70a3d70a
 800143c:	3fc70a3d 	.word	0x3fc70a3d
 8001440:	20000204 	.word	0x20000204
 8001444:	200002e4 	.word	0x200002e4
 8001448:	40668000 	.word	0x40668000
 800144c:	20000254 	.word	0x20000254

08001450 <MotorInit>:
/*  电机相关初始�?
*/
void MotorInit()
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8001454:	2104      	movs	r1, #4
 8001456:	4804      	ldr	r0, [pc, #16]	; (8001468 <MotorInit+0x18>)
 8001458:	f002 faa2 	bl	80039a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 800145c:	2100      	movs	r1, #0
 800145e:	4802      	ldr	r0, [pc, #8]	; (8001468 <MotorInit+0x18>)
 8001460:	f002 fa9e 	bl	80039a0 <HAL_TIM_PWM_Start>
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000404 	.word	0x20000404

0800146c <EncoderInit>:



void EncoderInit()
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);  //启动定时�?3的编码器模式
 8001470:	2100      	movs	r1, #0
 8001472:	4808      	ldr	r0, [pc, #32]	; (8001494 <EncoderInit+0x28>)
 8001474:	f002 fbf0 	bl	8003c58 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 8001478:	2104      	movs	r1, #4
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <EncoderInit+0x28>)
 800147c:	f002 fbec 	bl	8003c58 <HAL_TIM_Encoder_Start>

	HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_1);  //启动定时�?5的编码器模式
 8001480:	2100      	movs	r1, #0
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <EncoderInit+0x2c>)
 8001484:	f002 fbe8 	bl	8003c58 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_2);
 8001488:	2104      	movs	r1, #4
 800148a:	4803      	ldr	r0, [pc, #12]	; (8001498 <EncoderInit+0x2c>)
 800148c:	f002 fbe4 	bl	8003c58 <HAL_TIM_Encoder_Start>
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	2000029c 	.word	0x2000029c
 8001498:	2000032c 	.word	0x2000032c

0800149c <B_Left_Go>:
/*
*		左轮 JP5  TIM8_CH1
*		右轮 JP4  TIM8_CH2
*/
void B_Left_Go()
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(R_DirPort,AIN1,GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2101      	movs	r1, #1
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <B_Left_Go+0x1c>)
 80014a6:	f001 fd33 	bl	8002f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R_DirPort,AIN2,GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2102      	movs	r1, #2
 80014ae:	4802      	ldr	r0, [pc, #8]	; (80014b8 <B_Left_Go+0x1c>)
 80014b0:	f001 fd2e 	bl	8002f10 <HAL_GPIO_WritePin>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40011000 	.word	0x40011000

080014bc <B_Right_Go>:

void B_Right_Go()
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(R_DirPort,BIN1,GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2104      	movs	r1, #4
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <B_Right_Go+0x1c>)
 80014c6:	f001 fd23 	bl	8002f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R_DirPort,BIN2,GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2108      	movs	r1, #8
 80014ce:	4802      	ldr	r0, [pc, #8]	; (80014d8 <B_Right_Go+0x1c>)
 80014d0:	f001 fd1e 	bl	8002f10 <HAL_GPIO_WritePin>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40011000 	.word	0x40011000

080014dc <B_Left_Back>:


void B_Left_Back()
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(R_DirPort,AIN1,GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2101      	movs	r1, #1
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <B_Left_Back+0x1c>)
 80014e6:	f001 fd13 	bl	8002f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R_DirPort,AIN2,GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2102      	movs	r1, #2
 80014ee:	4802      	ldr	r0, [pc, #8]	; (80014f8 <B_Left_Back+0x1c>)
 80014f0:	f001 fd0e 	bl	8002f10 <HAL_GPIO_WritePin>
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40011000 	.word	0x40011000

080014fc <B_Right_Back>:

void B_Right_Back()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(R_DirPort,BIN1,GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	2104      	movs	r1, #4
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <B_Right_Back+0x1c>)
 8001506:	f001 fd03 	bl	8002f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R_DirPort,BIN2,GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2108      	movs	r1, #8
 800150e:	4802      	ldr	r0, [pc, #8]	; (8001518 <B_Right_Back+0x1c>)
 8001510:	f001 fcfe 	bl	8002f10 <HAL_GPIO_WritePin>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40011000 	.word	0x40011000

0800151c <B_Left_Stop>:

void B_Left_Stop()
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(R_DirPort,AIN1,GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	2101      	movs	r1, #1
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <B_Left_Stop+0x1c>)
 8001526:	f001 fcf3 	bl	8002f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R_DirPort,AIN2,GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2102      	movs	r1, #2
 800152e:	4802      	ldr	r0, [pc, #8]	; (8001538 <B_Left_Stop+0x1c>)
 8001530:	f001 fcee 	bl	8002f10 <HAL_GPIO_WritePin>
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40011000 	.word	0x40011000

0800153c <B_Right_Stop>:

void B_Right_Stop()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(R_DirPort,BIN1,GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2104      	movs	r1, #4
 8001544:	4804      	ldr	r0, [pc, #16]	; (8001558 <B_Right_Stop+0x1c>)
 8001546:	f001 fce3 	bl	8002f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R_DirPort,BIN2,GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2108      	movs	r1, #8
 800154e:	4802      	ldr	r0, [pc, #8]	; (8001558 <B_Right_Stop+0x1c>)
 8001550:	f001 fcde 	bl	8002f10 <HAL_GPIO_WritePin>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40011000 	.word	0x40011000

0800155c <MotorControl>:
*	@brief Control Motor Speed
*	@param PWM
*	@retval None
*/
void MotorControl(int B_L_PWM, int B_R_PWM)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
		if(B_L_PWM >= 0)//前进方向运动
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db02      	blt.n	8001572 <MotorControl+0x16>
		{
//				B_Left_Go();
			B_Left_Back();
 800156c:	f7ff ffb6 	bl	80014dc <B_Left_Back>
 8001570:	e001      	b.n	8001576 <MotorControl+0x1a>
		}
    else
    {
//        B_Left_Back();
    	B_Left_Go();
 8001572:	f7ff ff93 	bl	800149c <B_Left_Go>
    }
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,myabs(B_L_PWM));
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fe04 	bl	8001184 <myabs>
 800157c:	4602      	mov	r2, r0
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MotorControl+0x50>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	635a      	str	r2, [r3, #52]	; 0x34


		if(B_R_PWM >= 0)		//后�??方向运动
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	db02      	blt.n	8001590 <MotorControl+0x34>
		{
//        B_Right_Go();
			B_Right_Back();
 800158a:	f7ff ffb7 	bl	80014fc <B_Right_Back>
 800158e:	e001      	b.n	8001594 <MotorControl+0x38>

    }
    else
    {
//      B_Right_Back();
    	B_Right_Go();
 8001590:	f7ff ff94 	bl	80014bc <B_Right_Go>
    }
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,myabs(B_R_PWM));
 8001594:	6838      	ldr	r0, [r7, #0]
 8001596:	f7ff fdf5 	bl	8001184 <myabs>
 800159a:	4602      	mov	r2, r0
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <MotorControl+0x50>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	639a      	str	r2, [r3, #56]	; 0x38

}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000404 	.word	0x20000404

080015b0 <GetEncoderPulse>:


void GetEncoderPulse()
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
	  encoderPulse[0] = -((short)__HAL_TIM_GET_COUNTER(&htim5));	//获取左轮编码器�??
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <GetEncoderPulse+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	425b      	negs	r3, r3
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <GetEncoderPulse+0x44>)
 80015c4:	801a      	strh	r2, [r3, #0]
		encoderPulse[1] = -((short)__HAL_TIM_GET_COUNTER(&htim3));  //获取右轮的编码器�?
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <GetEncoderPulse+0x48>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	425b      	negs	r3, r3
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <GetEncoderPulse+0x44>)
 80015d6:	805a      	strh	r2, [r3, #2]

    __HAL_TIM_GET_COUNTER(&htim3) = 0;
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <GetEncoderPulse+0x48>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2200      	movs	r2, #0
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_GET_COUNTER(&htim5) = 0;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <GetEncoderPulse+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2200      	movs	r2, #0
 80015e6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	2000032c 	.word	0x2000032c
 80015f4:	200001f8 	.word	0x200001f8
 80015f8:	2000029c 	.word	0x2000029c
 80015fc:	00000000 	.word	0x00000000

08001600 <CalActualSpeed>:


float CalActualSpeed(int pulse)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
    return (float)(0.003092424 * pulse);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff f81b 	bl	8000644 <__aeabi_i2d>
 800160e:	a308      	add	r3, pc, #32	; (adr r3, 8001630 <CalActualSpeed+0x30>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7ff f880 	bl	8000718 <__aeabi_dmul>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f7ff fb72 	bl	8000d08 <__aeabi_d2f>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	7e406f28 	.word	0x7e406f28
 8001634:	3f695548 	.word	0x3f695548

08001638 <PID_Init>:
/**
  * @brief  PID相关参数的初始化
  * @param  PID的结构体指针
  */
void PID_Init(PID *p)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
    p->Kp = Velocity_Kp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001646:	601a      	str	r2, [r3, #0]
    p->Ki = Velocity_Ki;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a0c      	ldr	r2, [pc, #48]	; (800167c <PID_Init+0x44>)
 800164c:	605a      	str	r2, [r3, #4]
    p->Kd = Velocity_Kd;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <PID_Init+0x48>)
 8001652:	609a      	str	r2, [r3, #8]
    p->last_error = 0;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	60da      	str	r2, [r3, #12]
    p->prev_error = 0;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
    p->limit = limit_value;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800166a:	615a      	str	r2, [r3, #20]
    p->pwm_add = 0;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	3fa66666 	.word	0x3fa66666
 8001680:	3f4ccccd 	.word	0x3f4ccccd

08001684 <PID_Cal>:
 /**
  * @brief  PID相关参数的初始化
  * @param  PID的结构体指针
  */
int PID_Cal(int targetSpeed,int currentSpeed,PID *p)
{
 8001684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
    int error = targetSpeed - currentSpeed;
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	617b      	str	r3, [r7, #20]
    p->pwm_add += p->Kp*(error - p->last_error) + p->Ki*error + p->Kd*(error - 2*p->last_error+p->prev_error);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fc3c 	bl	8000f1c <__aeabi_i2f>
 80016a4:	4605      	mov	r5, r0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681c      	ldr	r4, [r3, #0]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff fc36 	bl	8000f1c <__aeabi_i2f>
 80016b0:	4602      	mov	r2, r0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4610      	mov	r0, r2
 80016ba:	f7ff fb79 	bl	8000db0 <__aeabi_fsub>
 80016be:	4603      	mov	r3, r0
 80016c0:	4619      	mov	r1, r3
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7fe fdb8 	bl	8000238 <__aeabi_fmul>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461e      	mov	r6, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685c      	ldr	r4, [r3, #4]
 80016d0:	6978      	ldr	r0, [r7, #20]
 80016d2:	f7ff fc23 	bl	8000f1c <__aeabi_i2f>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4619      	mov	r1, r3
 80016da:	4620      	mov	r0, r4
 80016dc:	f7fe fdac 	bl	8000238 <__aeabi_fmul>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4619      	mov	r1, r3
 80016e4:	4630      	mov	r0, r6
 80016e6:	f7ff fb65 	bl	8000db4 <__addsf3>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4698      	mov	r8, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689c      	ldr	r4, [r3, #8]
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff fc12 	bl	8000f1c <__aeabi_i2f>
 80016f8:	4606      	mov	r6, r0
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	4619      	mov	r1, r3
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fb57 	bl	8000db4 <__addsf3>
 8001706:	4603      	mov	r3, r0
 8001708:	4619      	mov	r1, r3
 800170a:	4630      	mov	r0, r6
 800170c:	f7ff fb50 	bl	8000db0 <__aeabi_fsub>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	4619      	mov	r1, r3
 800171a:	4610      	mov	r0, r2
 800171c:	f7ff fb4a 	bl	8000db4 <__addsf3>
 8001720:	4603      	mov	r3, r0
 8001722:	4619      	mov	r1, r3
 8001724:	4620      	mov	r0, r4
 8001726:	f7fe fd87 	bl	8000238 <__aeabi_fmul>
 800172a:	4603      	mov	r3, r0
 800172c:	4619      	mov	r1, r3
 800172e:	4640      	mov	r0, r8
 8001730:	f7ff fb40 	bl	8000db4 <__addsf3>
 8001734:	4603      	mov	r3, r0
 8001736:	4619      	mov	r1, r3
 8001738:	4628      	mov	r0, r5
 800173a:	f7ff fb3b 	bl	8000db4 <__addsf3>
 800173e:	4603      	mov	r3, r0
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fc3f 	bl	8000fc4 <__aeabi_f2iz>
 8001746:	4602      	mov	r2, r0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	619a      	str	r2, [r3, #24]

		p->prev_error = p->last_error;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	611a      	str	r2, [r3, #16]
	  p->last_error = error;
 8001754:	6978      	ldr	r0, [r7, #20]
 8001756:	f7ff fbe1 	bl	8000f1c <__aeabi_i2f>
 800175a:	4602      	mov	r2, r0
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	60da      	str	r2, [r3, #12]

		if(p->pwm_add>p->limit) p->pwm_add=p->limit;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699a      	ldr	r2, [r3, #24]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	429a      	cmp	r2, r3
 800176a:	dd03      	ble.n	8001774 <PID_Cal+0xf0>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	619a      	str	r2, [r3, #24]
		if(p->pwm_add<-p->limit) p->pwm_add=-p->limit;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699a      	ldr	r2, [r3, #24]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	425b      	negs	r3, r3
 800177e:	429a      	cmp	r2, r3
 8001780:	da04      	bge.n	800178c <PID_Cal+0x108>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	425a      	negs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	619a      	str	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001798 <MotorRemoteControl>:

void MotorRemoteControl()
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	static uint8_t flag=0;
	if((PPM_Databuf[0]==0)&&(PPM_Databuf[1]==0))
 800179c:	4b2f      	ldr	r3, [pc, #188]	; (800185c <MotorRemoteControl+0xc4>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d108      	bne.n	80017b6 <MotorRemoteControl+0x1e>
 80017a4:	4b2d      	ldr	r3, [pc, #180]	; (800185c <MotorRemoteControl+0xc4>)
 80017a6:	885b      	ldrh	r3, [r3, #2]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d104      	bne.n	80017b6 <MotorRemoteControl+0x1e>
	{
		  B_Left_Stop();
 80017ac:	f7ff feb6 	bl	800151c <B_Left_Stop>
		  B_Right_Stop();
 80017b0:	f7ff fec4 	bl	800153c <B_Right_Stop>
 80017b4:	e04f      	b.n	8001856 <MotorRemoteControl+0xbe>
	}
	else
	{
	if(PPM_Databuf[0]<1600&&PPM_Databuf[0]>1400){PPM_Databuf[0] = 1500;}
 80017b6:	4b29      	ldr	r3, [pc, #164]	; (800185c <MotorRemoteControl+0xc4>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80017be:	d209      	bcs.n	80017d4 <MotorRemoteControl+0x3c>
 80017c0:	4b26      	ldr	r3, [pc, #152]	; (800185c <MotorRemoteControl+0xc4>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80017c8:	d904      	bls.n	80017d4 <MotorRemoteControl+0x3c>
 80017ca:	4b24      	ldr	r3, [pc, #144]	; (800185c <MotorRemoteControl+0xc4>)
 80017cc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80017d0:	801a      	strh	r2, [r3, #0]
 80017d2:	e008      	b.n	80017e6 <MotorRemoteControl+0x4e>
	else if(PPM_Databuf[0] != 1500){flag = 0;}
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <MotorRemoteControl+0xc4>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80017dc:	4293      	cmp	r3, r2
 80017de:	d002      	beq.n	80017e6 <MotorRemoteControl+0x4e>
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <MotorRemoteControl+0xc8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
	if(PPM_Databuf[1]<1600&&PPM_Databuf[1]>1400){PPM_Databuf[1] = 1500;}
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <MotorRemoteControl+0xc4>)
 80017e8:	885b      	ldrh	r3, [r3, #2]
 80017ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80017ee:	d209      	bcs.n	8001804 <MotorRemoteControl+0x6c>
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MotorRemoteControl+0xc4>)
 80017f2:	885b      	ldrh	r3, [r3, #2]
 80017f4:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80017f8:	d904      	bls.n	8001804 <MotorRemoteControl+0x6c>
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <MotorRemoteControl+0xc4>)
 80017fc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001800:	805a      	strh	r2, [r3, #2]
 8001802:	e008      	b.n	8001816 <MotorRemoteControl+0x7e>
	else if(PPM_Databuf[1] != 1500){flag = 1;}
 8001804:	4b15      	ldr	r3, [pc, #84]	; (800185c <MotorRemoteControl+0xc4>)
 8001806:	885b      	ldrh	r3, [r3, #2]
 8001808:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800180c:	4293      	cmp	r3, r2
 800180e:	d002      	beq.n	8001816 <MotorRemoteControl+0x7e>
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <MotorRemoteControl+0xc8>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
	switch(flag)
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MotorRemoteControl+0xc8>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <MotorRemoteControl+0x8c>
 800181e:	2b01      	cmp	r3, #1
 8001820:	d00b      	beq.n	800183a <MotorRemoteControl+0xa2>
		case 1:MotorControl(PPM_Databuf[1]-1500,PPM_Databuf[1]-1500);break;


	}
	}
}
 8001822:	e018      	b.n	8001856 <MotorRemoteControl+0xbe>
			if(PPM_Databuf[0] == 1500)
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <MotorRemoteControl+0xc4>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800182c:	4293      	cmp	r3, r2
 800182e:	d111      	bne.n	8001854 <MotorRemoteControl+0xbc>
				MotorControl(0,0);
 8001830:	2100      	movs	r1, #0
 8001832:	2000      	movs	r0, #0
 8001834:	f7ff fe92 	bl	800155c <MotorControl>
			break;
 8001838:	e00c      	b.n	8001854 <MotorRemoteControl+0xbc>
		case 1:MotorControl(PPM_Databuf[1]-1500,PPM_Databuf[1]-1500);break;
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <MotorRemoteControl+0xc4>)
 800183c:	885b      	ldrh	r3, [r3, #2]
 800183e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001842:	4a06      	ldr	r2, [pc, #24]	; (800185c <MotorRemoteControl+0xc4>)
 8001844:	8852      	ldrh	r2, [r2, #2]
 8001846:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fe85 	bl	800155c <MotorControl>
 8001852:	e000      	b.n	8001856 <MotorRemoteControl+0xbe>
			break;
 8001854:	bf00      	nop
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000204 	.word	0x20000204
 8001860:	2000024c 	.word	0x2000024c

08001864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001868:	f001 f84e 	bl	8002908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186c:	f000 f86a 	bl	8001944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001870:	f7ff fc06 	bl	8001080 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001874:	f000 fa98 	bl	8001da8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001878:	f000 fb6c 	bl	8001f54 <MX_TIM4_Init>
  MX_TIM6_Init();
 800187c:	f000 fc40 	bl	8002100 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001880:	f000 fc74 	bl	800216c <MX_TIM7_Init>
  MX_TIM8_Init();
 8001884:	f000 fca8 	bl	80021d8 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001888:	f000 ff66 	bl	8002758 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800188c:	f000 fb0e 	bl	8001eac <MX_TIM3_Init>
  MX_TIM5_Init();
 8001890:	f000 fbe2 	bl	8002058 <MX_TIM5_Init>
  MX_UART4_Init();
 8001894:	f000 ff36 	bl	8002704 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);  //使能定时�?6中断
 8001898:	481e      	ldr	r0, [pc, #120]	; (8001914 <main+0xb0>)
 800189a:	f001 ffc9 	bl	8003830 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);  //使能定时�?7中断
 800189e:	481e      	ldr	r0, [pc, #120]	; (8001918 <main+0xb4>)
 80018a0:	f001 ffc6 	bl	8003830 <HAL_TIM_Base_Start_IT>
  MotorInit();
 80018a4:	f7ff fdd4 	bl	8001450 <MotorInit>
  ServoInit();
 80018a8:	f7ff fc80 	bl	80011ac <ServoInit>
  EncoderInit();
 80018ac:	f7ff fdde 	bl	800146c <EncoderInit>
  PID_Init(&B_L_PID);
 80018b0:	481a      	ldr	r0, [pc, #104]	; (800191c <main+0xb8>)
 80018b2:	f7ff fec1 	bl	8001638 <PID_Init>
  PID_Init(&B_R_PID);
 80018b6:	481a      	ldr	r0, [pc, #104]	; (8001920 <main+0xbc>)
 80018b8:	f7ff febe 	bl	8001638 <PID_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MotorRemoteControl();
 80018bc:	f7ff ff6c 	bl	8001798 <MotorRemoteControl>
	  	      ServoControl();
 80018c0:	f7ff fcda 	bl	8001278 <ServoControl>
	  	  		printf("PPM_Data[0] is %d\r\n",PPM_Databuf[0]);
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <main+0xc0>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	4817      	ldr	r0, [pc, #92]	; (8001928 <main+0xc4>)
 80018cc:	f004 f9a2 	bl	8005c14 <iprintf>
	  	      printf("PPM_Data[1] is %d\r\n",PPM_Databuf[1]);
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <main+0xc0>)
 80018d2:	885b      	ldrh	r3, [r3, #2]
 80018d4:	4619      	mov	r1, r3
 80018d6:	4815      	ldr	r0, [pc, #84]	; (800192c <main+0xc8>)
 80018d8:	f004 f99c 	bl	8005c14 <iprintf>
	  	      printf("PPM_Data[2] is %d\r\n",PPM_Databuf[2]);
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <main+0xc0>)
 80018de:	889b      	ldrh	r3, [r3, #4]
 80018e0:	4619      	mov	r1, r3
 80018e2:	4813      	ldr	r0, [pc, #76]	; (8001930 <main+0xcc>)
 80018e4:	f004 f996 	bl	8005c14 <iprintf>
	  	      printf("PPM_Data[3] is %d\r\n",PPM_Databuf[3]);
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <main+0xc0>)
 80018ea:	88db      	ldrh	r3, [r3, #6]
 80018ec:	4619      	mov	r1, r3
 80018ee:	4811      	ldr	r0, [pc, #68]	; (8001934 <main+0xd0>)
 80018f0:	f004 f990 	bl	8005c14 <iprintf>
	  	         printf("PPM_Data[4] is %d\r\n",PPM_Databuf[4]);
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <main+0xc0>)
 80018f6:	891b      	ldrh	r3, [r3, #8]
 80018f8:	4619      	mov	r1, r3
 80018fa:	480f      	ldr	r0, [pc, #60]	; (8001938 <main+0xd4>)
 80018fc:	f004 f98a 	bl	8005c14 <iprintf>
	  	      printf("PPM_Data[5] is %d\r\n",PPM_Databuf[5]);
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <main+0xc0>)
 8001902:	895b      	ldrh	r3, [r3, #10]
 8001904:	4619      	mov	r1, r3
 8001906:	480d      	ldr	r0, [pc, #52]	; (800193c <main+0xd8>)
 8001908:	f004 f984 	bl	8005c14 <iprintf>
	  	    printf("----------------------------\r\n");
 800190c:	480c      	ldr	r0, [pc, #48]	; (8001940 <main+0xdc>)
 800190e:	f004 f9e7 	bl	8005ce0 <puts>
	  MotorRemoteControl();
 8001912:	e7d3      	b.n	80018bc <main+0x58>
 8001914:	20000374 	.word	0x20000374
 8001918:	200003bc 	.word	0x200003bc
 800191c:	20000214 	.word	0x20000214
 8001920:	20000230 	.word	0x20000230
 8001924:	20000204 	.word	0x20000204
 8001928:	08009618 	.word	0x08009618
 800192c:	0800962c 	.word	0x0800962c
 8001930:	08009640 	.word	0x08009640
 8001934:	08009654 	.word	0x08009654
 8001938:	08009668 	.word	0x08009668
 800193c:	0800967c 	.word	0x0800967c
 8001940:	08009690 	.word	0x08009690

08001944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b090      	sub	sp, #64	; 0x40
 8001948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194a:	f107 0318 	add.w	r3, r7, #24
 800194e:	2228      	movs	r2, #40	; 0x28
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f004 fac4 	bl	8005ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001966:	2301      	movs	r3, #1
 8001968:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800196a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800196e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001974:	2301      	movs	r3, #1
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001978:	2302      	movs	r3, #2
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800197c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001980:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001982:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001986:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001988:	f107 0318 	add.w	r3, r7, #24
 800198c:	4618      	mov	r0, r3
 800198e:	f001 faef 	bl	8002f70 <HAL_RCC_OscConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001998:	f000 f8c6 	bl	8001b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199c:	230f      	movs	r3, #15
 800199e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a0:	2302      	movs	r3, #2
 80019a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2102      	movs	r1, #2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 fd5c 	bl	8003474 <HAL_RCC_ClockConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80019c2:	f000 f8b1 	bl	8001b28 <Error_Handler>
  }
}
 80019c6:	bf00      	nop
 80019c8:	3740      	adds	r7, #64	; 0x40
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  //定时�?6中断回调函数
{
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	float B_LSpeed,B_RSpeed;
  if(htim==(&htim6))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a24      	ldr	r2, [pc, #144]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d141      	bne.n	8001a64 <HAL_TIM_PeriodElapsedCallback+0x94>
  {
		GetEncoderPulse();
 80019e0:	f7ff fde6 	bl	80015b0 <GetEncoderPulse>
		B_LSpeed = CalActualSpeed(encoderPulse[0]);   //获得当前的�?�度�?
 80019e4:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80019e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fe08 	bl	8001600 <CalActualSpeed>
 80019f0:	60f8      	str	r0, [r7, #12]
		B_RSpeed = CalActualSpeed(encoderPulse[1]);
 80019f2:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80019f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fe01 	bl	8001600 <CalActualSpeed>
 80019fe:	60b8      	str	r0, [r7, #8]

		PID_Cal(B_LTargetSpeed*100,B_LSpeed*100,&B_L_PID);
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	491c      	ldr	r1, [pc, #112]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fc16 	bl	8000238 <__aeabi_fmul>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fad8 	bl	8000fc4 <__aeabi_f2iz>
 8001a14:	4604      	mov	r4, r0
 8001a16:	4918      	ldr	r1, [pc, #96]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f7fe fc0d 	bl	8000238 <__aeabi_fmul>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff facf 	bl	8000fc4 <__aeabi_f2iz>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7ff fe29 	bl	8001684 <PID_Cal>
		PID_Cal(B_RTargetSpeed*100,B_RSpeed*100,&B_R_PID);
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4910      	ldr	r1, [pc, #64]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fbfd 	bl	8000238 <__aeabi_fmul>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fabf 	bl	8000fc4 <__aeabi_f2iz>
 8001a46:	4604      	mov	r4, r0
 8001a48:	490b      	ldr	r1, [pc, #44]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f7fe fbf4 	bl	8000238 <__aeabi_fmul>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fab6 	bl	8000fc4 <__aeabi_f2iz>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f7ff fe10 	bl	8001684 <PID_Cal>
//	printf("B_LLLPulse is %d\r\n",encoderPulse[3]);
//	printf("----------------------------\r\n");
//		printf("{bbbbrrrrSpeed is:%.2f}\r\n",B_RSpeed);
//		printf("{bbbbllllSpeed is:%.2f}\r\n",B_LSpeed);
  }
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	20000374 	.word	0x20000374
 8001a70:	200001f8 	.word	0x200001f8
 8001a74:	200001f0 	.word	0x200001f0
 8001a78:	42c80000 	.word	0x42c80000
 8001a7c:	20000214 	.word	0x20000214
 8001a80:	200001f4 	.word	0x200001f4
 8001a84:	20000230 	.word	0x20000230

08001a88 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d137      	bne.n	8001b08 <HAL_GPIO_EXTI_Callback+0x80>
	{
		PPM_Time = __HAL_TIM_GET_COUNTER(&htim7);
 8001a98:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x90>)
 8001aa0:	6013      	str	r3, [r2, #0]
		__HAL_TIM_GET_COUNTER(&htim7) = 0;
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
			if(PPM_Time > 0)
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x90>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <HAL_GPIO_EXTI_Callback+0x34>
			{
			  PPM_Time++;
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x90>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x90>)
 8001aba:	6013      	str	r3, [r2, #0]
			}
		if(PPM_Okay == 1)
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x94>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d115      	bne.n	8001af0 <HAL_GPIO_EXTI_Callback+0x68>
		{
			PPM_Databuf[PPM_Sample_Cnt] = PPM_Time;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x90>)
 8001ac6:	6819      	ldr	r1, [r3, #0]
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_GPIO_EXTI_Callback+0x98>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	b289      	uxth	r1, r1
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001ad2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			PPM_Sample_Cnt++;
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_GPIO_EXTI_Callback+0x98>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <HAL_GPIO_EXTI_Callback+0x98>)
 8001ae0:	801a      	strh	r2, [r3, #0]
			if(PPM_Sample_Cnt > 8) PPM_Okay = 0;
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_GPIO_EXTI_Callback+0x98>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d902      	bls.n	8001af0 <HAL_GPIO_EXTI_Callback+0x68>
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x94>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
		}
		if(PPM_Time>=3000)
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x90>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d905      	bls.n	8001b08 <HAL_GPIO_EXTI_Callback+0x80>
		{
			PPM_Okay = 1;
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x94>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
			PPM_Sample_Cnt = 0;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <HAL_GPIO_EXTI_Callback+0x98>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	200003bc 	.word	0x200003bc
 8001b18:	20000200 	.word	0x20000200
 8001b1c:	200001fc 	.word	0x200001fc
 8001b20:	200001fe 	.word	0x200001fe
 8001b24:	20000204 	.word	0x20000204

08001b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <Error_Handler+0x8>
	...

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6193      	str	r3, [r2, #24]
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	61d3      	str	r3, [r2, #28]
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_MspInit+0x60>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_MspInit+0x60>)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40010000 	.word	0x40010000

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <NMI_Handler+0x4>

08001b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <MemManage_Handler+0x4>

08001baa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <BusFault_Handler+0x4>

08001bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <UsageFault_Handler+0x4>

08001bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bde:	f000 fed9 	bl	8002994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bea:	2001      	movs	r0, #1
 8001bec:	f001 f9a8 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <TIM6_IRQHandler+0x10>)
 8001bfa:	f002 f8bb 	bl	8003d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000374 	.word	0x20000374

08001c08 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <TIM7_IRQHandler+0x10>)
 8001c0e:	f002 f8b1 	bl	8003d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200003bc 	.word	0x200003bc

08001c1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return 1;
 8001c20:	2301      	movs	r3, #1
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <_kill>:

int _kill(int pid, int sig)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c34:	f004 f9a6 	bl	8005f84 <__errno>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2216      	movs	r2, #22
 8001c3c:	601a      	str	r2, [r3, #0]
  return -1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <_exit>:

void _exit (int status)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c52:	f04f 31ff 	mov.w	r1, #4294967295
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffe7 	bl	8001c2a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c5c:	e7fe      	b.n	8001c5c <_exit+0x12>

08001c5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e00a      	b.n	8001c86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c70:	f3af 8000 	nop.w
 8001c74:	4601      	mov	r1, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	60ba      	str	r2, [r7, #8]
 8001c7c:	b2ca      	uxtb	r2, r1
 8001c7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	dbf0      	blt.n	8001c70 <_read+0x12>
  }

  return len;
 8001c8e:	687b      	ldr	r3, [r7, #4]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	e009      	b.n	8001cbe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	60ba      	str	r2, [r7, #8]
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fd14 	bl	80026e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dbf1      	blt.n	8001caa <_write+0x12>
  }
  return len;
 8001cc6:	687b      	ldr	r3, [r7, #4]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_close>:

int _close(int file)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cf6:	605a      	str	r2, [r3, #4]
  return 0;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <_isatty>:

int _isatty(int file)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d0c:	2301      	movs	r3, #1
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d38:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <_sbrk+0x5c>)
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <_sbrk+0x60>)
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d44:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <_sbrk+0x64>)
 8001d4e:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <_sbrk+0x68>)
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d207      	bcs.n	8001d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d60:	f004 f910 	bl	8005f84 <__errno>
 8001d64:	4603      	mov	r3, r0
 8001d66:	220c      	movs	r2, #12
 8001d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6e:	e009      	b.n	8001d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <_sbrk+0x64>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <_sbrk+0x64>)
 8001d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d82:	68fb      	ldr	r3, [r7, #12]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	2000c000 	.word	0x2000c000
 8001d90:	00000400 	.word	0x00000400
 8001d94:	20000250 	.word	0x20000250
 8001d98:	20000630 	.word	0x20000630

08001d9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08e      	sub	sp, #56	; 0x38
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbc:	f107 0320 	add.w	r3, r7, #32
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
 8001dd4:	615a      	str	r2, [r3, #20]
 8001dd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dd8:	4b33      	ldr	r3, [pc, #204]	; (8001ea8 <MX_TIM2_Init+0x100>)
 8001dda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8001de0:	4b31      	ldr	r3, [pc, #196]	; (8001ea8 <MX_TIM2_Init+0x100>)
 8001de2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001de6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de8:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <MX_TIM2_Init+0x100>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001dee:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <MX_TIM2_Init+0x100>)
 8001df0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001df4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df6:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <MX_TIM2_Init+0x100>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <MX_TIM2_Init+0x100>)
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e02:	4829      	ldr	r0, [pc, #164]	; (8001ea8 <MX_TIM2_Init+0x100>)
 8001e04:	f001 fcc4 	bl	8003790 <HAL_TIM_Base_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e0e:	f7ff fe8b 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4822      	ldr	r0, [pc, #136]	; (8001ea8 <MX_TIM2_Init+0x100>)
 8001e20:	f002 f972 	bl	8004108 <HAL_TIM_ConfigClockSource>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001e2a:	f7ff fe7d 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e2e:	481e      	ldr	r0, [pc, #120]	; (8001ea8 <MX_TIM2_Init+0x100>)
 8001e30:	f001 fd5e 	bl	80038f0 <HAL_TIM_PWM_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001e3a:	f7ff fe75 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e46:	f107 0320 	add.w	r3, r7, #32
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4816      	ldr	r0, [pc, #88]	; (8001ea8 <MX_TIM2_Init+0x100>)
 8001e4e:	f002 fd27 	bl	80048a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e58:	f7ff fe66 	bl	8001b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e5c:	2360      	movs	r3, #96	; 0x60
 8001e5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	2208      	movs	r2, #8
 8001e70:	4619      	mov	r1, r3
 8001e72:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <MX_TIM2_Init+0x100>)
 8001e74:	f002 f886 	bl	8003f84 <HAL_TIM_PWM_ConfigChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001e7e:	f7ff fe53 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	220c      	movs	r2, #12
 8001e86:	4619      	mov	r1, r3
 8001e88:	4807      	ldr	r0, [pc, #28]	; (8001ea8 <MX_TIM2_Init+0x100>)
 8001e8a:	f002 f87b 	bl	8003f84 <HAL_TIM_PWM_ConfigChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001e94:	f7ff fe48 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e98:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <MX_TIM2_Init+0x100>)
 8001e9a:	f000 fb97 	bl	80025cc <HAL_TIM_MspPostInit>

}
 8001e9e:	bf00      	nop
 8001ea0:	3738      	adds	r7, #56	; 0x38
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000254 	.word	0x20000254

08001eac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08c      	sub	sp, #48	; 0x30
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001eb2:	f107 030c 	add.w	r3, r7, #12
 8001eb6:	2224      	movs	r2, #36	; 0x24
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f004 f810 	bl	8005ee0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ec8:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001eca:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <MX_TIM3_Init+0xa4>)
 8001ecc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ece:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001eda:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f06:	2301      	movs	r3, #1
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	4619      	mov	r1, r3
 8001f18:	480c      	ldr	r0, [pc, #48]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001f1a:	f001 fdfb 	bl	8003b14 <HAL_TIM_Encoder_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f24:	f7ff fe00 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	4619      	mov	r1, r3
 8001f34:	4805      	ldr	r0, [pc, #20]	; (8001f4c <MX_TIM3_Init+0xa0>)
 8001f36:	f002 fcb3 	bl	80048a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001f40:	f7ff fdf2 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	3730      	adds	r7, #48	; 0x30
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	2000029c 	.word	0x2000029c
 8001f50:	40000400 	.word	0x40000400

08001f54 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08e      	sub	sp, #56	; 0x38
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f68:	f107 0320 	add.w	r3, r7, #32
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
 8001f80:	615a      	str	r2, [r3, #20]
 8001f82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f84:	4b32      	ldr	r3, [pc, #200]	; (8002050 <MX_TIM4_Init+0xfc>)
 8001f86:	4a33      	ldr	r2, [pc, #204]	; (8002054 <MX_TIM4_Init+0x100>)
 8001f88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 8001f8a:	4b31      	ldr	r3, [pc, #196]	; (8002050 <MX_TIM4_Init+0xfc>)
 8001f8c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001f90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f92:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <MX_TIM4_Init+0xfc>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001f98:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <MX_TIM4_Init+0xfc>)
 8001f9a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001f9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <MX_TIM4_Init+0xfc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa6:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <MX_TIM4_Init+0xfc>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fac:	4828      	ldr	r0, [pc, #160]	; (8002050 <MX_TIM4_Init+0xfc>)
 8001fae:	f001 fbef 	bl	8003790 <HAL_TIM_Base_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001fb8:	f7ff fdb6 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4821      	ldr	r0, [pc, #132]	; (8002050 <MX_TIM4_Init+0xfc>)
 8001fca:	f002 f89d 	bl	8004108 <HAL_TIM_ConfigClockSource>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001fd4:	f7ff fda8 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001fd8:	481d      	ldr	r0, [pc, #116]	; (8002050 <MX_TIM4_Init+0xfc>)
 8001fda:	f001 fc89 	bl	80038f0 <HAL_TIM_PWM_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001fe4:	f7ff fda0 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ff0:	f107 0320 	add.w	r3, r7, #32
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4816      	ldr	r0, [pc, #88]	; (8002050 <MX_TIM4_Init+0xfc>)
 8001ff8:	f002 fc52 	bl	80048a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002002:	f7ff fd91 	bl	8001b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002006:	2360      	movs	r3, #96	; 0x60
 8002008:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	2208      	movs	r2, #8
 800201a:	4619      	mov	r1, r3
 800201c:	480c      	ldr	r0, [pc, #48]	; (8002050 <MX_TIM4_Init+0xfc>)
 800201e:	f001 ffb1 	bl	8003f84 <HAL_TIM_PWM_ConfigChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002028:	f7ff fd7e 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	220c      	movs	r2, #12
 8002030:	4619      	mov	r1, r3
 8002032:	4807      	ldr	r0, [pc, #28]	; (8002050 <MX_TIM4_Init+0xfc>)
 8002034:	f001 ffa6 	bl	8003f84 <HAL_TIM_PWM_ConfigChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800203e:	f7ff fd73 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002042:	4803      	ldr	r0, [pc, #12]	; (8002050 <MX_TIM4_Init+0xfc>)
 8002044:	f000 fac2 	bl	80025cc <HAL_TIM_MspPostInit>

}
 8002048:	bf00      	nop
 800204a:	3738      	adds	r7, #56	; 0x38
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200002e4 	.word	0x200002e4
 8002054:	40000800 	.word	0x40000800

08002058 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08c      	sub	sp, #48	; 0x30
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	2224      	movs	r2, #36	; 0x24
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f003 ff3a 	bl	8005ee0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <MX_TIM5_Init+0xa0>)
 8002076:	4a21      	ldr	r2, [pc, #132]	; (80020fc <MX_TIM5_Init+0xa4>)
 8002078:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <MX_TIM5_Init+0xa0>)
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <MX_TIM5_Init+0xa0>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <MX_TIM5_Init+0xa0>)
 8002088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800208c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <MX_TIM5_Init+0xa0>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002094:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <MX_TIM5_Init+0xa0>)
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800209a:	2303      	movs	r3, #3
 800209c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020a2:	2301      	movs	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020b2:	2301      	movs	r3, #1
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020b6:	2300      	movs	r3, #0
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	4619      	mov	r1, r3
 80020c4:	480c      	ldr	r0, [pc, #48]	; (80020f8 <MX_TIM5_Init+0xa0>)
 80020c6:	f001 fd25 	bl	8003b14 <HAL_TIM_Encoder_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80020d0:	f7ff fd2a 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d4:	2300      	movs	r3, #0
 80020d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	4619      	mov	r1, r3
 80020e0:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_TIM5_Init+0xa0>)
 80020e2:	f002 fbdd 	bl	80048a0 <HAL_TIMEx_MasterConfigSynchronization>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80020ec:	f7ff fd1c 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80020f0:	bf00      	nop
 80020f2:	3730      	adds	r7, #48	; 0x30
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	2000032c 	.word	0x2000032c
 80020fc:	40000c00 	.word	0x40000c00

08002100 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002106:	463b      	mov	r3, r7
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <MX_TIM6_Init+0x64>)
 8002110:	4a15      	ldr	r2, [pc, #84]	; (8002168 <MX_TIM6_Init+0x68>)
 8002112:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 499;
 8002114:	4b13      	ldr	r3, [pc, #76]	; (8002164 <MX_TIM6_Init+0x64>)
 8002116:	f240 12f3 	movw	r2, #499	; 0x1f3
 800211a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <MX_TIM6_Init+0x64>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7199;
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <MX_TIM6_Init+0x64>)
 8002124:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002128:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <MX_TIM6_Init+0x64>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002130:	480c      	ldr	r0, [pc, #48]	; (8002164 <MX_TIM6_Init+0x64>)
 8002132:	f001 fb2d 	bl	8003790 <HAL_TIM_Base_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800213c:	f7ff fcf4 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002140:	2300      	movs	r3, #0
 8002142:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002148:	463b      	mov	r3, r7
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_TIM6_Init+0x64>)
 800214e:	f002 fba7 	bl	80048a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002158:	f7ff fce6 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000374 	.word	0x20000374
 8002168:	40001000 	.word	0x40001000

0800216c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002172:	463b      	mov	r3, r7
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <MX_TIM7_Init+0x64>)
 800217c:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <MX_TIM7_Init+0x68>)
 800217e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <MX_TIM7_Init+0x64>)
 8002182:	2247      	movs	r2, #71	; 0x47
 8002184:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <MX_TIM7_Init+0x64>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <MX_TIM7_Init+0x64>)
 800218e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002192:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <MX_TIM7_Init+0x64>)
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800219a:	480d      	ldr	r0, [pc, #52]	; (80021d0 <MX_TIM7_Init+0x64>)
 800219c:	f001 faf8 	bl	8003790 <HAL_TIM_Base_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80021a6:	f7ff fcbf 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80021b2:	463b      	mov	r3, r7
 80021b4:	4619      	mov	r1, r3
 80021b6:	4806      	ldr	r0, [pc, #24]	; (80021d0 <MX_TIM7_Init+0x64>)
 80021b8:	f002 fb72 	bl	80048a0 <HAL_TIMEx_MasterConfigSynchronization>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80021c2:	f7ff fcb1 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200003bc 	.word	0x200003bc
 80021d4:	40001400 	.word	0x40001400

080021d8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b096      	sub	sp, #88	; 0x58
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
 8002204:	611a      	str	r2, [r3, #16]
 8002206:	615a      	str	r2, [r3, #20]
 8002208:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	2220      	movs	r2, #32
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f003 fe65 	bl	8005ee0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002216:	4b50      	ldr	r3, [pc, #320]	; (8002358 <MX_TIM8_Init+0x180>)
 8002218:	4a50      	ldr	r2, [pc, #320]	; (800235c <MX_TIM8_Init+0x184>)
 800221a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 800221c:	4b4e      	ldr	r3, [pc, #312]	; (8002358 <MX_TIM8_Init+0x180>)
 800221e:	2203      	movs	r2, #3
 8002220:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002222:	4b4d      	ldr	r3, [pc, #308]	; (8002358 <MX_TIM8_Init+0x180>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8002228:	4b4b      	ldr	r3, [pc, #300]	; (8002358 <MX_TIM8_Init+0x180>)
 800222a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800222e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002230:	4b49      	ldr	r3, [pc, #292]	; (8002358 <MX_TIM8_Init+0x180>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002236:	4b48      	ldr	r3, [pc, #288]	; (8002358 <MX_TIM8_Init+0x180>)
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223c:	4b46      	ldr	r3, [pc, #280]	; (8002358 <MX_TIM8_Init+0x180>)
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002242:	4845      	ldr	r0, [pc, #276]	; (8002358 <MX_TIM8_Init+0x180>)
 8002244:	f001 faa4 	bl	8003790 <HAL_TIM_Base_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800224e:	f7ff fc6b 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002256:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002258:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800225c:	4619      	mov	r1, r3
 800225e:	483e      	ldr	r0, [pc, #248]	; (8002358 <MX_TIM8_Init+0x180>)
 8002260:	f001 ff52 	bl	8004108 <HAL_TIM_ConfigClockSource>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800226a:	f7ff fc5d 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800226e:	483a      	ldr	r0, [pc, #232]	; (8002358 <MX_TIM8_Init+0x180>)
 8002270:	f001 fb3e 	bl	80038f0 <HAL_TIM_PWM_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800227a:	f7ff fc55 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002286:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800228a:	4619      	mov	r1, r3
 800228c:	4832      	ldr	r0, [pc, #200]	; (8002358 <MX_TIM8_Init+0x180>)
 800228e:	f002 fb07 	bl	80048a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002298:	f7ff fc46 	bl	8001b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800229c:	2360      	movs	r3, #96	; 0x60
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022a8:	2300      	movs	r3, #0
 80022aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022b0:	2300      	movs	r3, #0
 80022b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022b4:	2300      	movs	r3, #0
 80022b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022bc:	2200      	movs	r2, #0
 80022be:	4619      	mov	r1, r3
 80022c0:	4825      	ldr	r0, [pc, #148]	; (8002358 <MX_TIM8_Init+0x180>)
 80022c2:	f001 fe5f 	bl	8003f84 <HAL_TIM_PWM_ConfigChannel>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80022cc:	f7ff fc2c 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d4:	2204      	movs	r2, #4
 80022d6:	4619      	mov	r1, r3
 80022d8:	481f      	ldr	r0, [pc, #124]	; (8002358 <MX_TIM8_Init+0x180>)
 80022da:	f001 fe53 	bl	8003f84 <HAL_TIM_PWM_ConfigChannel>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80022e4:	f7ff fc20 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ec:	2208      	movs	r2, #8
 80022ee:	4619      	mov	r1, r3
 80022f0:	4819      	ldr	r0, [pc, #100]	; (8002358 <MX_TIM8_Init+0x180>)
 80022f2:	f001 fe47 	bl	8003f84 <HAL_TIM_PWM_ConfigChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80022fc:	f7ff fc14 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002304:	220c      	movs	r2, #12
 8002306:	4619      	mov	r1, r3
 8002308:	4813      	ldr	r0, [pc, #76]	; (8002358 <MX_TIM8_Init+0x180>)
 800230a:	f001 fe3b 	bl	8003f84 <HAL_TIM_PWM_ConfigChannel>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002314:	f7ff fc08 	bl	8001b28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800232c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002330:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	4619      	mov	r1, r3
 800233a:	4807      	ldr	r0, [pc, #28]	; (8002358 <MX_TIM8_Init+0x180>)
 800233c:	f002 fb1c 	bl	8004978 <HAL_TIMEx_ConfigBreakDeadTime>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8002346:	f7ff fbef 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800234a:	4803      	ldr	r0, [pc, #12]	; (8002358 <MX_TIM8_Init+0x180>)
 800234c:	f000 f93e 	bl	80025cc <HAL_TIM_MspPostInit>

}
 8002350:	bf00      	nop
 8002352:	3758      	adds	r7, #88	; 0x58
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000404 	.word	0x20000404
 800235c:	40013400 	.word	0x40013400

08002360 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08e      	sub	sp, #56	; 0x38
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237e:	d14f      	bne.n	8002420 <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002380:	4b55      	ldr	r3, [pc, #340]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	4a54      	ldr	r2, [pc, #336]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	61d3      	str	r3, [r2, #28]
 800238c:	4b52      	ldr	r3, [pc, #328]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	623b      	str	r3, [r7, #32]
 8002396:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002398:	4b4f      	ldr	r3, [pc, #316]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	4a4e      	ldr	r2, [pc, #312]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	6193      	str	r3, [r2, #24]
 80023a4:	4b4c      	ldr	r3, [pc, #304]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b0:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	4a48      	ldr	r2, [pc, #288]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 80023b6:	f043 0308 	orr.w	r3, r3, #8
 80023ba:	6193      	str	r3, [r2, #24]
 80023bc:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2302      	movs	r3, #2
 80023d4:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023da:	4619      	mov	r1, r3
 80023dc:	483f      	ldr	r0, [pc, #252]	; (80024dc <HAL_TIM_Base_MspInit+0x17c>)
 80023de:	f000 fc03 	bl	8002be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023e2:	2308      	movs	r3, #8
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ea:	2302      	movs	r3, #2
 80023ec:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f2:	4619      	mov	r1, r3
 80023f4:	483a      	ldr	r0, [pc, #232]	; (80024e0 <HAL_TIM_Base_MspInit+0x180>)
 80023f6:	f000 fbf7 	bl	8002be8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80023fa:	4b3a      	ldr	r3, [pc, #232]	; (80024e4 <HAL_TIM_Base_MspInit+0x184>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002406:	637b      	str	r3, [r7, #52]	; 0x34
 8002408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002416:	637b      	str	r3, [r7, #52]	; 0x34
 8002418:	4a32      	ldr	r2, [pc, #200]	; (80024e4 <HAL_TIM_Base_MspInit+0x184>)
 800241a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241c:	6053      	str	r3, [r2, #4]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800241e:	e056      	b.n	80024ce <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM4)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a30      	ldr	r2, [pc, #192]	; (80024e8 <HAL_TIM_Base_MspInit+0x188>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d10c      	bne.n	8002444 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800242a:	4b2b      	ldr	r3, [pc, #172]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4a2a      	ldr	r2, [pc, #168]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	61d3      	str	r3, [r2, #28]
 8002436:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697b      	ldr	r3, [r7, #20]
}
 8002442:	e044      	b.n	80024ce <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM6)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a28      	ldr	r2, [pc, #160]	; (80024ec <HAL_TIM_Base_MspInit+0x18c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d114      	bne.n	8002478 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800244e:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 8002454:	f043 0310 	orr.w	r3, r3, #16
 8002458:	61d3      	str	r3, [r2, #28]
 800245a:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	2100      	movs	r1, #0
 800246a:	2036      	movs	r0, #54	; 0x36
 800246c:	f000 fb85 	bl	8002b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002470:	2036      	movs	r0, #54	; 0x36
 8002472:	f000 fb9e 	bl	8002bb2 <HAL_NVIC_EnableIRQ>
}
 8002476:	e02a      	b.n	80024ce <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM7)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <HAL_TIM_Base_MspInit+0x190>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d114      	bne.n	80024ac <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 8002488:	f043 0320 	orr.w	r3, r3, #32
 800248c:	61d3      	str	r3, [r2, #28]
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	2037      	movs	r0, #55	; 0x37
 80024a0:	f000 fb6b 	bl	8002b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80024a4:	2037      	movs	r0, #55	; 0x37
 80024a6:	f000 fb84 	bl	8002bb2 <HAL_NVIC_EnableIRQ>
}
 80024aa:	e010      	b.n	80024ce <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM8)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <HAL_TIM_Base_MspInit+0x194>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d10b      	bne.n	80024ce <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 80024bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024c0:	6193      	str	r3, [r2, #24]
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_TIM_Base_MspInit+0x178>)
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
}
 80024ce:	bf00      	nop
 80024d0:	3738      	adds	r7, #56	; 0x38
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40010800 	.word	0x40010800
 80024e0:	40010c00 	.word	0x40010c00
 80024e4:	40010000 	.word	0x40010000
 80024e8:	40000800 	.word	0x40000800
 80024ec:	40001000 	.word	0x40001000
 80024f0:	40001400 	.word	0x40001400
 80024f4:	40013400 	.word	0x40013400

080024f8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0318 	add.w	r3, r7, #24
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a2a      	ldr	r2, [pc, #168]	; (80025bc <HAL_TIM_Encoder_MspInit+0xc4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d124      	bne.n	8002562 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002518:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	4a28      	ldr	r2, [pc, #160]	; (80025c0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800251e:	f043 0302 	orr.w	r3, r3, #2
 8002522:	61d3      	str	r3, [r2, #28]
 8002524:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002530:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002536:	f043 0304 	orr.w	r3, r3, #4
 800253a:	6193      	str	r3, [r2, #24]
 800253c:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002548:	23c0      	movs	r3, #192	; 0xc0
 800254a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002554:	f107 0318 	add.w	r3, r7, #24
 8002558:	4619      	mov	r1, r3
 800255a:	481a      	ldr	r0, [pc, #104]	; (80025c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800255c:	f000 fb44 	bl	8002be8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002560:	e028      	b.n	80025b4 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(tim_encoderHandle->Instance==TIM5)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a18      	ldr	r2, [pc, #96]	; (80025c8 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d123      	bne.n	80025b4 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	4a13      	ldr	r2, [pc, #76]	; (80025c0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002572:	f043 0308 	orr.w	r3, r3, #8
 8002576:	61d3      	str	r3, [r2, #28]
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002584:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	4a0d      	ldr	r2, [pc, #52]	; (80025c0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6193      	str	r3, [r2, #24]
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800259c:	2303      	movs	r3, #3
 800259e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a8:	f107 0318 	add.w	r3, r7, #24
 80025ac:	4619      	mov	r1, r3
 80025ae:	4805      	ldr	r0, [pc, #20]	; (80025c4 <HAL_TIM_Encoder_MspInit+0xcc>)
 80025b0:	f000 fb1a 	bl	8002be8 <HAL_GPIO_Init>
}
 80025b4:	bf00      	nop
 80025b6:	3728      	adds	r7, #40	; 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40000400 	.word	0x40000400
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40010800 	.word	0x40010800
 80025c8:	40000c00 	.word	0x40000c00

080025cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ea:	d12a      	bne.n	8002642 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ec:	4b35      	ldr	r3, [pc, #212]	; (80026c4 <HAL_TIM_MspPostInit+0xf8>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4a34      	ldr	r2, [pc, #208]	; (80026c4 <HAL_TIM_MspPostInit+0xf8>)
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	6193      	str	r3, [r2, #24]
 80025f8:	4b32      	ldr	r3, [pc, #200]	; (80026c4 <HAL_TIM_MspPostInit+0xf8>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002604:	230c      	movs	r3, #12
 8002606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260c:	2302      	movs	r3, #2
 800260e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	4619      	mov	r1, r3
 8002616:	482c      	ldr	r0, [pc, #176]	; (80026c8 <HAL_TIM_MspPostInit+0xfc>)
 8002618:	f000 fae6 	bl	8002be8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800261c:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_TIM_MspPostInit+0x100>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
 800263a:	4a24      	ldr	r2, [pc, #144]	; (80026cc <HAL_TIM_MspPostInit+0x100>)
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002640:	e03c      	b.n	80026bc <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a22      	ldr	r2, [pc, #136]	; (80026d0 <HAL_TIM_MspPostInit+0x104>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d119      	bne.n	8002680 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264c:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <HAL_TIM_MspPostInit+0xf8>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <HAL_TIM_MspPostInit+0xf8>)
 8002652:	f043 0308 	orr.w	r3, r3, #8
 8002656:	6193      	str	r3, [r2, #24]
 8002658:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <HAL_TIM_MspPostInit+0xf8>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002664:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2302      	movs	r3, #2
 8002670:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002672:	f107 0314 	add.w	r3, r7, #20
 8002676:	4619      	mov	r1, r3
 8002678:	4816      	ldr	r0, [pc, #88]	; (80026d4 <HAL_TIM_MspPostInit+0x108>)
 800267a:	f000 fab5 	bl	8002be8 <HAL_GPIO_Init>
}
 800267e:	e01d      	b.n	80026bc <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM8)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <HAL_TIM_MspPostInit+0x10c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d118      	bne.n	80026bc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_TIM_MspPostInit+0xf8>)
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	4a0d      	ldr	r2, [pc, #52]	; (80026c4 <HAL_TIM_MspPostInit+0xf8>)
 8002690:	f043 0310 	orr.w	r3, r3, #16
 8002694:	6193      	str	r3, [r2, #24]
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_TIM_MspPostInit+0xf8>)
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80026a2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80026a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2302      	movs	r3, #2
 80026ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	4619      	mov	r1, r3
 80026b6:	4809      	ldr	r0, [pc, #36]	; (80026dc <HAL_TIM_MspPostInit+0x110>)
 80026b8:	f000 fa96 	bl	8002be8 <HAL_GPIO_Init>
}
 80026bc:	bf00      	nop
 80026be:	3728      	adds	r7, #40	; 0x28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40010800 	.word	0x40010800
 80026cc:	40010000 	.word	0x40010000
 80026d0:	40000800 	.word	0x40000800
 80026d4:	40010c00 	.word	0x40010c00
 80026d8:	40013400 	.word	0x40013400
 80026dc:	40011000 	.word	0x40011000

080026e0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 80026e8:	1d39      	adds	r1, r7, #4
 80026ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ee:	2201      	movs	r2, #1
 80026f0:	4803      	ldr	r0, [pc, #12]	; (8002700 <__io_putchar+0x20>)
 80026f2:	f002 f9f4 	bl	8004ade <HAL_UART_Transmit>
	return ch;
 80026f6:	687b      	ldr	r3, [r7, #4]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000494 	.word	0x20000494

08002704 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <MX_UART4_Init+0x4c>)
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <MX_UART4_Init+0x50>)
 800270c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <MX_UART4_Init+0x4c>)
 8002710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002714:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <MX_UART4_Init+0x4c>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <MX_UART4_Init+0x4c>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <MX_UART4_Init+0x4c>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <MX_UART4_Init+0x4c>)
 800272a:	220c      	movs	r2, #12
 800272c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272e:	4b08      	ldr	r3, [pc, #32]	; (8002750 <MX_UART4_Init+0x4c>)
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <MX_UART4_Init+0x4c>)
 8002736:	2200      	movs	r2, #0
 8002738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800273a:	4805      	ldr	r0, [pc, #20]	; (8002750 <MX_UART4_Init+0x4c>)
 800273c:	f002 f97f 	bl	8004a3e <HAL_UART_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002746:	f7ff f9ef 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	2000044c 	.word	0x2000044c
 8002754:	40004c00 	.word	0x40004c00

08002758 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <MX_USART1_UART_Init+0x50>)
 8002760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 800277e:	220c      	movs	r2, #12
 8002780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 800278a:	2200      	movs	r2, #0
 800278c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800278e:	4805      	ldr	r0, [pc, #20]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002790:	f002 f955 	bl	8004a3e <HAL_UART_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800279a:	f7ff f9c5 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000494 	.word	0x20000494
 80027a8:	40013800 	.word	0x40013800

080027ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 0318 	add.w	r3, r7, #24
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a38      	ldr	r2, [pc, #224]	; (80028a8 <HAL_UART_MspInit+0xfc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d132      	bne.n	8002832 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80027cc:	4b37      	ldr	r3, [pc, #220]	; (80028ac <HAL_UART_MspInit+0x100>)
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	4a36      	ldr	r2, [pc, #216]	; (80028ac <HAL_UART_MspInit+0x100>)
 80027d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027d6:	61d3      	str	r3, [r2, #28]
 80027d8:	4b34      	ldr	r3, [pc, #208]	; (80028ac <HAL_UART_MspInit+0x100>)
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e4:	4b31      	ldr	r3, [pc, #196]	; (80028ac <HAL_UART_MspInit+0x100>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	4a30      	ldr	r2, [pc, #192]	; (80028ac <HAL_UART_MspInit+0x100>)
 80027ea:	f043 0310 	orr.w	r3, r3, #16
 80027ee:	6193      	str	r3, [r2, #24]
 80027f0:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <HAL_UART_MspInit+0x100>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280a:	f107 0318 	add.w	r3, r7, #24
 800280e:	4619      	mov	r1, r3
 8002810:	4827      	ldr	r0, [pc, #156]	; (80028b0 <HAL_UART_MspInit+0x104>)
 8002812:	f000 f9e9 	bl	8002be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002816:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800281a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002824:	f107 0318 	add.w	r3, r7, #24
 8002828:	4619      	mov	r1, r3
 800282a:	4821      	ldr	r0, [pc, #132]	; (80028b0 <HAL_UART_MspInit+0x104>)
 800282c:	f000 f9dc 	bl	8002be8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002830:	e036      	b.n	80028a0 <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <HAL_UART_MspInit+0x108>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d131      	bne.n	80028a0 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART1_CLK_ENABLE();
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_UART_MspInit+0x100>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	4a1a      	ldr	r2, [pc, #104]	; (80028ac <HAL_UART_MspInit+0x100>)
 8002842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002846:	6193      	str	r3, [r2, #24]
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <HAL_UART_MspInit+0x100>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002854:	4b15      	ldr	r3, [pc, #84]	; (80028ac <HAL_UART_MspInit+0x100>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	4a14      	ldr	r2, [pc, #80]	; (80028ac <HAL_UART_MspInit+0x100>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	6193      	str	r3, [r2, #24]
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_UART_MspInit+0x100>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800286c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002872:	2302      	movs	r3, #2
 8002874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002876:	2303      	movs	r3, #3
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287a:	f107 0318 	add.w	r3, r7, #24
 800287e:	4619      	mov	r1, r3
 8002880:	480d      	ldr	r0, [pc, #52]	; (80028b8 <HAL_UART_MspInit+0x10c>)
 8002882:	f000 f9b1 	bl	8002be8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800288a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002894:	f107 0318 	add.w	r3, r7, #24
 8002898:	4619      	mov	r1, r3
 800289a:	4807      	ldr	r0, [pc, #28]	; (80028b8 <HAL_UART_MspInit+0x10c>)
 800289c:	f000 f9a4 	bl	8002be8 <HAL_GPIO_Init>
}
 80028a0:	bf00      	nop
 80028a2:	3728      	adds	r7, #40	; 0x28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40004c00 	.word	0x40004c00
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40011000 	.word	0x40011000
 80028b4:	40013800 	.word	0x40013800
 80028b8:	40010800 	.word	0x40010800

080028bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028bc:	f7ff fa6e 	bl	8001d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028c0:	480b      	ldr	r0, [pc, #44]	; (80028f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028c2:	490c      	ldr	r1, [pc, #48]	; (80028f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028c4:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80028c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c8:	e002      	b.n	80028d0 <LoopCopyDataInit>

080028ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ce:	3304      	adds	r3, #4

080028d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d4:	d3f9      	bcc.n	80028ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028d6:	4a09      	ldr	r2, [pc, #36]	; (80028fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028d8:	4c09      	ldr	r4, [pc, #36]	; (8002900 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028dc:	e001      	b.n	80028e2 <LoopFillZerobss>

080028de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e0:	3204      	adds	r2, #4

080028e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e4:	d3fb      	bcc.n	80028de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028e6:	f003 fb53 	bl	8005f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ea:	f7fe ffbb 	bl	8001864 <main>
  bx lr
 80028ee:	4770      	bx	lr
  ldr r0, =_sdata
 80028f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80028f8:	08009b10 	.word	0x08009b10
  ldr r2, =_sbss
 80028fc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002900:	2000062c 	.word	0x2000062c

08002904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002904:	e7fe      	b.n	8002904 <ADC1_2_IRQHandler>
	...

08002908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <HAL_Init+0x28>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a07      	ldr	r2, [pc, #28]	; (8002930 <HAL_Init+0x28>)
 8002912:	f043 0310 	orr.w	r3, r3, #16
 8002916:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002918:	2003      	movs	r0, #3
 800291a:	f000 f923 	bl	8002b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800291e:	200f      	movs	r0, #15
 8002920:	f000 f808 	bl	8002934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002924:	f7ff f906 	bl	8001b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40022000 	.word	0x40022000

08002934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_InitTick+0x54>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_InitTick+0x58>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800294a:	fbb3 f3f1 	udiv	r3, r3, r1
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f93b 	bl	8002bce <HAL_SYSTICK_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e00e      	b.n	8002980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b0f      	cmp	r3, #15
 8002966:	d80a      	bhi.n	800297e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002968:	2200      	movs	r2, #0
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	f04f 30ff 	mov.w	r0, #4294967295
 8002970:	f000 f903 	bl	8002b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002974:	4a06      	ldr	r2, [pc, #24]	; (8002990 <HAL_InitTick+0x5c>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000000 	.word	0x20000000
 800298c:	20000008 	.word	0x20000008
 8002990:	20000004 	.word	0x20000004

08002994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_IncTick+0x1c>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_IncTick+0x20>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	4a03      	ldr	r2, [pc, #12]	; (80029b4 <HAL_IncTick+0x20>)
 80029a6:	6013      	str	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	20000008 	.word	0x20000008
 80029b4:	200004dc 	.word	0x200004dc

080029b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return uwTick;
 80029bc:	4b02      	ldr	r3, [pc, #8]	; (80029c8 <HAL_GetTick+0x10>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	200004dc 	.word	0x200004dc

080029cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <__NVIC_SetPriorityGrouping+0x44>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e8:	4013      	ands	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029fe:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <__NVIC_SetPriorityGrouping+0x44>)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	60d3      	str	r3, [r2, #12]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <__NVIC_GetPriorityGrouping+0x18>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	0a1b      	lsrs	r3, r3, #8
 8002a1e:	f003 0307 	and.w	r3, r3, #7
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	db0b      	blt.n	8002a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	f003 021f 	and.w	r2, r3, #31
 8002a48:	4906      	ldr	r1, [pc, #24]	; (8002a64 <__NVIC_EnableIRQ+0x34>)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2001      	movs	r0, #1
 8002a52:	fa00 f202 	lsl.w	r2, r0, r2
 8002a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	e000e100 	.word	0xe000e100

08002a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	6039      	str	r1, [r7, #0]
 8002a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	db0a      	blt.n	8002a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	490c      	ldr	r1, [pc, #48]	; (8002ab4 <__NVIC_SetPriority+0x4c>)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	0112      	lsls	r2, r2, #4
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a90:	e00a      	b.n	8002aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4908      	ldr	r1, [pc, #32]	; (8002ab8 <__NVIC_SetPriority+0x50>)
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	3b04      	subs	r3, #4
 8002aa0:	0112      	lsls	r2, r2, #4
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	761a      	strb	r2, [r3, #24]
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	e000e100 	.word	0xe000e100
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f1c3 0307 	rsb	r3, r3, #7
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	bf28      	it	cs
 8002ada:	2304      	movcs	r3, #4
 8002adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d902      	bls.n	8002aec <NVIC_EncodePriority+0x30>
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3b03      	subs	r3, #3
 8002aea:	e000      	b.n	8002aee <NVIC_EncodePriority+0x32>
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	f04f 32ff 	mov.w	r2, #4294967295
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43da      	mvns	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	401a      	ands	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b04:	f04f 31ff 	mov.w	r1, #4294967295
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	43d9      	mvns	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b14:	4313      	orrs	r3, r2
         );
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3724      	adds	r7, #36	; 0x24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b30:	d301      	bcc.n	8002b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00f      	b.n	8002b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b36:	4a0a      	ldr	r2, [pc, #40]	; (8002b60 <SysTick_Config+0x40>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b3e:	210f      	movs	r1, #15
 8002b40:	f04f 30ff 	mov.w	r0, #4294967295
 8002b44:	f7ff ff90 	bl	8002a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <SysTick_Config+0x40>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b4e:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <SysTick_Config+0x40>)
 8002b50:	2207      	movs	r2, #7
 8002b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	e000e010 	.word	0xe000e010

08002b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff ff2d 	bl	80029cc <__NVIC_SetPriorityGrouping>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b8c:	f7ff ff42 	bl	8002a14 <__NVIC_GetPriorityGrouping>
 8002b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	6978      	ldr	r0, [r7, #20]
 8002b98:	f7ff ff90 	bl	8002abc <NVIC_EncodePriority>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff5f 	bl	8002a68 <__NVIC_SetPriority>
}
 8002baa:	bf00      	nop
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	4603      	mov	r3, r0
 8002bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff35 	bl	8002a30 <__NVIC_EnableIRQ>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ffa2 	bl	8002b20 <SysTick_Config>
 8002bdc:	4603      	mov	r3, r0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b08b      	sub	sp, #44	; 0x2c
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfa:	e179      	b.n	8002ef0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	f040 8168 	bne.w	8002eea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4a96      	ldr	r2, [pc, #600]	; (8002e78 <HAL_GPIO_Init+0x290>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d05e      	beq.n	8002ce2 <HAL_GPIO_Init+0xfa>
 8002c24:	4a94      	ldr	r2, [pc, #592]	; (8002e78 <HAL_GPIO_Init+0x290>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d875      	bhi.n	8002d16 <HAL_GPIO_Init+0x12e>
 8002c2a:	4a94      	ldr	r2, [pc, #592]	; (8002e7c <HAL_GPIO_Init+0x294>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d058      	beq.n	8002ce2 <HAL_GPIO_Init+0xfa>
 8002c30:	4a92      	ldr	r2, [pc, #584]	; (8002e7c <HAL_GPIO_Init+0x294>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d86f      	bhi.n	8002d16 <HAL_GPIO_Init+0x12e>
 8002c36:	4a92      	ldr	r2, [pc, #584]	; (8002e80 <HAL_GPIO_Init+0x298>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d052      	beq.n	8002ce2 <HAL_GPIO_Init+0xfa>
 8002c3c:	4a90      	ldr	r2, [pc, #576]	; (8002e80 <HAL_GPIO_Init+0x298>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d869      	bhi.n	8002d16 <HAL_GPIO_Init+0x12e>
 8002c42:	4a90      	ldr	r2, [pc, #576]	; (8002e84 <HAL_GPIO_Init+0x29c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d04c      	beq.n	8002ce2 <HAL_GPIO_Init+0xfa>
 8002c48:	4a8e      	ldr	r2, [pc, #568]	; (8002e84 <HAL_GPIO_Init+0x29c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d863      	bhi.n	8002d16 <HAL_GPIO_Init+0x12e>
 8002c4e:	4a8e      	ldr	r2, [pc, #568]	; (8002e88 <HAL_GPIO_Init+0x2a0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d046      	beq.n	8002ce2 <HAL_GPIO_Init+0xfa>
 8002c54:	4a8c      	ldr	r2, [pc, #560]	; (8002e88 <HAL_GPIO_Init+0x2a0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d85d      	bhi.n	8002d16 <HAL_GPIO_Init+0x12e>
 8002c5a:	2b12      	cmp	r3, #18
 8002c5c:	d82a      	bhi.n	8002cb4 <HAL_GPIO_Init+0xcc>
 8002c5e:	2b12      	cmp	r3, #18
 8002c60:	d859      	bhi.n	8002d16 <HAL_GPIO_Init+0x12e>
 8002c62:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <HAL_GPIO_Init+0x80>)
 8002c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c68:	08002ce3 	.word	0x08002ce3
 8002c6c:	08002cbd 	.word	0x08002cbd
 8002c70:	08002ccf 	.word	0x08002ccf
 8002c74:	08002d11 	.word	0x08002d11
 8002c78:	08002d17 	.word	0x08002d17
 8002c7c:	08002d17 	.word	0x08002d17
 8002c80:	08002d17 	.word	0x08002d17
 8002c84:	08002d17 	.word	0x08002d17
 8002c88:	08002d17 	.word	0x08002d17
 8002c8c:	08002d17 	.word	0x08002d17
 8002c90:	08002d17 	.word	0x08002d17
 8002c94:	08002d17 	.word	0x08002d17
 8002c98:	08002d17 	.word	0x08002d17
 8002c9c:	08002d17 	.word	0x08002d17
 8002ca0:	08002d17 	.word	0x08002d17
 8002ca4:	08002d17 	.word	0x08002d17
 8002ca8:	08002d17 	.word	0x08002d17
 8002cac:	08002cc5 	.word	0x08002cc5
 8002cb0:	08002cd9 	.word	0x08002cd9
 8002cb4:	4a75      	ldr	r2, [pc, #468]	; (8002e8c <HAL_GPIO_Init+0x2a4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cba:	e02c      	b.n	8002d16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	623b      	str	r3, [r7, #32]
          break;
 8002cc2:	e029      	b.n	8002d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	623b      	str	r3, [r7, #32]
          break;
 8002ccc:	e024      	b.n	8002d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	3308      	adds	r3, #8
 8002cd4:	623b      	str	r3, [r7, #32]
          break;
 8002cd6:	e01f      	b.n	8002d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	623b      	str	r3, [r7, #32]
          break;
 8002ce0:	e01a      	b.n	8002d18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cea:	2304      	movs	r3, #4
 8002cec:	623b      	str	r3, [r7, #32]
          break;
 8002cee:	e013      	b.n	8002d18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d105      	bne.n	8002d04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cf8:	2308      	movs	r3, #8
 8002cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	611a      	str	r2, [r3, #16]
          break;
 8002d02:	e009      	b.n	8002d18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d04:	2308      	movs	r3, #8
 8002d06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	615a      	str	r2, [r3, #20]
          break;
 8002d0e:	e003      	b.n	8002d18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d10:	2300      	movs	r3, #0
 8002d12:	623b      	str	r3, [r7, #32]
          break;
 8002d14:	e000      	b.n	8002d18 <HAL_GPIO_Init+0x130>
          break;
 8002d16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	2bff      	cmp	r3, #255	; 0xff
 8002d1c:	d801      	bhi.n	8002d22 <HAL_GPIO_Init+0x13a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	e001      	b.n	8002d26 <HAL_GPIO_Init+0x13e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3304      	adds	r3, #4
 8002d26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2bff      	cmp	r3, #255	; 0xff
 8002d2c:	d802      	bhi.n	8002d34 <HAL_GPIO_Init+0x14c>
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	e002      	b.n	8002d3a <HAL_GPIO_Init+0x152>
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	3b08      	subs	r3, #8
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	210f      	movs	r1, #15
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	fa01 f303 	lsl.w	r3, r1, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	6a39      	ldr	r1, [r7, #32]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	431a      	orrs	r2, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80c1 	beq.w	8002eea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d68:	4b49      	ldr	r3, [pc, #292]	; (8002e90 <HAL_GPIO_Init+0x2a8>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	4a48      	ldr	r2, [pc, #288]	; (8002e90 <HAL_GPIO_Init+0x2a8>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6193      	str	r3, [r2, #24]
 8002d74:	4b46      	ldr	r3, [pc, #280]	; (8002e90 <HAL_GPIO_Init+0x2a8>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d80:	4a44      	ldr	r2, [pc, #272]	; (8002e94 <HAL_GPIO_Init+0x2ac>)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	089b      	lsrs	r3, r3, #2
 8002d86:	3302      	adds	r3, #2
 8002d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	220f      	movs	r2, #15
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4013      	ands	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a3c      	ldr	r2, [pc, #240]	; (8002e98 <HAL_GPIO_Init+0x2b0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d01f      	beq.n	8002dec <HAL_GPIO_Init+0x204>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a3b      	ldr	r2, [pc, #236]	; (8002e9c <HAL_GPIO_Init+0x2b4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d019      	beq.n	8002de8 <HAL_GPIO_Init+0x200>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a3a      	ldr	r2, [pc, #232]	; (8002ea0 <HAL_GPIO_Init+0x2b8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d013      	beq.n	8002de4 <HAL_GPIO_Init+0x1fc>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a39      	ldr	r2, [pc, #228]	; (8002ea4 <HAL_GPIO_Init+0x2bc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00d      	beq.n	8002de0 <HAL_GPIO_Init+0x1f8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a38      	ldr	r2, [pc, #224]	; (8002ea8 <HAL_GPIO_Init+0x2c0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d007      	beq.n	8002ddc <HAL_GPIO_Init+0x1f4>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a37      	ldr	r2, [pc, #220]	; (8002eac <HAL_GPIO_Init+0x2c4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d101      	bne.n	8002dd8 <HAL_GPIO_Init+0x1f0>
 8002dd4:	2305      	movs	r3, #5
 8002dd6:	e00a      	b.n	8002dee <HAL_GPIO_Init+0x206>
 8002dd8:	2306      	movs	r3, #6
 8002dda:	e008      	b.n	8002dee <HAL_GPIO_Init+0x206>
 8002ddc:	2304      	movs	r3, #4
 8002dde:	e006      	b.n	8002dee <HAL_GPIO_Init+0x206>
 8002de0:	2303      	movs	r3, #3
 8002de2:	e004      	b.n	8002dee <HAL_GPIO_Init+0x206>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e002      	b.n	8002dee <HAL_GPIO_Init+0x206>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_GPIO_Init+0x206>
 8002dec:	2300      	movs	r3, #0
 8002dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df0:	f002 0203 	and.w	r2, r2, #3
 8002df4:	0092      	lsls	r2, r2, #2
 8002df6:	4093      	lsls	r3, r2
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dfe:	4925      	ldr	r1, [pc, #148]	; (8002e94 <HAL_GPIO_Init+0x2ac>)
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	3302      	adds	r3, #2
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d006      	beq.n	8002e26 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e18:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <HAL_GPIO_Init+0x2c8>)
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	4924      	ldr	r1, [pc, #144]	; (8002eb0 <HAL_GPIO_Init+0x2c8>)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	608b      	str	r3, [r1, #8]
 8002e24:	e006      	b.n	8002e34 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_GPIO_Init+0x2c8>)
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	4920      	ldr	r1, [pc, #128]	; (8002eb0 <HAL_GPIO_Init+0x2c8>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d006      	beq.n	8002e4e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e40:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <HAL_GPIO_Init+0x2c8>)
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	491a      	ldr	r1, [pc, #104]	; (8002eb0 <HAL_GPIO_Init+0x2c8>)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60cb      	str	r3, [r1, #12]
 8002e4c:	e006      	b.n	8002e5c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e4e:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <HAL_GPIO_Init+0x2c8>)
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	4916      	ldr	r1, [pc, #88]	; (8002eb0 <HAL_GPIO_Init+0x2c8>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d025      	beq.n	8002eb4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <HAL_GPIO_Init+0x2c8>)
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	4910      	ldr	r1, [pc, #64]	; (8002eb0 <HAL_GPIO_Init+0x2c8>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
 8002e74:	e025      	b.n	8002ec2 <HAL_GPIO_Init+0x2da>
 8002e76:	bf00      	nop
 8002e78:	10320000 	.word	0x10320000
 8002e7c:	10310000 	.word	0x10310000
 8002e80:	10220000 	.word	0x10220000
 8002e84:	10210000 	.word	0x10210000
 8002e88:	10120000 	.word	0x10120000
 8002e8c:	10110000 	.word	0x10110000
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40010000 	.word	0x40010000
 8002e98:	40010800 	.word	0x40010800
 8002e9c:	40010c00 	.word	0x40010c00
 8002ea0:	40011000 	.word	0x40011000
 8002ea4:	40011400 	.word	0x40011400
 8002ea8:	40011800 	.word	0x40011800
 8002eac:	40011c00 	.word	0x40011c00
 8002eb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eb4:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_GPIO_Init+0x324>)
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	4913      	ldr	r1, [pc, #76]	; (8002f0c <HAL_GPIO_Init+0x324>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_GPIO_Init+0x324>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	490e      	ldr	r1, [pc, #56]	; (8002f0c <HAL_GPIO_Init+0x324>)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
 8002eda:	e006      	b.n	8002eea <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_GPIO_Init+0x324>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	4909      	ldr	r1, [pc, #36]	; (8002f0c <HAL_GPIO_Init+0x324>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	3301      	adds	r3, #1
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f47f ae7e 	bne.w	8002bfc <HAL_GPIO_Init+0x14>
  }
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	372c      	adds	r7, #44	; 0x2c
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	40010400 	.word	0x40010400

08002f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f20:	787b      	ldrb	r3, [r7, #1]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f2c:	e003      	b.n	8002f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f2e:	887b      	ldrh	r3, [r7, #2]
 8002f30:	041a      	lsls	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	611a      	str	r2, [r3, #16]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f4a:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d006      	beq.n	8002f64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f56:	4a05      	ldr	r2, [pc, #20]	; (8002f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fd92 	bl	8001a88 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40010400 	.word	0x40010400

08002f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e272      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8087 	beq.w	800309e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f90:	4b92      	ldr	r3, [pc, #584]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d00c      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f9c:	4b8f      	ldr	r3, [pc, #572]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d112      	bne.n	8002fce <HAL_RCC_OscConfig+0x5e>
 8002fa8:	4b8c      	ldr	r3, [pc, #560]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d10b      	bne.n	8002fce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb6:	4b89      	ldr	r3, [pc, #548]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d06c      	beq.n	800309c <HAL_RCC_OscConfig+0x12c>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d168      	bne.n	800309c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e24c      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x76>
 8002fd8:	4b80      	ldr	r3, [pc, #512]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a7f      	ldr	r2, [pc, #508]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	e02e      	b.n	8003044 <HAL_RCC_OscConfig+0xd4>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x98>
 8002fee:	4b7b      	ldr	r3, [pc, #492]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a7a      	ldr	r2, [pc, #488]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	4b78      	ldr	r3, [pc, #480]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a77      	ldr	r2, [pc, #476]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e01d      	b.n	8003044 <HAL_RCC_OscConfig+0xd4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003010:	d10c      	bne.n	800302c <HAL_RCC_OscConfig+0xbc>
 8003012:	4b72      	ldr	r3, [pc, #456]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a71      	ldr	r2, [pc, #452]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	4b6f      	ldr	r3, [pc, #444]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a6e      	ldr	r2, [pc, #440]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e00b      	b.n	8003044 <HAL_RCC_OscConfig+0xd4>
 800302c:	4b6b      	ldr	r3, [pc, #428]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a6a      	ldr	r2, [pc, #424]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	4b68      	ldr	r3, [pc, #416]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a67      	ldr	r2, [pc, #412]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 800303e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003042:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d013      	beq.n	8003074 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7ff fcb4 	bl	80029b8 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003054:	f7ff fcb0 	bl	80029b8 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	; 0x64
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e200      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0xe4>
 8003072:	e014      	b.n	800309e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7ff fca0 	bl	80029b8 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800307c:	f7ff fc9c 	bl	80029b8 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e1ec      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308e:	4b53      	ldr	r3, [pc, #332]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x10c>
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d063      	beq.n	8003172 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030aa:	4b4c      	ldr	r3, [pc, #304]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00b      	beq.n	80030ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030b6:	4b49      	ldr	r3, [pc, #292]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d11c      	bne.n	80030fc <HAL_RCC_OscConfig+0x18c>
 80030c2:	4b46      	ldr	r3, [pc, #280]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d116      	bne.n	80030fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ce:	4b43      	ldr	r3, [pc, #268]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <HAL_RCC_OscConfig+0x176>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d001      	beq.n	80030e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e1c0      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e6:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4939      	ldr	r1, [pc, #228]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fa:	e03a      	b.n	8003172 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d020      	beq.n	8003146 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003104:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <HAL_RCC_OscConfig+0x270>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7ff fc55 	bl	80029b8 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003112:	f7ff fc51 	bl	80029b8 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e1a1      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003124:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003130:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4927      	ldr	r1, [pc, #156]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003140:	4313      	orrs	r3, r2
 8003142:	600b      	str	r3, [r1, #0]
 8003144:	e015      	b.n	8003172 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003146:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <HAL_RCC_OscConfig+0x270>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7ff fc34 	bl	80029b8 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003154:	f7ff fc30 	bl	80029b8 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e180      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003166:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d03a      	beq.n	80031f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d019      	beq.n	80031ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003186:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 8003188:	2201      	movs	r2, #1
 800318a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318c:	f7ff fc14 	bl	80029b8 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003194:	f7ff fc10 	bl	80029b8 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e160      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <HAL_RCC_OscConfig+0x26c>)
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031b2:	2001      	movs	r0, #1
 80031b4:	f000 face 	bl	8003754 <RCC_Delay>
 80031b8:	e01c      	b.n	80031f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_RCC_OscConfig+0x274>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c0:	f7ff fbfa 	bl	80029b8 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c6:	e00f      	b.n	80031e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c8:	f7ff fbf6 	bl	80029b8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d908      	bls.n	80031e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e146      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	42420000 	.word	0x42420000
 80031e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e8:	4b92      	ldr	r3, [pc, #584]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e9      	bne.n	80031c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80a6 	beq.w	800334e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003206:	4b8b      	ldr	r3, [pc, #556]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10d      	bne.n	800322e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003212:	4b88      	ldr	r3, [pc, #544]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	4a87      	ldr	r2, [pc, #540]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321c:	61d3      	str	r3, [r2, #28]
 800321e:	4b85      	ldr	r3, [pc, #532]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322a:	2301      	movs	r3, #1
 800322c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322e:	4b82      	ldr	r3, [pc, #520]	; (8003438 <HAL_RCC_OscConfig+0x4c8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d118      	bne.n	800326c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800323a:	4b7f      	ldr	r3, [pc, #508]	; (8003438 <HAL_RCC_OscConfig+0x4c8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a7e      	ldr	r2, [pc, #504]	; (8003438 <HAL_RCC_OscConfig+0x4c8>)
 8003240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003246:	f7ff fbb7 	bl	80029b8 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324e:	f7ff fbb3 	bl	80029b8 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b64      	cmp	r3, #100	; 0x64
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e103      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003260:	4b75      	ldr	r3, [pc, #468]	; (8003438 <HAL_RCC_OscConfig+0x4c8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d106      	bne.n	8003282 <HAL_RCC_OscConfig+0x312>
 8003274:	4b6f      	ldr	r3, [pc, #444]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	4a6e      	ldr	r2, [pc, #440]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	6213      	str	r3, [r2, #32]
 8003280:	e02d      	b.n	80032de <HAL_RCC_OscConfig+0x36e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x334>
 800328a:	4b6a      	ldr	r3, [pc, #424]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	4a69      	ldr	r2, [pc, #420]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	6213      	str	r3, [r2, #32]
 8003296:	4b67      	ldr	r3, [pc, #412]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	4a66      	ldr	r2, [pc, #408]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 800329c:	f023 0304 	bic.w	r3, r3, #4
 80032a0:	6213      	str	r3, [r2, #32]
 80032a2:	e01c      	b.n	80032de <HAL_RCC_OscConfig+0x36e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b05      	cmp	r3, #5
 80032aa:	d10c      	bne.n	80032c6 <HAL_RCC_OscConfig+0x356>
 80032ac:	4b61      	ldr	r3, [pc, #388]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	4a60      	ldr	r2, [pc, #384]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80032b2:	f043 0304 	orr.w	r3, r3, #4
 80032b6:	6213      	str	r3, [r2, #32]
 80032b8:	4b5e      	ldr	r3, [pc, #376]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4a5d      	ldr	r2, [pc, #372]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	6213      	str	r3, [r2, #32]
 80032c4:	e00b      	b.n	80032de <HAL_RCC_OscConfig+0x36e>
 80032c6:	4b5b      	ldr	r3, [pc, #364]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	4a5a      	ldr	r2, [pc, #360]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	6213      	str	r3, [r2, #32]
 80032d2:	4b58      	ldr	r3, [pc, #352]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4a57      	ldr	r2, [pc, #348]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	f023 0304 	bic.w	r3, r3, #4
 80032dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d015      	beq.n	8003312 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e6:	f7ff fb67 	bl	80029b8 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ec:	e00a      	b.n	8003304 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ee:	f7ff fb63 	bl	80029b8 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e0b1      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003304:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0ee      	beq.n	80032ee <HAL_RCC_OscConfig+0x37e>
 8003310:	e014      	b.n	800333c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003312:	f7ff fb51 	bl	80029b8 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003318:	e00a      	b.n	8003330 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7ff fb4d 	bl	80029b8 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	; 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e09b      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003330:	4b40      	ldr	r3, [pc, #256]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1ee      	bne.n	800331a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d105      	bne.n	800334e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003342:	4b3c      	ldr	r3, [pc, #240]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	4a3b      	ldr	r2, [pc, #236]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 8003348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8087 	beq.w	8003466 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003358:	4b36      	ldr	r3, [pc, #216]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b08      	cmp	r3, #8
 8003362:	d061      	beq.n	8003428 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	2b02      	cmp	r3, #2
 800336a:	d146      	bne.n	80033fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336c:	4b33      	ldr	r3, [pc, #204]	; (800343c <HAL_RCC_OscConfig+0x4cc>)
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7ff fb21 	bl	80029b8 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337a:	f7ff fb1d 	bl	80029b8 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e06d      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800338c:	4b29      	ldr	r3, [pc, #164]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f0      	bne.n	800337a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a0:	d108      	bne.n	80033b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033a2:	4b24      	ldr	r3, [pc, #144]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	4921      	ldr	r1, [pc, #132]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b4:	4b1f      	ldr	r3, [pc, #124]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a19      	ldr	r1, [r3, #32]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	430b      	orrs	r3, r1
 80033c6:	491b      	ldr	r1, [pc, #108]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033cc:	4b1b      	ldr	r3, [pc, #108]	; (800343c <HAL_RCC_OscConfig+0x4cc>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d2:	f7ff faf1 	bl	80029b8 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033da:	f7ff faed 	bl	80029b8 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e03d      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033ec:	4b11      	ldr	r3, [pc, #68]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x46a>
 80033f8:	e035      	b.n	8003466 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fa:	4b10      	ldr	r3, [pc, #64]	; (800343c <HAL_RCC_OscConfig+0x4cc>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7ff fada 	bl	80029b8 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003408:	f7ff fad6 	bl	80029b8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e026      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x498>
 8003426:	e01e      	b.n	8003466 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d107      	bne.n	8003440 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e019      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
 8003434:	40021000 	.word	0x40021000
 8003438:	40007000 	.word	0x40007000
 800343c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_OscConfig+0x500>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	429a      	cmp	r2, r3
 8003452:	d106      	bne.n	8003462 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d001      	beq.n	8003466 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000

08003474 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0d0      	b.n	800362a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4b6a      	ldr	r3, [pc, #424]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d910      	bls.n	80034b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b67      	ldr	r3, [pc, #412]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 0207 	bic.w	r2, r3, #7
 800349e:	4965      	ldr	r1, [pc, #404]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b63      	ldr	r3, [pc, #396]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0b8      	b.n	800362a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d0:	4b59      	ldr	r3, [pc, #356]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a58      	ldr	r2, [pc, #352]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80034d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e8:	4b53      	ldr	r3, [pc, #332]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	4a52      	ldr	r2, [pc, #328]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80034ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f4:	4b50      	ldr	r3, [pc, #320]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	494d      	ldr	r1, [pc, #308]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d040      	beq.n	8003594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	4b47      	ldr	r3, [pc, #284]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d115      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e07f      	b.n	800362a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d107      	bne.n	8003542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	4b41      	ldr	r3, [pc, #260]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e073      	b.n	800362a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003542:	4b3d      	ldr	r3, [pc, #244]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e06b      	b.n	800362a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003552:	4b39      	ldr	r3, [pc, #228]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f023 0203 	bic.w	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4936      	ldr	r1, [pc, #216]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003564:	f7ff fa28 	bl	80029b8 <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	e00a      	b.n	8003582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800356c:	f7ff fa24 	bl	80029b8 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e053      	b.n	800362a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	4b2d      	ldr	r3, [pc, #180]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 020c 	and.w	r2, r3, #12
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	429a      	cmp	r2, r3
 8003592:	d1eb      	bne.n	800356c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d210      	bcs.n	80035c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b24      	ldr	r3, [pc, #144]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 0207 	bic.w	r2, r3, #7
 80035aa:	4922      	ldr	r1, [pc, #136]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e032      	b.n	800362a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d0:	4b19      	ldr	r3, [pc, #100]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4916      	ldr	r1, [pc, #88]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	490e      	ldr	r1, [pc, #56]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003602:	f000 f821 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8003606:	4602      	mov	r2, r0
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	490a      	ldr	r1, [pc, #40]	; (800363c <HAL_RCC_ClockConfig+0x1c8>)
 8003614:	5ccb      	ldrb	r3, [r1, r3]
 8003616:	fa22 f303 	lsr.w	r3, r2, r3
 800361a:	4a09      	ldr	r2, [pc, #36]	; (8003640 <HAL_RCC_ClockConfig+0x1cc>)
 800361c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCC_ClockConfig+0x1d0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff f986 	bl	8002934 <HAL_InitTick>

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40022000 	.word	0x40022000
 8003638:	40021000 	.word	0x40021000
 800363c:	080096b0 	.word	0x080096b0
 8003640:	20000000 	.word	0x20000000
 8003644:	20000004 	.word	0x20000004

08003648 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	2300      	movs	r3, #0
 800365c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003662:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b04      	cmp	r3, #4
 8003670:	d002      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0x30>
 8003672:	2b08      	cmp	r3, #8
 8003674:	d003      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0x36>
 8003676:	e027      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003678:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800367a:	613b      	str	r3, [r7, #16]
      break;
 800367c:	e027      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	0c9b      	lsrs	r3, r3, #18
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	4a17      	ldr	r2, [pc, #92]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003688:	5cd3      	ldrb	r3, [r2, r3]
 800368a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d010      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003696:	4b11      	ldr	r3, [pc, #68]	; (80036dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	0c5b      	lsrs	r3, r3, #17
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	4a11      	ldr	r2, [pc, #68]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036a2:	5cd3      	ldrb	r3, [r2, r3]
 80036a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a0d      	ldr	r2, [pc, #52]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80036aa:	fb03 f202 	mul.w	r2, r3, r2
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	e004      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a0c      	ldr	r2, [pc, #48]	; (80036ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80036bc:	fb02 f303 	mul.w	r3, r2, r3
 80036c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	613b      	str	r3, [r7, #16]
      break;
 80036c6:	e002      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80036ca:	613b      	str	r3, [r7, #16]
      break;
 80036cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ce:	693b      	ldr	r3, [r7, #16]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	007a1200 	.word	0x007a1200
 80036e4:	080096c8 	.word	0x080096c8
 80036e8:	080096d8 	.word	0x080096d8
 80036ec:	003d0900 	.word	0x003d0900

080036f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f4:	4b02      	ldr	r3, [pc, #8]	; (8003700 <HAL_RCC_GetHCLKFreq+0x10>)
 80036f6:	681b      	ldr	r3, [r3, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	20000000 	.word	0x20000000

08003704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003708:	f7ff fff2 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4903      	ldr	r1, [pc, #12]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003720:	4618      	mov	r0, r3
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000
 8003728:	080096c0 	.word	0x080096c0

0800372c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003730:	f7ff ffde 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	0adb      	lsrs	r3, r3, #11
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4903      	ldr	r1, [pc, #12]	; (8003750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	080096c0 	.word	0x080096c0

08003754 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <RCC_Delay+0x34>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0a      	ldr	r2, [pc, #40]	; (800378c <RCC_Delay+0x38>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0a5b      	lsrs	r3, r3, #9
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003770:	bf00      	nop
  }
  while (Delay --);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1e5a      	subs	r2, r3, #1
 8003776:	60fa      	str	r2, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f9      	bne.n	8003770 <RCC_Delay+0x1c>
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	20000000 	.word	0x20000000
 800378c:	10624dd3 	.word	0x10624dd3

08003790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e041      	b.n	8003826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fe fdd2 	bl	8002360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3304      	adds	r3, #4
 80037cc:	4619      	mov	r1, r3
 80037ce:	4610      	mov	r0, r2
 80037d0:	f000 fd86 	bl	80042e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	d001      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e044      	b.n	80038d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <HAL_TIM_Base_Start_IT+0xac>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d018      	beq.n	800389c <HAL_TIM_Base_Start_IT+0x6c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1c      	ldr	r2, [pc, #112]	; (80038e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d013      	beq.n	800389c <HAL_TIM_Base_Start_IT+0x6c>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387c:	d00e      	beq.n	800389c <HAL_TIM_Base_Start_IT+0x6c>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a18      	ldr	r2, [pc, #96]	; (80038e4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d009      	beq.n	800389c <HAL_TIM_Base_Start_IT+0x6c>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a16      	ldr	r2, [pc, #88]	; (80038e8 <HAL_TIM_Base_Start_IT+0xb8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d004      	beq.n	800389c <HAL_TIM_Base_Start_IT+0x6c>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a15      	ldr	r2, [pc, #84]	; (80038ec <HAL_TIM_Base_Start_IT+0xbc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d111      	bne.n	80038c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b06      	cmp	r3, #6
 80038ac:	d010      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0201 	orr.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038be:	e007      	b.n	80038d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	40012c00 	.word	0x40012c00
 80038e0:	40013400 	.word	0x40013400
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800
 80038ec:	40000c00 	.word	0x40000c00

080038f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e041      	b.n	8003986 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f839 	bl	800398e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f000 fcd6 	bl	80042e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d109      	bne.n	80039c4 <HAL_TIM_PWM_Start+0x24>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e022      	b.n	8003a0a <HAL_TIM_PWM_Start+0x6a>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d109      	bne.n	80039de <HAL_TIM_PWM_Start+0x3e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	bf14      	ite	ne
 80039d6:	2301      	movne	r3, #1
 80039d8:	2300      	moveq	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	e015      	b.n	8003a0a <HAL_TIM_PWM_Start+0x6a>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d109      	bne.n	80039f8 <HAL_TIM_PWM_Start+0x58>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	e008      	b.n	8003a0a <HAL_TIM_PWM_Start+0x6a>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	bf14      	ite	ne
 8003a04:	2301      	movne	r3, #1
 8003a06:	2300      	moveq	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e072      	b.n	8003af8 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d104      	bne.n	8003a22 <HAL_TIM_PWM_Start+0x82>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a20:	e013      	b.n	8003a4a <HAL_TIM_PWM_Start+0xaa>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d104      	bne.n	8003a32 <HAL_TIM_PWM_Start+0x92>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a30:	e00b      	b.n	8003a4a <HAL_TIM_PWM_Start+0xaa>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d104      	bne.n	8003a42 <HAL_TIM_PWM_Start+0xa2>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a40:	e003      	b.n	8003a4a <HAL_TIM_PWM_Start+0xaa>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	6839      	ldr	r1, [r7, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 ff00 	bl	8004858 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a28      	ldr	r2, [pc, #160]	; (8003b00 <HAL_TIM_PWM_Start+0x160>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d004      	beq.n	8003a6c <HAL_TIM_PWM_Start+0xcc>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a27      	ldr	r2, [pc, #156]	; (8003b04 <HAL_TIM_PWM_Start+0x164>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d101      	bne.n	8003a70 <HAL_TIM_PWM_Start+0xd0>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <HAL_TIM_PWM_Start+0xd2>
 8003a70:	2300      	movs	r3, #0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d007      	beq.n	8003a86 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1d      	ldr	r2, [pc, #116]	; (8003b00 <HAL_TIM_PWM_Start+0x160>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d018      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x122>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1b      	ldr	r2, [pc, #108]	; (8003b04 <HAL_TIM_PWM_Start+0x164>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x122>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa2:	d00e      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x122>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a17      	ldr	r2, [pc, #92]	; (8003b08 <HAL_TIM_PWM_Start+0x168>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x122>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a16      	ldr	r2, [pc, #88]	; (8003b0c <HAL_TIM_PWM_Start+0x16c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d004      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x122>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <HAL_TIM_PWM_Start+0x170>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d111      	bne.n	8003ae6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b06      	cmp	r3, #6
 8003ad2:	d010      	beq.n	8003af6 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae4:	e007      	b.n	8003af6 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0201 	orr.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40012c00 	.word	0x40012c00
 8003b04:	40013400 	.word	0x40013400
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40000800 	.word	0x40000800
 8003b10:	40000c00 	.word	0x40000c00

08003b14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e093      	b.n	8003c50 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7fe fcdb 	bl	80024f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6812      	ldr	r2, [r2, #0]
 8003b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b58:	f023 0307 	bic.w	r3, r3, #7
 8003b5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3304      	adds	r3, #4
 8003b66:	4619      	mov	r1, r3
 8003b68:	4610      	mov	r0, r2
 8003b6a:	f000 fbb9 	bl	80042e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003bb4:	f023 030c 	bic.w	r3, r3, #12
 8003bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	011a      	lsls	r2, r3, #4
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	031b      	lsls	r3, r3, #12
 8003be4:	4313      	orrs	r3, r2
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003bf2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d110      	bne.n	8003caa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d102      	bne.n	8003c94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c8e:	7b7b      	ldrb	r3, [r7, #13]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d001      	beq.n	8003c98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e069      	b.n	8003d6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ca8:	e031      	b.n	8003d0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d110      	bne.n	8003cd2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cb0:	7bbb      	ldrb	r3, [r7, #14]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d102      	bne.n	8003cbc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cb6:	7b3b      	ldrb	r3, [r7, #12]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d001      	beq.n	8003cc0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e055      	b.n	8003d6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cd0:	e01d      	b.n	8003d0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d108      	bne.n	8003cea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cd8:	7bbb      	ldrb	r3, [r7, #14]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d105      	bne.n	8003cea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cde:	7b7b      	ldrb	r3, [r7, #13]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d102      	bne.n	8003cea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ce4:	7b3b      	ldrb	r3, [r7, #12]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d001      	beq.n	8003cee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e03e      	b.n	8003d6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2202      	movs	r2, #2
 8003d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_TIM_Encoder_Start+0xc4>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d008      	beq.n	8003d2c <HAL_TIM_Encoder_Start+0xd4>
 8003d1a:	e00f      	b.n	8003d3c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2201      	movs	r2, #1
 8003d22:	2100      	movs	r1, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fd97 	bl	8004858 <TIM_CCxChannelCmd>
      break;
 8003d2a:	e016      	b.n	8003d5a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2201      	movs	r2, #1
 8003d32:	2104      	movs	r1, #4
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fd8f 	bl	8004858 <TIM_CCxChannelCmd>
      break;
 8003d3a:	e00e      	b.n	8003d5a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2201      	movs	r2, #1
 8003d42:	2100      	movs	r1, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fd87 	bl	8004858 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	2104      	movs	r1, #4
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fd80 	bl	8004858 <TIM_CCxChannelCmd>
      break;
 8003d58:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0201 	orr.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d122      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d11b      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f06f 0202 	mvn.w	r2, #2
 8003da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fa76 	bl	80042a8 <HAL_TIM_IC_CaptureCallback>
 8003dbc:	e005      	b.n	8003dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fa69 	bl	8004296 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fa78 	bl	80042ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d122      	bne.n	8003e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d11b      	bne.n	8003e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0204 	mvn.w	r2, #4
 8003df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fa4c 	bl	80042a8 <HAL_TIM_IC_CaptureCallback>
 8003e10:	e005      	b.n	8003e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fa3f 	bl	8004296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fa4e 	bl	80042ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d122      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d11b      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0208 	mvn.w	r2, #8
 8003e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fa22 	bl	80042a8 <HAL_TIM_IC_CaptureCallback>
 8003e64:	e005      	b.n	8003e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fa15 	bl	8004296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa24 	bl	80042ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b10      	cmp	r3, #16
 8003e84:	d122      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d11b      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0210 	mvn.w	r2, #16
 8003e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f9f8 	bl	80042a8 <HAL_TIM_IC_CaptureCallback>
 8003eb8:	e005      	b.n	8003ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f9eb 	bl	8004296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f9fa 	bl	80042ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d10e      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d107      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0201 	mvn.w	r2, #1
 8003ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fd fd6c 	bl	80019d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f02:	2b80      	cmp	r3, #128	; 0x80
 8003f04:	d10e      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f10:	2b80      	cmp	r3, #128	; 0x80
 8003f12:	d107      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fd84 	bl	8004a2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d10e      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d107      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f9be 	bl	80042cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d10e      	bne.n	8003f7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d107      	bne.n	8003f7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0220 	mvn.w	r2, #32
 8003f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fd4f 	bl	8004a1a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e0ae      	b.n	8004100 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b0c      	cmp	r3, #12
 8003fae:	f200 809f 	bhi.w	80040f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08003fed 	.word	0x08003fed
 8003fbc:	080040f1 	.word	0x080040f1
 8003fc0:	080040f1 	.word	0x080040f1
 8003fc4:	080040f1 	.word	0x080040f1
 8003fc8:	0800402d 	.word	0x0800402d
 8003fcc:	080040f1 	.word	0x080040f1
 8003fd0:	080040f1 	.word	0x080040f1
 8003fd4:	080040f1 	.word	0x080040f1
 8003fd8:	0800406f 	.word	0x0800406f
 8003fdc:	080040f1 	.word	0x080040f1
 8003fe0:	080040f1 	.word	0x080040f1
 8003fe4:	080040f1 	.word	0x080040f1
 8003fe8:	080040af 	.word	0x080040af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 f9ee 	bl	80043d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0208 	orr.w	r2, r2, #8
 8004006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0204 	bic.w	r2, r2, #4
 8004016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6999      	ldr	r1, [r3, #24]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	619a      	str	r2, [r3, #24]
      break;
 800402a:	e064      	b.n	80040f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fa3e 	bl	80044b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6999      	ldr	r1, [r3, #24]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	021a      	lsls	r2, r3, #8
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	619a      	str	r2, [r3, #24]
      break;
 800406c:	e043      	b.n	80040f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fa91 	bl	800459c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0208 	orr.w	r2, r2, #8
 8004088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0204 	bic.w	r2, r2, #4
 8004098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69d9      	ldr	r1, [r3, #28]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	61da      	str	r2, [r3, #28]
      break;
 80040ac:	e023      	b.n	80040f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fae5 	bl	8004684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69da      	ldr	r2, [r3, #28]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69da      	ldr	r2, [r3, #28]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69d9      	ldr	r1, [r3, #28]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	021a      	lsls	r2, r3, #8
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	61da      	str	r2, [r3, #28]
      break;
 80040ee:	e002      	b.n	80040f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	75fb      	strb	r3, [r7, #23]
      break;
 80040f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_TIM_ConfigClockSource+0x1c>
 8004120:	2302      	movs	r3, #2
 8004122:	e0b4      	b.n	800428e <HAL_TIM_ConfigClockSource+0x186>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800414a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800415c:	d03e      	beq.n	80041dc <HAL_TIM_ConfigClockSource+0xd4>
 800415e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004162:	f200 8087 	bhi.w	8004274 <HAL_TIM_ConfigClockSource+0x16c>
 8004166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416a:	f000 8086 	beq.w	800427a <HAL_TIM_ConfigClockSource+0x172>
 800416e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004172:	d87f      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x16c>
 8004174:	2b70      	cmp	r3, #112	; 0x70
 8004176:	d01a      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0xa6>
 8004178:	2b70      	cmp	r3, #112	; 0x70
 800417a:	d87b      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x16c>
 800417c:	2b60      	cmp	r3, #96	; 0x60
 800417e:	d050      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x11a>
 8004180:	2b60      	cmp	r3, #96	; 0x60
 8004182:	d877      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x16c>
 8004184:	2b50      	cmp	r3, #80	; 0x50
 8004186:	d03c      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0xfa>
 8004188:	2b50      	cmp	r3, #80	; 0x50
 800418a:	d873      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x16c>
 800418c:	2b40      	cmp	r3, #64	; 0x40
 800418e:	d058      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0x13a>
 8004190:	2b40      	cmp	r3, #64	; 0x40
 8004192:	d86f      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x16c>
 8004194:	2b30      	cmp	r3, #48	; 0x30
 8004196:	d064      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x15a>
 8004198:	2b30      	cmp	r3, #48	; 0x30
 800419a:	d86b      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x16c>
 800419c:	2b20      	cmp	r3, #32
 800419e:	d060      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x15a>
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d867      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x16c>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d05c      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x15a>
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d05a      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x15a>
 80041ac:	e062      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041be:	f000 fb2c 	bl	800481a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	609a      	str	r2, [r3, #8]
      break;
 80041da:	e04f      	b.n	800427c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041ec:	f000 fb15 	bl	800481a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041fe:	609a      	str	r2, [r3, #8]
      break;
 8004200:	e03c      	b.n	800427c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800420e:	461a      	mov	r2, r3
 8004210:	f000 fa8c 	bl	800472c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2150      	movs	r1, #80	; 0x50
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fae3 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 8004220:	e02c      	b.n	800427c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800422e:	461a      	mov	r2, r3
 8004230:	f000 faaa 	bl	8004788 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2160      	movs	r1, #96	; 0x60
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fad3 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 8004240:	e01c      	b.n	800427c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800424e:	461a      	mov	r2, r3
 8004250:	f000 fa6c 	bl	800472c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2140      	movs	r1, #64	; 0x40
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fac3 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 8004260:	e00c      	b.n	800427c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4619      	mov	r1, r3
 800426c:	4610      	mov	r0, r2
 800426e:	f000 faba 	bl	80047e6 <TIM_ITRx_SetConfig>
      break;
 8004272:	e003      	b.n	800427c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
      break;
 8004278:	e000      	b.n	800427c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800427a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800428c:	7bfb      	ldrb	r3, [r7, #15]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
	...

080042e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a33      	ldr	r2, [pc, #204]	; (80043c0 <TIM_Base_SetConfig+0xe0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d013      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a32      	ldr	r2, [pc, #200]	; (80043c4 <TIM_Base_SetConfig+0xe4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00f      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004306:	d00b      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a2f      	ldr	r2, [pc, #188]	; (80043c8 <TIM_Base_SetConfig+0xe8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d007      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a2e      	ldr	r2, [pc, #184]	; (80043cc <TIM_Base_SetConfig+0xec>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a2d      	ldr	r2, [pc, #180]	; (80043d0 <TIM_Base_SetConfig+0xf0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d108      	bne.n	8004332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a22      	ldr	r2, [pc, #136]	; (80043c0 <TIM_Base_SetConfig+0xe0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <TIM_Base_SetConfig+0x82>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <TIM_Base_SetConfig+0xe4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00f      	beq.n	8004362 <TIM_Base_SetConfig+0x82>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004348:	d00b      	beq.n	8004362 <TIM_Base_SetConfig+0x82>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a1e      	ldr	r2, [pc, #120]	; (80043c8 <TIM_Base_SetConfig+0xe8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d007      	beq.n	8004362 <TIM_Base_SetConfig+0x82>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a1d      	ldr	r2, [pc, #116]	; (80043cc <TIM_Base_SetConfig+0xec>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d003      	beq.n	8004362 <TIM_Base_SetConfig+0x82>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a1c      	ldr	r2, [pc, #112]	; (80043d0 <TIM_Base_SetConfig+0xf0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d108      	bne.n	8004374 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a09      	ldr	r2, [pc, #36]	; (80043c0 <TIM_Base_SetConfig+0xe0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d003      	beq.n	80043a8 <TIM_Base_SetConfig+0xc8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a08      	ldr	r2, [pc, #32]	; (80043c4 <TIM_Base_SetConfig+0xe4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d103      	bne.n	80043b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	615a      	str	r2, [r3, #20]
}
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40013400 	.word	0x40013400
 80043c8:	40000400 	.word	0x40000400
 80043cc:	40000800 	.word	0x40000800
 80043d0:	40000c00 	.word	0x40000c00

080043d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f023 0201 	bic.w	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0303 	bic.w	r3, r3, #3
 800440a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f023 0302 	bic.w	r3, r3, #2
 800441c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a20      	ldr	r2, [pc, #128]	; (80044ac <TIM_OC1_SetConfig+0xd8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_OC1_SetConfig+0x64>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a1f      	ldr	r2, [pc, #124]	; (80044b0 <TIM_OC1_SetConfig+0xdc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d10c      	bne.n	8004452 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 0308 	bic.w	r3, r3, #8
 800443e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f023 0304 	bic.w	r3, r3, #4
 8004450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <TIM_OC1_SetConfig+0xd8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d003      	beq.n	8004462 <TIM_OC1_SetConfig+0x8e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a14      	ldr	r2, [pc, #80]	; (80044b0 <TIM_OC1_SetConfig+0xdc>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d111      	bne.n	8004486 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	621a      	str	r2, [r3, #32]
}
 80044a0:	bf00      	nop
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	40013400 	.word	0x40013400

080044b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f023 0210 	bic.w	r2, r3, #16
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f023 0320 	bic.w	r3, r3, #32
 80044fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a21      	ldr	r2, [pc, #132]	; (8004594 <TIM_OC2_SetConfig+0xe0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_OC2_SetConfig+0x68>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a20      	ldr	r2, [pc, #128]	; (8004598 <TIM_OC2_SetConfig+0xe4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d10d      	bne.n	8004538 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004536:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a16      	ldr	r2, [pc, #88]	; (8004594 <TIM_OC2_SetConfig+0xe0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d003      	beq.n	8004548 <TIM_OC2_SetConfig+0x94>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a15      	ldr	r2, [pc, #84]	; (8004598 <TIM_OC2_SetConfig+0xe4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d113      	bne.n	8004570 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800454e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004556:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr
 8004594:	40012c00 	.word	0x40012c00
 8004598:	40013400 	.word	0x40013400

0800459c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0303 	bic.w	r3, r3, #3
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a21      	ldr	r2, [pc, #132]	; (800467c <TIM_OC3_SetConfig+0xe0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d003      	beq.n	8004602 <TIM_OC3_SetConfig+0x66>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a20      	ldr	r2, [pc, #128]	; (8004680 <TIM_OC3_SetConfig+0xe4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10d      	bne.n	800461e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800461c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a16      	ldr	r2, [pc, #88]	; (800467c <TIM_OC3_SetConfig+0xe0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d003      	beq.n	800462e <TIM_OC3_SetConfig+0x92>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a15      	ldr	r2, [pc, #84]	; (8004680 <TIM_OC3_SetConfig+0xe4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d113      	bne.n	8004656 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800463c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	621a      	str	r2, [r3, #32]
}
 8004670:	bf00      	nop
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40013400 	.word	0x40013400

08004684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	031b      	lsls	r3, r3, #12
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a11      	ldr	r2, [pc, #68]	; (8004724 <TIM_OC4_SetConfig+0xa0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_OC4_SetConfig+0x68>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a10      	ldr	r2, [pc, #64]	; (8004728 <TIM_OC4_SetConfig+0xa4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d109      	bne.n	8004700 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	019b      	lsls	r3, r3, #6
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr
 8004724:	40012c00 	.word	0x40012c00
 8004728:	40013400 	.word	0x40013400

0800472c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f023 0201 	bic.w	r2, r3, #1
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f023 030a 	bic.w	r3, r3, #10
 8004768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	621a      	str	r2, [r3, #32]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	f023 0210 	bic.w	r2, r3, #16
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	031b      	lsls	r3, r3, #12
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	621a      	str	r2, [r3, #32]
}
 80047dc:	bf00      	nop
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr

080047e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	f043 0307 	orr.w	r3, r3, #7
 8004808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	609a      	str	r2, [r3, #8]
}
 8004810:	bf00      	nop
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr

0800481a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800481a:	b480      	push	{r7}
 800481c:	b087      	sub	sp, #28
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
 8004826:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004834:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	021a      	lsls	r2, r3, #8
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	431a      	orrs	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	4313      	orrs	r3, r2
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	609a      	str	r2, [r3, #8]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr

08004858 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	2201      	movs	r2, #1
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1a      	ldr	r2, [r3, #32]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	43db      	mvns	r3, r3
 800487a:	401a      	ands	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a1a      	ldr	r2, [r3, #32]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	fa01 f303 	lsl.w	r3, r1, r3
 8004890:	431a      	orrs	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	621a      	str	r2, [r3, #32]
}
 8004896:	bf00      	nop
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e050      	b.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1b      	ldr	r2, [pc, #108]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d018      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a19      	ldr	r2, [pc, #100]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490e:	d00e      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a15      	ldr	r2, [pc, #84]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d009      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a14      	ldr	r2, [pc, #80]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a12      	ldr	r2, [pc, #72]	; (8004974 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d10c      	bne.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	4313      	orrs	r3, r2
 800493e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr
 8004964:	40012c00 	.word	0x40012c00
 8004968:	40013400 	.word	0x40013400
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800
 8004974:	40000c00 	.word	0x40000c00

08004978 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004990:	2302      	movs	r3, #2
 8004992:	e03d      	b.n	8004a10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bc80      	pop	{r7}
 8004a18:	4770      	bx	lr

08004a1a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr

08004a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b082      	sub	sp, #8
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e042      	b.n	8004ad6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d106      	bne.n	8004a6a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7fd fea1 	bl	80027ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2224      	movs	r2, #36	; 0x24
 8004a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f91c 	bl	8004cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691a      	ldr	r2, [r3, #16]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695a      	ldr	r2, [r3, #20]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aa6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ab6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b08a      	sub	sp, #40	; 0x28
 8004ae2:	af02      	add	r7, sp, #8
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	603b      	str	r3, [r7, #0]
 8004aea:	4613      	mov	r3, r2
 8004aec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	d16d      	bne.n	8004bda <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <HAL_UART_Transmit+0x2c>
 8004b04:	88fb      	ldrh	r3, [r7, #6]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e066      	b.n	8004bdc <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2221      	movs	r2, #33	; 0x21
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b1c:	f7fd ff4c 	bl	80029b8 <HAL_GetTick>
 8004b20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	88fa      	ldrh	r2, [r7, #6]
 8004b26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	88fa      	ldrh	r2, [r7, #6]
 8004b2c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b36:	d108      	bne.n	8004b4a <HAL_UART_Transmit+0x6c>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d104      	bne.n	8004b4a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	e003      	b.n	8004b52 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b52:	e02a      	b.n	8004baa <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2180      	movs	r1, #128	; 0x80
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f840 	bl	8004be4 <UART_WaitOnFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e036      	b.n	8004bdc <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10b      	bne.n	8004b8c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b82:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	3302      	adds	r3, #2
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	e007      	b.n	8004b9c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	781a      	ldrb	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1cf      	bne.n	8004b54 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2140      	movs	r1, #64	; 0x40
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 f810 	bl	8004be4 <UART_WaitOnFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e006      	b.n	8004bdc <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e000      	b.n	8004bdc <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
  }
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b090      	sub	sp, #64	; 0x40
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf4:	e050      	b.n	8004c98 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d04c      	beq.n	8004c98 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c04:	f7fd fed8 	bl	80029b8 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d241      	bcs.n	8004c98 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	330c      	adds	r3, #12
 8004c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	e853 3f00 	ldrex	r3, [r3]
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	330c      	adds	r3, #12
 8004c32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c34:	637a      	str	r2, [r7, #52]	; 0x34
 8004c36:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c3c:	e841 2300 	strex	r3, r2, [r1]
 8004c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e5      	bne.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3314      	adds	r3, #20
 8004c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	613b      	str	r3, [r7, #16]
   return(result);
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f023 0301 	bic.w	r3, r3, #1
 8004c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3314      	adds	r3, #20
 8004c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c68:	623a      	str	r2, [r7, #32]
 8004c6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6c:	69f9      	ldr	r1, [r7, #28]
 8004c6e:	6a3a      	ldr	r2, [r7, #32]
 8004c70:	e841 2300 	strex	r3, r2, [r1]
 8004c74:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1e5      	bne.n	8004c48 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e00f      	b.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	bf0c      	ite	eq
 8004ca8:	2301      	moveq	r3, #1
 8004caa:	2300      	movne	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d09f      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3740      	adds	r7, #64	; 0x40
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004cfa:	f023 030c 	bic.w	r3, r3, #12
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6812      	ldr	r2, [r2, #0]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	430b      	orrs	r3, r1
 8004d06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a2c      	ldr	r2, [pc, #176]	; (8004dd4 <UART_SetConfig+0x114>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d103      	bne.n	8004d30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d28:	f7fe fd00 	bl	800372c <HAL_RCC_GetPCLK2Freq>
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	e002      	b.n	8004d36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d30:	f7fe fce8 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8004d34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009a      	lsls	r2, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	4a22      	ldr	r2, [pc, #136]	; (8004dd8 <UART_SetConfig+0x118>)
 8004d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	0119      	lsls	r1, r3, #4
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009a      	lsls	r2, r3, #2
 8004d60:	441a      	add	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	; (8004dd8 <UART_SetConfig+0x118>)
 8004d6e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	2064      	movs	r0, #100	; 0x64
 8004d76:	fb00 f303 	mul.w	r3, r0, r3
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	3332      	adds	r3, #50	; 0x32
 8004d80:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <UART_SetConfig+0x118>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d8c:	4419      	add	r1, r3
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009a      	lsls	r2, r3, #2
 8004d98:	441a      	add	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004da4:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <UART_SetConfig+0x118>)
 8004da6:	fba3 0302 	umull	r0, r3, r3, r2
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	2064      	movs	r0, #100	; 0x64
 8004dae:	fb00 f303 	mul.w	r3, r0, r3
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	3332      	adds	r3, #50	; 0x32
 8004db8:	4a07      	ldr	r2, [pc, #28]	; (8004dd8 <UART_SetConfig+0x118>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	f003 020f 	and.w	r2, r3, #15
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	440a      	add	r2, r1
 8004dca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40013800 	.word	0x40013800
 8004dd8:	51eb851f 	.word	0x51eb851f

08004ddc <__cvt>:
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de2:	461f      	mov	r7, r3
 8004de4:	bfbb      	ittet	lt
 8004de6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004dea:	461f      	movlt	r7, r3
 8004dec:	2300      	movge	r3, #0
 8004dee:	232d      	movlt	r3, #45	; 0x2d
 8004df0:	b088      	sub	sp, #32
 8004df2:	4614      	mov	r4, r2
 8004df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004df6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004df8:	7013      	strb	r3, [r2, #0]
 8004dfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004dfc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004e00:	f023 0820 	bic.w	r8, r3, #32
 8004e04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e08:	d005      	beq.n	8004e16 <__cvt+0x3a>
 8004e0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e0e:	d100      	bne.n	8004e12 <__cvt+0x36>
 8004e10:	3501      	adds	r5, #1
 8004e12:	2302      	movs	r3, #2
 8004e14:	e000      	b.n	8004e18 <__cvt+0x3c>
 8004e16:	2303      	movs	r3, #3
 8004e18:	aa07      	add	r2, sp, #28
 8004e1a:	9204      	str	r2, [sp, #16]
 8004e1c:	aa06      	add	r2, sp, #24
 8004e1e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004e22:	e9cd 3500 	strd	r3, r5, [sp]
 8004e26:	4622      	mov	r2, r4
 8004e28:	463b      	mov	r3, r7
 8004e2a:	f001 f975 	bl	8006118 <_dtoa_r>
 8004e2e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e32:	4606      	mov	r6, r0
 8004e34:	d102      	bne.n	8004e3c <__cvt+0x60>
 8004e36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e38:	07db      	lsls	r3, r3, #31
 8004e3a:	d522      	bpl.n	8004e82 <__cvt+0xa6>
 8004e3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e40:	eb06 0905 	add.w	r9, r6, r5
 8004e44:	d110      	bne.n	8004e68 <__cvt+0x8c>
 8004e46:	7833      	ldrb	r3, [r6, #0]
 8004e48:	2b30      	cmp	r3, #48	; 0x30
 8004e4a:	d10a      	bne.n	8004e62 <__cvt+0x86>
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2300      	movs	r3, #0
 8004e50:	4620      	mov	r0, r4
 8004e52:	4639      	mov	r1, r7
 8004e54:	f7fb fec8 	bl	8000be8 <__aeabi_dcmpeq>
 8004e58:	b918      	cbnz	r0, 8004e62 <__cvt+0x86>
 8004e5a:	f1c5 0501 	rsb	r5, r5, #1
 8004e5e:	f8ca 5000 	str.w	r5, [sl]
 8004e62:	f8da 3000 	ldr.w	r3, [sl]
 8004e66:	4499      	add	r9, r3
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	4639      	mov	r1, r7
 8004e70:	f7fb feba 	bl	8000be8 <__aeabi_dcmpeq>
 8004e74:	b108      	cbz	r0, 8004e7a <__cvt+0x9e>
 8004e76:	f8cd 901c 	str.w	r9, [sp, #28]
 8004e7a:	2230      	movs	r2, #48	; 0x30
 8004e7c:	9b07      	ldr	r3, [sp, #28]
 8004e7e:	454b      	cmp	r3, r9
 8004e80:	d307      	bcc.n	8004e92 <__cvt+0xb6>
 8004e82:	4630      	mov	r0, r6
 8004e84:	9b07      	ldr	r3, [sp, #28]
 8004e86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004e88:	1b9b      	subs	r3, r3, r6
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	b008      	add	sp, #32
 8004e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e92:	1c59      	adds	r1, r3, #1
 8004e94:	9107      	str	r1, [sp, #28]
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	e7f0      	b.n	8004e7c <__cvt+0xa0>

08004e9a <__exponent>:
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e9e:	2900      	cmp	r1, #0
 8004ea0:	f803 2b02 	strb.w	r2, [r3], #2
 8004ea4:	bfb6      	itet	lt
 8004ea6:	222d      	movlt	r2, #45	; 0x2d
 8004ea8:	222b      	movge	r2, #43	; 0x2b
 8004eaa:	4249      	neglt	r1, r1
 8004eac:	2909      	cmp	r1, #9
 8004eae:	7042      	strb	r2, [r0, #1]
 8004eb0:	dd2a      	ble.n	8004f08 <__exponent+0x6e>
 8004eb2:	f10d 0207 	add.w	r2, sp, #7
 8004eb6:	4617      	mov	r7, r2
 8004eb8:	260a      	movs	r6, #10
 8004eba:	fb91 f5f6 	sdiv	r5, r1, r6
 8004ebe:	4694      	mov	ip, r2
 8004ec0:	fb06 1415 	mls	r4, r6, r5, r1
 8004ec4:	3430      	adds	r4, #48	; 0x30
 8004ec6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004eca:	460c      	mov	r4, r1
 8004ecc:	2c63      	cmp	r4, #99	; 0x63
 8004ece:	4629      	mov	r1, r5
 8004ed0:	f102 32ff 	add.w	r2, r2, #4294967295
 8004ed4:	dcf1      	bgt.n	8004eba <__exponent+0x20>
 8004ed6:	3130      	adds	r1, #48	; 0x30
 8004ed8:	f1ac 0402 	sub.w	r4, ip, #2
 8004edc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	1c41      	adds	r1, r0, #1
 8004ee4:	42ba      	cmp	r2, r7
 8004ee6:	d30a      	bcc.n	8004efe <__exponent+0x64>
 8004ee8:	f10d 0209 	add.w	r2, sp, #9
 8004eec:	eba2 020c 	sub.w	r2, r2, ip
 8004ef0:	42bc      	cmp	r4, r7
 8004ef2:	bf88      	it	hi
 8004ef4:	2200      	movhi	r2, #0
 8004ef6:	4413      	add	r3, r2
 8004ef8:	1a18      	subs	r0, r3, r0
 8004efa:	b003      	add	sp, #12
 8004efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004efe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004f02:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004f06:	e7ed      	b.n	8004ee4 <__exponent+0x4a>
 8004f08:	2330      	movs	r3, #48	; 0x30
 8004f0a:	3130      	adds	r1, #48	; 0x30
 8004f0c:	7083      	strb	r3, [r0, #2]
 8004f0e:	70c1      	strb	r1, [r0, #3]
 8004f10:	1d03      	adds	r3, r0, #4
 8004f12:	e7f1      	b.n	8004ef8 <__exponent+0x5e>

08004f14 <_printf_float>:
 8004f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f18:	b091      	sub	sp, #68	; 0x44
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004f20:	4616      	mov	r6, r2
 8004f22:	461f      	mov	r7, r3
 8004f24:	4605      	mov	r5, r0
 8004f26:	f000 ffe3 	bl	8005ef0 <_localeconv_r>
 8004f2a:	6803      	ldr	r3, [r0, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f30:	f7fb f97a 	bl	8000228 <strlen>
 8004f34:	2300      	movs	r3, #0
 8004f36:	930e      	str	r3, [sp, #56]	; 0x38
 8004f38:	f8d8 3000 	ldr.w	r3, [r8]
 8004f3c:	900a      	str	r0, [sp, #40]	; 0x28
 8004f3e:	3307      	adds	r3, #7
 8004f40:	f023 0307 	bic.w	r3, r3, #7
 8004f44:	f103 0208 	add.w	r2, r3, #8
 8004f48:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004f4c:	f8d4 b000 	ldr.w	fp, [r4]
 8004f50:	f8c8 2000 	str.w	r2, [r8]
 8004f54:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004f58:	4652      	mov	r2, sl
 8004f5a:	4643      	mov	r3, r8
 8004f5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004f60:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004f64:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f66:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6a:	4650      	mov	r0, sl
 8004f6c:	4b9c      	ldr	r3, [pc, #624]	; (80051e0 <_printf_float+0x2cc>)
 8004f6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f70:	f7fb fe6c 	bl	8000c4c <__aeabi_dcmpun>
 8004f74:	bb70      	cbnz	r0, 8004fd4 <_printf_float+0xc0>
 8004f76:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7a:	4650      	mov	r0, sl
 8004f7c:	4b98      	ldr	r3, [pc, #608]	; (80051e0 <_printf_float+0x2cc>)
 8004f7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f80:	f7fb fe46 	bl	8000c10 <__aeabi_dcmple>
 8004f84:	bb30      	cbnz	r0, 8004fd4 <_printf_float+0xc0>
 8004f86:	2200      	movs	r2, #0
 8004f88:	2300      	movs	r3, #0
 8004f8a:	4650      	mov	r0, sl
 8004f8c:	4641      	mov	r1, r8
 8004f8e:	f7fb fe35 	bl	8000bfc <__aeabi_dcmplt>
 8004f92:	b110      	cbz	r0, 8004f9a <_printf_float+0x86>
 8004f94:	232d      	movs	r3, #45	; 0x2d
 8004f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f9a:	4a92      	ldr	r2, [pc, #584]	; (80051e4 <_printf_float+0x2d0>)
 8004f9c:	4b92      	ldr	r3, [pc, #584]	; (80051e8 <_printf_float+0x2d4>)
 8004f9e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004fa2:	bf94      	ite	ls
 8004fa4:	4690      	movls	r8, r2
 8004fa6:	4698      	movhi	r8, r3
 8004fa8:	2303      	movs	r3, #3
 8004faa:	f04f 0a00 	mov.w	sl, #0
 8004fae:	6123      	str	r3, [r4, #16]
 8004fb0:	f02b 0304 	bic.w	r3, fp, #4
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	4633      	mov	r3, r6
 8004fb8:	4621      	mov	r1, r4
 8004fba:	4628      	mov	r0, r5
 8004fbc:	9700      	str	r7, [sp, #0]
 8004fbe:	aa0f      	add	r2, sp, #60	; 0x3c
 8004fc0:	f000 f9d6 	bl	8005370 <_printf_common>
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	f040 8090 	bne.w	80050ea <_printf_float+0x1d6>
 8004fca:	f04f 30ff 	mov.w	r0, #4294967295
 8004fce:	b011      	add	sp, #68	; 0x44
 8004fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd4:	4652      	mov	r2, sl
 8004fd6:	4643      	mov	r3, r8
 8004fd8:	4650      	mov	r0, sl
 8004fda:	4641      	mov	r1, r8
 8004fdc:	f7fb fe36 	bl	8000c4c <__aeabi_dcmpun>
 8004fe0:	b148      	cbz	r0, 8004ff6 <_printf_float+0xe2>
 8004fe2:	f1b8 0f00 	cmp.w	r8, #0
 8004fe6:	bfb8      	it	lt
 8004fe8:	232d      	movlt	r3, #45	; 0x2d
 8004fea:	4a80      	ldr	r2, [pc, #512]	; (80051ec <_printf_float+0x2d8>)
 8004fec:	bfb8      	it	lt
 8004fee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ff2:	4b7f      	ldr	r3, [pc, #508]	; (80051f0 <_printf_float+0x2dc>)
 8004ff4:	e7d3      	b.n	8004f9e <_printf_float+0x8a>
 8004ff6:	6863      	ldr	r3, [r4, #4]
 8004ff8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	d142      	bne.n	8005086 <_printf_float+0x172>
 8005000:	2306      	movs	r3, #6
 8005002:	6063      	str	r3, [r4, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	9206      	str	r2, [sp, #24]
 8005008:	aa0e      	add	r2, sp, #56	; 0x38
 800500a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800500e:	aa0d      	add	r2, sp, #52	; 0x34
 8005010:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005014:	9203      	str	r2, [sp, #12]
 8005016:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800501a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	6863      	ldr	r3, [r4, #4]
 8005022:	4652      	mov	r2, sl
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	4628      	mov	r0, r5
 8005028:	4643      	mov	r3, r8
 800502a:	910b      	str	r1, [sp, #44]	; 0x2c
 800502c:	f7ff fed6 	bl	8004ddc <__cvt>
 8005030:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005032:	4680      	mov	r8, r0
 8005034:	2947      	cmp	r1, #71	; 0x47
 8005036:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005038:	d108      	bne.n	800504c <_printf_float+0x138>
 800503a:	1cc8      	adds	r0, r1, #3
 800503c:	db02      	blt.n	8005044 <_printf_float+0x130>
 800503e:	6863      	ldr	r3, [r4, #4]
 8005040:	4299      	cmp	r1, r3
 8005042:	dd40      	ble.n	80050c6 <_printf_float+0x1b2>
 8005044:	f1a9 0902 	sub.w	r9, r9, #2
 8005048:	fa5f f989 	uxtb.w	r9, r9
 800504c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005050:	d81f      	bhi.n	8005092 <_printf_float+0x17e>
 8005052:	464a      	mov	r2, r9
 8005054:	3901      	subs	r1, #1
 8005056:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800505a:	910d      	str	r1, [sp, #52]	; 0x34
 800505c:	f7ff ff1d 	bl	8004e9a <__exponent>
 8005060:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005062:	4682      	mov	sl, r0
 8005064:	1813      	adds	r3, r2, r0
 8005066:	2a01      	cmp	r2, #1
 8005068:	6123      	str	r3, [r4, #16]
 800506a:	dc02      	bgt.n	8005072 <_printf_float+0x15e>
 800506c:	6822      	ldr	r2, [r4, #0]
 800506e:	07d2      	lsls	r2, r2, #31
 8005070:	d501      	bpl.n	8005076 <_printf_float+0x162>
 8005072:	3301      	adds	r3, #1
 8005074:	6123      	str	r3, [r4, #16]
 8005076:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800507a:	2b00      	cmp	r3, #0
 800507c:	d09b      	beq.n	8004fb6 <_printf_float+0xa2>
 800507e:	232d      	movs	r3, #45	; 0x2d
 8005080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005084:	e797      	b.n	8004fb6 <_printf_float+0xa2>
 8005086:	2947      	cmp	r1, #71	; 0x47
 8005088:	d1bc      	bne.n	8005004 <_printf_float+0xf0>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1ba      	bne.n	8005004 <_printf_float+0xf0>
 800508e:	2301      	movs	r3, #1
 8005090:	e7b7      	b.n	8005002 <_printf_float+0xee>
 8005092:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005096:	d118      	bne.n	80050ca <_printf_float+0x1b6>
 8005098:	2900      	cmp	r1, #0
 800509a:	6863      	ldr	r3, [r4, #4]
 800509c:	dd0b      	ble.n	80050b6 <_printf_float+0x1a2>
 800509e:	6121      	str	r1, [r4, #16]
 80050a0:	b913      	cbnz	r3, 80050a8 <_printf_float+0x194>
 80050a2:	6822      	ldr	r2, [r4, #0]
 80050a4:	07d0      	lsls	r0, r2, #31
 80050a6:	d502      	bpl.n	80050ae <_printf_float+0x19a>
 80050a8:	3301      	adds	r3, #1
 80050aa:	440b      	add	r3, r1
 80050ac:	6123      	str	r3, [r4, #16]
 80050ae:	f04f 0a00 	mov.w	sl, #0
 80050b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80050b4:	e7df      	b.n	8005076 <_printf_float+0x162>
 80050b6:	b913      	cbnz	r3, 80050be <_printf_float+0x1aa>
 80050b8:	6822      	ldr	r2, [r4, #0]
 80050ba:	07d2      	lsls	r2, r2, #31
 80050bc:	d501      	bpl.n	80050c2 <_printf_float+0x1ae>
 80050be:	3302      	adds	r3, #2
 80050c0:	e7f4      	b.n	80050ac <_printf_float+0x198>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e7f2      	b.n	80050ac <_printf_float+0x198>
 80050c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80050ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050cc:	4299      	cmp	r1, r3
 80050ce:	db05      	blt.n	80050dc <_printf_float+0x1c8>
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	6121      	str	r1, [r4, #16]
 80050d4:	07d8      	lsls	r0, r3, #31
 80050d6:	d5ea      	bpl.n	80050ae <_printf_float+0x19a>
 80050d8:	1c4b      	adds	r3, r1, #1
 80050da:	e7e7      	b.n	80050ac <_printf_float+0x198>
 80050dc:	2900      	cmp	r1, #0
 80050de:	bfcc      	ite	gt
 80050e0:	2201      	movgt	r2, #1
 80050e2:	f1c1 0202 	rsble	r2, r1, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	e7e0      	b.n	80050ac <_printf_float+0x198>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	055a      	lsls	r2, r3, #21
 80050ee:	d407      	bmi.n	8005100 <_printf_float+0x1ec>
 80050f0:	6923      	ldr	r3, [r4, #16]
 80050f2:	4642      	mov	r2, r8
 80050f4:	4631      	mov	r1, r6
 80050f6:	4628      	mov	r0, r5
 80050f8:	47b8      	blx	r7
 80050fa:	3001      	adds	r0, #1
 80050fc:	d12b      	bne.n	8005156 <_printf_float+0x242>
 80050fe:	e764      	b.n	8004fca <_printf_float+0xb6>
 8005100:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005104:	f240 80dd 	bls.w	80052c2 <_printf_float+0x3ae>
 8005108:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800510c:	2200      	movs	r2, #0
 800510e:	2300      	movs	r3, #0
 8005110:	f7fb fd6a 	bl	8000be8 <__aeabi_dcmpeq>
 8005114:	2800      	cmp	r0, #0
 8005116:	d033      	beq.n	8005180 <_printf_float+0x26c>
 8005118:	2301      	movs	r3, #1
 800511a:	4631      	mov	r1, r6
 800511c:	4628      	mov	r0, r5
 800511e:	4a35      	ldr	r2, [pc, #212]	; (80051f4 <_printf_float+0x2e0>)
 8005120:	47b8      	blx	r7
 8005122:	3001      	adds	r0, #1
 8005124:	f43f af51 	beq.w	8004fca <_printf_float+0xb6>
 8005128:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800512c:	429a      	cmp	r2, r3
 800512e:	db02      	blt.n	8005136 <_printf_float+0x222>
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	07d8      	lsls	r0, r3, #31
 8005134:	d50f      	bpl.n	8005156 <_printf_float+0x242>
 8005136:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800513a:	4631      	mov	r1, r6
 800513c:	4628      	mov	r0, r5
 800513e:	47b8      	blx	r7
 8005140:	3001      	adds	r0, #1
 8005142:	f43f af42 	beq.w	8004fca <_printf_float+0xb6>
 8005146:	f04f 0800 	mov.w	r8, #0
 800514a:	f104 091a 	add.w	r9, r4, #26
 800514e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005150:	3b01      	subs	r3, #1
 8005152:	4543      	cmp	r3, r8
 8005154:	dc09      	bgt.n	800516a <_printf_float+0x256>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	079b      	lsls	r3, r3, #30
 800515a:	f100 8104 	bmi.w	8005366 <_printf_float+0x452>
 800515e:	68e0      	ldr	r0, [r4, #12]
 8005160:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005162:	4298      	cmp	r0, r3
 8005164:	bfb8      	it	lt
 8005166:	4618      	movlt	r0, r3
 8005168:	e731      	b.n	8004fce <_printf_float+0xba>
 800516a:	2301      	movs	r3, #1
 800516c:	464a      	mov	r2, r9
 800516e:	4631      	mov	r1, r6
 8005170:	4628      	mov	r0, r5
 8005172:	47b8      	blx	r7
 8005174:	3001      	adds	r0, #1
 8005176:	f43f af28 	beq.w	8004fca <_printf_float+0xb6>
 800517a:	f108 0801 	add.w	r8, r8, #1
 800517e:	e7e6      	b.n	800514e <_printf_float+0x23a>
 8005180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005182:	2b00      	cmp	r3, #0
 8005184:	dc38      	bgt.n	80051f8 <_printf_float+0x2e4>
 8005186:	2301      	movs	r3, #1
 8005188:	4631      	mov	r1, r6
 800518a:	4628      	mov	r0, r5
 800518c:	4a19      	ldr	r2, [pc, #100]	; (80051f4 <_printf_float+0x2e0>)
 800518e:	47b8      	blx	r7
 8005190:	3001      	adds	r0, #1
 8005192:	f43f af1a 	beq.w	8004fca <_printf_float+0xb6>
 8005196:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800519a:	4313      	orrs	r3, r2
 800519c:	d102      	bne.n	80051a4 <_printf_float+0x290>
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	07d9      	lsls	r1, r3, #31
 80051a2:	d5d8      	bpl.n	8005156 <_printf_float+0x242>
 80051a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051a8:	4631      	mov	r1, r6
 80051aa:	4628      	mov	r0, r5
 80051ac:	47b8      	blx	r7
 80051ae:	3001      	adds	r0, #1
 80051b0:	f43f af0b 	beq.w	8004fca <_printf_float+0xb6>
 80051b4:	f04f 0900 	mov.w	r9, #0
 80051b8:	f104 0a1a 	add.w	sl, r4, #26
 80051bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051be:	425b      	negs	r3, r3
 80051c0:	454b      	cmp	r3, r9
 80051c2:	dc01      	bgt.n	80051c8 <_printf_float+0x2b4>
 80051c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051c6:	e794      	b.n	80050f2 <_printf_float+0x1de>
 80051c8:	2301      	movs	r3, #1
 80051ca:	4652      	mov	r2, sl
 80051cc:	4631      	mov	r1, r6
 80051ce:	4628      	mov	r0, r5
 80051d0:	47b8      	blx	r7
 80051d2:	3001      	adds	r0, #1
 80051d4:	f43f aef9 	beq.w	8004fca <_printf_float+0xb6>
 80051d8:	f109 0901 	add.w	r9, r9, #1
 80051dc:	e7ee      	b.n	80051bc <_printf_float+0x2a8>
 80051de:	bf00      	nop
 80051e0:	7fefffff 	.word	0x7fefffff
 80051e4:	080096da 	.word	0x080096da
 80051e8:	080096de 	.word	0x080096de
 80051ec:	080096e2 	.word	0x080096e2
 80051f0:	080096e6 	.word	0x080096e6
 80051f4:	080096ea 	.word	0x080096ea
 80051f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051fc:	429a      	cmp	r2, r3
 80051fe:	bfa8      	it	ge
 8005200:	461a      	movge	r2, r3
 8005202:	2a00      	cmp	r2, #0
 8005204:	4691      	mov	r9, r2
 8005206:	dc37      	bgt.n	8005278 <_printf_float+0x364>
 8005208:	f04f 0b00 	mov.w	fp, #0
 800520c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005210:	f104 021a 	add.w	r2, r4, #26
 8005214:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005218:	ebaa 0309 	sub.w	r3, sl, r9
 800521c:	455b      	cmp	r3, fp
 800521e:	dc33      	bgt.n	8005288 <_printf_float+0x374>
 8005220:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005224:	429a      	cmp	r2, r3
 8005226:	db3b      	blt.n	80052a0 <_printf_float+0x38c>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	07da      	lsls	r2, r3, #31
 800522c:	d438      	bmi.n	80052a0 <_printf_float+0x38c>
 800522e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005232:	eba2 0903 	sub.w	r9, r2, r3
 8005236:	eba2 020a 	sub.w	r2, r2, sl
 800523a:	4591      	cmp	r9, r2
 800523c:	bfa8      	it	ge
 800523e:	4691      	movge	r9, r2
 8005240:	f1b9 0f00 	cmp.w	r9, #0
 8005244:	dc34      	bgt.n	80052b0 <_printf_float+0x39c>
 8005246:	f04f 0800 	mov.w	r8, #0
 800524a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800524e:	f104 0a1a 	add.w	sl, r4, #26
 8005252:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	eba3 0309 	sub.w	r3, r3, r9
 800525c:	4543      	cmp	r3, r8
 800525e:	f77f af7a 	ble.w	8005156 <_printf_float+0x242>
 8005262:	2301      	movs	r3, #1
 8005264:	4652      	mov	r2, sl
 8005266:	4631      	mov	r1, r6
 8005268:	4628      	mov	r0, r5
 800526a:	47b8      	blx	r7
 800526c:	3001      	adds	r0, #1
 800526e:	f43f aeac 	beq.w	8004fca <_printf_float+0xb6>
 8005272:	f108 0801 	add.w	r8, r8, #1
 8005276:	e7ec      	b.n	8005252 <_printf_float+0x33e>
 8005278:	4613      	mov	r3, r2
 800527a:	4631      	mov	r1, r6
 800527c:	4642      	mov	r2, r8
 800527e:	4628      	mov	r0, r5
 8005280:	47b8      	blx	r7
 8005282:	3001      	adds	r0, #1
 8005284:	d1c0      	bne.n	8005208 <_printf_float+0x2f4>
 8005286:	e6a0      	b.n	8004fca <_printf_float+0xb6>
 8005288:	2301      	movs	r3, #1
 800528a:	4631      	mov	r1, r6
 800528c:	4628      	mov	r0, r5
 800528e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005290:	47b8      	blx	r7
 8005292:	3001      	adds	r0, #1
 8005294:	f43f ae99 	beq.w	8004fca <_printf_float+0xb6>
 8005298:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800529a:	f10b 0b01 	add.w	fp, fp, #1
 800529e:	e7b9      	b.n	8005214 <_printf_float+0x300>
 80052a0:	4631      	mov	r1, r6
 80052a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b8      	blx	r7
 80052aa:	3001      	adds	r0, #1
 80052ac:	d1bf      	bne.n	800522e <_printf_float+0x31a>
 80052ae:	e68c      	b.n	8004fca <_printf_float+0xb6>
 80052b0:	464b      	mov	r3, r9
 80052b2:	4631      	mov	r1, r6
 80052b4:	4628      	mov	r0, r5
 80052b6:	eb08 020a 	add.w	r2, r8, sl
 80052ba:	47b8      	blx	r7
 80052bc:	3001      	adds	r0, #1
 80052be:	d1c2      	bne.n	8005246 <_printf_float+0x332>
 80052c0:	e683      	b.n	8004fca <_printf_float+0xb6>
 80052c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052c4:	2a01      	cmp	r2, #1
 80052c6:	dc01      	bgt.n	80052cc <_printf_float+0x3b8>
 80052c8:	07db      	lsls	r3, r3, #31
 80052ca:	d539      	bpl.n	8005340 <_printf_float+0x42c>
 80052cc:	2301      	movs	r3, #1
 80052ce:	4642      	mov	r2, r8
 80052d0:	4631      	mov	r1, r6
 80052d2:	4628      	mov	r0, r5
 80052d4:	47b8      	blx	r7
 80052d6:	3001      	adds	r0, #1
 80052d8:	f43f ae77 	beq.w	8004fca <_printf_float+0xb6>
 80052dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052e0:	4631      	mov	r1, r6
 80052e2:	4628      	mov	r0, r5
 80052e4:	47b8      	blx	r7
 80052e6:	3001      	adds	r0, #1
 80052e8:	f43f ae6f 	beq.w	8004fca <_printf_float+0xb6>
 80052ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052f0:	2200      	movs	r2, #0
 80052f2:	2300      	movs	r3, #0
 80052f4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80052f8:	f7fb fc76 	bl	8000be8 <__aeabi_dcmpeq>
 80052fc:	b9d8      	cbnz	r0, 8005336 <_printf_float+0x422>
 80052fe:	f109 33ff 	add.w	r3, r9, #4294967295
 8005302:	f108 0201 	add.w	r2, r8, #1
 8005306:	4631      	mov	r1, r6
 8005308:	4628      	mov	r0, r5
 800530a:	47b8      	blx	r7
 800530c:	3001      	adds	r0, #1
 800530e:	d10e      	bne.n	800532e <_printf_float+0x41a>
 8005310:	e65b      	b.n	8004fca <_printf_float+0xb6>
 8005312:	2301      	movs	r3, #1
 8005314:	464a      	mov	r2, r9
 8005316:	4631      	mov	r1, r6
 8005318:	4628      	mov	r0, r5
 800531a:	47b8      	blx	r7
 800531c:	3001      	adds	r0, #1
 800531e:	f43f ae54 	beq.w	8004fca <_printf_float+0xb6>
 8005322:	f108 0801 	add.w	r8, r8, #1
 8005326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005328:	3b01      	subs	r3, #1
 800532a:	4543      	cmp	r3, r8
 800532c:	dcf1      	bgt.n	8005312 <_printf_float+0x3fe>
 800532e:	4653      	mov	r3, sl
 8005330:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005334:	e6de      	b.n	80050f4 <_printf_float+0x1e0>
 8005336:	f04f 0800 	mov.w	r8, #0
 800533a:	f104 091a 	add.w	r9, r4, #26
 800533e:	e7f2      	b.n	8005326 <_printf_float+0x412>
 8005340:	2301      	movs	r3, #1
 8005342:	4642      	mov	r2, r8
 8005344:	e7df      	b.n	8005306 <_printf_float+0x3f2>
 8005346:	2301      	movs	r3, #1
 8005348:	464a      	mov	r2, r9
 800534a:	4631      	mov	r1, r6
 800534c:	4628      	mov	r0, r5
 800534e:	47b8      	blx	r7
 8005350:	3001      	adds	r0, #1
 8005352:	f43f ae3a 	beq.w	8004fca <_printf_float+0xb6>
 8005356:	f108 0801 	add.w	r8, r8, #1
 800535a:	68e3      	ldr	r3, [r4, #12]
 800535c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800535e:	1a5b      	subs	r3, r3, r1
 8005360:	4543      	cmp	r3, r8
 8005362:	dcf0      	bgt.n	8005346 <_printf_float+0x432>
 8005364:	e6fb      	b.n	800515e <_printf_float+0x24a>
 8005366:	f04f 0800 	mov.w	r8, #0
 800536a:	f104 0919 	add.w	r9, r4, #25
 800536e:	e7f4      	b.n	800535a <_printf_float+0x446>

08005370 <_printf_common>:
 8005370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005374:	4616      	mov	r6, r2
 8005376:	4699      	mov	r9, r3
 8005378:	688a      	ldr	r2, [r1, #8]
 800537a:	690b      	ldr	r3, [r1, #16]
 800537c:	4607      	mov	r7, r0
 800537e:	4293      	cmp	r3, r2
 8005380:	bfb8      	it	lt
 8005382:	4613      	movlt	r3, r2
 8005384:	6033      	str	r3, [r6, #0]
 8005386:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800538a:	460c      	mov	r4, r1
 800538c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005390:	b10a      	cbz	r2, 8005396 <_printf_common+0x26>
 8005392:	3301      	adds	r3, #1
 8005394:	6033      	str	r3, [r6, #0]
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	0699      	lsls	r1, r3, #26
 800539a:	bf42      	ittt	mi
 800539c:	6833      	ldrmi	r3, [r6, #0]
 800539e:	3302      	addmi	r3, #2
 80053a0:	6033      	strmi	r3, [r6, #0]
 80053a2:	6825      	ldr	r5, [r4, #0]
 80053a4:	f015 0506 	ands.w	r5, r5, #6
 80053a8:	d106      	bne.n	80053b8 <_printf_common+0x48>
 80053aa:	f104 0a19 	add.w	sl, r4, #25
 80053ae:	68e3      	ldr	r3, [r4, #12]
 80053b0:	6832      	ldr	r2, [r6, #0]
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	42ab      	cmp	r3, r5
 80053b6:	dc2b      	bgt.n	8005410 <_printf_common+0xa0>
 80053b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053bc:	1e13      	subs	r3, r2, #0
 80053be:	6822      	ldr	r2, [r4, #0]
 80053c0:	bf18      	it	ne
 80053c2:	2301      	movne	r3, #1
 80053c4:	0692      	lsls	r2, r2, #26
 80053c6:	d430      	bmi.n	800542a <_printf_common+0xba>
 80053c8:	4649      	mov	r1, r9
 80053ca:	4638      	mov	r0, r7
 80053cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053d0:	47c0      	blx	r8
 80053d2:	3001      	adds	r0, #1
 80053d4:	d023      	beq.n	800541e <_printf_common+0xae>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	6922      	ldr	r2, [r4, #16]
 80053da:	f003 0306 	and.w	r3, r3, #6
 80053de:	2b04      	cmp	r3, #4
 80053e0:	bf14      	ite	ne
 80053e2:	2500      	movne	r5, #0
 80053e4:	6833      	ldreq	r3, [r6, #0]
 80053e6:	f04f 0600 	mov.w	r6, #0
 80053ea:	bf08      	it	eq
 80053ec:	68e5      	ldreq	r5, [r4, #12]
 80053ee:	f104 041a 	add.w	r4, r4, #26
 80053f2:	bf08      	it	eq
 80053f4:	1aed      	subeq	r5, r5, r3
 80053f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80053fa:	bf08      	it	eq
 80053fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005400:	4293      	cmp	r3, r2
 8005402:	bfc4      	itt	gt
 8005404:	1a9b      	subgt	r3, r3, r2
 8005406:	18ed      	addgt	r5, r5, r3
 8005408:	42b5      	cmp	r5, r6
 800540a:	d11a      	bne.n	8005442 <_printf_common+0xd2>
 800540c:	2000      	movs	r0, #0
 800540e:	e008      	b.n	8005422 <_printf_common+0xb2>
 8005410:	2301      	movs	r3, #1
 8005412:	4652      	mov	r2, sl
 8005414:	4649      	mov	r1, r9
 8005416:	4638      	mov	r0, r7
 8005418:	47c0      	blx	r8
 800541a:	3001      	adds	r0, #1
 800541c:	d103      	bne.n	8005426 <_printf_common+0xb6>
 800541e:	f04f 30ff 	mov.w	r0, #4294967295
 8005422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005426:	3501      	adds	r5, #1
 8005428:	e7c1      	b.n	80053ae <_printf_common+0x3e>
 800542a:	2030      	movs	r0, #48	; 0x30
 800542c:	18e1      	adds	r1, r4, r3
 800542e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005438:	4422      	add	r2, r4
 800543a:	3302      	adds	r3, #2
 800543c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005440:	e7c2      	b.n	80053c8 <_printf_common+0x58>
 8005442:	2301      	movs	r3, #1
 8005444:	4622      	mov	r2, r4
 8005446:	4649      	mov	r1, r9
 8005448:	4638      	mov	r0, r7
 800544a:	47c0      	blx	r8
 800544c:	3001      	adds	r0, #1
 800544e:	d0e6      	beq.n	800541e <_printf_common+0xae>
 8005450:	3601      	adds	r6, #1
 8005452:	e7d9      	b.n	8005408 <_printf_common+0x98>

08005454 <_printf_i>:
 8005454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005458:	7e0f      	ldrb	r7, [r1, #24]
 800545a:	4691      	mov	r9, r2
 800545c:	2f78      	cmp	r7, #120	; 0x78
 800545e:	4680      	mov	r8, r0
 8005460:	460c      	mov	r4, r1
 8005462:	469a      	mov	sl, r3
 8005464:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005466:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800546a:	d807      	bhi.n	800547c <_printf_i+0x28>
 800546c:	2f62      	cmp	r7, #98	; 0x62
 800546e:	d80a      	bhi.n	8005486 <_printf_i+0x32>
 8005470:	2f00      	cmp	r7, #0
 8005472:	f000 80d5 	beq.w	8005620 <_printf_i+0x1cc>
 8005476:	2f58      	cmp	r7, #88	; 0x58
 8005478:	f000 80c1 	beq.w	80055fe <_printf_i+0x1aa>
 800547c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005480:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005484:	e03a      	b.n	80054fc <_printf_i+0xa8>
 8005486:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800548a:	2b15      	cmp	r3, #21
 800548c:	d8f6      	bhi.n	800547c <_printf_i+0x28>
 800548e:	a101      	add	r1, pc, #4	; (adr r1, 8005494 <_printf_i+0x40>)
 8005490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005494:	080054ed 	.word	0x080054ed
 8005498:	08005501 	.word	0x08005501
 800549c:	0800547d 	.word	0x0800547d
 80054a0:	0800547d 	.word	0x0800547d
 80054a4:	0800547d 	.word	0x0800547d
 80054a8:	0800547d 	.word	0x0800547d
 80054ac:	08005501 	.word	0x08005501
 80054b0:	0800547d 	.word	0x0800547d
 80054b4:	0800547d 	.word	0x0800547d
 80054b8:	0800547d 	.word	0x0800547d
 80054bc:	0800547d 	.word	0x0800547d
 80054c0:	08005607 	.word	0x08005607
 80054c4:	0800552d 	.word	0x0800552d
 80054c8:	080055c1 	.word	0x080055c1
 80054cc:	0800547d 	.word	0x0800547d
 80054d0:	0800547d 	.word	0x0800547d
 80054d4:	08005629 	.word	0x08005629
 80054d8:	0800547d 	.word	0x0800547d
 80054dc:	0800552d 	.word	0x0800552d
 80054e0:	0800547d 	.word	0x0800547d
 80054e4:	0800547d 	.word	0x0800547d
 80054e8:	080055c9 	.word	0x080055c9
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	1d1a      	adds	r2, r3, #4
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	602a      	str	r2, [r5, #0]
 80054f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0a0      	b.n	8005642 <_printf_i+0x1ee>
 8005500:	6820      	ldr	r0, [r4, #0]
 8005502:	682b      	ldr	r3, [r5, #0]
 8005504:	0607      	lsls	r7, r0, #24
 8005506:	f103 0104 	add.w	r1, r3, #4
 800550a:	6029      	str	r1, [r5, #0]
 800550c:	d501      	bpl.n	8005512 <_printf_i+0xbe>
 800550e:	681e      	ldr	r6, [r3, #0]
 8005510:	e003      	b.n	800551a <_printf_i+0xc6>
 8005512:	0646      	lsls	r6, r0, #25
 8005514:	d5fb      	bpl.n	800550e <_printf_i+0xba>
 8005516:	f9b3 6000 	ldrsh.w	r6, [r3]
 800551a:	2e00      	cmp	r6, #0
 800551c:	da03      	bge.n	8005526 <_printf_i+0xd2>
 800551e:	232d      	movs	r3, #45	; 0x2d
 8005520:	4276      	negs	r6, r6
 8005522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005526:	230a      	movs	r3, #10
 8005528:	4859      	ldr	r0, [pc, #356]	; (8005690 <_printf_i+0x23c>)
 800552a:	e012      	b.n	8005552 <_printf_i+0xfe>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	6820      	ldr	r0, [r4, #0]
 8005530:	1d19      	adds	r1, r3, #4
 8005532:	6029      	str	r1, [r5, #0]
 8005534:	0605      	lsls	r5, r0, #24
 8005536:	d501      	bpl.n	800553c <_printf_i+0xe8>
 8005538:	681e      	ldr	r6, [r3, #0]
 800553a:	e002      	b.n	8005542 <_printf_i+0xee>
 800553c:	0641      	lsls	r1, r0, #25
 800553e:	d5fb      	bpl.n	8005538 <_printf_i+0xe4>
 8005540:	881e      	ldrh	r6, [r3, #0]
 8005542:	2f6f      	cmp	r7, #111	; 0x6f
 8005544:	bf0c      	ite	eq
 8005546:	2308      	moveq	r3, #8
 8005548:	230a      	movne	r3, #10
 800554a:	4851      	ldr	r0, [pc, #324]	; (8005690 <_printf_i+0x23c>)
 800554c:	2100      	movs	r1, #0
 800554e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005552:	6865      	ldr	r5, [r4, #4]
 8005554:	2d00      	cmp	r5, #0
 8005556:	bfa8      	it	ge
 8005558:	6821      	ldrge	r1, [r4, #0]
 800555a:	60a5      	str	r5, [r4, #8]
 800555c:	bfa4      	itt	ge
 800555e:	f021 0104 	bicge.w	r1, r1, #4
 8005562:	6021      	strge	r1, [r4, #0]
 8005564:	b90e      	cbnz	r6, 800556a <_printf_i+0x116>
 8005566:	2d00      	cmp	r5, #0
 8005568:	d04b      	beq.n	8005602 <_printf_i+0x1ae>
 800556a:	4615      	mov	r5, r2
 800556c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005570:	fb03 6711 	mls	r7, r3, r1, r6
 8005574:	5dc7      	ldrb	r7, [r0, r7]
 8005576:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800557a:	4637      	mov	r7, r6
 800557c:	42bb      	cmp	r3, r7
 800557e:	460e      	mov	r6, r1
 8005580:	d9f4      	bls.n	800556c <_printf_i+0x118>
 8005582:	2b08      	cmp	r3, #8
 8005584:	d10b      	bne.n	800559e <_printf_i+0x14a>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	07de      	lsls	r6, r3, #31
 800558a:	d508      	bpl.n	800559e <_printf_i+0x14a>
 800558c:	6923      	ldr	r3, [r4, #16]
 800558e:	6861      	ldr	r1, [r4, #4]
 8005590:	4299      	cmp	r1, r3
 8005592:	bfde      	ittt	le
 8005594:	2330      	movle	r3, #48	; 0x30
 8005596:	f805 3c01 	strble.w	r3, [r5, #-1]
 800559a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800559e:	1b52      	subs	r2, r2, r5
 80055a0:	6122      	str	r2, [r4, #16]
 80055a2:	464b      	mov	r3, r9
 80055a4:	4621      	mov	r1, r4
 80055a6:	4640      	mov	r0, r8
 80055a8:	f8cd a000 	str.w	sl, [sp]
 80055ac:	aa03      	add	r2, sp, #12
 80055ae:	f7ff fedf 	bl	8005370 <_printf_common>
 80055b2:	3001      	adds	r0, #1
 80055b4:	d14a      	bne.n	800564c <_printf_i+0x1f8>
 80055b6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ba:	b004      	add	sp, #16
 80055bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	f043 0320 	orr.w	r3, r3, #32
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	2778      	movs	r7, #120	; 0x78
 80055ca:	4832      	ldr	r0, [pc, #200]	; (8005694 <_printf_i+0x240>)
 80055cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	6829      	ldr	r1, [r5, #0]
 80055d4:	061f      	lsls	r7, r3, #24
 80055d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80055da:	d402      	bmi.n	80055e2 <_printf_i+0x18e>
 80055dc:	065f      	lsls	r7, r3, #25
 80055de:	bf48      	it	mi
 80055e0:	b2b6      	uxthmi	r6, r6
 80055e2:	07df      	lsls	r7, r3, #31
 80055e4:	bf48      	it	mi
 80055e6:	f043 0320 	orrmi.w	r3, r3, #32
 80055ea:	6029      	str	r1, [r5, #0]
 80055ec:	bf48      	it	mi
 80055ee:	6023      	strmi	r3, [r4, #0]
 80055f0:	b91e      	cbnz	r6, 80055fa <_printf_i+0x1a6>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	f023 0320 	bic.w	r3, r3, #32
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	2310      	movs	r3, #16
 80055fc:	e7a6      	b.n	800554c <_printf_i+0xf8>
 80055fe:	4824      	ldr	r0, [pc, #144]	; (8005690 <_printf_i+0x23c>)
 8005600:	e7e4      	b.n	80055cc <_printf_i+0x178>
 8005602:	4615      	mov	r5, r2
 8005604:	e7bd      	b.n	8005582 <_printf_i+0x12e>
 8005606:	682b      	ldr	r3, [r5, #0]
 8005608:	6826      	ldr	r6, [r4, #0]
 800560a:	1d18      	adds	r0, r3, #4
 800560c:	6961      	ldr	r1, [r4, #20]
 800560e:	6028      	str	r0, [r5, #0]
 8005610:	0635      	lsls	r5, r6, #24
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	d501      	bpl.n	800561a <_printf_i+0x1c6>
 8005616:	6019      	str	r1, [r3, #0]
 8005618:	e002      	b.n	8005620 <_printf_i+0x1cc>
 800561a:	0670      	lsls	r0, r6, #25
 800561c:	d5fb      	bpl.n	8005616 <_printf_i+0x1c2>
 800561e:	8019      	strh	r1, [r3, #0]
 8005620:	2300      	movs	r3, #0
 8005622:	4615      	mov	r5, r2
 8005624:	6123      	str	r3, [r4, #16]
 8005626:	e7bc      	b.n	80055a2 <_printf_i+0x14e>
 8005628:	682b      	ldr	r3, [r5, #0]
 800562a:	2100      	movs	r1, #0
 800562c:	1d1a      	adds	r2, r3, #4
 800562e:	602a      	str	r2, [r5, #0]
 8005630:	681d      	ldr	r5, [r3, #0]
 8005632:	6862      	ldr	r2, [r4, #4]
 8005634:	4628      	mov	r0, r5
 8005636:	f000 fcd1 	bl	8005fdc <memchr>
 800563a:	b108      	cbz	r0, 8005640 <_printf_i+0x1ec>
 800563c:	1b40      	subs	r0, r0, r5
 800563e:	6060      	str	r0, [r4, #4]
 8005640:	6863      	ldr	r3, [r4, #4]
 8005642:	6123      	str	r3, [r4, #16]
 8005644:	2300      	movs	r3, #0
 8005646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800564a:	e7aa      	b.n	80055a2 <_printf_i+0x14e>
 800564c:	462a      	mov	r2, r5
 800564e:	4649      	mov	r1, r9
 8005650:	4640      	mov	r0, r8
 8005652:	6923      	ldr	r3, [r4, #16]
 8005654:	47d0      	blx	sl
 8005656:	3001      	adds	r0, #1
 8005658:	d0ad      	beq.n	80055b6 <_printf_i+0x162>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	079b      	lsls	r3, r3, #30
 800565e:	d413      	bmi.n	8005688 <_printf_i+0x234>
 8005660:	68e0      	ldr	r0, [r4, #12]
 8005662:	9b03      	ldr	r3, [sp, #12]
 8005664:	4298      	cmp	r0, r3
 8005666:	bfb8      	it	lt
 8005668:	4618      	movlt	r0, r3
 800566a:	e7a6      	b.n	80055ba <_printf_i+0x166>
 800566c:	2301      	movs	r3, #1
 800566e:	4632      	mov	r2, r6
 8005670:	4649      	mov	r1, r9
 8005672:	4640      	mov	r0, r8
 8005674:	47d0      	blx	sl
 8005676:	3001      	adds	r0, #1
 8005678:	d09d      	beq.n	80055b6 <_printf_i+0x162>
 800567a:	3501      	adds	r5, #1
 800567c:	68e3      	ldr	r3, [r4, #12]
 800567e:	9903      	ldr	r1, [sp, #12]
 8005680:	1a5b      	subs	r3, r3, r1
 8005682:	42ab      	cmp	r3, r5
 8005684:	dcf2      	bgt.n	800566c <_printf_i+0x218>
 8005686:	e7eb      	b.n	8005660 <_printf_i+0x20c>
 8005688:	2500      	movs	r5, #0
 800568a:	f104 0619 	add.w	r6, r4, #25
 800568e:	e7f5      	b.n	800567c <_printf_i+0x228>
 8005690:	080096ec 	.word	0x080096ec
 8005694:	080096fd 	.word	0x080096fd

08005698 <_scanf_float>:
 8005698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569c:	b087      	sub	sp, #28
 800569e:	9303      	str	r3, [sp, #12]
 80056a0:	688b      	ldr	r3, [r1, #8]
 80056a2:	4617      	mov	r7, r2
 80056a4:	1e5a      	subs	r2, r3, #1
 80056a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80056aa:	bf85      	ittet	hi
 80056ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80056b0:	195b      	addhi	r3, r3, r5
 80056b2:	2300      	movls	r3, #0
 80056b4:	9302      	strhi	r3, [sp, #8]
 80056b6:	bf88      	it	hi
 80056b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80056bc:	468b      	mov	fp, r1
 80056be:	f04f 0500 	mov.w	r5, #0
 80056c2:	bf8c      	ite	hi
 80056c4:	608b      	strhi	r3, [r1, #8]
 80056c6:	9302      	strls	r3, [sp, #8]
 80056c8:	680b      	ldr	r3, [r1, #0]
 80056ca:	4680      	mov	r8, r0
 80056cc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80056d0:	f84b 3b1c 	str.w	r3, [fp], #28
 80056d4:	460c      	mov	r4, r1
 80056d6:	465e      	mov	r6, fp
 80056d8:	46aa      	mov	sl, r5
 80056da:	46a9      	mov	r9, r5
 80056dc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80056e0:	9501      	str	r5, [sp, #4]
 80056e2:	68a2      	ldr	r2, [r4, #8]
 80056e4:	b152      	cbz	r2, 80056fc <_scanf_float+0x64>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b4e      	cmp	r3, #78	; 0x4e
 80056ec:	d864      	bhi.n	80057b8 <_scanf_float+0x120>
 80056ee:	2b40      	cmp	r3, #64	; 0x40
 80056f0:	d83c      	bhi.n	800576c <_scanf_float+0xd4>
 80056f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80056f6:	b2c8      	uxtb	r0, r1
 80056f8:	280e      	cmp	r0, #14
 80056fa:	d93a      	bls.n	8005772 <_scanf_float+0xda>
 80056fc:	f1b9 0f00 	cmp.w	r9, #0
 8005700:	d003      	beq.n	800570a <_scanf_float+0x72>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800570e:	f1ba 0f01 	cmp.w	sl, #1
 8005712:	f200 8113 	bhi.w	800593c <_scanf_float+0x2a4>
 8005716:	455e      	cmp	r6, fp
 8005718:	f200 8105 	bhi.w	8005926 <_scanf_float+0x28e>
 800571c:	2501      	movs	r5, #1
 800571e:	4628      	mov	r0, r5
 8005720:	b007      	add	sp, #28
 8005722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005726:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800572a:	2a0d      	cmp	r2, #13
 800572c:	d8e6      	bhi.n	80056fc <_scanf_float+0x64>
 800572e:	a101      	add	r1, pc, #4	; (adr r1, 8005734 <_scanf_float+0x9c>)
 8005730:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005734:	08005873 	.word	0x08005873
 8005738:	080056fd 	.word	0x080056fd
 800573c:	080056fd 	.word	0x080056fd
 8005740:	080056fd 	.word	0x080056fd
 8005744:	080058d3 	.word	0x080058d3
 8005748:	080058ab 	.word	0x080058ab
 800574c:	080056fd 	.word	0x080056fd
 8005750:	080056fd 	.word	0x080056fd
 8005754:	08005881 	.word	0x08005881
 8005758:	080056fd 	.word	0x080056fd
 800575c:	080056fd 	.word	0x080056fd
 8005760:	080056fd 	.word	0x080056fd
 8005764:	080056fd 	.word	0x080056fd
 8005768:	08005839 	.word	0x08005839
 800576c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005770:	e7db      	b.n	800572a <_scanf_float+0x92>
 8005772:	290e      	cmp	r1, #14
 8005774:	d8c2      	bhi.n	80056fc <_scanf_float+0x64>
 8005776:	a001      	add	r0, pc, #4	; (adr r0, 800577c <_scanf_float+0xe4>)
 8005778:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800577c:	0800582b 	.word	0x0800582b
 8005780:	080056fd 	.word	0x080056fd
 8005784:	0800582b 	.word	0x0800582b
 8005788:	080058bf 	.word	0x080058bf
 800578c:	080056fd 	.word	0x080056fd
 8005790:	080057d9 	.word	0x080057d9
 8005794:	08005815 	.word	0x08005815
 8005798:	08005815 	.word	0x08005815
 800579c:	08005815 	.word	0x08005815
 80057a0:	08005815 	.word	0x08005815
 80057a4:	08005815 	.word	0x08005815
 80057a8:	08005815 	.word	0x08005815
 80057ac:	08005815 	.word	0x08005815
 80057b0:	08005815 	.word	0x08005815
 80057b4:	08005815 	.word	0x08005815
 80057b8:	2b6e      	cmp	r3, #110	; 0x6e
 80057ba:	d809      	bhi.n	80057d0 <_scanf_float+0x138>
 80057bc:	2b60      	cmp	r3, #96	; 0x60
 80057be:	d8b2      	bhi.n	8005726 <_scanf_float+0x8e>
 80057c0:	2b54      	cmp	r3, #84	; 0x54
 80057c2:	d077      	beq.n	80058b4 <_scanf_float+0x21c>
 80057c4:	2b59      	cmp	r3, #89	; 0x59
 80057c6:	d199      	bne.n	80056fc <_scanf_float+0x64>
 80057c8:	2d07      	cmp	r5, #7
 80057ca:	d197      	bne.n	80056fc <_scanf_float+0x64>
 80057cc:	2508      	movs	r5, #8
 80057ce:	e029      	b.n	8005824 <_scanf_float+0x18c>
 80057d0:	2b74      	cmp	r3, #116	; 0x74
 80057d2:	d06f      	beq.n	80058b4 <_scanf_float+0x21c>
 80057d4:	2b79      	cmp	r3, #121	; 0x79
 80057d6:	e7f6      	b.n	80057c6 <_scanf_float+0x12e>
 80057d8:	6821      	ldr	r1, [r4, #0]
 80057da:	05c8      	lsls	r0, r1, #23
 80057dc:	d51a      	bpl.n	8005814 <_scanf_float+0x17c>
 80057de:	9b02      	ldr	r3, [sp, #8]
 80057e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80057e4:	6021      	str	r1, [r4, #0]
 80057e6:	f109 0901 	add.w	r9, r9, #1
 80057ea:	b11b      	cbz	r3, 80057f4 <_scanf_float+0x15c>
 80057ec:	3b01      	subs	r3, #1
 80057ee:	3201      	adds	r2, #1
 80057f0:	9302      	str	r3, [sp, #8]
 80057f2:	60a2      	str	r2, [r4, #8]
 80057f4:	68a3      	ldr	r3, [r4, #8]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	60a3      	str	r3, [r4, #8]
 80057fa:	6923      	ldr	r3, [r4, #16]
 80057fc:	3301      	adds	r3, #1
 80057fe:	6123      	str	r3, [r4, #16]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3b01      	subs	r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	607b      	str	r3, [r7, #4]
 8005808:	f340 8084 	ble.w	8005914 <_scanf_float+0x27c>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	3301      	adds	r3, #1
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	e766      	b.n	80056e2 <_scanf_float+0x4a>
 8005814:	eb1a 0f05 	cmn.w	sl, r5
 8005818:	f47f af70 	bne.w	80056fc <_scanf_float+0x64>
 800581c:	6822      	ldr	r2, [r4, #0]
 800581e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005822:	6022      	str	r2, [r4, #0]
 8005824:	f806 3b01 	strb.w	r3, [r6], #1
 8005828:	e7e4      	b.n	80057f4 <_scanf_float+0x15c>
 800582a:	6822      	ldr	r2, [r4, #0]
 800582c:	0610      	lsls	r0, r2, #24
 800582e:	f57f af65 	bpl.w	80056fc <_scanf_float+0x64>
 8005832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005836:	e7f4      	b.n	8005822 <_scanf_float+0x18a>
 8005838:	f1ba 0f00 	cmp.w	sl, #0
 800583c:	d10e      	bne.n	800585c <_scanf_float+0x1c4>
 800583e:	f1b9 0f00 	cmp.w	r9, #0
 8005842:	d10e      	bne.n	8005862 <_scanf_float+0x1ca>
 8005844:	6822      	ldr	r2, [r4, #0]
 8005846:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800584a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800584e:	d108      	bne.n	8005862 <_scanf_float+0x1ca>
 8005850:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005854:	f04f 0a01 	mov.w	sl, #1
 8005858:	6022      	str	r2, [r4, #0]
 800585a:	e7e3      	b.n	8005824 <_scanf_float+0x18c>
 800585c:	f1ba 0f02 	cmp.w	sl, #2
 8005860:	d055      	beq.n	800590e <_scanf_float+0x276>
 8005862:	2d01      	cmp	r5, #1
 8005864:	d002      	beq.n	800586c <_scanf_float+0x1d4>
 8005866:	2d04      	cmp	r5, #4
 8005868:	f47f af48 	bne.w	80056fc <_scanf_float+0x64>
 800586c:	3501      	adds	r5, #1
 800586e:	b2ed      	uxtb	r5, r5
 8005870:	e7d8      	b.n	8005824 <_scanf_float+0x18c>
 8005872:	f1ba 0f01 	cmp.w	sl, #1
 8005876:	f47f af41 	bne.w	80056fc <_scanf_float+0x64>
 800587a:	f04f 0a02 	mov.w	sl, #2
 800587e:	e7d1      	b.n	8005824 <_scanf_float+0x18c>
 8005880:	b97d      	cbnz	r5, 80058a2 <_scanf_float+0x20a>
 8005882:	f1b9 0f00 	cmp.w	r9, #0
 8005886:	f47f af3c 	bne.w	8005702 <_scanf_float+0x6a>
 800588a:	6822      	ldr	r2, [r4, #0]
 800588c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005890:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005894:	f47f af39 	bne.w	800570a <_scanf_float+0x72>
 8005898:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800589c:	2501      	movs	r5, #1
 800589e:	6022      	str	r2, [r4, #0]
 80058a0:	e7c0      	b.n	8005824 <_scanf_float+0x18c>
 80058a2:	2d03      	cmp	r5, #3
 80058a4:	d0e2      	beq.n	800586c <_scanf_float+0x1d4>
 80058a6:	2d05      	cmp	r5, #5
 80058a8:	e7de      	b.n	8005868 <_scanf_float+0x1d0>
 80058aa:	2d02      	cmp	r5, #2
 80058ac:	f47f af26 	bne.w	80056fc <_scanf_float+0x64>
 80058b0:	2503      	movs	r5, #3
 80058b2:	e7b7      	b.n	8005824 <_scanf_float+0x18c>
 80058b4:	2d06      	cmp	r5, #6
 80058b6:	f47f af21 	bne.w	80056fc <_scanf_float+0x64>
 80058ba:	2507      	movs	r5, #7
 80058bc:	e7b2      	b.n	8005824 <_scanf_float+0x18c>
 80058be:	6822      	ldr	r2, [r4, #0]
 80058c0:	0591      	lsls	r1, r2, #22
 80058c2:	f57f af1b 	bpl.w	80056fc <_scanf_float+0x64>
 80058c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80058ca:	6022      	str	r2, [r4, #0]
 80058cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80058d0:	e7a8      	b.n	8005824 <_scanf_float+0x18c>
 80058d2:	6822      	ldr	r2, [r4, #0]
 80058d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80058d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80058dc:	d006      	beq.n	80058ec <_scanf_float+0x254>
 80058de:	0550      	lsls	r0, r2, #21
 80058e0:	f57f af0c 	bpl.w	80056fc <_scanf_float+0x64>
 80058e4:	f1b9 0f00 	cmp.w	r9, #0
 80058e8:	f43f af0f 	beq.w	800570a <_scanf_float+0x72>
 80058ec:	0591      	lsls	r1, r2, #22
 80058ee:	bf58      	it	pl
 80058f0:	9901      	ldrpl	r1, [sp, #4]
 80058f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80058f6:	bf58      	it	pl
 80058f8:	eba9 0101 	subpl.w	r1, r9, r1
 80058fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005900:	f04f 0900 	mov.w	r9, #0
 8005904:	bf58      	it	pl
 8005906:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800590a:	6022      	str	r2, [r4, #0]
 800590c:	e78a      	b.n	8005824 <_scanf_float+0x18c>
 800590e:	f04f 0a03 	mov.w	sl, #3
 8005912:	e787      	b.n	8005824 <_scanf_float+0x18c>
 8005914:	4639      	mov	r1, r7
 8005916:	4640      	mov	r0, r8
 8005918:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800591c:	4798      	blx	r3
 800591e:	2800      	cmp	r0, #0
 8005920:	f43f aedf 	beq.w	80056e2 <_scanf_float+0x4a>
 8005924:	e6ea      	b.n	80056fc <_scanf_float+0x64>
 8005926:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800592a:	463a      	mov	r2, r7
 800592c:	4640      	mov	r0, r8
 800592e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005932:	4798      	blx	r3
 8005934:	6923      	ldr	r3, [r4, #16]
 8005936:	3b01      	subs	r3, #1
 8005938:	6123      	str	r3, [r4, #16]
 800593a:	e6ec      	b.n	8005716 <_scanf_float+0x7e>
 800593c:	1e6b      	subs	r3, r5, #1
 800593e:	2b06      	cmp	r3, #6
 8005940:	d825      	bhi.n	800598e <_scanf_float+0x2f6>
 8005942:	2d02      	cmp	r5, #2
 8005944:	d836      	bhi.n	80059b4 <_scanf_float+0x31c>
 8005946:	455e      	cmp	r6, fp
 8005948:	f67f aee8 	bls.w	800571c <_scanf_float+0x84>
 800594c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005950:	463a      	mov	r2, r7
 8005952:	4640      	mov	r0, r8
 8005954:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005958:	4798      	blx	r3
 800595a:	6923      	ldr	r3, [r4, #16]
 800595c:	3b01      	subs	r3, #1
 800595e:	6123      	str	r3, [r4, #16]
 8005960:	e7f1      	b.n	8005946 <_scanf_float+0x2ae>
 8005962:	9802      	ldr	r0, [sp, #8]
 8005964:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005968:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800596c:	463a      	mov	r2, r7
 800596e:	9002      	str	r0, [sp, #8]
 8005970:	4640      	mov	r0, r8
 8005972:	4798      	blx	r3
 8005974:	6923      	ldr	r3, [r4, #16]
 8005976:	3b01      	subs	r3, #1
 8005978:	6123      	str	r3, [r4, #16]
 800597a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800597e:	fa5f fa8a 	uxtb.w	sl, sl
 8005982:	f1ba 0f02 	cmp.w	sl, #2
 8005986:	d1ec      	bne.n	8005962 <_scanf_float+0x2ca>
 8005988:	3d03      	subs	r5, #3
 800598a:	b2ed      	uxtb	r5, r5
 800598c:	1b76      	subs	r6, r6, r5
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	05da      	lsls	r2, r3, #23
 8005992:	d52f      	bpl.n	80059f4 <_scanf_float+0x35c>
 8005994:	055b      	lsls	r3, r3, #21
 8005996:	d510      	bpl.n	80059ba <_scanf_float+0x322>
 8005998:	455e      	cmp	r6, fp
 800599a:	f67f aebf 	bls.w	800571c <_scanf_float+0x84>
 800599e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059a2:	463a      	mov	r2, r7
 80059a4:	4640      	mov	r0, r8
 80059a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059aa:	4798      	blx	r3
 80059ac:	6923      	ldr	r3, [r4, #16]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	6123      	str	r3, [r4, #16]
 80059b2:	e7f1      	b.n	8005998 <_scanf_float+0x300>
 80059b4:	46aa      	mov	sl, r5
 80059b6:	9602      	str	r6, [sp, #8]
 80059b8:	e7df      	b.n	800597a <_scanf_float+0x2e2>
 80059ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80059be:	6923      	ldr	r3, [r4, #16]
 80059c0:	2965      	cmp	r1, #101	; 0x65
 80059c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80059c6:	f106 35ff 	add.w	r5, r6, #4294967295
 80059ca:	6123      	str	r3, [r4, #16]
 80059cc:	d00c      	beq.n	80059e8 <_scanf_float+0x350>
 80059ce:	2945      	cmp	r1, #69	; 0x45
 80059d0:	d00a      	beq.n	80059e8 <_scanf_float+0x350>
 80059d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059d6:	463a      	mov	r2, r7
 80059d8:	4640      	mov	r0, r8
 80059da:	4798      	blx	r3
 80059dc:	6923      	ldr	r3, [r4, #16]
 80059de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	1eb5      	subs	r5, r6, #2
 80059e6:	6123      	str	r3, [r4, #16]
 80059e8:	463a      	mov	r2, r7
 80059ea:	4640      	mov	r0, r8
 80059ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059f0:	4798      	blx	r3
 80059f2:	462e      	mov	r6, r5
 80059f4:	6825      	ldr	r5, [r4, #0]
 80059f6:	f015 0510 	ands.w	r5, r5, #16
 80059fa:	d155      	bne.n	8005aa8 <_scanf_float+0x410>
 80059fc:	7035      	strb	r5, [r6, #0]
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a08:	d11d      	bne.n	8005a46 <_scanf_float+0x3ae>
 8005a0a:	9b01      	ldr	r3, [sp, #4]
 8005a0c:	454b      	cmp	r3, r9
 8005a0e:	eba3 0209 	sub.w	r2, r3, r9
 8005a12:	d125      	bne.n	8005a60 <_scanf_float+0x3c8>
 8005a14:	2200      	movs	r2, #0
 8005a16:	4659      	mov	r1, fp
 8005a18:	4640      	mov	r0, r8
 8005a1a:	f002 fd11 	bl	8008440 <_strtod_r>
 8005a1e:	9b03      	ldr	r3, [sp, #12]
 8005a20:	f8d4 c000 	ldr.w	ip, [r4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f01c 0f02 	tst.w	ip, #2
 8005a2a:	4606      	mov	r6, r0
 8005a2c:	460f      	mov	r7, r1
 8005a2e:	f103 0204 	add.w	r2, r3, #4
 8005a32:	d020      	beq.n	8005a76 <_scanf_float+0x3de>
 8005a34:	9903      	ldr	r1, [sp, #12]
 8005a36:	600a      	str	r2, [r1, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	e9c3 6700 	strd	r6, r7, [r3]
 8005a3e:	68e3      	ldr	r3, [r4, #12]
 8005a40:	3301      	adds	r3, #1
 8005a42:	60e3      	str	r3, [r4, #12]
 8005a44:	e66b      	b.n	800571e <_scanf_float+0x86>
 8005a46:	9b04      	ldr	r3, [sp, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0e3      	beq.n	8005a14 <_scanf_float+0x37c>
 8005a4c:	9905      	ldr	r1, [sp, #20]
 8005a4e:	230a      	movs	r3, #10
 8005a50:	462a      	mov	r2, r5
 8005a52:	4640      	mov	r0, r8
 8005a54:	3101      	adds	r1, #1
 8005a56:	f002 fd77 	bl	8008548 <_strtol_r>
 8005a5a:	9b04      	ldr	r3, [sp, #16]
 8005a5c:	9e05      	ldr	r6, [sp, #20]
 8005a5e:	1ac2      	subs	r2, r0, r3
 8005a60:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005a64:	429e      	cmp	r6, r3
 8005a66:	bf28      	it	cs
 8005a68:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	490f      	ldr	r1, [pc, #60]	; (8005aac <_scanf_float+0x414>)
 8005a70:	f000 f93e 	bl	8005cf0 <siprintf>
 8005a74:	e7ce      	b.n	8005a14 <_scanf_float+0x37c>
 8005a76:	f01c 0f04 	tst.w	ip, #4
 8005a7a:	d1db      	bne.n	8005a34 <_scanf_float+0x39c>
 8005a7c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005a80:	f8cc 2000 	str.w	r2, [ip]
 8005a84:	f8d3 8000 	ldr.w	r8, [r3]
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	f7fb f8de 	bl	8000c4c <__aeabi_dcmpun>
 8005a90:	b128      	cbz	r0, 8005a9e <_scanf_float+0x406>
 8005a92:	4807      	ldr	r0, [pc, #28]	; (8005ab0 <_scanf_float+0x418>)
 8005a94:	f000 fab0 	bl	8005ff8 <nanf>
 8005a98:	f8c8 0000 	str.w	r0, [r8]
 8005a9c:	e7cf      	b.n	8005a3e <_scanf_float+0x3a6>
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	f7fb f931 	bl	8000d08 <__aeabi_d2f>
 8005aa6:	e7f7      	b.n	8005a98 <_scanf_float+0x400>
 8005aa8:	2500      	movs	r5, #0
 8005aaa:	e638      	b.n	800571e <_scanf_float+0x86>
 8005aac:	0800970e 	.word	0x0800970e
 8005ab0:	08009aa5 	.word	0x08009aa5

08005ab4 <std>:
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	b510      	push	{r4, lr}
 8005ab8:	4604      	mov	r4, r0
 8005aba:	e9c0 3300 	strd	r3, r3, [r0]
 8005abe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ac2:	6083      	str	r3, [r0, #8]
 8005ac4:	8181      	strh	r1, [r0, #12]
 8005ac6:	6643      	str	r3, [r0, #100]	; 0x64
 8005ac8:	81c2      	strh	r2, [r0, #14]
 8005aca:	6183      	str	r3, [r0, #24]
 8005acc:	4619      	mov	r1, r3
 8005ace:	2208      	movs	r2, #8
 8005ad0:	305c      	adds	r0, #92	; 0x5c
 8005ad2:	f000 fa05 	bl	8005ee0 <memset>
 8005ad6:	4b05      	ldr	r3, [pc, #20]	; (8005aec <std+0x38>)
 8005ad8:	6224      	str	r4, [r4, #32]
 8005ada:	6263      	str	r3, [r4, #36]	; 0x24
 8005adc:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <std+0x3c>)
 8005ade:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ae0:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <std+0x40>)
 8005ae2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ae4:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <std+0x44>)
 8005ae6:	6323      	str	r3, [r4, #48]	; 0x30
 8005ae8:	bd10      	pop	{r4, pc}
 8005aea:	bf00      	nop
 8005aec:	08005d31 	.word	0x08005d31
 8005af0:	08005d53 	.word	0x08005d53
 8005af4:	08005d8b 	.word	0x08005d8b
 8005af8:	08005daf 	.word	0x08005daf

08005afc <stdio_exit_handler>:
 8005afc:	4a02      	ldr	r2, [pc, #8]	; (8005b08 <stdio_exit_handler+0xc>)
 8005afe:	4903      	ldr	r1, [pc, #12]	; (8005b0c <stdio_exit_handler+0x10>)
 8005b00:	4803      	ldr	r0, [pc, #12]	; (8005b10 <stdio_exit_handler+0x14>)
 8005b02:	f000 b869 	b.w	8005bd8 <_fwalk_sglue>
 8005b06:	bf00      	nop
 8005b08:	2000000c 	.word	0x2000000c
 8005b0c:	08008b85 	.word	0x08008b85
 8005b10:	20000018 	.word	0x20000018

08005b14 <cleanup_stdio>:
 8005b14:	6841      	ldr	r1, [r0, #4]
 8005b16:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <cleanup_stdio+0x34>)
 8005b18:	b510      	push	{r4, lr}
 8005b1a:	4299      	cmp	r1, r3
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	d001      	beq.n	8005b24 <cleanup_stdio+0x10>
 8005b20:	f003 f830 	bl	8008b84 <_fflush_r>
 8005b24:	68a1      	ldr	r1, [r4, #8]
 8005b26:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <cleanup_stdio+0x38>)
 8005b28:	4299      	cmp	r1, r3
 8005b2a:	d002      	beq.n	8005b32 <cleanup_stdio+0x1e>
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f003 f829 	bl	8008b84 <_fflush_r>
 8005b32:	68e1      	ldr	r1, [r4, #12]
 8005b34:	4b06      	ldr	r3, [pc, #24]	; (8005b50 <cleanup_stdio+0x3c>)
 8005b36:	4299      	cmp	r1, r3
 8005b38:	d004      	beq.n	8005b44 <cleanup_stdio+0x30>
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b40:	f003 b820 	b.w	8008b84 <_fflush_r>
 8005b44:	bd10      	pop	{r4, pc}
 8005b46:	bf00      	nop
 8005b48:	200004e0 	.word	0x200004e0
 8005b4c:	20000548 	.word	0x20000548
 8005b50:	200005b0 	.word	0x200005b0

08005b54 <global_stdio_init.part.0>:
 8005b54:	b510      	push	{r4, lr}
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <global_stdio_init.part.0+0x30>)
 8005b58:	4c0b      	ldr	r4, [pc, #44]	; (8005b88 <global_stdio_init.part.0+0x34>)
 8005b5a:	4a0c      	ldr	r2, [pc, #48]	; (8005b8c <global_stdio_init.part.0+0x38>)
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	2104      	movs	r1, #4
 8005b62:	2200      	movs	r2, #0
 8005b64:	f7ff ffa6 	bl	8005ab4 <std>
 8005b68:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	2109      	movs	r1, #9
 8005b70:	f7ff ffa0 	bl	8005ab4 <std>
 8005b74:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b78:	2202      	movs	r2, #2
 8005b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b7e:	2112      	movs	r1, #18
 8005b80:	f7ff bf98 	b.w	8005ab4 <std>
 8005b84:	20000618 	.word	0x20000618
 8005b88:	200004e0 	.word	0x200004e0
 8005b8c:	08005afd 	.word	0x08005afd

08005b90 <__sfp_lock_acquire>:
 8005b90:	4801      	ldr	r0, [pc, #4]	; (8005b98 <__sfp_lock_acquire+0x8>)
 8005b92:	f000 ba21 	b.w	8005fd8 <__retarget_lock_acquire_recursive>
 8005b96:	bf00      	nop
 8005b98:	20000621 	.word	0x20000621

08005b9c <__sfp_lock_release>:
 8005b9c:	4801      	ldr	r0, [pc, #4]	; (8005ba4 <__sfp_lock_release+0x8>)
 8005b9e:	f000 ba1c 	b.w	8005fda <__retarget_lock_release_recursive>
 8005ba2:	bf00      	nop
 8005ba4:	20000621 	.word	0x20000621

08005ba8 <__sinit>:
 8005ba8:	b510      	push	{r4, lr}
 8005baa:	4604      	mov	r4, r0
 8005bac:	f7ff fff0 	bl	8005b90 <__sfp_lock_acquire>
 8005bb0:	6a23      	ldr	r3, [r4, #32]
 8005bb2:	b11b      	cbz	r3, 8005bbc <__sinit+0x14>
 8005bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bb8:	f7ff bff0 	b.w	8005b9c <__sfp_lock_release>
 8005bbc:	4b04      	ldr	r3, [pc, #16]	; (8005bd0 <__sinit+0x28>)
 8005bbe:	6223      	str	r3, [r4, #32]
 8005bc0:	4b04      	ldr	r3, [pc, #16]	; (8005bd4 <__sinit+0x2c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1f5      	bne.n	8005bb4 <__sinit+0xc>
 8005bc8:	f7ff ffc4 	bl	8005b54 <global_stdio_init.part.0>
 8005bcc:	e7f2      	b.n	8005bb4 <__sinit+0xc>
 8005bce:	bf00      	nop
 8005bd0:	08005b15 	.word	0x08005b15
 8005bd4:	20000618 	.word	0x20000618

08005bd8 <_fwalk_sglue>:
 8005bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bdc:	4607      	mov	r7, r0
 8005bde:	4688      	mov	r8, r1
 8005be0:	4614      	mov	r4, r2
 8005be2:	2600      	movs	r6, #0
 8005be4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005be8:	f1b9 0901 	subs.w	r9, r9, #1
 8005bec:	d505      	bpl.n	8005bfa <_fwalk_sglue+0x22>
 8005bee:	6824      	ldr	r4, [r4, #0]
 8005bf0:	2c00      	cmp	r4, #0
 8005bf2:	d1f7      	bne.n	8005be4 <_fwalk_sglue+0xc>
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bfa:	89ab      	ldrh	r3, [r5, #12]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d907      	bls.n	8005c10 <_fwalk_sglue+0x38>
 8005c00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c04:	3301      	adds	r3, #1
 8005c06:	d003      	beq.n	8005c10 <_fwalk_sglue+0x38>
 8005c08:	4629      	mov	r1, r5
 8005c0a:	4638      	mov	r0, r7
 8005c0c:	47c0      	blx	r8
 8005c0e:	4306      	orrs	r6, r0
 8005c10:	3568      	adds	r5, #104	; 0x68
 8005c12:	e7e9      	b.n	8005be8 <_fwalk_sglue+0x10>

08005c14 <iprintf>:
 8005c14:	b40f      	push	{r0, r1, r2, r3}
 8005c16:	b507      	push	{r0, r1, r2, lr}
 8005c18:	4906      	ldr	r1, [pc, #24]	; (8005c34 <iprintf+0x20>)
 8005c1a:	ab04      	add	r3, sp, #16
 8005c1c:	6808      	ldr	r0, [r1, #0]
 8005c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c22:	6881      	ldr	r1, [r0, #8]
 8005c24:	9301      	str	r3, [sp, #4]
 8005c26:	f002 fe11 	bl	800884c <_vfiprintf_r>
 8005c2a:	b003      	add	sp, #12
 8005c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c30:	b004      	add	sp, #16
 8005c32:	4770      	bx	lr
 8005c34:	20000064 	.word	0x20000064

08005c38 <_puts_r>:
 8005c38:	6a03      	ldr	r3, [r0, #32]
 8005c3a:	b570      	push	{r4, r5, r6, lr}
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	460e      	mov	r6, r1
 8005c40:	6884      	ldr	r4, [r0, #8]
 8005c42:	b90b      	cbnz	r3, 8005c48 <_puts_r+0x10>
 8005c44:	f7ff ffb0 	bl	8005ba8 <__sinit>
 8005c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c4a:	07db      	lsls	r3, r3, #31
 8005c4c:	d405      	bmi.n	8005c5a <_puts_r+0x22>
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	0598      	lsls	r0, r3, #22
 8005c52:	d402      	bmi.n	8005c5a <_puts_r+0x22>
 8005c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c56:	f000 f9bf 	bl	8005fd8 <__retarget_lock_acquire_recursive>
 8005c5a:	89a3      	ldrh	r3, [r4, #12]
 8005c5c:	0719      	lsls	r1, r3, #28
 8005c5e:	d513      	bpl.n	8005c88 <_puts_r+0x50>
 8005c60:	6923      	ldr	r3, [r4, #16]
 8005c62:	b18b      	cbz	r3, 8005c88 <_puts_r+0x50>
 8005c64:	3e01      	subs	r6, #1
 8005c66:	68a3      	ldr	r3, [r4, #8]
 8005c68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	60a3      	str	r3, [r4, #8]
 8005c70:	b9e9      	cbnz	r1, 8005cae <_puts_r+0x76>
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	da2e      	bge.n	8005cd4 <_puts_r+0x9c>
 8005c76:	4622      	mov	r2, r4
 8005c78:	210a      	movs	r1, #10
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f000 f89b 	bl	8005db6 <__swbuf_r>
 8005c80:	3001      	adds	r0, #1
 8005c82:	d007      	beq.n	8005c94 <_puts_r+0x5c>
 8005c84:	250a      	movs	r5, #10
 8005c86:	e007      	b.n	8005c98 <_puts_r+0x60>
 8005c88:	4621      	mov	r1, r4
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f000 f8d0 	bl	8005e30 <__swsetup_r>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d0e7      	beq.n	8005c64 <_puts_r+0x2c>
 8005c94:	f04f 35ff 	mov.w	r5, #4294967295
 8005c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c9a:	07da      	lsls	r2, r3, #31
 8005c9c:	d405      	bmi.n	8005caa <_puts_r+0x72>
 8005c9e:	89a3      	ldrh	r3, [r4, #12]
 8005ca0:	059b      	lsls	r3, r3, #22
 8005ca2:	d402      	bmi.n	8005caa <_puts_r+0x72>
 8005ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ca6:	f000 f998 	bl	8005fda <__retarget_lock_release_recursive>
 8005caa:	4628      	mov	r0, r5
 8005cac:	bd70      	pop	{r4, r5, r6, pc}
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	da04      	bge.n	8005cbc <_puts_r+0x84>
 8005cb2:	69a2      	ldr	r2, [r4, #24]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	dc06      	bgt.n	8005cc6 <_puts_r+0x8e>
 8005cb8:	290a      	cmp	r1, #10
 8005cba:	d004      	beq.n	8005cc6 <_puts_r+0x8e>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	6022      	str	r2, [r4, #0]
 8005cc2:	7019      	strb	r1, [r3, #0]
 8005cc4:	e7cf      	b.n	8005c66 <_puts_r+0x2e>
 8005cc6:	4622      	mov	r2, r4
 8005cc8:	4628      	mov	r0, r5
 8005cca:	f000 f874 	bl	8005db6 <__swbuf_r>
 8005cce:	3001      	adds	r0, #1
 8005cd0:	d1c9      	bne.n	8005c66 <_puts_r+0x2e>
 8005cd2:	e7df      	b.n	8005c94 <_puts_r+0x5c>
 8005cd4:	250a      	movs	r5, #10
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	6022      	str	r2, [r4, #0]
 8005cdc:	701d      	strb	r5, [r3, #0]
 8005cde:	e7db      	b.n	8005c98 <_puts_r+0x60>

08005ce0 <puts>:
 8005ce0:	4b02      	ldr	r3, [pc, #8]	; (8005cec <puts+0xc>)
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	f7ff bfa7 	b.w	8005c38 <_puts_r>
 8005cea:	bf00      	nop
 8005cec:	20000064 	.word	0x20000064

08005cf0 <siprintf>:
 8005cf0:	b40e      	push	{r1, r2, r3}
 8005cf2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cf6:	b500      	push	{lr}
 8005cf8:	b09c      	sub	sp, #112	; 0x70
 8005cfa:	ab1d      	add	r3, sp, #116	; 0x74
 8005cfc:	9002      	str	r0, [sp, #8]
 8005cfe:	9006      	str	r0, [sp, #24]
 8005d00:	9107      	str	r1, [sp, #28]
 8005d02:	9104      	str	r1, [sp, #16]
 8005d04:	4808      	ldr	r0, [pc, #32]	; (8005d28 <siprintf+0x38>)
 8005d06:	4909      	ldr	r1, [pc, #36]	; (8005d2c <siprintf+0x3c>)
 8005d08:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d0c:	9105      	str	r1, [sp, #20]
 8005d0e:	6800      	ldr	r0, [r0, #0]
 8005d10:	a902      	add	r1, sp, #8
 8005d12:	9301      	str	r3, [sp, #4]
 8005d14:	f002 fc74 	bl	8008600 <_svfiprintf_r>
 8005d18:	2200      	movs	r2, #0
 8005d1a:	9b02      	ldr	r3, [sp, #8]
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	b01c      	add	sp, #112	; 0x70
 8005d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d24:	b003      	add	sp, #12
 8005d26:	4770      	bx	lr
 8005d28:	20000064 	.word	0x20000064
 8005d2c:	ffff0208 	.word	0xffff0208

08005d30 <__sread>:
 8005d30:	b510      	push	{r4, lr}
 8005d32:	460c      	mov	r4, r1
 8005d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d38:	f000 f900 	bl	8005f3c <_read_r>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	bfab      	itete	ge
 8005d40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d42:	89a3      	ldrhlt	r3, [r4, #12]
 8005d44:	181b      	addge	r3, r3, r0
 8005d46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d4a:	bfac      	ite	ge
 8005d4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d4e:	81a3      	strhlt	r3, [r4, #12]
 8005d50:	bd10      	pop	{r4, pc}

08005d52 <__swrite>:
 8005d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d56:	461f      	mov	r7, r3
 8005d58:	898b      	ldrh	r3, [r1, #12]
 8005d5a:	4605      	mov	r5, r0
 8005d5c:	05db      	lsls	r3, r3, #23
 8005d5e:	460c      	mov	r4, r1
 8005d60:	4616      	mov	r6, r2
 8005d62:	d505      	bpl.n	8005d70 <__swrite+0x1e>
 8005d64:	2302      	movs	r3, #2
 8005d66:	2200      	movs	r2, #0
 8005d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d6c:	f000 f8d4 	bl	8005f18 <_lseek_r>
 8005d70:	89a3      	ldrh	r3, [r4, #12]
 8005d72:	4632      	mov	r2, r6
 8005d74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d78:	81a3      	strh	r3, [r4, #12]
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d86:	f000 b8eb 	b.w	8005f60 <_write_r>

08005d8a <__sseek>:
 8005d8a:	b510      	push	{r4, lr}
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d92:	f000 f8c1 	bl	8005f18 <_lseek_r>
 8005d96:	1c43      	adds	r3, r0, #1
 8005d98:	89a3      	ldrh	r3, [r4, #12]
 8005d9a:	bf15      	itete	ne
 8005d9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005da2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005da6:	81a3      	strheq	r3, [r4, #12]
 8005da8:	bf18      	it	ne
 8005daa:	81a3      	strhne	r3, [r4, #12]
 8005dac:	bd10      	pop	{r4, pc}

08005dae <__sclose>:
 8005dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db2:	f000 b8a1 	b.w	8005ef8 <_close_r>

08005db6 <__swbuf_r>:
 8005db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db8:	460e      	mov	r6, r1
 8005dba:	4614      	mov	r4, r2
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	b118      	cbz	r0, 8005dc8 <__swbuf_r+0x12>
 8005dc0:	6a03      	ldr	r3, [r0, #32]
 8005dc2:	b90b      	cbnz	r3, 8005dc8 <__swbuf_r+0x12>
 8005dc4:	f7ff fef0 	bl	8005ba8 <__sinit>
 8005dc8:	69a3      	ldr	r3, [r4, #24]
 8005dca:	60a3      	str	r3, [r4, #8]
 8005dcc:	89a3      	ldrh	r3, [r4, #12]
 8005dce:	071a      	lsls	r2, r3, #28
 8005dd0:	d525      	bpl.n	8005e1e <__swbuf_r+0x68>
 8005dd2:	6923      	ldr	r3, [r4, #16]
 8005dd4:	b31b      	cbz	r3, 8005e1e <__swbuf_r+0x68>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	6922      	ldr	r2, [r4, #16]
 8005dda:	b2f6      	uxtb	r6, r6
 8005ddc:	1a98      	subs	r0, r3, r2
 8005dde:	6963      	ldr	r3, [r4, #20]
 8005de0:	4637      	mov	r7, r6
 8005de2:	4283      	cmp	r3, r0
 8005de4:	dc04      	bgt.n	8005df0 <__swbuf_r+0x3a>
 8005de6:	4621      	mov	r1, r4
 8005de8:	4628      	mov	r0, r5
 8005dea:	f002 fecb 	bl	8008b84 <_fflush_r>
 8005dee:	b9e0      	cbnz	r0, 8005e2a <__swbuf_r+0x74>
 8005df0:	68a3      	ldr	r3, [r4, #8]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	60a3      	str	r3, [r4, #8]
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	6022      	str	r2, [r4, #0]
 8005dfc:	701e      	strb	r6, [r3, #0]
 8005dfe:	6962      	ldr	r2, [r4, #20]
 8005e00:	1c43      	adds	r3, r0, #1
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d004      	beq.n	8005e10 <__swbuf_r+0x5a>
 8005e06:	89a3      	ldrh	r3, [r4, #12]
 8005e08:	07db      	lsls	r3, r3, #31
 8005e0a:	d506      	bpl.n	8005e1a <__swbuf_r+0x64>
 8005e0c:	2e0a      	cmp	r6, #10
 8005e0e:	d104      	bne.n	8005e1a <__swbuf_r+0x64>
 8005e10:	4621      	mov	r1, r4
 8005e12:	4628      	mov	r0, r5
 8005e14:	f002 feb6 	bl	8008b84 <_fflush_r>
 8005e18:	b938      	cbnz	r0, 8005e2a <__swbuf_r+0x74>
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e1e:	4621      	mov	r1, r4
 8005e20:	4628      	mov	r0, r5
 8005e22:	f000 f805 	bl	8005e30 <__swsetup_r>
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d0d5      	beq.n	8005dd6 <__swbuf_r+0x20>
 8005e2a:	f04f 37ff 	mov.w	r7, #4294967295
 8005e2e:	e7f4      	b.n	8005e1a <__swbuf_r+0x64>

08005e30 <__swsetup_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4b2a      	ldr	r3, [pc, #168]	; (8005edc <__swsetup_r+0xac>)
 8005e34:	4605      	mov	r5, r0
 8005e36:	6818      	ldr	r0, [r3, #0]
 8005e38:	460c      	mov	r4, r1
 8005e3a:	b118      	cbz	r0, 8005e44 <__swsetup_r+0x14>
 8005e3c:	6a03      	ldr	r3, [r0, #32]
 8005e3e:	b90b      	cbnz	r3, 8005e44 <__swsetup_r+0x14>
 8005e40:	f7ff feb2 	bl	8005ba8 <__sinit>
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e4a:	0718      	lsls	r0, r3, #28
 8005e4c:	d422      	bmi.n	8005e94 <__swsetup_r+0x64>
 8005e4e:	06d9      	lsls	r1, r3, #27
 8005e50:	d407      	bmi.n	8005e62 <__swsetup_r+0x32>
 8005e52:	2309      	movs	r3, #9
 8005e54:	602b      	str	r3, [r5, #0]
 8005e56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5e:	81a3      	strh	r3, [r4, #12]
 8005e60:	e034      	b.n	8005ecc <__swsetup_r+0x9c>
 8005e62:	0758      	lsls	r0, r3, #29
 8005e64:	d512      	bpl.n	8005e8c <__swsetup_r+0x5c>
 8005e66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e68:	b141      	cbz	r1, 8005e7c <__swsetup_r+0x4c>
 8005e6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e6e:	4299      	cmp	r1, r3
 8005e70:	d002      	beq.n	8005e78 <__swsetup_r+0x48>
 8005e72:	4628      	mov	r0, r5
 8005e74:	f000 ff34 	bl	8006ce0 <_free_r>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	6363      	str	r3, [r4, #52]	; 0x34
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e82:	81a3      	strh	r3, [r4, #12]
 8005e84:	2300      	movs	r3, #0
 8005e86:	6063      	str	r3, [r4, #4]
 8005e88:	6923      	ldr	r3, [r4, #16]
 8005e8a:	6023      	str	r3, [r4, #0]
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	f043 0308 	orr.w	r3, r3, #8
 8005e92:	81a3      	strh	r3, [r4, #12]
 8005e94:	6923      	ldr	r3, [r4, #16]
 8005e96:	b94b      	cbnz	r3, 8005eac <__swsetup_r+0x7c>
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea2:	d003      	beq.n	8005eac <__swsetup_r+0x7c>
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f002 feb9 	bl	8008c1e <__smakebuf_r>
 8005eac:	89a0      	ldrh	r0, [r4, #12]
 8005eae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005eb2:	f010 0301 	ands.w	r3, r0, #1
 8005eb6:	d00a      	beq.n	8005ece <__swsetup_r+0x9e>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60a3      	str	r3, [r4, #8]
 8005ebc:	6963      	ldr	r3, [r4, #20]
 8005ebe:	425b      	negs	r3, r3
 8005ec0:	61a3      	str	r3, [r4, #24]
 8005ec2:	6923      	ldr	r3, [r4, #16]
 8005ec4:	b943      	cbnz	r3, 8005ed8 <__swsetup_r+0xa8>
 8005ec6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005eca:	d1c4      	bne.n	8005e56 <__swsetup_r+0x26>
 8005ecc:	bd38      	pop	{r3, r4, r5, pc}
 8005ece:	0781      	lsls	r1, r0, #30
 8005ed0:	bf58      	it	pl
 8005ed2:	6963      	ldrpl	r3, [r4, #20]
 8005ed4:	60a3      	str	r3, [r4, #8]
 8005ed6:	e7f4      	b.n	8005ec2 <__swsetup_r+0x92>
 8005ed8:	2000      	movs	r0, #0
 8005eda:	e7f7      	b.n	8005ecc <__swsetup_r+0x9c>
 8005edc:	20000064 	.word	0x20000064

08005ee0 <memset>:
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	4402      	add	r2, r0
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d100      	bne.n	8005eea <memset+0xa>
 8005ee8:	4770      	bx	lr
 8005eea:	f803 1b01 	strb.w	r1, [r3], #1
 8005eee:	e7f9      	b.n	8005ee4 <memset+0x4>

08005ef0 <_localeconv_r>:
 8005ef0:	4800      	ldr	r0, [pc, #0]	; (8005ef4 <_localeconv_r+0x4>)
 8005ef2:	4770      	bx	lr
 8005ef4:	20000158 	.word	0x20000158

08005ef8 <_close_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	2300      	movs	r3, #0
 8005efc:	4d05      	ldr	r5, [pc, #20]	; (8005f14 <_close_r+0x1c>)
 8005efe:	4604      	mov	r4, r0
 8005f00:	4608      	mov	r0, r1
 8005f02:	602b      	str	r3, [r5, #0]
 8005f04:	f7fb fee4 	bl	8001cd0 <_close>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d102      	bne.n	8005f12 <_close_r+0x1a>
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	b103      	cbz	r3, 8005f12 <_close_r+0x1a>
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	bd38      	pop	{r3, r4, r5, pc}
 8005f14:	2000061c 	.word	0x2000061c

08005f18 <_lseek_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	4611      	mov	r1, r2
 8005f20:	2200      	movs	r2, #0
 8005f22:	4d05      	ldr	r5, [pc, #20]	; (8005f38 <_lseek_r+0x20>)
 8005f24:	602a      	str	r2, [r5, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f7fb fef6 	bl	8001d18 <_lseek>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_lseek_r+0x1e>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_lseek_r+0x1e>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	2000061c 	.word	0x2000061c

08005f3c <_read_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4604      	mov	r4, r0
 8005f40:	4608      	mov	r0, r1
 8005f42:	4611      	mov	r1, r2
 8005f44:	2200      	movs	r2, #0
 8005f46:	4d05      	ldr	r5, [pc, #20]	; (8005f5c <_read_r+0x20>)
 8005f48:	602a      	str	r2, [r5, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f7fb fe87 	bl	8001c5e <_read>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d102      	bne.n	8005f5a <_read_r+0x1e>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	b103      	cbz	r3, 8005f5a <_read_r+0x1e>
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	2000061c 	.word	0x2000061c

08005f60 <_write_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4604      	mov	r4, r0
 8005f64:	4608      	mov	r0, r1
 8005f66:	4611      	mov	r1, r2
 8005f68:	2200      	movs	r2, #0
 8005f6a:	4d05      	ldr	r5, [pc, #20]	; (8005f80 <_write_r+0x20>)
 8005f6c:	602a      	str	r2, [r5, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f7fb fe92 	bl	8001c98 <_write>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	d102      	bne.n	8005f7e <_write_r+0x1e>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	b103      	cbz	r3, 8005f7e <_write_r+0x1e>
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}
 8005f80:	2000061c 	.word	0x2000061c

08005f84 <__errno>:
 8005f84:	4b01      	ldr	r3, [pc, #4]	; (8005f8c <__errno+0x8>)
 8005f86:	6818      	ldr	r0, [r3, #0]
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	20000064 	.word	0x20000064

08005f90 <__libc_init_array>:
 8005f90:	b570      	push	{r4, r5, r6, lr}
 8005f92:	2600      	movs	r6, #0
 8005f94:	4d0c      	ldr	r5, [pc, #48]	; (8005fc8 <__libc_init_array+0x38>)
 8005f96:	4c0d      	ldr	r4, [pc, #52]	; (8005fcc <__libc_init_array+0x3c>)
 8005f98:	1b64      	subs	r4, r4, r5
 8005f9a:	10a4      	asrs	r4, r4, #2
 8005f9c:	42a6      	cmp	r6, r4
 8005f9e:	d109      	bne.n	8005fb4 <__libc_init_array+0x24>
 8005fa0:	f003 fb2c 	bl	80095fc <_init>
 8005fa4:	2600      	movs	r6, #0
 8005fa6:	4d0a      	ldr	r5, [pc, #40]	; (8005fd0 <__libc_init_array+0x40>)
 8005fa8:	4c0a      	ldr	r4, [pc, #40]	; (8005fd4 <__libc_init_array+0x44>)
 8005faa:	1b64      	subs	r4, r4, r5
 8005fac:	10a4      	asrs	r4, r4, #2
 8005fae:	42a6      	cmp	r6, r4
 8005fb0:	d105      	bne.n	8005fbe <__libc_init_array+0x2e>
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}
 8005fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb8:	4798      	blx	r3
 8005fba:	3601      	adds	r6, #1
 8005fbc:	e7ee      	b.n	8005f9c <__libc_init_array+0xc>
 8005fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc2:	4798      	blx	r3
 8005fc4:	3601      	adds	r6, #1
 8005fc6:	e7f2      	b.n	8005fae <__libc_init_array+0x1e>
 8005fc8:	08009b08 	.word	0x08009b08
 8005fcc:	08009b08 	.word	0x08009b08
 8005fd0:	08009b08 	.word	0x08009b08
 8005fd4:	08009b0c 	.word	0x08009b0c

08005fd8 <__retarget_lock_acquire_recursive>:
 8005fd8:	4770      	bx	lr

08005fda <__retarget_lock_release_recursive>:
 8005fda:	4770      	bx	lr

08005fdc <memchr>:
 8005fdc:	4603      	mov	r3, r0
 8005fde:	b510      	push	{r4, lr}
 8005fe0:	b2c9      	uxtb	r1, r1
 8005fe2:	4402      	add	r2, r0
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	d101      	bne.n	8005fee <memchr+0x12>
 8005fea:	2000      	movs	r0, #0
 8005fec:	e003      	b.n	8005ff6 <memchr+0x1a>
 8005fee:	7804      	ldrb	r4, [r0, #0]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	428c      	cmp	r4, r1
 8005ff4:	d1f6      	bne.n	8005fe4 <memchr+0x8>
 8005ff6:	bd10      	pop	{r4, pc}

08005ff8 <nanf>:
 8005ff8:	4800      	ldr	r0, [pc, #0]	; (8005ffc <nanf+0x4>)
 8005ffa:	4770      	bx	lr
 8005ffc:	7fc00000 	.word	0x7fc00000

08006000 <quorem>:
 8006000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006004:	6903      	ldr	r3, [r0, #16]
 8006006:	690c      	ldr	r4, [r1, #16]
 8006008:	4607      	mov	r7, r0
 800600a:	42a3      	cmp	r3, r4
 800600c:	db7f      	blt.n	800610e <quorem+0x10e>
 800600e:	3c01      	subs	r4, #1
 8006010:	f100 0514 	add.w	r5, r0, #20
 8006014:	f101 0814 	add.w	r8, r1, #20
 8006018:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006022:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006026:	3301      	adds	r3, #1
 8006028:	429a      	cmp	r2, r3
 800602a:	fbb2 f6f3 	udiv	r6, r2, r3
 800602e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006032:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006036:	d331      	bcc.n	800609c <quorem+0x9c>
 8006038:	f04f 0e00 	mov.w	lr, #0
 800603c:	4640      	mov	r0, r8
 800603e:	46ac      	mov	ip, r5
 8006040:	46f2      	mov	sl, lr
 8006042:	f850 2b04 	ldr.w	r2, [r0], #4
 8006046:	b293      	uxth	r3, r2
 8006048:	fb06 e303 	mla	r3, r6, r3, lr
 800604c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006050:	0c1a      	lsrs	r2, r3, #16
 8006052:	b29b      	uxth	r3, r3
 8006054:	fb06 220e 	mla	r2, r6, lr, r2
 8006058:	ebaa 0303 	sub.w	r3, sl, r3
 800605c:	f8dc a000 	ldr.w	sl, [ip]
 8006060:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006064:	fa1f fa8a 	uxth.w	sl, sl
 8006068:	4453      	add	r3, sl
 800606a:	f8dc a000 	ldr.w	sl, [ip]
 800606e:	b292      	uxth	r2, r2
 8006070:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006074:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006078:	b29b      	uxth	r3, r3
 800607a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800607e:	4581      	cmp	r9, r0
 8006080:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006084:	f84c 3b04 	str.w	r3, [ip], #4
 8006088:	d2db      	bcs.n	8006042 <quorem+0x42>
 800608a:	f855 300b 	ldr.w	r3, [r5, fp]
 800608e:	b92b      	cbnz	r3, 800609c <quorem+0x9c>
 8006090:	9b01      	ldr	r3, [sp, #4]
 8006092:	3b04      	subs	r3, #4
 8006094:	429d      	cmp	r5, r3
 8006096:	461a      	mov	r2, r3
 8006098:	d32d      	bcc.n	80060f6 <quorem+0xf6>
 800609a:	613c      	str	r4, [r7, #16]
 800609c:	4638      	mov	r0, r7
 800609e:	f001 f9df 	bl	8007460 <__mcmp>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	db23      	blt.n	80060ee <quorem+0xee>
 80060a6:	4629      	mov	r1, r5
 80060a8:	2000      	movs	r0, #0
 80060aa:	3601      	adds	r6, #1
 80060ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80060b0:	f8d1 c000 	ldr.w	ip, [r1]
 80060b4:	b293      	uxth	r3, r2
 80060b6:	1ac3      	subs	r3, r0, r3
 80060b8:	0c12      	lsrs	r2, r2, #16
 80060ba:	fa1f f08c 	uxth.w	r0, ip
 80060be:	4403      	add	r3, r0
 80060c0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80060c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060ce:	45c1      	cmp	r9, r8
 80060d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060d4:	f841 3b04 	str.w	r3, [r1], #4
 80060d8:	d2e8      	bcs.n	80060ac <quorem+0xac>
 80060da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060e2:	b922      	cbnz	r2, 80060ee <quorem+0xee>
 80060e4:	3b04      	subs	r3, #4
 80060e6:	429d      	cmp	r5, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	d30a      	bcc.n	8006102 <quorem+0x102>
 80060ec:	613c      	str	r4, [r7, #16]
 80060ee:	4630      	mov	r0, r6
 80060f0:	b003      	add	sp, #12
 80060f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f6:	6812      	ldr	r2, [r2, #0]
 80060f8:	3b04      	subs	r3, #4
 80060fa:	2a00      	cmp	r2, #0
 80060fc:	d1cd      	bne.n	800609a <quorem+0x9a>
 80060fe:	3c01      	subs	r4, #1
 8006100:	e7c8      	b.n	8006094 <quorem+0x94>
 8006102:	6812      	ldr	r2, [r2, #0]
 8006104:	3b04      	subs	r3, #4
 8006106:	2a00      	cmp	r2, #0
 8006108:	d1f0      	bne.n	80060ec <quorem+0xec>
 800610a:	3c01      	subs	r4, #1
 800610c:	e7eb      	b.n	80060e6 <quorem+0xe6>
 800610e:	2000      	movs	r0, #0
 8006110:	e7ee      	b.n	80060f0 <quorem+0xf0>
 8006112:	0000      	movs	r0, r0
 8006114:	0000      	movs	r0, r0
	...

08006118 <_dtoa_r>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	4616      	mov	r6, r2
 800611e:	461f      	mov	r7, r3
 8006120:	69c4      	ldr	r4, [r0, #28]
 8006122:	b099      	sub	sp, #100	; 0x64
 8006124:	4605      	mov	r5, r0
 8006126:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800612a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800612e:	b974      	cbnz	r4, 800614e <_dtoa_r+0x36>
 8006130:	2010      	movs	r0, #16
 8006132:	f000 fe1d 	bl	8006d70 <malloc>
 8006136:	4602      	mov	r2, r0
 8006138:	61e8      	str	r0, [r5, #28]
 800613a:	b920      	cbnz	r0, 8006146 <_dtoa_r+0x2e>
 800613c:	21ef      	movs	r1, #239	; 0xef
 800613e:	4bac      	ldr	r3, [pc, #688]	; (80063f0 <_dtoa_r+0x2d8>)
 8006140:	48ac      	ldr	r0, [pc, #688]	; (80063f4 <_dtoa_r+0x2dc>)
 8006142:	f002 fe1b 	bl	8008d7c <__assert_func>
 8006146:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800614a:	6004      	str	r4, [r0, #0]
 800614c:	60c4      	str	r4, [r0, #12]
 800614e:	69eb      	ldr	r3, [r5, #28]
 8006150:	6819      	ldr	r1, [r3, #0]
 8006152:	b151      	cbz	r1, 800616a <_dtoa_r+0x52>
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	2301      	movs	r3, #1
 8006158:	4093      	lsls	r3, r2
 800615a:	604a      	str	r2, [r1, #4]
 800615c:	608b      	str	r3, [r1, #8]
 800615e:	4628      	mov	r0, r5
 8006160:	f000 fefa 	bl	8006f58 <_Bfree>
 8006164:	2200      	movs	r2, #0
 8006166:	69eb      	ldr	r3, [r5, #28]
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	1e3b      	subs	r3, r7, #0
 800616c:	bfaf      	iteee	ge
 800616e:	2300      	movge	r3, #0
 8006170:	2201      	movlt	r2, #1
 8006172:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006176:	9305      	strlt	r3, [sp, #20]
 8006178:	bfa8      	it	ge
 800617a:	f8c8 3000 	strge.w	r3, [r8]
 800617e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006182:	4b9d      	ldr	r3, [pc, #628]	; (80063f8 <_dtoa_r+0x2e0>)
 8006184:	bfb8      	it	lt
 8006186:	f8c8 2000 	strlt.w	r2, [r8]
 800618a:	ea33 0309 	bics.w	r3, r3, r9
 800618e:	d119      	bne.n	80061c4 <_dtoa_r+0xac>
 8006190:	f242 730f 	movw	r3, #9999	; 0x270f
 8006194:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800619c:	4333      	orrs	r3, r6
 800619e:	f000 8589 	beq.w	8006cb4 <_dtoa_r+0xb9c>
 80061a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061a4:	b953      	cbnz	r3, 80061bc <_dtoa_r+0xa4>
 80061a6:	4b95      	ldr	r3, [pc, #596]	; (80063fc <_dtoa_r+0x2e4>)
 80061a8:	e023      	b.n	80061f2 <_dtoa_r+0xda>
 80061aa:	4b95      	ldr	r3, [pc, #596]	; (8006400 <_dtoa_r+0x2e8>)
 80061ac:	9303      	str	r3, [sp, #12]
 80061ae:	3308      	adds	r3, #8
 80061b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	9803      	ldr	r0, [sp, #12]
 80061b6:	b019      	add	sp, #100	; 0x64
 80061b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061bc:	4b8f      	ldr	r3, [pc, #572]	; (80063fc <_dtoa_r+0x2e4>)
 80061be:	9303      	str	r3, [sp, #12]
 80061c0:	3303      	adds	r3, #3
 80061c2:	e7f5      	b.n	80061b0 <_dtoa_r+0x98>
 80061c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80061c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80061cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061d0:	2200      	movs	r2, #0
 80061d2:	2300      	movs	r3, #0
 80061d4:	f7fa fd08 	bl	8000be8 <__aeabi_dcmpeq>
 80061d8:	4680      	mov	r8, r0
 80061da:	b160      	cbz	r0, 80061f6 <_dtoa_r+0xde>
 80061dc:	2301      	movs	r3, #1
 80061de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 8562 	beq.w	8006cae <_dtoa_r+0xb96>
 80061ea:	4b86      	ldr	r3, [pc, #536]	; (8006404 <_dtoa_r+0x2ec>)
 80061ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	9303      	str	r3, [sp, #12]
 80061f4:	e7de      	b.n	80061b4 <_dtoa_r+0x9c>
 80061f6:	ab16      	add	r3, sp, #88	; 0x58
 80061f8:	9301      	str	r3, [sp, #4]
 80061fa:	ab17      	add	r3, sp, #92	; 0x5c
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	4628      	mov	r0, r5
 8006200:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006204:	f001 fa3c 	bl	8007680 <__d2b>
 8006208:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800620c:	4682      	mov	sl, r0
 800620e:	2c00      	cmp	r4, #0
 8006210:	d07e      	beq.n	8006310 <_dtoa_r+0x1f8>
 8006212:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006218:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800621c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006220:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006224:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006228:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800622c:	4619      	mov	r1, r3
 800622e:	2200      	movs	r2, #0
 8006230:	4b75      	ldr	r3, [pc, #468]	; (8006408 <_dtoa_r+0x2f0>)
 8006232:	f7fa f8b9 	bl	80003a8 <__aeabi_dsub>
 8006236:	a368      	add	r3, pc, #416	; (adr r3, 80063d8 <_dtoa_r+0x2c0>)
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	f7fa fa6c 	bl	8000718 <__aeabi_dmul>
 8006240:	a367      	add	r3, pc, #412	; (adr r3, 80063e0 <_dtoa_r+0x2c8>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f7fa f8b1 	bl	80003ac <__adddf3>
 800624a:	4606      	mov	r6, r0
 800624c:	4620      	mov	r0, r4
 800624e:	460f      	mov	r7, r1
 8006250:	f7fa f9f8 	bl	8000644 <__aeabi_i2d>
 8006254:	a364      	add	r3, pc, #400	; (adr r3, 80063e8 <_dtoa_r+0x2d0>)
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	f7fa fa5d 	bl	8000718 <__aeabi_dmul>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4630      	mov	r0, r6
 8006264:	4639      	mov	r1, r7
 8006266:	f7fa f8a1 	bl	80003ac <__adddf3>
 800626a:	4606      	mov	r6, r0
 800626c:	460f      	mov	r7, r1
 800626e:	f7fa fd03 	bl	8000c78 <__aeabi_d2iz>
 8006272:	2200      	movs	r2, #0
 8006274:	4683      	mov	fp, r0
 8006276:	2300      	movs	r3, #0
 8006278:	4630      	mov	r0, r6
 800627a:	4639      	mov	r1, r7
 800627c:	f7fa fcbe 	bl	8000bfc <__aeabi_dcmplt>
 8006280:	b148      	cbz	r0, 8006296 <_dtoa_r+0x17e>
 8006282:	4658      	mov	r0, fp
 8006284:	f7fa f9de 	bl	8000644 <__aeabi_i2d>
 8006288:	4632      	mov	r2, r6
 800628a:	463b      	mov	r3, r7
 800628c:	f7fa fcac 	bl	8000be8 <__aeabi_dcmpeq>
 8006290:	b908      	cbnz	r0, 8006296 <_dtoa_r+0x17e>
 8006292:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006296:	f1bb 0f16 	cmp.w	fp, #22
 800629a:	d857      	bhi.n	800634c <_dtoa_r+0x234>
 800629c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062a0:	4b5a      	ldr	r3, [pc, #360]	; (800640c <_dtoa_r+0x2f4>)
 80062a2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	f7fa fca7 	bl	8000bfc <__aeabi_dcmplt>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d04e      	beq.n	8006350 <_dtoa_r+0x238>
 80062b2:	2300      	movs	r3, #0
 80062b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80062ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80062bc:	1b1b      	subs	r3, r3, r4
 80062be:	1e5a      	subs	r2, r3, #1
 80062c0:	bf46      	itte	mi
 80062c2:	f1c3 0901 	rsbmi	r9, r3, #1
 80062c6:	2300      	movmi	r3, #0
 80062c8:	f04f 0900 	movpl.w	r9, #0
 80062cc:	9209      	str	r2, [sp, #36]	; 0x24
 80062ce:	bf48      	it	mi
 80062d0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80062d2:	f1bb 0f00 	cmp.w	fp, #0
 80062d6:	db3d      	blt.n	8006354 <_dtoa_r+0x23c>
 80062d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062da:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80062de:	445b      	add	r3, fp
 80062e0:	9309      	str	r3, [sp, #36]	; 0x24
 80062e2:	2300      	movs	r3, #0
 80062e4:	930a      	str	r3, [sp, #40]	; 0x28
 80062e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062e8:	2b09      	cmp	r3, #9
 80062ea:	d867      	bhi.n	80063bc <_dtoa_r+0x2a4>
 80062ec:	2b05      	cmp	r3, #5
 80062ee:	bfc4      	itt	gt
 80062f0:	3b04      	subgt	r3, #4
 80062f2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80062f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062f6:	bfc8      	it	gt
 80062f8:	2400      	movgt	r4, #0
 80062fa:	f1a3 0302 	sub.w	r3, r3, #2
 80062fe:	bfd8      	it	le
 8006300:	2401      	movle	r4, #1
 8006302:	2b03      	cmp	r3, #3
 8006304:	f200 8086 	bhi.w	8006414 <_dtoa_r+0x2fc>
 8006308:	e8df f003 	tbb	[pc, r3]
 800630c:	5637392c 	.word	0x5637392c
 8006310:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006314:	441c      	add	r4, r3
 8006316:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800631a:	2b20      	cmp	r3, #32
 800631c:	bfc1      	itttt	gt
 800631e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006322:	fa09 f903 	lslgt.w	r9, r9, r3
 8006326:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800632a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800632e:	bfd6      	itet	le
 8006330:	f1c3 0320 	rsble	r3, r3, #32
 8006334:	ea49 0003 	orrgt.w	r0, r9, r3
 8006338:	fa06 f003 	lslle.w	r0, r6, r3
 800633c:	f7fa f972 	bl	8000624 <__aeabi_ui2d>
 8006340:	2201      	movs	r2, #1
 8006342:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006346:	3c01      	subs	r4, #1
 8006348:	9213      	str	r2, [sp, #76]	; 0x4c
 800634a:	e76f      	b.n	800622c <_dtoa_r+0x114>
 800634c:	2301      	movs	r3, #1
 800634e:	e7b3      	b.n	80062b8 <_dtoa_r+0x1a0>
 8006350:	900f      	str	r0, [sp, #60]	; 0x3c
 8006352:	e7b2      	b.n	80062ba <_dtoa_r+0x1a2>
 8006354:	f1cb 0300 	rsb	r3, fp, #0
 8006358:	930a      	str	r3, [sp, #40]	; 0x28
 800635a:	2300      	movs	r3, #0
 800635c:	eba9 090b 	sub.w	r9, r9, fp
 8006360:	930e      	str	r3, [sp, #56]	; 0x38
 8006362:	e7c0      	b.n	80062e6 <_dtoa_r+0x1ce>
 8006364:	2300      	movs	r3, #0
 8006366:	930b      	str	r3, [sp, #44]	; 0x2c
 8006368:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800636a:	2b00      	cmp	r3, #0
 800636c:	dc55      	bgt.n	800641a <_dtoa_r+0x302>
 800636e:	2301      	movs	r3, #1
 8006370:	461a      	mov	r2, r3
 8006372:	9306      	str	r3, [sp, #24]
 8006374:	9308      	str	r3, [sp, #32]
 8006376:	9223      	str	r2, [sp, #140]	; 0x8c
 8006378:	e00b      	b.n	8006392 <_dtoa_r+0x27a>
 800637a:	2301      	movs	r3, #1
 800637c:	e7f3      	b.n	8006366 <_dtoa_r+0x24e>
 800637e:	2300      	movs	r3, #0
 8006380:	930b      	str	r3, [sp, #44]	; 0x2c
 8006382:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006384:	445b      	add	r3, fp
 8006386:	9306      	str	r3, [sp, #24]
 8006388:	3301      	adds	r3, #1
 800638a:	2b01      	cmp	r3, #1
 800638c:	9308      	str	r3, [sp, #32]
 800638e:	bfb8      	it	lt
 8006390:	2301      	movlt	r3, #1
 8006392:	2100      	movs	r1, #0
 8006394:	2204      	movs	r2, #4
 8006396:	69e8      	ldr	r0, [r5, #28]
 8006398:	f102 0614 	add.w	r6, r2, #20
 800639c:	429e      	cmp	r6, r3
 800639e:	d940      	bls.n	8006422 <_dtoa_r+0x30a>
 80063a0:	6041      	str	r1, [r0, #4]
 80063a2:	4628      	mov	r0, r5
 80063a4:	f000 fd98 	bl	8006ed8 <_Balloc>
 80063a8:	9003      	str	r0, [sp, #12]
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d13c      	bne.n	8006428 <_dtoa_r+0x310>
 80063ae:	4602      	mov	r2, r0
 80063b0:	f240 11af 	movw	r1, #431	; 0x1af
 80063b4:	4b16      	ldr	r3, [pc, #88]	; (8006410 <_dtoa_r+0x2f8>)
 80063b6:	e6c3      	b.n	8006140 <_dtoa_r+0x28>
 80063b8:	2301      	movs	r3, #1
 80063ba:	e7e1      	b.n	8006380 <_dtoa_r+0x268>
 80063bc:	2401      	movs	r4, #1
 80063be:	2300      	movs	r3, #0
 80063c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80063c2:	9322      	str	r3, [sp, #136]	; 0x88
 80063c4:	f04f 33ff 	mov.w	r3, #4294967295
 80063c8:	2200      	movs	r2, #0
 80063ca:	9306      	str	r3, [sp, #24]
 80063cc:	9308      	str	r3, [sp, #32]
 80063ce:	2312      	movs	r3, #18
 80063d0:	e7d1      	b.n	8006376 <_dtoa_r+0x25e>
 80063d2:	bf00      	nop
 80063d4:	f3af 8000 	nop.w
 80063d8:	636f4361 	.word	0x636f4361
 80063dc:	3fd287a7 	.word	0x3fd287a7
 80063e0:	8b60c8b3 	.word	0x8b60c8b3
 80063e4:	3fc68a28 	.word	0x3fc68a28
 80063e8:	509f79fb 	.word	0x509f79fb
 80063ec:	3fd34413 	.word	0x3fd34413
 80063f0:	08009720 	.word	0x08009720
 80063f4:	08009737 	.word	0x08009737
 80063f8:	7ff00000 	.word	0x7ff00000
 80063fc:	0800971c 	.word	0x0800971c
 8006400:	08009713 	.word	0x08009713
 8006404:	080096eb 	.word	0x080096eb
 8006408:	3ff80000 	.word	0x3ff80000
 800640c:	08009828 	.word	0x08009828
 8006410:	0800978f 	.word	0x0800978f
 8006414:	2301      	movs	r3, #1
 8006416:	930b      	str	r3, [sp, #44]	; 0x2c
 8006418:	e7d4      	b.n	80063c4 <_dtoa_r+0x2ac>
 800641a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800641c:	9306      	str	r3, [sp, #24]
 800641e:	9308      	str	r3, [sp, #32]
 8006420:	e7b7      	b.n	8006392 <_dtoa_r+0x27a>
 8006422:	3101      	adds	r1, #1
 8006424:	0052      	lsls	r2, r2, #1
 8006426:	e7b7      	b.n	8006398 <_dtoa_r+0x280>
 8006428:	69eb      	ldr	r3, [r5, #28]
 800642a:	9a03      	ldr	r2, [sp, #12]
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	9b08      	ldr	r3, [sp, #32]
 8006430:	2b0e      	cmp	r3, #14
 8006432:	f200 80a8 	bhi.w	8006586 <_dtoa_r+0x46e>
 8006436:	2c00      	cmp	r4, #0
 8006438:	f000 80a5 	beq.w	8006586 <_dtoa_r+0x46e>
 800643c:	f1bb 0f00 	cmp.w	fp, #0
 8006440:	dd34      	ble.n	80064ac <_dtoa_r+0x394>
 8006442:	4b9a      	ldr	r3, [pc, #616]	; (80066ac <_dtoa_r+0x594>)
 8006444:	f00b 020f 	and.w	r2, fp, #15
 8006448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800644c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006450:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006454:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006458:	ea4f 142b 	mov.w	r4, fp, asr #4
 800645c:	d016      	beq.n	800648c <_dtoa_r+0x374>
 800645e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006462:	4b93      	ldr	r3, [pc, #588]	; (80066b0 <_dtoa_r+0x598>)
 8006464:	2703      	movs	r7, #3
 8006466:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800646a:	f7fa fa7f 	bl	800096c <__aeabi_ddiv>
 800646e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006472:	f004 040f 	and.w	r4, r4, #15
 8006476:	4e8e      	ldr	r6, [pc, #568]	; (80066b0 <_dtoa_r+0x598>)
 8006478:	b954      	cbnz	r4, 8006490 <_dtoa_r+0x378>
 800647a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800647e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006482:	f7fa fa73 	bl	800096c <__aeabi_ddiv>
 8006486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800648a:	e029      	b.n	80064e0 <_dtoa_r+0x3c8>
 800648c:	2702      	movs	r7, #2
 800648e:	e7f2      	b.n	8006476 <_dtoa_r+0x35e>
 8006490:	07e1      	lsls	r1, r4, #31
 8006492:	d508      	bpl.n	80064a6 <_dtoa_r+0x38e>
 8006494:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006498:	e9d6 2300 	ldrd	r2, r3, [r6]
 800649c:	f7fa f93c 	bl	8000718 <__aeabi_dmul>
 80064a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064a4:	3701      	adds	r7, #1
 80064a6:	1064      	asrs	r4, r4, #1
 80064a8:	3608      	adds	r6, #8
 80064aa:	e7e5      	b.n	8006478 <_dtoa_r+0x360>
 80064ac:	f000 80a5 	beq.w	80065fa <_dtoa_r+0x4e2>
 80064b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064b4:	f1cb 0400 	rsb	r4, fp, #0
 80064b8:	4b7c      	ldr	r3, [pc, #496]	; (80066ac <_dtoa_r+0x594>)
 80064ba:	f004 020f 	and.w	r2, r4, #15
 80064be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	f7fa f927 	bl	8000718 <__aeabi_dmul>
 80064ca:	2702      	movs	r7, #2
 80064cc:	2300      	movs	r3, #0
 80064ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064d2:	4e77      	ldr	r6, [pc, #476]	; (80066b0 <_dtoa_r+0x598>)
 80064d4:	1124      	asrs	r4, r4, #4
 80064d6:	2c00      	cmp	r4, #0
 80064d8:	f040 8084 	bne.w	80065e4 <_dtoa_r+0x4cc>
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1d2      	bne.n	8006486 <_dtoa_r+0x36e>
 80064e0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80064e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80064e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 8087 	beq.w	80065fe <_dtoa_r+0x4e6>
 80064f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064f4:	2200      	movs	r2, #0
 80064f6:	4b6f      	ldr	r3, [pc, #444]	; (80066b4 <_dtoa_r+0x59c>)
 80064f8:	f7fa fb80 	bl	8000bfc <__aeabi_dcmplt>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d07e      	beq.n	80065fe <_dtoa_r+0x4e6>
 8006500:	9b08      	ldr	r3, [sp, #32]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d07b      	beq.n	80065fe <_dtoa_r+0x4e6>
 8006506:	9b06      	ldr	r3, [sp, #24]
 8006508:	2b00      	cmp	r3, #0
 800650a:	dd38      	ble.n	800657e <_dtoa_r+0x466>
 800650c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006510:	2200      	movs	r2, #0
 8006512:	4b69      	ldr	r3, [pc, #420]	; (80066b8 <_dtoa_r+0x5a0>)
 8006514:	f7fa f900 	bl	8000718 <__aeabi_dmul>
 8006518:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800651c:	9c06      	ldr	r4, [sp, #24]
 800651e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006522:	3701      	adds	r7, #1
 8006524:	4638      	mov	r0, r7
 8006526:	f7fa f88d 	bl	8000644 <__aeabi_i2d>
 800652a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800652e:	f7fa f8f3 	bl	8000718 <__aeabi_dmul>
 8006532:	2200      	movs	r2, #0
 8006534:	4b61      	ldr	r3, [pc, #388]	; (80066bc <_dtoa_r+0x5a4>)
 8006536:	f7f9 ff39 	bl	80003ac <__adddf3>
 800653a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800653e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006542:	9611      	str	r6, [sp, #68]	; 0x44
 8006544:	2c00      	cmp	r4, #0
 8006546:	d15d      	bne.n	8006604 <_dtoa_r+0x4ec>
 8006548:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800654c:	2200      	movs	r2, #0
 800654e:	4b5c      	ldr	r3, [pc, #368]	; (80066c0 <_dtoa_r+0x5a8>)
 8006550:	f7f9 ff2a 	bl	80003a8 <__aeabi_dsub>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800655c:	4633      	mov	r3, r6
 800655e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006560:	f7fa fb6a 	bl	8000c38 <__aeabi_dcmpgt>
 8006564:	2800      	cmp	r0, #0
 8006566:	f040 8295 	bne.w	8006a94 <_dtoa_r+0x97c>
 800656a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800656e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006570:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006574:	f7fa fb42 	bl	8000bfc <__aeabi_dcmplt>
 8006578:	2800      	cmp	r0, #0
 800657a:	f040 8289 	bne.w	8006a90 <_dtoa_r+0x978>
 800657e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006582:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006586:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006588:	2b00      	cmp	r3, #0
 800658a:	f2c0 8151 	blt.w	8006830 <_dtoa_r+0x718>
 800658e:	f1bb 0f0e 	cmp.w	fp, #14
 8006592:	f300 814d 	bgt.w	8006830 <_dtoa_r+0x718>
 8006596:	4b45      	ldr	r3, [pc, #276]	; (80066ac <_dtoa_r+0x594>)
 8006598:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800659c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80065a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f280 80da 	bge.w	8006760 <_dtoa_r+0x648>
 80065ac:	9b08      	ldr	r3, [sp, #32]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f300 80d6 	bgt.w	8006760 <_dtoa_r+0x648>
 80065b4:	f040 826b 	bne.w	8006a8e <_dtoa_r+0x976>
 80065b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065bc:	2200      	movs	r2, #0
 80065be:	4b40      	ldr	r3, [pc, #256]	; (80066c0 <_dtoa_r+0x5a8>)
 80065c0:	f7fa f8aa 	bl	8000718 <__aeabi_dmul>
 80065c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065c8:	f7fa fb2c 	bl	8000c24 <__aeabi_dcmpge>
 80065cc:	9c08      	ldr	r4, [sp, #32]
 80065ce:	4626      	mov	r6, r4
 80065d0:	2800      	cmp	r0, #0
 80065d2:	f040 8241 	bne.w	8006a58 <_dtoa_r+0x940>
 80065d6:	2331      	movs	r3, #49	; 0x31
 80065d8:	9f03      	ldr	r7, [sp, #12]
 80065da:	f10b 0b01 	add.w	fp, fp, #1
 80065de:	f807 3b01 	strb.w	r3, [r7], #1
 80065e2:	e23d      	b.n	8006a60 <_dtoa_r+0x948>
 80065e4:	07e2      	lsls	r2, r4, #31
 80065e6:	d505      	bpl.n	80065f4 <_dtoa_r+0x4dc>
 80065e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065ec:	f7fa f894 	bl	8000718 <__aeabi_dmul>
 80065f0:	2301      	movs	r3, #1
 80065f2:	3701      	adds	r7, #1
 80065f4:	1064      	asrs	r4, r4, #1
 80065f6:	3608      	adds	r6, #8
 80065f8:	e76d      	b.n	80064d6 <_dtoa_r+0x3be>
 80065fa:	2702      	movs	r7, #2
 80065fc:	e770      	b.n	80064e0 <_dtoa_r+0x3c8>
 80065fe:	46d8      	mov	r8, fp
 8006600:	9c08      	ldr	r4, [sp, #32]
 8006602:	e78f      	b.n	8006524 <_dtoa_r+0x40c>
 8006604:	9903      	ldr	r1, [sp, #12]
 8006606:	4b29      	ldr	r3, [pc, #164]	; (80066ac <_dtoa_r+0x594>)
 8006608:	4421      	add	r1, r4
 800660a:	9112      	str	r1, [sp, #72]	; 0x48
 800660c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800660e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006612:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006616:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800661a:	2900      	cmp	r1, #0
 800661c:	d054      	beq.n	80066c8 <_dtoa_r+0x5b0>
 800661e:	2000      	movs	r0, #0
 8006620:	4928      	ldr	r1, [pc, #160]	; (80066c4 <_dtoa_r+0x5ac>)
 8006622:	f7fa f9a3 	bl	800096c <__aeabi_ddiv>
 8006626:	463b      	mov	r3, r7
 8006628:	4632      	mov	r2, r6
 800662a:	f7f9 febd 	bl	80003a8 <__aeabi_dsub>
 800662e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006632:	9f03      	ldr	r7, [sp, #12]
 8006634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006638:	f7fa fb1e 	bl	8000c78 <__aeabi_d2iz>
 800663c:	4604      	mov	r4, r0
 800663e:	f7fa f801 	bl	8000644 <__aeabi_i2d>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800664a:	f7f9 fead 	bl	80003a8 <__aeabi_dsub>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	3430      	adds	r4, #48	; 0x30
 8006654:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006658:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800665c:	f807 4b01 	strb.w	r4, [r7], #1
 8006660:	f7fa facc 	bl	8000bfc <__aeabi_dcmplt>
 8006664:	2800      	cmp	r0, #0
 8006666:	d173      	bne.n	8006750 <_dtoa_r+0x638>
 8006668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800666c:	2000      	movs	r0, #0
 800666e:	4911      	ldr	r1, [pc, #68]	; (80066b4 <_dtoa_r+0x59c>)
 8006670:	f7f9 fe9a 	bl	80003a8 <__aeabi_dsub>
 8006674:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006678:	f7fa fac0 	bl	8000bfc <__aeabi_dcmplt>
 800667c:	2800      	cmp	r0, #0
 800667e:	f040 80b6 	bne.w	80067ee <_dtoa_r+0x6d6>
 8006682:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006684:	429f      	cmp	r7, r3
 8006686:	f43f af7a 	beq.w	800657e <_dtoa_r+0x466>
 800668a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800668e:	2200      	movs	r2, #0
 8006690:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <_dtoa_r+0x5a0>)
 8006692:	f7fa f841 	bl	8000718 <__aeabi_dmul>
 8006696:	2200      	movs	r2, #0
 8006698:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800669c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <_dtoa_r+0x5a0>)
 80066a2:	f7fa f839 	bl	8000718 <__aeabi_dmul>
 80066a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066aa:	e7c3      	b.n	8006634 <_dtoa_r+0x51c>
 80066ac:	08009828 	.word	0x08009828
 80066b0:	08009800 	.word	0x08009800
 80066b4:	3ff00000 	.word	0x3ff00000
 80066b8:	40240000 	.word	0x40240000
 80066bc:	401c0000 	.word	0x401c0000
 80066c0:	40140000 	.word	0x40140000
 80066c4:	3fe00000 	.word	0x3fe00000
 80066c8:	4630      	mov	r0, r6
 80066ca:	4639      	mov	r1, r7
 80066cc:	f7fa f824 	bl	8000718 <__aeabi_dmul>
 80066d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066d6:	9c03      	ldr	r4, [sp, #12]
 80066d8:	9314      	str	r3, [sp, #80]	; 0x50
 80066da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066de:	f7fa facb 	bl	8000c78 <__aeabi_d2iz>
 80066e2:	9015      	str	r0, [sp, #84]	; 0x54
 80066e4:	f7f9 ffae 	bl	8000644 <__aeabi_i2d>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066f0:	f7f9 fe5a 	bl	80003a8 <__aeabi_dsub>
 80066f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066f6:	4606      	mov	r6, r0
 80066f8:	3330      	adds	r3, #48	; 0x30
 80066fa:	f804 3b01 	strb.w	r3, [r4], #1
 80066fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006700:	460f      	mov	r7, r1
 8006702:	429c      	cmp	r4, r3
 8006704:	f04f 0200 	mov.w	r2, #0
 8006708:	d124      	bne.n	8006754 <_dtoa_r+0x63c>
 800670a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800670e:	4baf      	ldr	r3, [pc, #700]	; (80069cc <_dtoa_r+0x8b4>)
 8006710:	f7f9 fe4c 	bl	80003ac <__adddf3>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4630      	mov	r0, r6
 800671a:	4639      	mov	r1, r7
 800671c:	f7fa fa8c 	bl	8000c38 <__aeabi_dcmpgt>
 8006720:	2800      	cmp	r0, #0
 8006722:	d163      	bne.n	80067ec <_dtoa_r+0x6d4>
 8006724:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006728:	2000      	movs	r0, #0
 800672a:	49a8      	ldr	r1, [pc, #672]	; (80069cc <_dtoa_r+0x8b4>)
 800672c:	f7f9 fe3c 	bl	80003a8 <__aeabi_dsub>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4630      	mov	r0, r6
 8006736:	4639      	mov	r1, r7
 8006738:	f7fa fa60 	bl	8000bfc <__aeabi_dcmplt>
 800673c:	2800      	cmp	r0, #0
 800673e:	f43f af1e 	beq.w	800657e <_dtoa_r+0x466>
 8006742:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006744:	1e7b      	subs	r3, r7, #1
 8006746:	9314      	str	r3, [sp, #80]	; 0x50
 8006748:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800674c:	2b30      	cmp	r3, #48	; 0x30
 800674e:	d0f8      	beq.n	8006742 <_dtoa_r+0x62a>
 8006750:	46c3      	mov	fp, r8
 8006752:	e03b      	b.n	80067cc <_dtoa_r+0x6b4>
 8006754:	4b9e      	ldr	r3, [pc, #632]	; (80069d0 <_dtoa_r+0x8b8>)
 8006756:	f7f9 ffdf 	bl	8000718 <__aeabi_dmul>
 800675a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800675e:	e7bc      	b.n	80066da <_dtoa_r+0x5c2>
 8006760:	9f03      	ldr	r7, [sp, #12]
 8006762:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006766:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800676a:	4640      	mov	r0, r8
 800676c:	4649      	mov	r1, r9
 800676e:	f7fa f8fd 	bl	800096c <__aeabi_ddiv>
 8006772:	f7fa fa81 	bl	8000c78 <__aeabi_d2iz>
 8006776:	4604      	mov	r4, r0
 8006778:	f7f9 ff64 	bl	8000644 <__aeabi_i2d>
 800677c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006780:	f7f9 ffca 	bl	8000718 <__aeabi_dmul>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4640      	mov	r0, r8
 800678a:	4649      	mov	r1, r9
 800678c:	f7f9 fe0c 	bl	80003a8 <__aeabi_dsub>
 8006790:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006794:	f807 6b01 	strb.w	r6, [r7], #1
 8006798:	9e03      	ldr	r6, [sp, #12]
 800679a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800679e:	1bbe      	subs	r6, r7, r6
 80067a0:	45b4      	cmp	ip, r6
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	d136      	bne.n	8006816 <_dtoa_r+0x6fe>
 80067a8:	f7f9 fe00 	bl	80003ac <__adddf3>
 80067ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067b0:	4680      	mov	r8, r0
 80067b2:	4689      	mov	r9, r1
 80067b4:	f7fa fa40 	bl	8000c38 <__aeabi_dcmpgt>
 80067b8:	bb58      	cbnz	r0, 8006812 <_dtoa_r+0x6fa>
 80067ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067be:	4640      	mov	r0, r8
 80067c0:	4649      	mov	r1, r9
 80067c2:	f7fa fa11 	bl	8000be8 <__aeabi_dcmpeq>
 80067c6:	b108      	cbz	r0, 80067cc <_dtoa_r+0x6b4>
 80067c8:	07e3      	lsls	r3, r4, #31
 80067ca:	d422      	bmi.n	8006812 <_dtoa_r+0x6fa>
 80067cc:	4651      	mov	r1, sl
 80067ce:	4628      	mov	r0, r5
 80067d0:	f000 fbc2 	bl	8006f58 <_Bfree>
 80067d4:	2300      	movs	r3, #0
 80067d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80067d8:	703b      	strb	r3, [r7, #0]
 80067da:	f10b 0301 	add.w	r3, fp, #1
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f43f ace6 	beq.w	80061b4 <_dtoa_r+0x9c>
 80067e8:	601f      	str	r7, [r3, #0]
 80067ea:	e4e3      	b.n	80061b4 <_dtoa_r+0x9c>
 80067ec:	4627      	mov	r7, r4
 80067ee:	463b      	mov	r3, r7
 80067f0:	461f      	mov	r7, r3
 80067f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067f6:	2a39      	cmp	r2, #57	; 0x39
 80067f8:	d107      	bne.n	800680a <_dtoa_r+0x6f2>
 80067fa:	9a03      	ldr	r2, [sp, #12]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d1f7      	bne.n	80067f0 <_dtoa_r+0x6d8>
 8006800:	2230      	movs	r2, #48	; 0x30
 8006802:	9903      	ldr	r1, [sp, #12]
 8006804:	f108 0801 	add.w	r8, r8, #1
 8006808:	700a      	strb	r2, [r1, #0]
 800680a:	781a      	ldrb	r2, [r3, #0]
 800680c:	3201      	adds	r2, #1
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	e79e      	b.n	8006750 <_dtoa_r+0x638>
 8006812:	46d8      	mov	r8, fp
 8006814:	e7eb      	b.n	80067ee <_dtoa_r+0x6d6>
 8006816:	2200      	movs	r2, #0
 8006818:	4b6d      	ldr	r3, [pc, #436]	; (80069d0 <_dtoa_r+0x8b8>)
 800681a:	f7f9 ff7d 	bl	8000718 <__aeabi_dmul>
 800681e:	2200      	movs	r2, #0
 8006820:	2300      	movs	r3, #0
 8006822:	4680      	mov	r8, r0
 8006824:	4689      	mov	r9, r1
 8006826:	f7fa f9df 	bl	8000be8 <__aeabi_dcmpeq>
 800682a:	2800      	cmp	r0, #0
 800682c:	d09b      	beq.n	8006766 <_dtoa_r+0x64e>
 800682e:	e7cd      	b.n	80067cc <_dtoa_r+0x6b4>
 8006830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006832:	2a00      	cmp	r2, #0
 8006834:	f000 80c4 	beq.w	80069c0 <_dtoa_r+0x8a8>
 8006838:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800683a:	2a01      	cmp	r2, #1
 800683c:	f300 80a8 	bgt.w	8006990 <_dtoa_r+0x878>
 8006840:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006842:	2a00      	cmp	r2, #0
 8006844:	f000 80a0 	beq.w	8006988 <_dtoa_r+0x870>
 8006848:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800684c:	464f      	mov	r7, r9
 800684e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006852:	2101      	movs	r1, #1
 8006854:	441a      	add	r2, r3
 8006856:	4628      	mov	r0, r5
 8006858:	4499      	add	r9, r3
 800685a:	9209      	str	r2, [sp, #36]	; 0x24
 800685c:	f000 fc7c 	bl	8007158 <__i2b>
 8006860:	4606      	mov	r6, r0
 8006862:	b15f      	cbz	r7, 800687c <_dtoa_r+0x764>
 8006864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006866:	2b00      	cmp	r3, #0
 8006868:	dd08      	ble.n	800687c <_dtoa_r+0x764>
 800686a:	42bb      	cmp	r3, r7
 800686c:	bfa8      	it	ge
 800686e:	463b      	movge	r3, r7
 8006870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006872:	eba9 0903 	sub.w	r9, r9, r3
 8006876:	1aff      	subs	r7, r7, r3
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	9309      	str	r3, [sp, #36]	; 0x24
 800687c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800687e:	b1f3      	cbz	r3, 80068be <_dtoa_r+0x7a6>
 8006880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80a0 	beq.w	80069c8 <_dtoa_r+0x8b0>
 8006888:	2c00      	cmp	r4, #0
 800688a:	dd10      	ble.n	80068ae <_dtoa_r+0x796>
 800688c:	4631      	mov	r1, r6
 800688e:	4622      	mov	r2, r4
 8006890:	4628      	mov	r0, r5
 8006892:	f000 fd1f 	bl	80072d4 <__pow5mult>
 8006896:	4652      	mov	r2, sl
 8006898:	4601      	mov	r1, r0
 800689a:	4606      	mov	r6, r0
 800689c:	4628      	mov	r0, r5
 800689e:	f000 fc71 	bl	8007184 <__multiply>
 80068a2:	4680      	mov	r8, r0
 80068a4:	4651      	mov	r1, sl
 80068a6:	4628      	mov	r0, r5
 80068a8:	f000 fb56 	bl	8006f58 <_Bfree>
 80068ac:	46c2      	mov	sl, r8
 80068ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b0:	1b1a      	subs	r2, r3, r4
 80068b2:	d004      	beq.n	80068be <_dtoa_r+0x7a6>
 80068b4:	4651      	mov	r1, sl
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 fd0c 	bl	80072d4 <__pow5mult>
 80068bc:	4682      	mov	sl, r0
 80068be:	2101      	movs	r1, #1
 80068c0:	4628      	mov	r0, r5
 80068c2:	f000 fc49 	bl	8007158 <__i2b>
 80068c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068c8:	4604      	mov	r4, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f340 8082 	ble.w	80069d4 <_dtoa_r+0x8bc>
 80068d0:	461a      	mov	r2, r3
 80068d2:	4601      	mov	r1, r0
 80068d4:	4628      	mov	r0, r5
 80068d6:	f000 fcfd 	bl	80072d4 <__pow5mult>
 80068da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068dc:	4604      	mov	r4, r0
 80068de:	2b01      	cmp	r3, #1
 80068e0:	dd7b      	ble.n	80069da <_dtoa_r+0x8c2>
 80068e2:	f04f 0800 	mov.w	r8, #0
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068ec:	6918      	ldr	r0, [r3, #16]
 80068ee:	f000 fbe5 	bl	80070bc <__hi0bits>
 80068f2:	f1c0 0020 	rsb	r0, r0, #32
 80068f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f8:	4418      	add	r0, r3
 80068fa:	f010 001f 	ands.w	r0, r0, #31
 80068fe:	f000 8092 	beq.w	8006a26 <_dtoa_r+0x90e>
 8006902:	f1c0 0320 	rsb	r3, r0, #32
 8006906:	2b04      	cmp	r3, #4
 8006908:	f340 8085 	ble.w	8006a16 <_dtoa_r+0x8fe>
 800690c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800690e:	f1c0 001c 	rsb	r0, r0, #28
 8006912:	4403      	add	r3, r0
 8006914:	4481      	add	r9, r0
 8006916:	4407      	add	r7, r0
 8006918:	9309      	str	r3, [sp, #36]	; 0x24
 800691a:	f1b9 0f00 	cmp.w	r9, #0
 800691e:	dd05      	ble.n	800692c <_dtoa_r+0x814>
 8006920:	4651      	mov	r1, sl
 8006922:	464a      	mov	r2, r9
 8006924:	4628      	mov	r0, r5
 8006926:	f000 fd2f 	bl	8007388 <__lshift>
 800692a:	4682      	mov	sl, r0
 800692c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692e:	2b00      	cmp	r3, #0
 8006930:	dd05      	ble.n	800693e <_dtoa_r+0x826>
 8006932:	4621      	mov	r1, r4
 8006934:	461a      	mov	r2, r3
 8006936:	4628      	mov	r0, r5
 8006938:	f000 fd26 	bl	8007388 <__lshift>
 800693c:	4604      	mov	r4, r0
 800693e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d072      	beq.n	8006a2a <_dtoa_r+0x912>
 8006944:	4621      	mov	r1, r4
 8006946:	4650      	mov	r0, sl
 8006948:	f000 fd8a 	bl	8007460 <__mcmp>
 800694c:	2800      	cmp	r0, #0
 800694e:	da6c      	bge.n	8006a2a <_dtoa_r+0x912>
 8006950:	2300      	movs	r3, #0
 8006952:	4651      	mov	r1, sl
 8006954:	220a      	movs	r2, #10
 8006956:	4628      	mov	r0, r5
 8006958:	f000 fb20 	bl	8006f9c <__multadd>
 800695c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800695e:	4682      	mov	sl, r0
 8006960:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 81ac 	beq.w	8006cc2 <_dtoa_r+0xbaa>
 800696a:	2300      	movs	r3, #0
 800696c:	4631      	mov	r1, r6
 800696e:	220a      	movs	r2, #10
 8006970:	4628      	mov	r0, r5
 8006972:	f000 fb13 	bl	8006f9c <__multadd>
 8006976:	9b06      	ldr	r3, [sp, #24]
 8006978:	4606      	mov	r6, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	f300 8093 	bgt.w	8006aa6 <_dtoa_r+0x98e>
 8006980:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006982:	2b02      	cmp	r3, #2
 8006984:	dc59      	bgt.n	8006a3a <_dtoa_r+0x922>
 8006986:	e08e      	b.n	8006aa6 <_dtoa_r+0x98e>
 8006988:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800698a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800698e:	e75d      	b.n	800684c <_dtoa_r+0x734>
 8006990:	9b08      	ldr	r3, [sp, #32]
 8006992:	1e5c      	subs	r4, r3, #1
 8006994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006996:	42a3      	cmp	r3, r4
 8006998:	bfbf      	itttt	lt
 800699a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800699c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800699e:	1ae3      	sublt	r3, r4, r3
 80069a0:	18d2      	addlt	r2, r2, r3
 80069a2:	bfa8      	it	ge
 80069a4:	1b1c      	subge	r4, r3, r4
 80069a6:	9b08      	ldr	r3, [sp, #32]
 80069a8:	bfbe      	ittt	lt
 80069aa:	940a      	strlt	r4, [sp, #40]	; 0x28
 80069ac:	920e      	strlt	r2, [sp, #56]	; 0x38
 80069ae:	2400      	movlt	r4, #0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bfb5      	itete	lt
 80069b4:	eba9 0703 	sublt.w	r7, r9, r3
 80069b8:	464f      	movge	r7, r9
 80069ba:	2300      	movlt	r3, #0
 80069bc:	9b08      	ldrge	r3, [sp, #32]
 80069be:	e747      	b.n	8006850 <_dtoa_r+0x738>
 80069c0:	464f      	mov	r7, r9
 80069c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80069c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80069c6:	e74c      	b.n	8006862 <_dtoa_r+0x74a>
 80069c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ca:	e773      	b.n	80068b4 <_dtoa_r+0x79c>
 80069cc:	3fe00000 	.word	0x3fe00000
 80069d0:	40240000 	.word	0x40240000
 80069d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	dc18      	bgt.n	8006a0c <_dtoa_r+0x8f4>
 80069da:	9b04      	ldr	r3, [sp, #16]
 80069dc:	b9b3      	cbnz	r3, 8006a0c <_dtoa_r+0x8f4>
 80069de:	9b05      	ldr	r3, [sp, #20]
 80069e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069e4:	b993      	cbnz	r3, 8006a0c <_dtoa_r+0x8f4>
 80069e6:	9b05      	ldr	r3, [sp, #20]
 80069e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069ec:	0d1b      	lsrs	r3, r3, #20
 80069ee:	051b      	lsls	r3, r3, #20
 80069f0:	b17b      	cbz	r3, 8006a12 <_dtoa_r+0x8fa>
 80069f2:	f04f 0801 	mov.w	r8, #1
 80069f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f8:	f109 0901 	add.w	r9, r9, #1
 80069fc:	3301      	adds	r3, #1
 80069fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f47f af6f 	bne.w	80068e6 <_dtoa_r+0x7ce>
 8006a08:	2001      	movs	r0, #1
 8006a0a:	e774      	b.n	80068f6 <_dtoa_r+0x7de>
 8006a0c:	f04f 0800 	mov.w	r8, #0
 8006a10:	e7f6      	b.n	8006a00 <_dtoa_r+0x8e8>
 8006a12:	4698      	mov	r8, r3
 8006a14:	e7f4      	b.n	8006a00 <_dtoa_r+0x8e8>
 8006a16:	d080      	beq.n	800691a <_dtoa_r+0x802>
 8006a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a1a:	331c      	adds	r3, #28
 8006a1c:	441a      	add	r2, r3
 8006a1e:	4499      	add	r9, r3
 8006a20:	441f      	add	r7, r3
 8006a22:	9209      	str	r2, [sp, #36]	; 0x24
 8006a24:	e779      	b.n	800691a <_dtoa_r+0x802>
 8006a26:	4603      	mov	r3, r0
 8006a28:	e7f6      	b.n	8006a18 <_dtoa_r+0x900>
 8006a2a:	9b08      	ldr	r3, [sp, #32]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dc34      	bgt.n	8006a9a <_dtoa_r+0x982>
 8006a30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	dd31      	ble.n	8006a9a <_dtoa_r+0x982>
 8006a36:	9b08      	ldr	r3, [sp, #32]
 8006a38:	9306      	str	r3, [sp, #24]
 8006a3a:	9b06      	ldr	r3, [sp, #24]
 8006a3c:	b963      	cbnz	r3, 8006a58 <_dtoa_r+0x940>
 8006a3e:	4621      	mov	r1, r4
 8006a40:	2205      	movs	r2, #5
 8006a42:	4628      	mov	r0, r5
 8006a44:	f000 faaa 	bl	8006f9c <__multadd>
 8006a48:	4601      	mov	r1, r0
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	4650      	mov	r0, sl
 8006a4e:	f000 fd07 	bl	8007460 <__mcmp>
 8006a52:	2800      	cmp	r0, #0
 8006a54:	f73f adbf 	bgt.w	80065d6 <_dtoa_r+0x4be>
 8006a58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a5a:	9f03      	ldr	r7, [sp, #12]
 8006a5c:	ea6f 0b03 	mvn.w	fp, r3
 8006a60:	f04f 0800 	mov.w	r8, #0
 8006a64:	4621      	mov	r1, r4
 8006a66:	4628      	mov	r0, r5
 8006a68:	f000 fa76 	bl	8006f58 <_Bfree>
 8006a6c:	2e00      	cmp	r6, #0
 8006a6e:	f43f aead 	beq.w	80067cc <_dtoa_r+0x6b4>
 8006a72:	f1b8 0f00 	cmp.w	r8, #0
 8006a76:	d005      	beq.n	8006a84 <_dtoa_r+0x96c>
 8006a78:	45b0      	cmp	r8, r6
 8006a7a:	d003      	beq.n	8006a84 <_dtoa_r+0x96c>
 8006a7c:	4641      	mov	r1, r8
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 fa6a 	bl	8006f58 <_Bfree>
 8006a84:	4631      	mov	r1, r6
 8006a86:	4628      	mov	r0, r5
 8006a88:	f000 fa66 	bl	8006f58 <_Bfree>
 8006a8c:	e69e      	b.n	80067cc <_dtoa_r+0x6b4>
 8006a8e:	2400      	movs	r4, #0
 8006a90:	4626      	mov	r6, r4
 8006a92:	e7e1      	b.n	8006a58 <_dtoa_r+0x940>
 8006a94:	46c3      	mov	fp, r8
 8006a96:	4626      	mov	r6, r4
 8006a98:	e59d      	b.n	80065d6 <_dtoa_r+0x4be>
 8006a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 80c8 	beq.w	8006c32 <_dtoa_r+0xb1a>
 8006aa2:	9b08      	ldr	r3, [sp, #32]
 8006aa4:	9306      	str	r3, [sp, #24]
 8006aa6:	2f00      	cmp	r7, #0
 8006aa8:	dd05      	ble.n	8006ab6 <_dtoa_r+0x99e>
 8006aaa:	4631      	mov	r1, r6
 8006aac:	463a      	mov	r2, r7
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f000 fc6a 	bl	8007388 <__lshift>
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	f1b8 0f00 	cmp.w	r8, #0
 8006aba:	d05b      	beq.n	8006b74 <_dtoa_r+0xa5c>
 8006abc:	4628      	mov	r0, r5
 8006abe:	6871      	ldr	r1, [r6, #4]
 8006ac0:	f000 fa0a 	bl	8006ed8 <_Balloc>
 8006ac4:	4607      	mov	r7, r0
 8006ac6:	b928      	cbnz	r0, 8006ad4 <_dtoa_r+0x9bc>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006ace:	4b81      	ldr	r3, [pc, #516]	; (8006cd4 <_dtoa_r+0xbbc>)
 8006ad0:	f7ff bb36 	b.w	8006140 <_dtoa_r+0x28>
 8006ad4:	6932      	ldr	r2, [r6, #16]
 8006ad6:	f106 010c 	add.w	r1, r6, #12
 8006ada:	3202      	adds	r2, #2
 8006adc:	0092      	lsls	r2, r2, #2
 8006ade:	300c      	adds	r0, #12
 8006ae0:	f002 f938 	bl	8008d54 <memcpy>
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	4639      	mov	r1, r7
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f000 fc4d 	bl	8007388 <__lshift>
 8006aee:	46b0      	mov	r8, r6
 8006af0:	4606      	mov	r6, r0
 8006af2:	9b03      	ldr	r3, [sp, #12]
 8006af4:	9a03      	ldr	r2, [sp, #12]
 8006af6:	3301      	adds	r3, #1
 8006af8:	9308      	str	r3, [sp, #32]
 8006afa:	9b06      	ldr	r3, [sp, #24]
 8006afc:	4413      	add	r3, r2
 8006afe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b00:	9b04      	ldr	r3, [sp, #16]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	930a      	str	r3, [sp, #40]	; 0x28
 8006b08:	9b08      	ldr	r3, [sp, #32]
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	4650      	mov	r0, sl
 8006b10:	9304      	str	r3, [sp, #16]
 8006b12:	f7ff fa75 	bl	8006000 <quorem>
 8006b16:	4641      	mov	r1, r8
 8006b18:	9006      	str	r0, [sp, #24]
 8006b1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b1e:	4650      	mov	r0, sl
 8006b20:	f000 fc9e 	bl	8007460 <__mcmp>
 8006b24:	4632      	mov	r2, r6
 8006b26:	9009      	str	r0, [sp, #36]	; 0x24
 8006b28:	4621      	mov	r1, r4
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f000 fcb4 	bl	8007498 <__mdiff>
 8006b30:	68c2      	ldr	r2, [r0, #12]
 8006b32:	4607      	mov	r7, r0
 8006b34:	bb02      	cbnz	r2, 8006b78 <_dtoa_r+0xa60>
 8006b36:	4601      	mov	r1, r0
 8006b38:	4650      	mov	r0, sl
 8006b3a:	f000 fc91 	bl	8007460 <__mcmp>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	4639      	mov	r1, r7
 8006b42:	4628      	mov	r0, r5
 8006b44:	920c      	str	r2, [sp, #48]	; 0x30
 8006b46:	f000 fa07 	bl	8006f58 <_Bfree>
 8006b4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b4e:	9f08      	ldr	r7, [sp, #32]
 8006b50:	ea43 0102 	orr.w	r1, r3, r2
 8006b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b56:	4319      	orrs	r1, r3
 8006b58:	d110      	bne.n	8006b7c <_dtoa_r+0xa64>
 8006b5a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006b5e:	d029      	beq.n	8006bb4 <_dtoa_r+0xa9c>
 8006b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	dd02      	ble.n	8006b6c <_dtoa_r+0xa54>
 8006b66:	9b06      	ldr	r3, [sp, #24]
 8006b68:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006b6c:	9b04      	ldr	r3, [sp, #16]
 8006b6e:	f883 9000 	strb.w	r9, [r3]
 8006b72:	e777      	b.n	8006a64 <_dtoa_r+0x94c>
 8006b74:	4630      	mov	r0, r6
 8006b76:	e7ba      	b.n	8006aee <_dtoa_r+0x9d6>
 8006b78:	2201      	movs	r2, #1
 8006b7a:	e7e1      	b.n	8006b40 <_dtoa_r+0xa28>
 8006b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	db04      	blt.n	8006b8c <_dtoa_r+0xa74>
 8006b82:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006b84:	430b      	orrs	r3, r1
 8006b86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	d120      	bne.n	8006bce <_dtoa_r+0xab6>
 8006b8c:	2a00      	cmp	r2, #0
 8006b8e:	dded      	ble.n	8006b6c <_dtoa_r+0xa54>
 8006b90:	4651      	mov	r1, sl
 8006b92:	2201      	movs	r2, #1
 8006b94:	4628      	mov	r0, r5
 8006b96:	f000 fbf7 	bl	8007388 <__lshift>
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	4682      	mov	sl, r0
 8006b9e:	f000 fc5f 	bl	8007460 <__mcmp>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	dc03      	bgt.n	8006bae <_dtoa_r+0xa96>
 8006ba6:	d1e1      	bne.n	8006b6c <_dtoa_r+0xa54>
 8006ba8:	f019 0f01 	tst.w	r9, #1
 8006bac:	d0de      	beq.n	8006b6c <_dtoa_r+0xa54>
 8006bae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006bb2:	d1d8      	bne.n	8006b66 <_dtoa_r+0xa4e>
 8006bb4:	2339      	movs	r3, #57	; 0x39
 8006bb6:	9a04      	ldr	r2, [sp, #16]
 8006bb8:	7013      	strb	r3, [r2, #0]
 8006bba:	463b      	mov	r3, r7
 8006bbc:	461f      	mov	r7, r3
 8006bbe:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	2a39      	cmp	r2, #57	; 0x39
 8006bc6:	d06b      	beq.n	8006ca0 <_dtoa_r+0xb88>
 8006bc8:	3201      	adds	r2, #1
 8006bca:	701a      	strb	r2, [r3, #0]
 8006bcc:	e74a      	b.n	8006a64 <_dtoa_r+0x94c>
 8006bce:	2a00      	cmp	r2, #0
 8006bd0:	dd07      	ble.n	8006be2 <_dtoa_r+0xaca>
 8006bd2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006bd6:	d0ed      	beq.n	8006bb4 <_dtoa_r+0xa9c>
 8006bd8:	9a04      	ldr	r2, [sp, #16]
 8006bda:	f109 0301 	add.w	r3, r9, #1
 8006bde:	7013      	strb	r3, [r2, #0]
 8006be0:	e740      	b.n	8006a64 <_dtoa_r+0x94c>
 8006be2:	9b08      	ldr	r3, [sp, #32]
 8006be4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006be6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d042      	beq.n	8006c74 <_dtoa_r+0xb5c>
 8006bee:	4651      	mov	r1, sl
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	220a      	movs	r2, #10
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	f000 f9d1 	bl	8006f9c <__multadd>
 8006bfa:	45b0      	cmp	r8, r6
 8006bfc:	4682      	mov	sl, r0
 8006bfe:	f04f 0300 	mov.w	r3, #0
 8006c02:	f04f 020a 	mov.w	r2, #10
 8006c06:	4641      	mov	r1, r8
 8006c08:	4628      	mov	r0, r5
 8006c0a:	d107      	bne.n	8006c1c <_dtoa_r+0xb04>
 8006c0c:	f000 f9c6 	bl	8006f9c <__multadd>
 8006c10:	4680      	mov	r8, r0
 8006c12:	4606      	mov	r6, r0
 8006c14:	9b08      	ldr	r3, [sp, #32]
 8006c16:	3301      	adds	r3, #1
 8006c18:	9308      	str	r3, [sp, #32]
 8006c1a:	e775      	b.n	8006b08 <_dtoa_r+0x9f0>
 8006c1c:	f000 f9be 	bl	8006f9c <__multadd>
 8006c20:	4631      	mov	r1, r6
 8006c22:	4680      	mov	r8, r0
 8006c24:	2300      	movs	r3, #0
 8006c26:	220a      	movs	r2, #10
 8006c28:	4628      	mov	r0, r5
 8006c2a:	f000 f9b7 	bl	8006f9c <__multadd>
 8006c2e:	4606      	mov	r6, r0
 8006c30:	e7f0      	b.n	8006c14 <_dtoa_r+0xafc>
 8006c32:	9b08      	ldr	r3, [sp, #32]
 8006c34:	9306      	str	r3, [sp, #24]
 8006c36:	9f03      	ldr	r7, [sp, #12]
 8006c38:	4621      	mov	r1, r4
 8006c3a:	4650      	mov	r0, sl
 8006c3c:	f7ff f9e0 	bl	8006000 <quorem>
 8006c40:	9b03      	ldr	r3, [sp, #12]
 8006c42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c46:	f807 9b01 	strb.w	r9, [r7], #1
 8006c4a:	1afa      	subs	r2, r7, r3
 8006c4c:	9b06      	ldr	r3, [sp, #24]
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	dd07      	ble.n	8006c62 <_dtoa_r+0xb4a>
 8006c52:	4651      	mov	r1, sl
 8006c54:	2300      	movs	r3, #0
 8006c56:	220a      	movs	r2, #10
 8006c58:	4628      	mov	r0, r5
 8006c5a:	f000 f99f 	bl	8006f9c <__multadd>
 8006c5e:	4682      	mov	sl, r0
 8006c60:	e7ea      	b.n	8006c38 <_dtoa_r+0xb20>
 8006c62:	9b06      	ldr	r3, [sp, #24]
 8006c64:	f04f 0800 	mov.w	r8, #0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	bfcc      	ite	gt
 8006c6c:	461f      	movgt	r7, r3
 8006c6e:	2701      	movle	r7, #1
 8006c70:	9b03      	ldr	r3, [sp, #12]
 8006c72:	441f      	add	r7, r3
 8006c74:	4651      	mov	r1, sl
 8006c76:	2201      	movs	r2, #1
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f000 fb85 	bl	8007388 <__lshift>
 8006c7e:	4621      	mov	r1, r4
 8006c80:	4682      	mov	sl, r0
 8006c82:	f000 fbed 	bl	8007460 <__mcmp>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	dc97      	bgt.n	8006bba <_dtoa_r+0xaa2>
 8006c8a:	d102      	bne.n	8006c92 <_dtoa_r+0xb7a>
 8006c8c:	f019 0f01 	tst.w	r9, #1
 8006c90:	d193      	bne.n	8006bba <_dtoa_r+0xaa2>
 8006c92:	463b      	mov	r3, r7
 8006c94:	461f      	mov	r7, r3
 8006c96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c9a:	2a30      	cmp	r2, #48	; 0x30
 8006c9c:	d0fa      	beq.n	8006c94 <_dtoa_r+0xb7c>
 8006c9e:	e6e1      	b.n	8006a64 <_dtoa_r+0x94c>
 8006ca0:	9a03      	ldr	r2, [sp, #12]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d18a      	bne.n	8006bbc <_dtoa_r+0xaa4>
 8006ca6:	2331      	movs	r3, #49	; 0x31
 8006ca8:	f10b 0b01 	add.w	fp, fp, #1
 8006cac:	e797      	b.n	8006bde <_dtoa_r+0xac6>
 8006cae:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <_dtoa_r+0xbc0>)
 8006cb0:	f7ff ba9f 	b.w	80061f2 <_dtoa_r+0xda>
 8006cb4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f47f aa77 	bne.w	80061aa <_dtoa_r+0x92>
 8006cbc:	4b07      	ldr	r3, [pc, #28]	; (8006cdc <_dtoa_r+0xbc4>)
 8006cbe:	f7ff ba98 	b.w	80061f2 <_dtoa_r+0xda>
 8006cc2:	9b06      	ldr	r3, [sp, #24]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	dcb6      	bgt.n	8006c36 <_dtoa_r+0xb1e>
 8006cc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	f73f aeb5 	bgt.w	8006a3a <_dtoa_r+0x922>
 8006cd0:	e7b1      	b.n	8006c36 <_dtoa_r+0xb1e>
 8006cd2:	bf00      	nop
 8006cd4:	0800978f 	.word	0x0800978f
 8006cd8:	080096ea 	.word	0x080096ea
 8006cdc:	08009713 	.word	0x08009713

08006ce0 <_free_r>:
 8006ce0:	b538      	push	{r3, r4, r5, lr}
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	2900      	cmp	r1, #0
 8006ce6:	d040      	beq.n	8006d6a <_free_r+0x8a>
 8006ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cec:	1f0c      	subs	r4, r1, #4
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	bfb8      	it	lt
 8006cf2:	18e4      	addlt	r4, r4, r3
 8006cf4:	f000 f8e4 	bl	8006ec0 <__malloc_lock>
 8006cf8:	4a1c      	ldr	r2, [pc, #112]	; (8006d6c <_free_r+0x8c>)
 8006cfa:	6813      	ldr	r3, [r2, #0]
 8006cfc:	b933      	cbnz	r3, 8006d0c <_free_r+0x2c>
 8006cfe:	6063      	str	r3, [r4, #4]
 8006d00:	6014      	str	r4, [r2, #0]
 8006d02:	4628      	mov	r0, r5
 8006d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d08:	f000 b8e0 	b.w	8006ecc <__malloc_unlock>
 8006d0c:	42a3      	cmp	r3, r4
 8006d0e:	d908      	bls.n	8006d22 <_free_r+0x42>
 8006d10:	6820      	ldr	r0, [r4, #0]
 8006d12:	1821      	adds	r1, r4, r0
 8006d14:	428b      	cmp	r3, r1
 8006d16:	bf01      	itttt	eq
 8006d18:	6819      	ldreq	r1, [r3, #0]
 8006d1a:	685b      	ldreq	r3, [r3, #4]
 8006d1c:	1809      	addeq	r1, r1, r0
 8006d1e:	6021      	streq	r1, [r4, #0]
 8006d20:	e7ed      	b.n	8006cfe <_free_r+0x1e>
 8006d22:	461a      	mov	r2, r3
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	b10b      	cbz	r3, 8006d2c <_free_r+0x4c>
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	d9fa      	bls.n	8006d22 <_free_r+0x42>
 8006d2c:	6811      	ldr	r1, [r2, #0]
 8006d2e:	1850      	adds	r0, r2, r1
 8006d30:	42a0      	cmp	r0, r4
 8006d32:	d10b      	bne.n	8006d4c <_free_r+0x6c>
 8006d34:	6820      	ldr	r0, [r4, #0]
 8006d36:	4401      	add	r1, r0
 8006d38:	1850      	adds	r0, r2, r1
 8006d3a:	4283      	cmp	r3, r0
 8006d3c:	6011      	str	r1, [r2, #0]
 8006d3e:	d1e0      	bne.n	8006d02 <_free_r+0x22>
 8006d40:	6818      	ldr	r0, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	4408      	add	r0, r1
 8006d46:	6010      	str	r0, [r2, #0]
 8006d48:	6053      	str	r3, [r2, #4]
 8006d4a:	e7da      	b.n	8006d02 <_free_r+0x22>
 8006d4c:	d902      	bls.n	8006d54 <_free_r+0x74>
 8006d4e:	230c      	movs	r3, #12
 8006d50:	602b      	str	r3, [r5, #0]
 8006d52:	e7d6      	b.n	8006d02 <_free_r+0x22>
 8006d54:	6820      	ldr	r0, [r4, #0]
 8006d56:	1821      	adds	r1, r4, r0
 8006d58:	428b      	cmp	r3, r1
 8006d5a:	bf01      	itttt	eq
 8006d5c:	6819      	ldreq	r1, [r3, #0]
 8006d5e:	685b      	ldreq	r3, [r3, #4]
 8006d60:	1809      	addeq	r1, r1, r0
 8006d62:	6021      	streq	r1, [r4, #0]
 8006d64:	6063      	str	r3, [r4, #4]
 8006d66:	6054      	str	r4, [r2, #4]
 8006d68:	e7cb      	b.n	8006d02 <_free_r+0x22>
 8006d6a:	bd38      	pop	{r3, r4, r5, pc}
 8006d6c:	20000624 	.word	0x20000624

08006d70 <malloc>:
 8006d70:	4b02      	ldr	r3, [pc, #8]	; (8006d7c <malloc+0xc>)
 8006d72:	4601      	mov	r1, r0
 8006d74:	6818      	ldr	r0, [r3, #0]
 8006d76:	f000 b823 	b.w	8006dc0 <_malloc_r>
 8006d7a:	bf00      	nop
 8006d7c:	20000064 	.word	0x20000064

08006d80 <sbrk_aligned>:
 8006d80:	b570      	push	{r4, r5, r6, lr}
 8006d82:	4e0e      	ldr	r6, [pc, #56]	; (8006dbc <sbrk_aligned+0x3c>)
 8006d84:	460c      	mov	r4, r1
 8006d86:	6831      	ldr	r1, [r6, #0]
 8006d88:	4605      	mov	r5, r0
 8006d8a:	b911      	cbnz	r1, 8006d92 <sbrk_aligned+0x12>
 8006d8c:	f001 ffd2 	bl	8008d34 <_sbrk_r>
 8006d90:	6030      	str	r0, [r6, #0]
 8006d92:	4621      	mov	r1, r4
 8006d94:	4628      	mov	r0, r5
 8006d96:	f001 ffcd 	bl	8008d34 <_sbrk_r>
 8006d9a:	1c43      	adds	r3, r0, #1
 8006d9c:	d00a      	beq.n	8006db4 <sbrk_aligned+0x34>
 8006d9e:	1cc4      	adds	r4, r0, #3
 8006da0:	f024 0403 	bic.w	r4, r4, #3
 8006da4:	42a0      	cmp	r0, r4
 8006da6:	d007      	beq.n	8006db8 <sbrk_aligned+0x38>
 8006da8:	1a21      	subs	r1, r4, r0
 8006daa:	4628      	mov	r0, r5
 8006dac:	f001 ffc2 	bl	8008d34 <_sbrk_r>
 8006db0:	3001      	adds	r0, #1
 8006db2:	d101      	bne.n	8006db8 <sbrk_aligned+0x38>
 8006db4:	f04f 34ff 	mov.w	r4, #4294967295
 8006db8:	4620      	mov	r0, r4
 8006dba:	bd70      	pop	{r4, r5, r6, pc}
 8006dbc:	20000628 	.word	0x20000628

08006dc0 <_malloc_r>:
 8006dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc4:	1ccd      	adds	r5, r1, #3
 8006dc6:	f025 0503 	bic.w	r5, r5, #3
 8006dca:	3508      	adds	r5, #8
 8006dcc:	2d0c      	cmp	r5, #12
 8006dce:	bf38      	it	cc
 8006dd0:	250c      	movcc	r5, #12
 8006dd2:	2d00      	cmp	r5, #0
 8006dd4:	4607      	mov	r7, r0
 8006dd6:	db01      	blt.n	8006ddc <_malloc_r+0x1c>
 8006dd8:	42a9      	cmp	r1, r5
 8006dda:	d905      	bls.n	8006de8 <_malloc_r+0x28>
 8006ddc:	230c      	movs	r3, #12
 8006dde:	2600      	movs	r6, #0
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	4630      	mov	r0, r6
 8006de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006de8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ebc <_malloc_r+0xfc>
 8006dec:	f000 f868 	bl	8006ec0 <__malloc_lock>
 8006df0:	f8d8 3000 	ldr.w	r3, [r8]
 8006df4:	461c      	mov	r4, r3
 8006df6:	bb5c      	cbnz	r4, 8006e50 <_malloc_r+0x90>
 8006df8:	4629      	mov	r1, r5
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	f7ff ffc0 	bl	8006d80 <sbrk_aligned>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	4604      	mov	r4, r0
 8006e04:	d155      	bne.n	8006eb2 <_malloc_r+0xf2>
 8006e06:	f8d8 4000 	ldr.w	r4, [r8]
 8006e0a:	4626      	mov	r6, r4
 8006e0c:	2e00      	cmp	r6, #0
 8006e0e:	d145      	bne.n	8006e9c <_malloc_r+0xdc>
 8006e10:	2c00      	cmp	r4, #0
 8006e12:	d048      	beq.n	8006ea6 <_malloc_r+0xe6>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	4631      	mov	r1, r6
 8006e18:	4638      	mov	r0, r7
 8006e1a:	eb04 0903 	add.w	r9, r4, r3
 8006e1e:	f001 ff89 	bl	8008d34 <_sbrk_r>
 8006e22:	4581      	cmp	r9, r0
 8006e24:	d13f      	bne.n	8006ea6 <_malloc_r+0xe6>
 8006e26:	6821      	ldr	r1, [r4, #0]
 8006e28:	4638      	mov	r0, r7
 8006e2a:	1a6d      	subs	r5, r5, r1
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	f7ff ffa7 	bl	8006d80 <sbrk_aligned>
 8006e32:	3001      	adds	r0, #1
 8006e34:	d037      	beq.n	8006ea6 <_malloc_r+0xe6>
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	442b      	add	r3, r5
 8006e3a:	6023      	str	r3, [r4, #0]
 8006e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d038      	beq.n	8006eb6 <_malloc_r+0xf6>
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	42a2      	cmp	r2, r4
 8006e48:	d12b      	bne.n	8006ea2 <_malloc_r+0xe2>
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	605a      	str	r2, [r3, #4]
 8006e4e:	e00f      	b.n	8006e70 <_malloc_r+0xb0>
 8006e50:	6822      	ldr	r2, [r4, #0]
 8006e52:	1b52      	subs	r2, r2, r5
 8006e54:	d41f      	bmi.n	8006e96 <_malloc_r+0xd6>
 8006e56:	2a0b      	cmp	r2, #11
 8006e58:	d917      	bls.n	8006e8a <_malloc_r+0xca>
 8006e5a:	1961      	adds	r1, r4, r5
 8006e5c:	42a3      	cmp	r3, r4
 8006e5e:	6025      	str	r5, [r4, #0]
 8006e60:	bf18      	it	ne
 8006e62:	6059      	strne	r1, [r3, #4]
 8006e64:	6863      	ldr	r3, [r4, #4]
 8006e66:	bf08      	it	eq
 8006e68:	f8c8 1000 	streq.w	r1, [r8]
 8006e6c:	5162      	str	r2, [r4, r5]
 8006e6e:	604b      	str	r3, [r1, #4]
 8006e70:	4638      	mov	r0, r7
 8006e72:	f104 060b 	add.w	r6, r4, #11
 8006e76:	f000 f829 	bl	8006ecc <__malloc_unlock>
 8006e7a:	f026 0607 	bic.w	r6, r6, #7
 8006e7e:	1d23      	adds	r3, r4, #4
 8006e80:	1af2      	subs	r2, r6, r3
 8006e82:	d0ae      	beq.n	8006de2 <_malloc_r+0x22>
 8006e84:	1b9b      	subs	r3, r3, r6
 8006e86:	50a3      	str	r3, [r4, r2]
 8006e88:	e7ab      	b.n	8006de2 <_malloc_r+0x22>
 8006e8a:	42a3      	cmp	r3, r4
 8006e8c:	6862      	ldr	r2, [r4, #4]
 8006e8e:	d1dd      	bne.n	8006e4c <_malloc_r+0x8c>
 8006e90:	f8c8 2000 	str.w	r2, [r8]
 8006e94:	e7ec      	b.n	8006e70 <_malloc_r+0xb0>
 8006e96:	4623      	mov	r3, r4
 8006e98:	6864      	ldr	r4, [r4, #4]
 8006e9a:	e7ac      	b.n	8006df6 <_malloc_r+0x36>
 8006e9c:	4634      	mov	r4, r6
 8006e9e:	6876      	ldr	r6, [r6, #4]
 8006ea0:	e7b4      	b.n	8006e0c <_malloc_r+0x4c>
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	e7cc      	b.n	8006e40 <_malloc_r+0x80>
 8006ea6:	230c      	movs	r3, #12
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	603b      	str	r3, [r7, #0]
 8006eac:	f000 f80e 	bl	8006ecc <__malloc_unlock>
 8006eb0:	e797      	b.n	8006de2 <_malloc_r+0x22>
 8006eb2:	6025      	str	r5, [r4, #0]
 8006eb4:	e7dc      	b.n	8006e70 <_malloc_r+0xb0>
 8006eb6:	605b      	str	r3, [r3, #4]
 8006eb8:	deff      	udf	#255	; 0xff
 8006eba:	bf00      	nop
 8006ebc:	20000624 	.word	0x20000624

08006ec0 <__malloc_lock>:
 8006ec0:	4801      	ldr	r0, [pc, #4]	; (8006ec8 <__malloc_lock+0x8>)
 8006ec2:	f7ff b889 	b.w	8005fd8 <__retarget_lock_acquire_recursive>
 8006ec6:	bf00      	nop
 8006ec8:	20000620 	.word	0x20000620

08006ecc <__malloc_unlock>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	; (8006ed4 <__malloc_unlock+0x8>)
 8006ece:	f7ff b884 	b.w	8005fda <__retarget_lock_release_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	20000620 	.word	0x20000620

08006ed8 <_Balloc>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	69c6      	ldr	r6, [r0, #28]
 8006edc:	4604      	mov	r4, r0
 8006ede:	460d      	mov	r5, r1
 8006ee0:	b976      	cbnz	r6, 8006f00 <_Balloc+0x28>
 8006ee2:	2010      	movs	r0, #16
 8006ee4:	f7ff ff44 	bl	8006d70 <malloc>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	61e0      	str	r0, [r4, #28]
 8006eec:	b920      	cbnz	r0, 8006ef8 <_Balloc+0x20>
 8006eee:	216b      	movs	r1, #107	; 0x6b
 8006ef0:	4b17      	ldr	r3, [pc, #92]	; (8006f50 <_Balloc+0x78>)
 8006ef2:	4818      	ldr	r0, [pc, #96]	; (8006f54 <_Balloc+0x7c>)
 8006ef4:	f001 ff42 	bl	8008d7c <__assert_func>
 8006ef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006efc:	6006      	str	r6, [r0, #0]
 8006efe:	60c6      	str	r6, [r0, #12]
 8006f00:	69e6      	ldr	r6, [r4, #28]
 8006f02:	68f3      	ldr	r3, [r6, #12]
 8006f04:	b183      	cbz	r3, 8006f28 <_Balloc+0x50>
 8006f06:	69e3      	ldr	r3, [r4, #28]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f0e:	b9b8      	cbnz	r0, 8006f40 <_Balloc+0x68>
 8006f10:	2101      	movs	r1, #1
 8006f12:	fa01 f605 	lsl.w	r6, r1, r5
 8006f16:	1d72      	adds	r2, r6, #5
 8006f18:	4620      	mov	r0, r4
 8006f1a:	0092      	lsls	r2, r2, #2
 8006f1c:	f001 ff4c 	bl	8008db8 <_calloc_r>
 8006f20:	b160      	cbz	r0, 8006f3c <_Balloc+0x64>
 8006f22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f26:	e00e      	b.n	8006f46 <_Balloc+0x6e>
 8006f28:	2221      	movs	r2, #33	; 0x21
 8006f2a:	2104      	movs	r1, #4
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f001 ff43 	bl	8008db8 <_calloc_r>
 8006f32:	69e3      	ldr	r3, [r4, #28]
 8006f34:	60f0      	str	r0, [r6, #12]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e4      	bne.n	8006f06 <_Balloc+0x2e>
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	6802      	ldr	r2, [r0, #0]
 8006f42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f46:	2300      	movs	r3, #0
 8006f48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f4c:	e7f7      	b.n	8006f3e <_Balloc+0x66>
 8006f4e:	bf00      	nop
 8006f50:	08009720 	.word	0x08009720
 8006f54:	080097a0 	.word	0x080097a0

08006f58 <_Bfree>:
 8006f58:	b570      	push	{r4, r5, r6, lr}
 8006f5a:	69c6      	ldr	r6, [r0, #28]
 8006f5c:	4605      	mov	r5, r0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	b976      	cbnz	r6, 8006f80 <_Bfree+0x28>
 8006f62:	2010      	movs	r0, #16
 8006f64:	f7ff ff04 	bl	8006d70 <malloc>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	61e8      	str	r0, [r5, #28]
 8006f6c:	b920      	cbnz	r0, 8006f78 <_Bfree+0x20>
 8006f6e:	218f      	movs	r1, #143	; 0x8f
 8006f70:	4b08      	ldr	r3, [pc, #32]	; (8006f94 <_Bfree+0x3c>)
 8006f72:	4809      	ldr	r0, [pc, #36]	; (8006f98 <_Bfree+0x40>)
 8006f74:	f001 ff02 	bl	8008d7c <__assert_func>
 8006f78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f7c:	6006      	str	r6, [r0, #0]
 8006f7e:	60c6      	str	r6, [r0, #12]
 8006f80:	b13c      	cbz	r4, 8006f92 <_Bfree+0x3a>
 8006f82:	69eb      	ldr	r3, [r5, #28]
 8006f84:	6862      	ldr	r2, [r4, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f8c:	6021      	str	r1, [r4, #0]
 8006f8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f92:	bd70      	pop	{r4, r5, r6, pc}
 8006f94:	08009720 	.word	0x08009720
 8006f98:	080097a0 	.word	0x080097a0

08006f9c <__multadd>:
 8006f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	461e      	mov	r6, r3
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	690d      	ldr	r5, [r1, #16]
 8006faa:	f101 0c14 	add.w	ip, r1, #20
 8006fae:	f8dc 3000 	ldr.w	r3, [ip]
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	b299      	uxth	r1, r3
 8006fb6:	fb02 6101 	mla	r1, r2, r1, r6
 8006fba:	0c1e      	lsrs	r6, r3, #16
 8006fbc:	0c0b      	lsrs	r3, r1, #16
 8006fbe:	fb02 3306 	mla	r3, r2, r6, r3
 8006fc2:	b289      	uxth	r1, r1
 8006fc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fc8:	4285      	cmp	r5, r0
 8006fca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006fce:	f84c 1b04 	str.w	r1, [ip], #4
 8006fd2:	dcec      	bgt.n	8006fae <__multadd+0x12>
 8006fd4:	b30e      	cbz	r6, 800701a <__multadd+0x7e>
 8006fd6:	68a3      	ldr	r3, [r4, #8]
 8006fd8:	42ab      	cmp	r3, r5
 8006fda:	dc19      	bgt.n	8007010 <__multadd+0x74>
 8006fdc:	6861      	ldr	r1, [r4, #4]
 8006fde:	4638      	mov	r0, r7
 8006fe0:	3101      	adds	r1, #1
 8006fe2:	f7ff ff79 	bl	8006ed8 <_Balloc>
 8006fe6:	4680      	mov	r8, r0
 8006fe8:	b928      	cbnz	r0, 8006ff6 <__multadd+0x5a>
 8006fea:	4602      	mov	r2, r0
 8006fec:	21ba      	movs	r1, #186	; 0xba
 8006fee:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <__multadd+0x84>)
 8006ff0:	480c      	ldr	r0, [pc, #48]	; (8007024 <__multadd+0x88>)
 8006ff2:	f001 fec3 	bl	8008d7c <__assert_func>
 8006ff6:	6922      	ldr	r2, [r4, #16]
 8006ff8:	f104 010c 	add.w	r1, r4, #12
 8006ffc:	3202      	adds	r2, #2
 8006ffe:	0092      	lsls	r2, r2, #2
 8007000:	300c      	adds	r0, #12
 8007002:	f001 fea7 	bl	8008d54 <memcpy>
 8007006:	4621      	mov	r1, r4
 8007008:	4638      	mov	r0, r7
 800700a:	f7ff ffa5 	bl	8006f58 <_Bfree>
 800700e:	4644      	mov	r4, r8
 8007010:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007014:	3501      	adds	r5, #1
 8007016:	615e      	str	r6, [r3, #20]
 8007018:	6125      	str	r5, [r4, #16]
 800701a:	4620      	mov	r0, r4
 800701c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007020:	0800978f 	.word	0x0800978f
 8007024:	080097a0 	.word	0x080097a0

08007028 <__s2b>:
 8007028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800702c:	4615      	mov	r5, r2
 800702e:	2209      	movs	r2, #9
 8007030:	461f      	mov	r7, r3
 8007032:	3308      	adds	r3, #8
 8007034:	460c      	mov	r4, r1
 8007036:	fb93 f3f2 	sdiv	r3, r3, r2
 800703a:	4606      	mov	r6, r0
 800703c:	2201      	movs	r2, #1
 800703e:	2100      	movs	r1, #0
 8007040:	429a      	cmp	r2, r3
 8007042:	db09      	blt.n	8007058 <__s2b+0x30>
 8007044:	4630      	mov	r0, r6
 8007046:	f7ff ff47 	bl	8006ed8 <_Balloc>
 800704a:	b940      	cbnz	r0, 800705e <__s2b+0x36>
 800704c:	4602      	mov	r2, r0
 800704e:	21d3      	movs	r1, #211	; 0xd3
 8007050:	4b18      	ldr	r3, [pc, #96]	; (80070b4 <__s2b+0x8c>)
 8007052:	4819      	ldr	r0, [pc, #100]	; (80070b8 <__s2b+0x90>)
 8007054:	f001 fe92 	bl	8008d7c <__assert_func>
 8007058:	0052      	lsls	r2, r2, #1
 800705a:	3101      	adds	r1, #1
 800705c:	e7f0      	b.n	8007040 <__s2b+0x18>
 800705e:	9b08      	ldr	r3, [sp, #32]
 8007060:	2d09      	cmp	r5, #9
 8007062:	6143      	str	r3, [r0, #20]
 8007064:	f04f 0301 	mov.w	r3, #1
 8007068:	6103      	str	r3, [r0, #16]
 800706a:	dd16      	ble.n	800709a <__s2b+0x72>
 800706c:	f104 0909 	add.w	r9, r4, #9
 8007070:	46c8      	mov	r8, r9
 8007072:	442c      	add	r4, r5
 8007074:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007078:	4601      	mov	r1, r0
 800707a:	220a      	movs	r2, #10
 800707c:	4630      	mov	r0, r6
 800707e:	3b30      	subs	r3, #48	; 0x30
 8007080:	f7ff ff8c 	bl	8006f9c <__multadd>
 8007084:	45a0      	cmp	r8, r4
 8007086:	d1f5      	bne.n	8007074 <__s2b+0x4c>
 8007088:	f1a5 0408 	sub.w	r4, r5, #8
 800708c:	444c      	add	r4, r9
 800708e:	1b2d      	subs	r5, r5, r4
 8007090:	1963      	adds	r3, r4, r5
 8007092:	42bb      	cmp	r3, r7
 8007094:	db04      	blt.n	80070a0 <__s2b+0x78>
 8007096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800709a:	2509      	movs	r5, #9
 800709c:	340a      	adds	r4, #10
 800709e:	e7f6      	b.n	800708e <__s2b+0x66>
 80070a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80070a4:	4601      	mov	r1, r0
 80070a6:	220a      	movs	r2, #10
 80070a8:	4630      	mov	r0, r6
 80070aa:	3b30      	subs	r3, #48	; 0x30
 80070ac:	f7ff ff76 	bl	8006f9c <__multadd>
 80070b0:	e7ee      	b.n	8007090 <__s2b+0x68>
 80070b2:	bf00      	nop
 80070b4:	0800978f 	.word	0x0800978f
 80070b8:	080097a0 	.word	0x080097a0

080070bc <__hi0bits>:
 80070bc:	0c02      	lsrs	r2, r0, #16
 80070be:	0412      	lsls	r2, r2, #16
 80070c0:	4603      	mov	r3, r0
 80070c2:	b9ca      	cbnz	r2, 80070f8 <__hi0bits+0x3c>
 80070c4:	0403      	lsls	r3, r0, #16
 80070c6:	2010      	movs	r0, #16
 80070c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80070cc:	bf04      	itt	eq
 80070ce:	021b      	lsleq	r3, r3, #8
 80070d0:	3008      	addeq	r0, #8
 80070d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80070d6:	bf04      	itt	eq
 80070d8:	011b      	lsleq	r3, r3, #4
 80070da:	3004      	addeq	r0, #4
 80070dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80070e0:	bf04      	itt	eq
 80070e2:	009b      	lsleq	r3, r3, #2
 80070e4:	3002      	addeq	r0, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	db05      	blt.n	80070f6 <__hi0bits+0x3a>
 80070ea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80070ee:	f100 0001 	add.w	r0, r0, #1
 80070f2:	bf08      	it	eq
 80070f4:	2020      	moveq	r0, #32
 80070f6:	4770      	bx	lr
 80070f8:	2000      	movs	r0, #0
 80070fa:	e7e5      	b.n	80070c8 <__hi0bits+0xc>

080070fc <__lo0bits>:
 80070fc:	6803      	ldr	r3, [r0, #0]
 80070fe:	4602      	mov	r2, r0
 8007100:	f013 0007 	ands.w	r0, r3, #7
 8007104:	d00b      	beq.n	800711e <__lo0bits+0x22>
 8007106:	07d9      	lsls	r1, r3, #31
 8007108:	d421      	bmi.n	800714e <__lo0bits+0x52>
 800710a:	0798      	lsls	r0, r3, #30
 800710c:	bf49      	itett	mi
 800710e:	085b      	lsrmi	r3, r3, #1
 8007110:	089b      	lsrpl	r3, r3, #2
 8007112:	2001      	movmi	r0, #1
 8007114:	6013      	strmi	r3, [r2, #0]
 8007116:	bf5c      	itt	pl
 8007118:	2002      	movpl	r0, #2
 800711a:	6013      	strpl	r3, [r2, #0]
 800711c:	4770      	bx	lr
 800711e:	b299      	uxth	r1, r3
 8007120:	b909      	cbnz	r1, 8007126 <__lo0bits+0x2a>
 8007122:	2010      	movs	r0, #16
 8007124:	0c1b      	lsrs	r3, r3, #16
 8007126:	b2d9      	uxtb	r1, r3
 8007128:	b909      	cbnz	r1, 800712e <__lo0bits+0x32>
 800712a:	3008      	adds	r0, #8
 800712c:	0a1b      	lsrs	r3, r3, #8
 800712e:	0719      	lsls	r1, r3, #28
 8007130:	bf04      	itt	eq
 8007132:	091b      	lsreq	r3, r3, #4
 8007134:	3004      	addeq	r0, #4
 8007136:	0799      	lsls	r1, r3, #30
 8007138:	bf04      	itt	eq
 800713a:	089b      	lsreq	r3, r3, #2
 800713c:	3002      	addeq	r0, #2
 800713e:	07d9      	lsls	r1, r3, #31
 8007140:	d403      	bmi.n	800714a <__lo0bits+0x4e>
 8007142:	085b      	lsrs	r3, r3, #1
 8007144:	f100 0001 	add.w	r0, r0, #1
 8007148:	d003      	beq.n	8007152 <__lo0bits+0x56>
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	4770      	bx	lr
 800714e:	2000      	movs	r0, #0
 8007150:	4770      	bx	lr
 8007152:	2020      	movs	r0, #32
 8007154:	4770      	bx	lr
	...

08007158 <__i2b>:
 8007158:	b510      	push	{r4, lr}
 800715a:	460c      	mov	r4, r1
 800715c:	2101      	movs	r1, #1
 800715e:	f7ff febb 	bl	8006ed8 <_Balloc>
 8007162:	4602      	mov	r2, r0
 8007164:	b928      	cbnz	r0, 8007172 <__i2b+0x1a>
 8007166:	f240 1145 	movw	r1, #325	; 0x145
 800716a:	4b04      	ldr	r3, [pc, #16]	; (800717c <__i2b+0x24>)
 800716c:	4804      	ldr	r0, [pc, #16]	; (8007180 <__i2b+0x28>)
 800716e:	f001 fe05 	bl	8008d7c <__assert_func>
 8007172:	2301      	movs	r3, #1
 8007174:	6144      	str	r4, [r0, #20]
 8007176:	6103      	str	r3, [r0, #16]
 8007178:	bd10      	pop	{r4, pc}
 800717a:	bf00      	nop
 800717c:	0800978f 	.word	0x0800978f
 8007180:	080097a0 	.word	0x080097a0

08007184 <__multiply>:
 8007184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007188:	4691      	mov	r9, r2
 800718a:	690a      	ldr	r2, [r1, #16]
 800718c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007190:	460c      	mov	r4, r1
 8007192:	429a      	cmp	r2, r3
 8007194:	bfbe      	ittt	lt
 8007196:	460b      	movlt	r3, r1
 8007198:	464c      	movlt	r4, r9
 800719a:	4699      	movlt	r9, r3
 800719c:	6927      	ldr	r7, [r4, #16]
 800719e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80071a2:	68a3      	ldr	r3, [r4, #8]
 80071a4:	6861      	ldr	r1, [r4, #4]
 80071a6:	eb07 060a 	add.w	r6, r7, sl
 80071aa:	42b3      	cmp	r3, r6
 80071ac:	b085      	sub	sp, #20
 80071ae:	bfb8      	it	lt
 80071b0:	3101      	addlt	r1, #1
 80071b2:	f7ff fe91 	bl	8006ed8 <_Balloc>
 80071b6:	b930      	cbnz	r0, 80071c6 <__multiply+0x42>
 80071b8:	4602      	mov	r2, r0
 80071ba:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80071be:	4b43      	ldr	r3, [pc, #268]	; (80072cc <__multiply+0x148>)
 80071c0:	4843      	ldr	r0, [pc, #268]	; (80072d0 <__multiply+0x14c>)
 80071c2:	f001 fddb 	bl	8008d7c <__assert_func>
 80071c6:	f100 0514 	add.w	r5, r0, #20
 80071ca:	462b      	mov	r3, r5
 80071cc:	2200      	movs	r2, #0
 80071ce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071d2:	4543      	cmp	r3, r8
 80071d4:	d321      	bcc.n	800721a <__multiply+0x96>
 80071d6:	f104 0314 	add.w	r3, r4, #20
 80071da:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071de:	f109 0314 	add.w	r3, r9, #20
 80071e2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071e6:	9202      	str	r2, [sp, #8]
 80071e8:	1b3a      	subs	r2, r7, r4
 80071ea:	3a15      	subs	r2, #21
 80071ec:	f022 0203 	bic.w	r2, r2, #3
 80071f0:	3204      	adds	r2, #4
 80071f2:	f104 0115 	add.w	r1, r4, #21
 80071f6:	428f      	cmp	r7, r1
 80071f8:	bf38      	it	cc
 80071fa:	2204      	movcc	r2, #4
 80071fc:	9201      	str	r2, [sp, #4]
 80071fe:	9a02      	ldr	r2, [sp, #8]
 8007200:	9303      	str	r3, [sp, #12]
 8007202:	429a      	cmp	r2, r3
 8007204:	d80c      	bhi.n	8007220 <__multiply+0x9c>
 8007206:	2e00      	cmp	r6, #0
 8007208:	dd03      	ble.n	8007212 <__multiply+0x8e>
 800720a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800720e:	2b00      	cmp	r3, #0
 8007210:	d05a      	beq.n	80072c8 <__multiply+0x144>
 8007212:	6106      	str	r6, [r0, #16]
 8007214:	b005      	add	sp, #20
 8007216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721a:	f843 2b04 	str.w	r2, [r3], #4
 800721e:	e7d8      	b.n	80071d2 <__multiply+0x4e>
 8007220:	f8b3 a000 	ldrh.w	sl, [r3]
 8007224:	f1ba 0f00 	cmp.w	sl, #0
 8007228:	d023      	beq.n	8007272 <__multiply+0xee>
 800722a:	46a9      	mov	r9, r5
 800722c:	f04f 0c00 	mov.w	ip, #0
 8007230:	f104 0e14 	add.w	lr, r4, #20
 8007234:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007238:	f8d9 1000 	ldr.w	r1, [r9]
 800723c:	fa1f fb82 	uxth.w	fp, r2
 8007240:	b289      	uxth	r1, r1
 8007242:	fb0a 110b 	mla	r1, sl, fp, r1
 8007246:	4461      	add	r1, ip
 8007248:	f8d9 c000 	ldr.w	ip, [r9]
 800724c:	0c12      	lsrs	r2, r2, #16
 800724e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007252:	fb0a c202 	mla	r2, sl, r2, ip
 8007256:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800725a:	b289      	uxth	r1, r1
 800725c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007260:	4577      	cmp	r7, lr
 8007262:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007266:	f849 1b04 	str.w	r1, [r9], #4
 800726a:	d8e3      	bhi.n	8007234 <__multiply+0xb0>
 800726c:	9a01      	ldr	r2, [sp, #4]
 800726e:	f845 c002 	str.w	ip, [r5, r2]
 8007272:	9a03      	ldr	r2, [sp, #12]
 8007274:	3304      	adds	r3, #4
 8007276:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800727a:	f1b9 0f00 	cmp.w	r9, #0
 800727e:	d021      	beq.n	80072c4 <__multiply+0x140>
 8007280:	46ae      	mov	lr, r5
 8007282:	f04f 0a00 	mov.w	sl, #0
 8007286:	6829      	ldr	r1, [r5, #0]
 8007288:	f104 0c14 	add.w	ip, r4, #20
 800728c:	f8bc b000 	ldrh.w	fp, [ip]
 8007290:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007294:	b289      	uxth	r1, r1
 8007296:	fb09 220b 	mla	r2, r9, fp, r2
 800729a:	4452      	add	r2, sl
 800729c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072a0:	f84e 1b04 	str.w	r1, [lr], #4
 80072a4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80072a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072ac:	f8be 1000 	ldrh.w	r1, [lr]
 80072b0:	4567      	cmp	r7, ip
 80072b2:	fb09 110a 	mla	r1, r9, sl, r1
 80072b6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80072ba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072be:	d8e5      	bhi.n	800728c <__multiply+0x108>
 80072c0:	9a01      	ldr	r2, [sp, #4]
 80072c2:	50a9      	str	r1, [r5, r2]
 80072c4:	3504      	adds	r5, #4
 80072c6:	e79a      	b.n	80071fe <__multiply+0x7a>
 80072c8:	3e01      	subs	r6, #1
 80072ca:	e79c      	b.n	8007206 <__multiply+0x82>
 80072cc:	0800978f 	.word	0x0800978f
 80072d0:	080097a0 	.word	0x080097a0

080072d4 <__pow5mult>:
 80072d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072d8:	4615      	mov	r5, r2
 80072da:	f012 0203 	ands.w	r2, r2, #3
 80072de:	4606      	mov	r6, r0
 80072e0:	460f      	mov	r7, r1
 80072e2:	d007      	beq.n	80072f4 <__pow5mult+0x20>
 80072e4:	4c25      	ldr	r4, [pc, #148]	; (800737c <__pow5mult+0xa8>)
 80072e6:	3a01      	subs	r2, #1
 80072e8:	2300      	movs	r3, #0
 80072ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072ee:	f7ff fe55 	bl	8006f9c <__multadd>
 80072f2:	4607      	mov	r7, r0
 80072f4:	10ad      	asrs	r5, r5, #2
 80072f6:	d03d      	beq.n	8007374 <__pow5mult+0xa0>
 80072f8:	69f4      	ldr	r4, [r6, #28]
 80072fa:	b97c      	cbnz	r4, 800731c <__pow5mult+0x48>
 80072fc:	2010      	movs	r0, #16
 80072fe:	f7ff fd37 	bl	8006d70 <malloc>
 8007302:	4602      	mov	r2, r0
 8007304:	61f0      	str	r0, [r6, #28]
 8007306:	b928      	cbnz	r0, 8007314 <__pow5mult+0x40>
 8007308:	f240 11b3 	movw	r1, #435	; 0x1b3
 800730c:	4b1c      	ldr	r3, [pc, #112]	; (8007380 <__pow5mult+0xac>)
 800730e:	481d      	ldr	r0, [pc, #116]	; (8007384 <__pow5mult+0xb0>)
 8007310:	f001 fd34 	bl	8008d7c <__assert_func>
 8007314:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007318:	6004      	str	r4, [r0, #0]
 800731a:	60c4      	str	r4, [r0, #12]
 800731c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007320:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007324:	b94c      	cbnz	r4, 800733a <__pow5mult+0x66>
 8007326:	f240 2171 	movw	r1, #625	; 0x271
 800732a:	4630      	mov	r0, r6
 800732c:	f7ff ff14 	bl	8007158 <__i2b>
 8007330:	2300      	movs	r3, #0
 8007332:	4604      	mov	r4, r0
 8007334:	f8c8 0008 	str.w	r0, [r8, #8]
 8007338:	6003      	str	r3, [r0, #0]
 800733a:	f04f 0900 	mov.w	r9, #0
 800733e:	07eb      	lsls	r3, r5, #31
 8007340:	d50a      	bpl.n	8007358 <__pow5mult+0x84>
 8007342:	4639      	mov	r1, r7
 8007344:	4622      	mov	r2, r4
 8007346:	4630      	mov	r0, r6
 8007348:	f7ff ff1c 	bl	8007184 <__multiply>
 800734c:	4680      	mov	r8, r0
 800734e:	4639      	mov	r1, r7
 8007350:	4630      	mov	r0, r6
 8007352:	f7ff fe01 	bl	8006f58 <_Bfree>
 8007356:	4647      	mov	r7, r8
 8007358:	106d      	asrs	r5, r5, #1
 800735a:	d00b      	beq.n	8007374 <__pow5mult+0xa0>
 800735c:	6820      	ldr	r0, [r4, #0]
 800735e:	b938      	cbnz	r0, 8007370 <__pow5mult+0x9c>
 8007360:	4622      	mov	r2, r4
 8007362:	4621      	mov	r1, r4
 8007364:	4630      	mov	r0, r6
 8007366:	f7ff ff0d 	bl	8007184 <__multiply>
 800736a:	6020      	str	r0, [r4, #0]
 800736c:	f8c0 9000 	str.w	r9, [r0]
 8007370:	4604      	mov	r4, r0
 8007372:	e7e4      	b.n	800733e <__pow5mult+0x6a>
 8007374:	4638      	mov	r0, r7
 8007376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800737a:	bf00      	nop
 800737c:	080098f0 	.word	0x080098f0
 8007380:	08009720 	.word	0x08009720
 8007384:	080097a0 	.word	0x080097a0

08007388 <__lshift>:
 8007388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800738c:	460c      	mov	r4, r1
 800738e:	4607      	mov	r7, r0
 8007390:	4691      	mov	r9, r2
 8007392:	6923      	ldr	r3, [r4, #16]
 8007394:	6849      	ldr	r1, [r1, #4]
 8007396:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800739a:	68a3      	ldr	r3, [r4, #8]
 800739c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073a0:	f108 0601 	add.w	r6, r8, #1
 80073a4:	42b3      	cmp	r3, r6
 80073a6:	db0b      	blt.n	80073c0 <__lshift+0x38>
 80073a8:	4638      	mov	r0, r7
 80073aa:	f7ff fd95 	bl	8006ed8 <_Balloc>
 80073ae:	4605      	mov	r5, r0
 80073b0:	b948      	cbnz	r0, 80073c6 <__lshift+0x3e>
 80073b2:	4602      	mov	r2, r0
 80073b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80073b8:	4b27      	ldr	r3, [pc, #156]	; (8007458 <__lshift+0xd0>)
 80073ba:	4828      	ldr	r0, [pc, #160]	; (800745c <__lshift+0xd4>)
 80073bc:	f001 fcde 	bl	8008d7c <__assert_func>
 80073c0:	3101      	adds	r1, #1
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	e7ee      	b.n	80073a4 <__lshift+0x1c>
 80073c6:	2300      	movs	r3, #0
 80073c8:	f100 0114 	add.w	r1, r0, #20
 80073cc:	f100 0210 	add.w	r2, r0, #16
 80073d0:	4618      	mov	r0, r3
 80073d2:	4553      	cmp	r3, sl
 80073d4:	db33      	blt.n	800743e <__lshift+0xb6>
 80073d6:	6920      	ldr	r0, [r4, #16]
 80073d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073dc:	f104 0314 	add.w	r3, r4, #20
 80073e0:	f019 091f 	ands.w	r9, r9, #31
 80073e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073ec:	d02b      	beq.n	8007446 <__lshift+0xbe>
 80073ee:	468a      	mov	sl, r1
 80073f0:	2200      	movs	r2, #0
 80073f2:	f1c9 0e20 	rsb	lr, r9, #32
 80073f6:	6818      	ldr	r0, [r3, #0]
 80073f8:	fa00 f009 	lsl.w	r0, r0, r9
 80073fc:	4310      	orrs	r0, r2
 80073fe:	f84a 0b04 	str.w	r0, [sl], #4
 8007402:	f853 2b04 	ldr.w	r2, [r3], #4
 8007406:	459c      	cmp	ip, r3
 8007408:	fa22 f20e 	lsr.w	r2, r2, lr
 800740c:	d8f3      	bhi.n	80073f6 <__lshift+0x6e>
 800740e:	ebac 0304 	sub.w	r3, ip, r4
 8007412:	3b15      	subs	r3, #21
 8007414:	f023 0303 	bic.w	r3, r3, #3
 8007418:	3304      	adds	r3, #4
 800741a:	f104 0015 	add.w	r0, r4, #21
 800741e:	4584      	cmp	ip, r0
 8007420:	bf38      	it	cc
 8007422:	2304      	movcc	r3, #4
 8007424:	50ca      	str	r2, [r1, r3]
 8007426:	b10a      	cbz	r2, 800742c <__lshift+0xa4>
 8007428:	f108 0602 	add.w	r6, r8, #2
 800742c:	3e01      	subs	r6, #1
 800742e:	4638      	mov	r0, r7
 8007430:	4621      	mov	r1, r4
 8007432:	612e      	str	r6, [r5, #16]
 8007434:	f7ff fd90 	bl	8006f58 <_Bfree>
 8007438:	4628      	mov	r0, r5
 800743a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800743e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007442:	3301      	adds	r3, #1
 8007444:	e7c5      	b.n	80073d2 <__lshift+0x4a>
 8007446:	3904      	subs	r1, #4
 8007448:	f853 2b04 	ldr.w	r2, [r3], #4
 800744c:	459c      	cmp	ip, r3
 800744e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007452:	d8f9      	bhi.n	8007448 <__lshift+0xc0>
 8007454:	e7ea      	b.n	800742c <__lshift+0xa4>
 8007456:	bf00      	nop
 8007458:	0800978f 	.word	0x0800978f
 800745c:	080097a0 	.word	0x080097a0

08007460 <__mcmp>:
 8007460:	4603      	mov	r3, r0
 8007462:	690a      	ldr	r2, [r1, #16]
 8007464:	6900      	ldr	r0, [r0, #16]
 8007466:	b530      	push	{r4, r5, lr}
 8007468:	1a80      	subs	r0, r0, r2
 800746a:	d10d      	bne.n	8007488 <__mcmp+0x28>
 800746c:	3314      	adds	r3, #20
 800746e:	3114      	adds	r1, #20
 8007470:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007474:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007478:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800747c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007480:	4295      	cmp	r5, r2
 8007482:	d002      	beq.n	800748a <__mcmp+0x2a>
 8007484:	d304      	bcc.n	8007490 <__mcmp+0x30>
 8007486:	2001      	movs	r0, #1
 8007488:	bd30      	pop	{r4, r5, pc}
 800748a:	42a3      	cmp	r3, r4
 800748c:	d3f4      	bcc.n	8007478 <__mcmp+0x18>
 800748e:	e7fb      	b.n	8007488 <__mcmp+0x28>
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
 8007494:	e7f8      	b.n	8007488 <__mcmp+0x28>
	...

08007498 <__mdiff>:
 8007498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749c:	460d      	mov	r5, r1
 800749e:	4607      	mov	r7, r0
 80074a0:	4611      	mov	r1, r2
 80074a2:	4628      	mov	r0, r5
 80074a4:	4614      	mov	r4, r2
 80074a6:	f7ff ffdb 	bl	8007460 <__mcmp>
 80074aa:	1e06      	subs	r6, r0, #0
 80074ac:	d111      	bne.n	80074d2 <__mdiff+0x3a>
 80074ae:	4631      	mov	r1, r6
 80074b0:	4638      	mov	r0, r7
 80074b2:	f7ff fd11 	bl	8006ed8 <_Balloc>
 80074b6:	4602      	mov	r2, r0
 80074b8:	b928      	cbnz	r0, 80074c6 <__mdiff+0x2e>
 80074ba:	f240 2137 	movw	r1, #567	; 0x237
 80074be:	4b3a      	ldr	r3, [pc, #232]	; (80075a8 <__mdiff+0x110>)
 80074c0:	483a      	ldr	r0, [pc, #232]	; (80075ac <__mdiff+0x114>)
 80074c2:	f001 fc5b 	bl	8008d7c <__assert_func>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80074cc:	4610      	mov	r0, r2
 80074ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d2:	bfa4      	itt	ge
 80074d4:	4623      	movge	r3, r4
 80074d6:	462c      	movge	r4, r5
 80074d8:	4638      	mov	r0, r7
 80074da:	6861      	ldr	r1, [r4, #4]
 80074dc:	bfa6      	itte	ge
 80074de:	461d      	movge	r5, r3
 80074e0:	2600      	movge	r6, #0
 80074e2:	2601      	movlt	r6, #1
 80074e4:	f7ff fcf8 	bl	8006ed8 <_Balloc>
 80074e8:	4602      	mov	r2, r0
 80074ea:	b918      	cbnz	r0, 80074f4 <__mdiff+0x5c>
 80074ec:	f240 2145 	movw	r1, #581	; 0x245
 80074f0:	4b2d      	ldr	r3, [pc, #180]	; (80075a8 <__mdiff+0x110>)
 80074f2:	e7e5      	b.n	80074c0 <__mdiff+0x28>
 80074f4:	f102 0814 	add.w	r8, r2, #20
 80074f8:	46c2      	mov	sl, r8
 80074fa:	f04f 0c00 	mov.w	ip, #0
 80074fe:	6927      	ldr	r7, [r4, #16]
 8007500:	60c6      	str	r6, [r0, #12]
 8007502:	692e      	ldr	r6, [r5, #16]
 8007504:	f104 0014 	add.w	r0, r4, #20
 8007508:	f105 0914 	add.w	r9, r5, #20
 800750c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007510:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007514:	3410      	adds	r4, #16
 8007516:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800751a:	f859 3b04 	ldr.w	r3, [r9], #4
 800751e:	fa1f f18b 	uxth.w	r1, fp
 8007522:	4461      	add	r1, ip
 8007524:	fa1f fc83 	uxth.w	ip, r3
 8007528:	0c1b      	lsrs	r3, r3, #16
 800752a:	eba1 010c 	sub.w	r1, r1, ip
 800752e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007532:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007536:	b289      	uxth	r1, r1
 8007538:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800753c:	454e      	cmp	r6, r9
 800753e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007542:	f84a 1b04 	str.w	r1, [sl], #4
 8007546:	d8e6      	bhi.n	8007516 <__mdiff+0x7e>
 8007548:	1b73      	subs	r3, r6, r5
 800754a:	3b15      	subs	r3, #21
 800754c:	f023 0303 	bic.w	r3, r3, #3
 8007550:	3515      	adds	r5, #21
 8007552:	3304      	adds	r3, #4
 8007554:	42ae      	cmp	r6, r5
 8007556:	bf38      	it	cc
 8007558:	2304      	movcc	r3, #4
 800755a:	4418      	add	r0, r3
 800755c:	4443      	add	r3, r8
 800755e:	461e      	mov	r6, r3
 8007560:	4605      	mov	r5, r0
 8007562:	4575      	cmp	r5, lr
 8007564:	d30e      	bcc.n	8007584 <__mdiff+0xec>
 8007566:	f10e 0103 	add.w	r1, lr, #3
 800756a:	1a09      	subs	r1, r1, r0
 800756c:	f021 0103 	bic.w	r1, r1, #3
 8007570:	3803      	subs	r0, #3
 8007572:	4586      	cmp	lr, r0
 8007574:	bf38      	it	cc
 8007576:	2100      	movcc	r1, #0
 8007578:	440b      	add	r3, r1
 800757a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800757e:	b189      	cbz	r1, 80075a4 <__mdiff+0x10c>
 8007580:	6117      	str	r7, [r2, #16]
 8007582:	e7a3      	b.n	80074cc <__mdiff+0x34>
 8007584:	f855 8b04 	ldr.w	r8, [r5], #4
 8007588:	fa1f f188 	uxth.w	r1, r8
 800758c:	4461      	add	r1, ip
 800758e:	140c      	asrs	r4, r1, #16
 8007590:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007594:	b289      	uxth	r1, r1
 8007596:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800759a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800759e:	f846 1b04 	str.w	r1, [r6], #4
 80075a2:	e7de      	b.n	8007562 <__mdiff+0xca>
 80075a4:	3f01      	subs	r7, #1
 80075a6:	e7e8      	b.n	800757a <__mdiff+0xe2>
 80075a8:	0800978f 	.word	0x0800978f
 80075ac:	080097a0 	.word	0x080097a0

080075b0 <__ulp>:
 80075b0:	4b0e      	ldr	r3, [pc, #56]	; (80075ec <__ulp+0x3c>)
 80075b2:	400b      	ands	r3, r1
 80075b4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	dc08      	bgt.n	80075ce <__ulp+0x1e>
 80075bc:	425b      	negs	r3, r3
 80075be:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80075c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80075c6:	da04      	bge.n	80075d2 <__ulp+0x22>
 80075c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80075cc:	4113      	asrs	r3, r2
 80075ce:	2200      	movs	r2, #0
 80075d0:	e008      	b.n	80075e4 <__ulp+0x34>
 80075d2:	f1a2 0314 	sub.w	r3, r2, #20
 80075d6:	2b1e      	cmp	r3, #30
 80075d8:	bfd6      	itet	le
 80075da:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80075de:	2201      	movgt	r2, #1
 80075e0:	40da      	lsrle	r2, r3
 80075e2:	2300      	movs	r3, #0
 80075e4:	4619      	mov	r1, r3
 80075e6:	4610      	mov	r0, r2
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	7ff00000 	.word	0x7ff00000

080075f0 <__b2d>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	6905      	ldr	r5, [r0, #16]
 80075f4:	f100 0714 	add.w	r7, r0, #20
 80075f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80075fc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007600:	1f2e      	subs	r6, r5, #4
 8007602:	4620      	mov	r0, r4
 8007604:	f7ff fd5a 	bl	80070bc <__hi0bits>
 8007608:	f1c0 0220 	rsb	r2, r0, #32
 800760c:	280a      	cmp	r0, #10
 800760e:	4603      	mov	r3, r0
 8007610:	f8df c068 	ldr.w	ip, [pc, #104]	; 800767c <__b2d+0x8c>
 8007614:	600a      	str	r2, [r1, #0]
 8007616:	dc12      	bgt.n	800763e <__b2d+0x4e>
 8007618:	f1c0 0e0b 	rsb	lr, r0, #11
 800761c:	fa24 f20e 	lsr.w	r2, r4, lr
 8007620:	42b7      	cmp	r7, r6
 8007622:	ea42 010c 	orr.w	r1, r2, ip
 8007626:	bf2c      	ite	cs
 8007628:	2200      	movcs	r2, #0
 800762a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800762e:	3315      	adds	r3, #21
 8007630:	fa04 f303 	lsl.w	r3, r4, r3
 8007634:	fa22 f20e 	lsr.w	r2, r2, lr
 8007638:	431a      	orrs	r2, r3
 800763a:	4610      	mov	r0, r2
 800763c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800763e:	42b7      	cmp	r7, r6
 8007640:	bf2e      	itee	cs
 8007642:	2200      	movcs	r2, #0
 8007644:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007648:	f1a5 0608 	subcc.w	r6, r5, #8
 800764c:	3b0b      	subs	r3, #11
 800764e:	d012      	beq.n	8007676 <__b2d+0x86>
 8007650:	f1c3 0520 	rsb	r5, r3, #32
 8007654:	fa22 f105 	lsr.w	r1, r2, r5
 8007658:	409c      	lsls	r4, r3
 800765a:	430c      	orrs	r4, r1
 800765c:	42be      	cmp	r6, r7
 800765e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007662:	bf94      	ite	ls
 8007664:	2400      	movls	r4, #0
 8007666:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800766a:	409a      	lsls	r2, r3
 800766c:	40ec      	lsrs	r4, r5
 800766e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007672:	4322      	orrs	r2, r4
 8007674:	e7e1      	b.n	800763a <__b2d+0x4a>
 8007676:	ea44 010c 	orr.w	r1, r4, ip
 800767a:	e7de      	b.n	800763a <__b2d+0x4a>
 800767c:	3ff00000 	.word	0x3ff00000

08007680 <__d2b>:
 8007680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007682:	2101      	movs	r1, #1
 8007684:	4617      	mov	r7, r2
 8007686:	461c      	mov	r4, r3
 8007688:	9e08      	ldr	r6, [sp, #32]
 800768a:	f7ff fc25 	bl	8006ed8 <_Balloc>
 800768e:	4605      	mov	r5, r0
 8007690:	b930      	cbnz	r0, 80076a0 <__d2b+0x20>
 8007692:	4602      	mov	r2, r0
 8007694:	f240 310f 	movw	r1, #783	; 0x30f
 8007698:	4b22      	ldr	r3, [pc, #136]	; (8007724 <__d2b+0xa4>)
 800769a:	4823      	ldr	r0, [pc, #140]	; (8007728 <__d2b+0xa8>)
 800769c:	f001 fb6e 	bl	8008d7c <__assert_func>
 80076a0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80076a4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80076a8:	bb24      	cbnz	r4, 80076f4 <__d2b+0x74>
 80076aa:	2f00      	cmp	r7, #0
 80076ac:	9301      	str	r3, [sp, #4]
 80076ae:	d026      	beq.n	80076fe <__d2b+0x7e>
 80076b0:	4668      	mov	r0, sp
 80076b2:	9700      	str	r7, [sp, #0]
 80076b4:	f7ff fd22 	bl	80070fc <__lo0bits>
 80076b8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80076bc:	b1e8      	cbz	r0, 80076fa <__d2b+0x7a>
 80076be:	f1c0 0320 	rsb	r3, r0, #32
 80076c2:	fa02 f303 	lsl.w	r3, r2, r3
 80076c6:	430b      	orrs	r3, r1
 80076c8:	40c2      	lsrs	r2, r0
 80076ca:	616b      	str	r3, [r5, #20]
 80076cc:	9201      	str	r2, [sp, #4]
 80076ce:	9b01      	ldr	r3, [sp, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	bf14      	ite	ne
 80076d4:	2102      	movne	r1, #2
 80076d6:	2101      	moveq	r1, #1
 80076d8:	61ab      	str	r3, [r5, #24]
 80076da:	6129      	str	r1, [r5, #16]
 80076dc:	b1bc      	cbz	r4, 800770e <__d2b+0x8e>
 80076de:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80076e2:	4404      	add	r4, r0
 80076e4:	6034      	str	r4, [r6, #0]
 80076e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80076ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ec:	6018      	str	r0, [r3, #0]
 80076ee:	4628      	mov	r0, r5
 80076f0:	b003      	add	sp, #12
 80076f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076f8:	e7d7      	b.n	80076aa <__d2b+0x2a>
 80076fa:	6169      	str	r1, [r5, #20]
 80076fc:	e7e7      	b.n	80076ce <__d2b+0x4e>
 80076fe:	a801      	add	r0, sp, #4
 8007700:	f7ff fcfc 	bl	80070fc <__lo0bits>
 8007704:	9b01      	ldr	r3, [sp, #4]
 8007706:	2101      	movs	r1, #1
 8007708:	616b      	str	r3, [r5, #20]
 800770a:	3020      	adds	r0, #32
 800770c:	e7e5      	b.n	80076da <__d2b+0x5a>
 800770e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007712:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007716:	6030      	str	r0, [r6, #0]
 8007718:	6918      	ldr	r0, [r3, #16]
 800771a:	f7ff fccf 	bl	80070bc <__hi0bits>
 800771e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007722:	e7e2      	b.n	80076ea <__d2b+0x6a>
 8007724:	0800978f 	.word	0x0800978f
 8007728:	080097a0 	.word	0x080097a0

0800772c <__ratio>:
 800772c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007730:	4688      	mov	r8, r1
 8007732:	4669      	mov	r1, sp
 8007734:	4681      	mov	r9, r0
 8007736:	f7ff ff5b 	bl	80075f0 <__b2d>
 800773a:	460f      	mov	r7, r1
 800773c:	4604      	mov	r4, r0
 800773e:	460d      	mov	r5, r1
 8007740:	4640      	mov	r0, r8
 8007742:	a901      	add	r1, sp, #4
 8007744:	f7ff ff54 	bl	80075f0 <__b2d>
 8007748:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800774c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007750:	468b      	mov	fp, r1
 8007752:	eba3 0c02 	sub.w	ip, r3, r2
 8007756:	e9dd 3200 	ldrd	r3, r2, [sp]
 800775a:	1a9b      	subs	r3, r3, r2
 800775c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007760:	2b00      	cmp	r3, #0
 8007762:	bfd5      	itete	le
 8007764:	460a      	movle	r2, r1
 8007766:	462a      	movgt	r2, r5
 8007768:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800776c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007770:	bfd8      	it	le
 8007772:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007776:	465b      	mov	r3, fp
 8007778:	4602      	mov	r2, r0
 800777a:	4639      	mov	r1, r7
 800777c:	4620      	mov	r0, r4
 800777e:	f7f9 f8f5 	bl	800096c <__aeabi_ddiv>
 8007782:	b003      	add	sp, #12
 8007784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007788 <__copybits>:
 8007788:	3901      	subs	r1, #1
 800778a:	b570      	push	{r4, r5, r6, lr}
 800778c:	1149      	asrs	r1, r1, #5
 800778e:	6914      	ldr	r4, [r2, #16]
 8007790:	3101      	adds	r1, #1
 8007792:	f102 0314 	add.w	r3, r2, #20
 8007796:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800779a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800779e:	1f05      	subs	r5, r0, #4
 80077a0:	42a3      	cmp	r3, r4
 80077a2:	d30c      	bcc.n	80077be <__copybits+0x36>
 80077a4:	1aa3      	subs	r3, r4, r2
 80077a6:	3b11      	subs	r3, #17
 80077a8:	f023 0303 	bic.w	r3, r3, #3
 80077ac:	3211      	adds	r2, #17
 80077ae:	42a2      	cmp	r2, r4
 80077b0:	bf88      	it	hi
 80077b2:	2300      	movhi	r3, #0
 80077b4:	4418      	add	r0, r3
 80077b6:	2300      	movs	r3, #0
 80077b8:	4288      	cmp	r0, r1
 80077ba:	d305      	bcc.n	80077c8 <__copybits+0x40>
 80077bc:	bd70      	pop	{r4, r5, r6, pc}
 80077be:	f853 6b04 	ldr.w	r6, [r3], #4
 80077c2:	f845 6f04 	str.w	r6, [r5, #4]!
 80077c6:	e7eb      	b.n	80077a0 <__copybits+0x18>
 80077c8:	f840 3b04 	str.w	r3, [r0], #4
 80077cc:	e7f4      	b.n	80077b8 <__copybits+0x30>

080077ce <__any_on>:
 80077ce:	f100 0214 	add.w	r2, r0, #20
 80077d2:	6900      	ldr	r0, [r0, #16]
 80077d4:	114b      	asrs	r3, r1, #5
 80077d6:	4298      	cmp	r0, r3
 80077d8:	b510      	push	{r4, lr}
 80077da:	db11      	blt.n	8007800 <__any_on+0x32>
 80077dc:	dd0a      	ble.n	80077f4 <__any_on+0x26>
 80077de:	f011 011f 	ands.w	r1, r1, #31
 80077e2:	d007      	beq.n	80077f4 <__any_on+0x26>
 80077e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80077e8:	fa24 f001 	lsr.w	r0, r4, r1
 80077ec:	fa00 f101 	lsl.w	r1, r0, r1
 80077f0:	428c      	cmp	r4, r1
 80077f2:	d10b      	bne.n	800780c <__any_on+0x3e>
 80077f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d803      	bhi.n	8007804 <__any_on+0x36>
 80077fc:	2000      	movs	r0, #0
 80077fe:	bd10      	pop	{r4, pc}
 8007800:	4603      	mov	r3, r0
 8007802:	e7f7      	b.n	80077f4 <__any_on+0x26>
 8007804:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007808:	2900      	cmp	r1, #0
 800780a:	d0f5      	beq.n	80077f8 <__any_on+0x2a>
 800780c:	2001      	movs	r0, #1
 800780e:	e7f6      	b.n	80077fe <__any_on+0x30>

08007810 <sulp>:
 8007810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007814:	460f      	mov	r7, r1
 8007816:	4690      	mov	r8, r2
 8007818:	f7ff feca 	bl	80075b0 <__ulp>
 800781c:	4604      	mov	r4, r0
 800781e:	460d      	mov	r5, r1
 8007820:	f1b8 0f00 	cmp.w	r8, #0
 8007824:	d011      	beq.n	800784a <sulp+0x3a>
 8007826:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800782a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800782e:	2b00      	cmp	r3, #0
 8007830:	dd0b      	ble.n	800784a <sulp+0x3a>
 8007832:	2400      	movs	r4, #0
 8007834:	051b      	lsls	r3, r3, #20
 8007836:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800783a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800783e:	4622      	mov	r2, r4
 8007840:	462b      	mov	r3, r5
 8007842:	f7f8 ff69 	bl	8000718 <__aeabi_dmul>
 8007846:	4604      	mov	r4, r0
 8007848:	460d      	mov	r5, r1
 800784a:	4620      	mov	r0, r4
 800784c:	4629      	mov	r1, r5
 800784e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007852:	0000      	movs	r0, r0
 8007854:	0000      	movs	r0, r0
	...

08007858 <_strtod_l>:
 8007858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	b09f      	sub	sp, #124	; 0x7c
 800785e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007860:	2200      	movs	r2, #0
 8007862:	4604      	mov	r4, r0
 8007864:	921a      	str	r2, [sp, #104]	; 0x68
 8007866:	460d      	mov	r5, r1
 8007868:	f04f 0800 	mov.w	r8, #0
 800786c:	f04f 0900 	mov.w	r9, #0
 8007870:	460a      	mov	r2, r1
 8007872:	9219      	str	r2, [sp, #100]	; 0x64
 8007874:	7811      	ldrb	r1, [r2, #0]
 8007876:	292b      	cmp	r1, #43	; 0x2b
 8007878:	d04a      	beq.n	8007910 <_strtod_l+0xb8>
 800787a:	d838      	bhi.n	80078ee <_strtod_l+0x96>
 800787c:	290d      	cmp	r1, #13
 800787e:	d832      	bhi.n	80078e6 <_strtod_l+0x8e>
 8007880:	2908      	cmp	r1, #8
 8007882:	d832      	bhi.n	80078ea <_strtod_l+0x92>
 8007884:	2900      	cmp	r1, #0
 8007886:	d03b      	beq.n	8007900 <_strtod_l+0xa8>
 8007888:	2200      	movs	r2, #0
 800788a:	920e      	str	r2, [sp, #56]	; 0x38
 800788c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800788e:	7832      	ldrb	r2, [r6, #0]
 8007890:	2a30      	cmp	r2, #48	; 0x30
 8007892:	f040 80b2 	bne.w	80079fa <_strtod_l+0x1a2>
 8007896:	7872      	ldrb	r2, [r6, #1]
 8007898:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800789c:	2a58      	cmp	r2, #88	; 0x58
 800789e:	d16e      	bne.n	800797e <_strtod_l+0x126>
 80078a0:	9302      	str	r3, [sp, #8]
 80078a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078a4:	4620      	mov	r0, r4
 80078a6:	9301      	str	r3, [sp, #4]
 80078a8:	ab1a      	add	r3, sp, #104	; 0x68
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	4a8c      	ldr	r2, [pc, #560]	; (8007ae0 <_strtod_l+0x288>)
 80078ae:	ab1b      	add	r3, sp, #108	; 0x6c
 80078b0:	a919      	add	r1, sp, #100	; 0x64
 80078b2:	f001 fafd 	bl	8008eb0 <__gethex>
 80078b6:	f010 070f 	ands.w	r7, r0, #15
 80078ba:	4605      	mov	r5, r0
 80078bc:	d005      	beq.n	80078ca <_strtod_l+0x72>
 80078be:	2f06      	cmp	r7, #6
 80078c0:	d128      	bne.n	8007914 <_strtod_l+0xbc>
 80078c2:	2300      	movs	r3, #0
 80078c4:	3601      	adds	r6, #1
 80078c6:	9619      	str	r6, [sp, #100]	; 0x64
 80078c8:	930e      	str	r3, [sp, #56]	; 0x38
 80078ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f040 85a0 	bne.w	8008412 <_strtod_l+0xbba>
 80078d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078d4:	b1cb      	cbz	r3, 800790a <_strtod_l+0xb2>
 80078d6:	4642      	mov	r2, r8
 80078d8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80078dc:	4610      	mov	r0, r2
 80078de:	4619      	mov	r1, r3
 80078e0:	b01f      	add	sp, #124	; 0x7c
 80078e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e6:	2920      	cmp	r1, #32
 80078e8:	d1ce      	bne.n	8007888 <_strtod_l+0x30>
 80078ea:	3201      	adds	r2, #1
 80078ec:	e7c1      	b.n	8007872 <_strtod_l+0x1a>
 80078ee:	292d      	cmp	r1, #45	; 0x2d
 80078f0:	d1ca      	bne.n	8007888 <_strtod_l+0x30>
 80078f2:	2101      	movs	r1, #1
 80078f4:	910e      	str	r1, [sp, #56]	; 0x38
 80078f6:	1c51      	adds	r1, r2, #1
 80078f8:	9119      	str	r1, [sp, #100]	; 0x64
 80078fa:	7852      	ldrb	r2, [r2, #1]
 80078fc:	2a00      	cmp	r2, #0
 80078fe:	d1c5      	bne.n	800788c <_strtod_l+0x34>
 8007900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007902:	9519      	str	r5, [sp, #100]	; 0x64
 8007904:	2b00      	cmp	r3, #0
 8007906:	f040 8582 	bne.w	800840e <_strtod_l+0xbb6>
 800790a:	4642      	mov	r2, r8
 800790c:	464b      	mov	r3, r9
 800790e:	e7e5      	b.n	80078dc <_strtod_l+0x84>
 8007910:	2100      	movs	r1, #0
 8007912:	e7ef      	b.n	80078f4 <_strtod_l+0x9c>
 8007914:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007916:	b13a      	cbz	r2, 8007928 <_strtod_l+0xd0>
 8007918:	2135      	movs	r1, #53	; 0x35
 800791a:	a81c      	add	r0, sp, #112	; 0x70
 800791c:	f7ff ff34 	bl	8007788 <__copybits>
 8007920:	4620      	mov	r0, r4
 8007922:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007924:	f7ff fb18 	bl	8006f58 <_Bfree>
 8007928:	3f01      	subs	r7, #1
 800792a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800792c:	2f04      	cmp	r7, #4
 800792e:	d806      	bhi.n	800793e <_strtod_l+0xe6>
 8007930:	e8df f007 	tbb	[pc, r7]
 8007934:	201d0314 	.word	0x201d0314
 8007938:	14          	.byte	0x14
 8007939:	00          	.byte	0x00
 800793a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800793e:	05e9      	lsls	r1, r5, #23
 8007940:	bf48      	it	mi
 8007942:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007946:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800794a:	0d1b      	lsrs	r3, r3, #20
 800794c:	051b      	lsls	r3, r3, #20
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1bb      	bne.n	80078ca <_strtod_l+0x72>
 8007952:	f7fe fb17 	bl	8005f84 <__errno>
 8007956:	2322      	movs	r3, #34	; 0x22
 8007958:	6003      	str	r3, [r0, #0]
 800795a:	e7b6      	b.n	80078ca <_strtod_l+0x72>
 800795c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007960:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007964:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007968:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800796c:	e7e7      	b.n	800793e <_strtod_l+0xe6>
 800796e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007ae4 <_strtod_l+0x28c>
 8007972:	e7e4      	b.n	800793e <_strtod_l+0xe6>
 8007974:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007978:	f04f 38ff 	mov.w	r8, #4294967295
 800797c:	e7df      	b.n	800793e <_strtod_l+0xe6>
 800797e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007980:	1c5a      	adds	r2, r3, #1
 8007982:	9219      	str	r2, [sp, #100]	; 0x64
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	2b30      	cmp	r3, #48	; 0x30
 8007988:	d0f9      	beq.n	800797e <_strtod_l+0x126>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d09d      	beq.n	80078ca <_strtod_l+0x72>
 800798e:	2301      	movs	r3, #1
 8007990:	f04f 0a00 	mov.w	sl, #0
 8007994:	220a      	movs	r2, #10
 8007996:	46d3      	mov	fp, sl
 8007998:	9305      	str	r3, [sp, #20]
 800799a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800799c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80079a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80079a2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80079a4:	7806      	ldrb	r6, [r0, #0]
 80079a6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80079aa:	b2d9      	uxtb	r1, r3
 80079ac:	2909      	cmp	r1, #9
 80079ae:	d926      	bls.n	80079fe <_strtod_l+0x1a6>
 80079b0:	2201      	movs	r2, #1
 80079b2:	494d      	ldr	r1, [pc, #308]	; (8007ae8 <_strtod_l+0x290>)
 80079b4:	f001 f989 	bl	8008cca <strncmp>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d030      	beq.n	8007a1e <_strtod_l+0x1c6>
 80079bc:	2000      	movs	r0, #0
 80079be:	4632      	mov	r2, r6
 80079c0:	4603      	mov	r3, r0
 80079c2:	465e      	mov	r6, fp
 80079c4:	9008      	str	r0, [sp, #32]
 80079c6:	2a65      	cmp	r2, #101	; 0x65
 80079c8:	d001      	beq.n	80079ce <_strtod_l+0x176>
 80079ca:	2a45      	cmp	r2, #69	; 0x45
 80079cc:	d113      	bne.n	80079f6 <_strtod_l+0x19e>
 80079ce:	b91e      	cbnz	r6, 80079d8 <_strtod_l+0x180>
 80079d0:	9a05      	ldr	r2, [sp, #20]
 80079d2:	4302      	orrs	r2, r0
 80079d4:	d094      	beq.n	8007900 <_strtod_l+0xa8>
 80079d6:	2600      	movs	r6, #0
 80079d8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80079da:	1c6a      	adds	r2, r5, #1
 80079dc:	9219      	str	r2, [sp, #100]	; 0x64
 80079de:	786a      	ldrb	r2, [r5, #1]
 80079e0:	2a2b      	cmp	r2, #43	; 0x2b
 80079e2:	d074      	beq.n	8007ace <_strtod_l+0x276>
 80079e4:	2a2d      	cmp	r2, #45	; 0x2d
 80079e6:	d078      	beq.n	8007ada <_strtod_l+0x282>
 80079e8:	f04f 0c00 	mov.w	ip, #0
 80079ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80079f0:	2909      	cmp	r1, #9
 80079f2:	d97f      	bls.n	8007af4 <_strtod_l+0x29c>
 80079f4:	9519      	str	r5, [sp, #100]	; 0x64
 80079f6:	2700      	movs	r7, #0
 80079f8:	e09e      	b.n	8007b38 <_strtod_l+0x2e0>
 80079fa:	2300      	movs	r3, #0
 80079fc:	e7c8      	b.n	8007990 <_strtod_l+0x138>
 80079fe:	f1bb 0f08 	cmp.w	fp, #8
 8007a02:	bfd8      	it	le
 8007a04:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007a06:	f100 0001 	add.w	r0, r0, #1
 8007a0a:	bfd6      	itet	le
 8007a0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a10:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007a14:	930a      	strle	r3, [sp, #40]	; 0x28
 8007a16:	f10b 0b01 	add.w	fp, fp, #1
 8007a1a:	9019      	str	r0, [sp, #100]	; 0x64
 8007a1c:	e7c1      	b.n	80079a2 <_strtod_l+0x14a>
 8007a1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a20:	1c5a      	adds	r2, r3, #1
 8007a22:	9219      	str	r2, [sp, #100]	; 0x64
 8007a24:	785a      	ldrb	r2, [r3, #1]
 8007a26:	f1bb 0f00 	cmp.w	fp, #0
 8007a2a:	d037      	beq.n	8007a9c <_strtod_l+0x244>
 8007a2c:	465e      	mov	r6, fp
 8007a2e:	9008      	str	r0, [sp, #32]
 8007a30:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007a34:	2b09      	cmp	r3, #9
 8007a36:	d912      	bls.n	8007a5e <_strtod_l+0x206>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e7c4      	b.n	80079c6 <_strtod_l+0x16e>
 8007a3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a3e:	3001      	adds	r0, #1
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	9219      	str	r2, [sp, #100]	; 0x64
 8007a44:	785a      	ldrb	r2, [r3, #1]
 8007a46:	2a30      	cmp	r2, #48	; 0x30
 8007a48:	d0f8      	beq.n	8007a3c <_strtod_l+0x1e4>
 8007a4a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007a4e:	2b08      	cmp	r3, #8
 8007a50:	f200 84e4 	bhi.w	800841c <_strtod_l+0xbc4>
 8007a54:	9008      	str	r0, [sp, #32]
 8007a56:	2000      	movs	r0, #0
 8007a58:	4606      	mov	r6, r0
 8007a5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a5e:	3a30      	subs	r2, #48	; 0x30
 8007a60:	f100 0301 	add.w	r3, r0, #1
 8007a64:	d014      	beq.n	8007a90 <_strtod_l+0x238>
 8007a66:	9908      	ldr	r1, [sp, #32]
 8007a68:	eb00 0c06 	add.w	ip, r0, r6
 8007a6c:	4419      	add	r1, r3
 8007a6e:	9108      	str	r1, [sp, #32]
 8007a70:	4633      	mov	r3, r6
 8007a72:	210a      	movs	r1, #10
 8007a74:	4563      	cmp	r3, ip
 8007a76:	d113      	bne.n	8007aa0 <_strtod_l+0x248>
 8007a78:	1833      	adds	r3, r6, r0
 8007a7a:	2b08      	cmp	r3, #8
 8007a7c:	f106 0601 	add.w	r6, r6, #1
 8007a80:	4406      	add	r6, r0
 8007a82:	dc1a      	bgt.n	8007aba <_strtod_l+0x262>
 8007a84:	230a      	movs	r3, #10
 8007a86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007a88:	fb03 2301 	mla	r3, r3, r1, r2
 8007a8c:	930a      	str	r3, [sp, #40]	; 0x28
 8007a8e:	2300      	movs	r3, #0
 8007a90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a92:	4618      	mov	r0, r3
 8007a94:	1c51      	adds	r1, r2, #1
 8007a96:	9119      	str	r1, [sp, #100]	; 0x64
 8007a98:	7852      	ldrb	r2, [r2, #1]
 8007a9a:	e7c9      	b.n	8007a30 <_strtod_l+0x1d8>
 8007a9c:	4658      	mov	r0, fp
 8007a9e:	e7d2      	b.n	8007a46 <_strtod_l+0x1ee>
 8007aa0:	2b08      	cmp	r3, #8
 8007aa2:	f103 0301 	add.w	r3, r3, #1
 8007aa6:	dc03      	bgt.n	8007ab0 <_strtod_l+0x258>
 8007aa8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007aaa:	434f      	muls	r7, r1
 8007aac:	970a      	str	r7, [sp, #40]	; 0x28
 8007aae:	e7e1      	b.n	8007a74 <_strtod_l+0x21c>
 8007ab0:	2b10      	cmp	r3, #16
 8007ab2:	bfd8      	it	le
 8007ab4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007ab8:	e7dc      	b.n	8007a74 <_strtod_l+0x21c>
 8007aba:	2e10      	cmp	r6, #16
 8007abc:	bfdc      	itt	le
 8007abe:	230a      	movle	r3, #10
 8007ac0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007ac4:	e7e3      	b.n	8007a8e <_strtod_l+0x236>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	9308      	str	r3, [sp, #32]
 8007aca:	2301      	movs	r3, #1
 8007acc:	e780      	b.n	80079d0 <_strtod_l+0x178>
 8007ace:	f04f 0c00 	mov.w	ip, #0
 8007ad2:	1caa      	adds	r2, r5, #2
 8007ad4:	9219      	str	r2, [sp, #100]	; 0x64
 8007ad6:	78aa      	ldrb	r2, [r5, #2]
 8007ad8:	e788      	b.n	80079ec <_strtod_l+0x194>
 8007ada:	f04f 0c01 	mov.w	ip, #1
 8007ade:	e7f8      	b.n	8007ad2 <_strtod_l+0x27a>
 8007ae0:	08009900 	.word	0x08009900
 8007ae4:	7ff00000 	.word	0x7ff00000
 8007ae8:	080098fc 	.word	0x080098fc
 8007aec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007aee:	1c51      	adds	r1, r2, #1
 8007af0:	9119      	str	r1, [sp, #100]	; 0x64
 8007af2:	7852      	ldrb	r2, [r2, #1]
 8007af4:	2a30      	cmp	r2, #48	; 0x30
 8007af6:	d0f9      	beq.n	8007aec <_strtod_l+0x294>
 8007af8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007afc:	2908      	cmp	r1, #8
 8007afe:	f63f af7a 	bhi.w	80079f6 <_strtod_l+0x19e>
 8007b02:	3a30      	subs	r2, #48	; 0x30
 8007b04:	9209      	str	r2, [sp, #36]	; 0x24
 8007b06:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b08:	920c      	str	r2, [sp, #48]	; 0x30
 8007b0a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b0c:	1c57      	adds	r7, r2, #1
 8007b0e:	9719      	str	r7, [sp, #100]	; 0x64
 8007b10:	7852      	ldrb	r2, [r2, #1]
 8007b12:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007b16:	f1be 0f09 	cmp.w	lr, #9
 8007b1a:	d938      	bls.n	8007b8e <_strtod_l+0x336>
 8007b1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b1e:	1a7f      	subs	r7, r7, r1
 8007b20:	2f08      	cmp	r7, #8
 8007b22:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007b26:	dc03      	bgt.n	8007b30 <_strtod_l+0x2d8>
 8007b28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b2a:	428f      	cmp	r7, r1
 8007b2c:	bfa8      	it	ge
 8007b2e:	460f      	movge	r7, r1
 8007b30:	f1bc 0f00 	cmp.w	ip, #0
 8007b34:	d000      	beq.n	8007b38 <_strtod_l+0x2e0>
 8007b36:	427f      	negs	r7, r7
 8007b38:	2e00      	cmp	r6, #0
 8007b3a:	d14f      	bne.n	8007bdc <_strtod_l+0x384>
 8007b3c:	9905      	ldr	r1, [sp, #20]
 8007b3e:	4301      	orrs	r1, r0
 8007b40:	f47f aec3 	bne.w	80078ca <_strtod_l+0x72>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f47f aedb 	bne.w	8007900 <_strtod_l+0xa8>
 8007b4a:	2a69      	cmp	r2, #105	; 0x69
 8007b4c:	d029      	beq.n	8007ba2 <_strtod_l+0x34a>
 8007b4e:	dc26      	bgt.n	8007b9e <_strtod_l+0x346>
 8007b50:	2a49      	cmp	r2, #73	; 0x49
 8007b52:	d026      	beq.n	8007ba2 <_strtod_l+0x34a>
 8007b54:	2a4e      	cmp	r2, #78	; 0x4e
 8007b56:	f47f aed3 	bne.w	8007900 <_strtod_l+0xa8>
 8007b5a:	499a      	ldr	r1, [pc, #616]	; (8007dc4 <_strtod_l+0x56c>)
 8007b5c:	a819      	add	r0, sp, #100	; 0x64
 8007b5e:	f001 fbe9 	bl	8009334 <__match>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	f43f aecc 	beq.w	8007900 <_strtod_l+0xa8>
 8007b68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b28      	cmp	r3, #40	; 0x28
 8007b6e:	d12f      	bne.n	8007bd0 <_strtod_l+0x378>
 8007b70:	4995      	ldr	r1, [pc, #596]	; (8007dc8 <_strtod_l+0x570>)
 8007b72:	aa1c      	add	r2, sp, #112	; 0x70
 8007b74:	a819      	add	r0, sp, #100	; 0x64
 8007b76:	f001 fbf1 	bl	800935c <__hexnan>
 8007b7a:	2805      	cmp	r0, #5
 8007b7c:	d128      	bne.n	8007bd0 <_strtod_l+0x378>
 8007b7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b80:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007b84:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007b88:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007b8c:	e69d      	b.n	80078ca <_strtod_l+0x72>
 8007b8e:	210a      	movs	r1, #10
 8007b90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007b92:	fb01 2107 	mla	r1, r1, r7, r2
 8007b96:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007b9a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b9c:	e7b5      	b.n	8007b0a <_strtod_l+0x2b2>
 8007b9e:	2a6e      	cmp	r2, #110	; 0x6e
 8007ba0:	e7d9      	b.n	8007b56 <_strtod_l+0x2fe>
 8007ba2:	498a      	ldr	r1, [pc, #552]	; (8007dcc <_strtod_l+0x574>)
 8007ba4:	a819      	add	r0, sp, #100	; 0x64
 8007ba6:	f001 fbc5 	bl	8009334 <__match>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	f43f aea8 	beq.w	8007900 <_strtod_l+0xa8>
 8007bb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bb2:	4987      	ldr	r1, [pc, #540]	; (8007dd0 <_strtod_l+0x578>)
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	a819      	add	r0, sp, #100	; 0x64
 8007bb8:	9319      	str	r3, [sp, #100]	; 0x64
 8007bba:	f001 fbbb 	bl	8009334 <__match>
 8007bbe:	b910      	cbnz	r0, 8007bc6 <_strtod_l+0x36e>
 8007bc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	9319      	str	r3, [sp, #100]	; 0x64
 8007bc6:	f04f 0800 	mov.w	r8, #0
 8007bca:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007dd4 <_strtod_l+0x57c>
 8007bce:	e67c      	b.n	80078ca <_strtod_l+0x72>
 8007bd0:	4881      	ldr	r0, [pc, #516]	; (8007dd8 <_strtod_l+0x580>)
 8007bd2:	f001 f8cd 	bl	8008d70 <nan>
 8007bd6:	4680      	mov	r8, r0
 8007bd8:	4689      	mov	r9, r1
 8007bda:	e676      	b.n	80078ca <_strtod_l+0x72>
 8007bdc:	9b08      	ldr	r3, [sp, #32]
 8007bde:	f1bb 0f00 	cmp.w	fp, #0
 8007be2:	bf08      	it	eq
 8007be4:	46b3      	moveq	fp, r6
 8007be6:	1afb      	subs	r3, r7, r3
 8007be8:	2e10      	cmp	r6, #16
 8007bea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007bec:	4635      	mov	r5, r6
 8007bee:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf0:	bfa8      	it	ge
 8007bf2:	2510      	movge	r5, #16
 8007bf4:	f7f8 fd16 	bl	8000624 <__aeabi_ui2d>
 8007bf8:	2e09      	cmp	r6, #9
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	4689      	mov	r9, r1
 8007bfe:	dd13      	ble.n	8007c28 <_strtod_l+0x3d0>
 8007c00:	4b76      	ldr	r3, [pc, #472]	; (8007ddc <_strtod_l+0x584>)
 8007c02:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007c06:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007c0a:	f7f8 fd85 	bl	8000718 <__aeabi_dmul>
 8007c0e:	4680      	mov	r8, r0
 8007c10:	4650      	mov	r0, sl
 8007c12:	4689      	mov	r9, r1
 8007c14:	f7f8 fd06 	bl	8000624 <__aeabi_ui2d>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4640      	mov	r0, r8
 8007c1e:	4649      	mov	r1, r9
 8007c20:	f7f8 fbc4 	bl	80003ac <__adddf3>
 8007c24:	4680      	mov	r8, r0
 8007c26:	4689      	mov	r9, r1
 8007c28:	2e0f      	cmp	r6, #15
 8007c2a:	dc36      	bgt.n	8007c9a <_strtod_l+0x442>
 8007c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f43f ae4b 	beq.w	80078ca <_strtod_l+0x72>
 8007c34:	dd22      	ble.n	8007c7c <_strtod_l+0x424>
 8007c36:	2b16      	cmp	r3, #22
 8007c38:	dc09      	bgt.n	8007c4e <_strtod_l+0x3f6>
 8007c3a:	4968      	ldr	r1, [pc, #416]	; (8007ddc <_strtod_l+0x584>)
 8007c3c:	4642      	mov	r2, r8
 8007c3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c42:	464b      	mov	r3, r9
 8007c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c48:	f7f8 fd66 	bl	8000718 <__aeabi_dmul>
 8007c4c:	e7c3      	b.n	8007bd6 <_strtod_l+0x37e>
 8007c4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c50:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007c54:	4293      	cmp	r3, r2
 8007c56:	db20      	blt.n	8007c9a <_strtod_l+0x442>
 8007c58:	4c60      	ldr	r4, [pc, #384]	; (8007ddc <_strtod_l+0x584>)
 8007c5a:	f1c6 060f 	rsb	r6, r6, #15
 8007c5e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007c62:	4642      	mov	r2, r8
 8007c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c68:	464b      	mov	r3, r9
 8007c6a:	f7f8 fd55 	bl	8000718 <__aeabi_dmul>
 8007c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c70:	1b9e      	subs	r6, r3, r6
 8007c72:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007c76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c7a:	e7e5      	b.n	8007c48 <_strtod_l+0x3f0>
 8007c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c7e:	3316      	adds	r3, #22
 8007c80:	db0b      	blt.n	8007c9a <_strtod_l+0x442>
 8007c82:	9b08      	ldr	r3, [sp, #32]
 8007c84:	4640      	mov	r0, r8
 8007c86:	1bdf      	subs	r7, r3, r7
 8007c88:	4b54      	ldr	r3, [pc, #336]	; (8007ddc <_strtod_l+0x584>)
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c94:	f7f8 fe6a 	bl	800096c <__aeabi_ddiv>
 8007c98:	e79d      	b.n	8007bd6 <_strtod_l+0x37e>
 8007c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9c:	1b75      	subs	r5, r6, r5
 8007c9e:	441d      	add	r5, r3
 8007ca0:	2d00      	cmp	r5, #0
 8007ca2:	dd70      	ble.n	8007d86 <_strtod_l+0x52e>
 8007ca4:	f015 030f 	ands.w	r3, r5, #15
 8007ca8:	d00a      	beq.n	8007cc0 <_strtod_l+0x468>
 8007caa:	494c      	ldr	r1, [pc, #304]	; (8007ddc <_strtod_l+0x584>)
 8007cac:	4642      	mov	r2, r8
 8007cae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cb6:	464b      	mov	r3, r9
 8007cb8:	f7f8 fd2e 	bl	8000718 <__aeabi_dmul>
 8007cbc:	4680      	mov	r8, r0
 8007cbe:	4689      	mov	r9, r1
 8007cc0:	f035 050f 	bics.w	r5, r5, #15
 8007cc4:	d04d      	beq.n	8007d62 <_strtod_l+0x50a>
 8007cc6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007cca:	dd22      	ble.n	8007d12 <_strtod_l+0x4ba>
 8007ccc:	2600      	movs	r6, #0
 8007cce:	46b3      	mov	fp, r6
 8007cd0:	960b      	str	r6, [sp, #44]	; 0x2c
 8007cd2:	9608      	str	r6, [sp, #32]
 8007cd4:	2322      	movs	r3, #34	; 0x22
 8007cd6:	f04f 0800 	mov.w	r8, #0
 8007cda:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007dd4 <_strtod_l+0x57c>
 8007cde:	6023      	str	r3, [r4, #0]
 8007ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f43f adf1 	beq.w	80078ca <_strtod_l+0x72>
 8007ce8:	4620      	mov	r0, r4
 8007cea:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007cec:	f7ff f934 	bl	8006f58 <_Bfree>
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	9908      	ldr	r1, [sp, #32]
 8007cf4:	f7ff f930 	bl	8006f58 <_Bfree>
 8007cf8:	4659      	mov	r1, fp
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f7ff f92c 	bl	8006f58 <_Bfree>
 8007d00:	4620      	mov	r0, r4
 8007d02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d04:	f7ff f928 	bl	8006f58 <_Bfree>
 8007d08:	4631      	mov	r1, r6
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f7ff f924 	bl	8006f58 <_Bfree>
 8007d10:	e5db      	b.n	80078ca <_strtod_l+0x72>
 8007d12:	4b33      	ldr	r3, [pc, #204]	; (8007de0 <_strtod_l+0x588>)
 8007d14:	4640      	mov	r0, r8
 8007d16:	9305      	str	r3, [sp, #20]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	469a      	mov	sl, r3
 8007d1e:	112d      	asrs	r5, r5, #4
 8007d20:	2d01      	cmp	r5, #1
 8007d22:	dc21      	bgt.n	8007d68 <_strtod_l+0x510>
 8007d24:	b10b      	cbz	r3, 8007d2a <_strtod_l+0x4d2>
 8007d26:	4680      	mov	r8, r0
 8007d28:	4689      	mov	r9, r1
 8007d2a:	492d      	ldr	r1, [pc, #180]	; (8007de0 <_strtod_l+0x588>)
 8007d2c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007d30:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007d34:	4642      	mov	r2, r8
 8007d36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d3a:	464b      	mov	r3, r9
 8007d3c:	f7f8 fcec 	bl	8000718 <__aeabi_dmul>
 8007d40:	4b24      	ldr	r3, [pc, #144]	; (8007dd4 <_strtod_l+0x57c>)
 8007d42:	460a      	mov	r2, r1
 8007d44:	400b      	ands	r3, r1
 8007d46:	4927      	ldr	r1, [pc, #156]	; (8007de4 <_strtod_l+0x58c>)
 8007d48:	4680      	mov	r8, r0
 8007d4a:	428b      	cmp	r3, r1
 8007d4c:	d8be      	bhi.n	8007ccc <_strtod_l+0x474>
 8007d4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007d52:	428b      	cmp	r3, r1
 8007d54:	bf86      	itte	hi
 8007d56:	f04f 38ff 	movhi.w	r8, #4294967295
 8007d5a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007de8 <_strtod_l+0x590>
 8007d5e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007d62:	2300      	movs	r3, #0
 8007d64:	9305      	str	r3, [sp, #20]
 8007d66:	e07b      	b.n	8007e60 <_strtod_l+0x608>
 8007d68:	07ea      	lsls	r2, r5, #31
 8007d6a:	d505      	bpl.n	8007d78 <_strtod_l+0x520>
 8007d6c:	9b05      	ldr	r3, [sp, #20]
 8007d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d72:	f7f8 fcd1 	bl	8000718 <__aeabi_dmul>
 8007d76:	2301      	movs	r3, #1
 8007d78:	9a05      	ldr	r2, [sp, #20]
 8007d7a:	f10a 0a01 	add.w	sl, sl, #1
 8007d7e:	3208      	adds	r2, #8
 8007d80:	106d      	asrs	r5, r5, #1
 8007d82:	9205      	str	r2, [sp, #20]
 8007d84:	e7cc      	b.n	8007d20 <_strtod_l+0x4c8>
 8007d86:	d0ec      	beq.n	8007d62 <_strtod_l+0x50a>
 8007d88:	426d      	negs	r5, r5
 8007d8a:	f015 020f 	ands.w	r2, r5, #15
 8007d8e:	d00a      	beq.n	8007da6 <_strtod_l+0x54e>
 8007d90:	4b12      	ldr	r3, [pc, #72]	; (8007ddc <_strtod_l+0x584>)
 8007d92:	4640      	mov	r0, r8
 8007d94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d98:	4649      	mov	r1, r9
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	f7f8 fde5 	bl	800096c <__aeabi_ddiv>
 8007da2:	4680      	mov	r8, r0
 8007da4:	4689      	mov	r9, r1
 8007da6:	112d      	asrs	r5, r5, #4
 8007da8:	d0db      	beq.n	8007d62 <_strtod_l+0x50a>
 8007daa:	2d1f      	cmp	r5, #31
 8007dac:	dd1e      	ble.n	8007dec <_strtod_l+0x594>
 8007dae:	2600      	movs	r6, #0
 8007db0:	46b3      	mov	fp, r6
 8007db2:	960b      	str	r6, [sp, #44]	; 0x2c
 8007db4:	9608      	str	r6, [sp, #32]
 8007db6:	2322      	movs	r3, #34	; 0x22
 8007db8:	f04f 0800 	mov.w	r8, #0
 8007dbc:	f04f 0900 	mov.w	r9, #0
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	e78d      	b.n	8007ce0 <_strtod_l+0x488>
 8007dc4:	080096e7 	.word	0x080096e7
 8007dc8:	08009914 	.word	0x08009914
 8007dcc:	080096df 	.word	0x080096df
 8007dd0:	08009716 	.word	0x08009716
 8007dd4:	7ff00000 	.word	0x7ff00000
 8007dd8:	08009aa5 	.word	0x08009aa5
 8007ddc:	08009828 	.word	0x08009828
 8007de0:	08009800 	.word	0x08009800
 8007de4:	7ca00000 	.word	0x7ca00000
 8007de8:	7fefffff 	.word	0x7fefffff
 8007dec:	f015 0310 	ands.w	r3, r5, #16
 8007df0:	bf18      	it	ne
 8007df2:	236a      	movne	r3, #106	; 0x6a
 8007df4:	4640      	mov	r0, r8
 8007df6:	9305      	str	r3, [sp, #20]
 8007df8:	4649      	mov	r1, r9
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80080c8 <_strtod_l+0x870>
 8007e00:	07ea      	lsls	r2, r5, #31
 8007e02:	d504      	bpl.n	8007e0e <_strtod_l+0x5b6>
 8007e04:	e9da 2300 	ldrd	r2, r3, [sl]
 8007e08:	f7f8 fc86 	bl	8000718 <__aeabi_dmul>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	106d      	asrs	r5, r5, #1
 8007e10:	f10a 0a08 	add.w	sl, sl, #8
 8007e14:	d1f4      	bne.n	8007e00 <_strtod_l+0x5a8>
 8007e16:	b10b      	cbz	r3, 8007e1c <_strtod_l+0x5c4>
 8007e18:	4680      	mov	r8, r0
 8007e1a:	4689      	mov	r9, r1
 8007e1c:	9b05      	ldr	r3, [sp, #20]
 8007e1e:	b1bb      	cbz	r3, 8007e50 <_strtod_l+0x5f8>
 8007e20:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007e24:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	dd10      	ble.n	8007e50 <_strtod_l+0x5f8>
 8007e2e:	2b1f      	cmp	r3, #31
 8007e30:	f340 8128 	ble.w	8008084 <_strtod_l+0x82c>
 8007e34:	2b34      	cmp	r3, #52	; 0x34
 8007e36:	bfd8      	it	le
 8007e38:	f04f 33ff 	movle.w	r3, #4294967295
 8007e3c:	f04f 0800 	mov.w	r8, #0
 8007e40:	bfcf      	iteee	gt
 8007e42:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007e46:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007e4a:	4093      	lslle	r3, r2
 8007e4c:	ea03 0901 	andle.w	r9, r3, r1
 8007e50:	2200      	movs	r2, #0
 8007e52:	2300      	movs	r3, #0
 8007e54:	4640      	mov	r0, r8
 8007e56:	4649      	mov	r1, r9
 8007e58:	f7f8 fec6 	bl	8000be8 <__aeabi_dcmpeq>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d1a6      	bne.n	8007dae <_strtod_l+0x556>
 8007e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e62:	465a      	mov	r2, fp
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	4620      	mov	r0, r4
 8007e68:	4633      	mov	r3, r6
 8007e6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e6c:	f7ff f8dc 	bl	8007028 <__s2b>
 8007e70:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e72:	2800      	cmp	r0, #0
 8007e74:	f43f af2a 	beq.w	8007ccc <_strtod_l+0x474>
 8007e78:	2600      	movs	r6, #0
 8007e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e7c:	9b08      	ldr	r3, [sp, #32]
 8007e7e:	2a00      	cmp	r2, #0
 8007e80:	eba3 0307 	sub.w	r3, r3, r7
 8007e84:	bfa8      	it	ge
 8007e86:	2300      	movge	r3, #0
 8007e88:	46b3      	mov	fp, r6
 8007e8a:	9312      	str	r3, [sp, #72]	; 0x48
 8007e8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007e90:	9316      	str	r3, [sp, #88]	; 0x58
 8007e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e94:	4620      	mov	r0, r4
 8007e96:	6859      	ldr	r1, [r3, #4]
 8007e98:	f7ff f81e 	bl	8006ed8 <_Balloc>
 8007e9c:	9008      	str	r0, [sp, #32]
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	f43f af18 	beq.w	8007cd4 <_strtod_l+0x47c>
 8007ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ea6:	300c      	adds	r0, #12
 8007ea8:	691a      	ldr	r2, [r3, #16]
 8007eaa:	f103 010c 	add.w	r1, r3, #12
 8007eae:	3202      	adds	r2, #2
 8007eb0:	0092      	lsls	r2, r2, #2
 8007eb2:	f000 ff4f 	bl	8008d54 <memcpy>
 8007eb6:	ab1c      	add	r3, sp, #112	; 0x70
 8007eb8:	9301      	str	r3, [sp, #4]
 8007eba:	ab1b      	add	r3, sp, #108	; 0x6c
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	4642      	mov	r2, r8
 8007ec0:	464b      	mov	r3, r9
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007ec8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007ecc:	f7ff fbd8 	bl	8007680 <__d2b>
 8007ed0:	901a      	str	r0, [sp, #104]	; 0x68
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	f43f aefe 	beq.w	8007cd4 <_strtod_l+0x47c>
 8007ed8:	2101      	movs	r1, #1
 8007eda:	4620      	mov	r0, r4
 8007edc:	f7ff f93c 	bl	8007158 <__i2b>
 8007ee0:	4683      	mov	fp, r0
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	f43f aef6 	beq.w	8007cd4 <_strtod_l+0x47c>
 8007ee8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007eea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007eec:	2f00      	cmp	r7, #0
 8007eee:	bfab      	itete	ge
 8007ef0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007ef2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007ef4:	eb07 0a03 	addge.w	sl, r7, r3
 8007ef8:	1bdd      	sublt	r5, r3, r7
 8007efa:	9b05      	ldr	r3, [sp, #20]
 8007efc:	bfa8      	it	ge
 8007efe:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007f00:	eba7 0703 	sub.w	r7, r7, r3
 8007f04:	4417      	add	r7, r2
 8007f06:	4b71      	ldr	r3, [pc, #452]	; (80080cc <_strtod_l+0x874>)
 8007f08:	f107 37ff 	add.w	r7, r7, #4294967295
 8007f0c:	bfb8      	it	lt
 8007f0e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007f12:	429f      	cmp	r7, r3
 8007f14:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007f18:	f280 80c7 	bge.w	80080aa <_strtod_l+0x852>
 8007f1c:	1bdb      	subs	r3, r3, r7
 8007f1e:	2b1f      	cmp	r3, #31
 8007f20:	f04f 0101 	mov.w	r1, #1
 8007f24:	eba2 0203 	sub.w	r2, r2, r3
 8007f28:	f300 80b3 	bgt.w	8008092 <_strtod_l+0x83a>
 8007f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f30:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f32:	2300      	movs	r3, #0
 8007f34:	9310      	str	r3, [sp, #64]	; 0x40
 8007f36:	eb0a 0702 	add.w	r7, sl, r2
 8007f3a:	9b05      	ldr	r3, [sp, #20]
 8007f3c:	45ba      	cmp	sl, r7
 8007f3e:	4415      	add	r5, r2
 8007f40:	441d      	add	r5, r3
 8007f42:	4653      	mov	r3, sl
 8007f44:	bfa8      	it	ge
 8007f46:	463b      	movge	r3, r7
 8007f48:	42ab      	cmp	r3, r5
 8007f4a:	bfa8      	it	ge
 8007f4c:	462b      	movge	r3, r5
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	bfc2      	ittt	gt
 8007f52:	1aff      	subgt	r7, r7, r3
 8007f54:	1aed      	subgt	r5, r5, r3
 8007f56:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007f5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dd17      	ble.n	8007f90 <_strtod_l+0x738>
 8007f60:	4659      	mov	r1, fp
 8007f62:	461a      	mov	r2, r3
 8007f64:	4620      	mov	r0, r4
 8007f66:	f7ff f9b5 	bl	80072d4 <__pow5mult>
 8007f6a:	4683      	mov	fp, r0
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	f43f aeb1 	beq.w	8007cd4 <_strtod_l+0x47c>
 8007f72:	4601      	mov	r1, r0
 8007f74:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f76:	4620      	mov	r0, r4
 8007f78:	f7ff f904 	bl	8007184 <__multiply>
 8007f7c:	900a      	str	r0, [sp, #40]	; 0x28
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	f43f aea8 	beq.w	8007cd4 <_strtod_l+0x47c>
 8007f84:	4620      	mov	r0, r4
 8007f86:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f88:	f7fe ffe6 	bl	8006f58 <_Bfree>
 8007f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f8e:	931a      	str	r3, [sp, #104]	; 0x68
 8007f90:	2f00      	cmp	r7, #0
 8007f92:	f300 808f 	bgt.w	80080b4 <_strtod_l+0x85c>
 8007f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	dd08      	ble.n	8007fae <_strtod_l+0x756>
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007fa0:	9908      	ldr	r1, [sp, #32]
 8007fa2:	f7ff f997 	bl	80072d4 <__pow5mult>
 8007fa6:	9008      	str	r0, [sp, #32]
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	f43f ae93 	beq.w	8007cd4 <_strtod_l+0x47c>
 8007fae:	2d00      	cmp	r5, #0
 8007fb0:	dd08      	ble.n	8007fc4 <_strtod_l+0x76c>
 8007fb2:	462a      	mov	r2, r5
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	9908      	ldr	r1, [sp, #32]
 8007fb8:	f7ff f9e6 	bl	8007388 <__lshift>
 8007fbc:	9008      	str	r0, [sp, #32]
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	f43f ae88 	beq.w	8007cd4 <_strtod_l+0x47c>
 8007fc4:	f1ba 0f00 	cmp.w	sl, #0
 8007fc8:	dd08      	ble.n	8007fdc <_strtod_l+0x784>
 8007fca:	4659      	mov	r1, fp
 8007fcc:	4652      	mov	r2, sl
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f7ff f9da 	bl	8007388 <__lshift>
 8007fd4:	4683      	mov	fp, r0
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	f43f ae7c 	beq.w	8007cd4 <_strtod_l+0x47c>
 8007fdc:	4620      	mov	r0, r4
 8007fde:	9a08      	ldr	r2, [sp, #32]
 8007fe0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007fe2:	f7ff fa59 	bl	8007498 <__mdiff>
 8007fe6:	4606      	mov	r6, r0
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	f43f ae73 	beq.w	8007cd4 <_strtod_l+0x47c>
 8007fee:	2500      	movs	r5, #0
 8007ff0:	68c3      	ldr	r3, [r0, #12]
 8007ff2:	4659      	mov	r1, fp
 8007ff4:	60c5      	str	r5, [r0, #12]
 8007ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ff8:	f7ff fa32 	bl	8007460 <__mcmp>
 8007ffc:	42a8      	cmp	r0, r5
 8007ffe:	da6b      	bge.n	80080d8 <_strtod_l+0x880>
 8008000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008002:	ea53 0308 	orrs.w	r3, r3, r8
 8008006:	f040 808f 	bne.w	8008128 <_strtod_l+0x8d0>
 800800a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800800e:	2b00      	cmp	r3, #0
 8008010:	f040 808a 	bne.w	8008128 <_strtod_l+0x8d0>
 8008014:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008018:	0d1b      	lsrs	r3, r3, #20
 800801a:	051b      	lsls	r3, r3, #20
 800801c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008020:	f240 8082 	bls.w	8008128 <_strtod_l+0x8d0>
 8008024:	6973      	ldr	r3, [r6, #20]
 8008026:	b913      	cbnz	r3, 800802e <_strtod_l+0x7d6>
 8008028:	6933      	ldr	r3, [r6, #16]
 800802a:	2b01      	cmp	r3, #1
 800802c:	dd7c      	ble.n	8008128 <_strtod_l+0x8d0>
 800802e:	4631      	mov	r1, r6
 8008030:	2201      	movs	r2, #1
 8008032:	4620      	mov	r0, r4
 8008034:	f7ff f9a8 	bl	8007388 <__lshift>
 8008038:	4659      	mov	r1, fp
 800803a:	4606      	mov	r6, r0
 800803c:	f7ff fa10 	bl	8007460 <__mcmp>
 8008040:	2800      	cmp	r0, #0
 8008042:	dd71      	ble.n	8008128 <_strtod_l+0x8d0>
 8008044:	9905      	ldr	r1, [sp, #20]
 8008046:	464b      	mov	r3, r9
 8008048:	4a21      	ldr	r2, [pc, #132]	; (80080d0 <_strtod_l+0x878>)
 800804a:	2900      	cmp	r1, #0
 800804c:	f000 808d 	beq.w	800816a <_strtod_l+0x912>
 8008050:	ea02 0109 	and.w	r1, r2, r9
 8008054:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008058:	f300 8087 	bgt.w	800816a <_strtod_l+0x912>
 800805c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008060:	f77f aea9 	ble.w	8007db6 <_strtod_l+0x55e>
 8008064:	4640      	mov	r0, r8
 8008066:	4649      	mov	r1, r9
 8008068:	4b1a      	ldr	r3, [pc, #104]	; (80080d4 <_strtod_l+0x87c>)
 800806a:	2200      	movs	r2, #0
 800806c:	f7f8 fb54 	bl	8000718 <__aeabi_dmul>
 8008070:	4b17      	ldr	r3, [pc, #92]	; (80080d0 <_strtod_l+0x878>)
 8008072:	4680      	mov	r8, r0
 8008074:	400b      	ands	r3, r1
 8008076:	4689      	mov	r9, r1
 8008078:	2b00      	cmp	r3, #0
 800807a:	f47f ae35 	bne.w	8007ce8 <_strtod_l+0x490>
 800807e:	2322      	movs	r3, #34	; 0x22
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	e631      	b.n	8007ce8 <_strtod_l+0x490>
 8008084:	f04f 32ff 	mov.w	r2, #4294967295
 8008088:	fa02 f303 	lsl.w	r3, r2, r3
 800808c:	ea03 0808 	and.w	r8, r3, r8
 8008090:	e6de      	b.n	8007e50 <_strtod_l+0x5f8>
 8008092:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8008096:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800809a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800809e:	37e2      	adds	r7, #226	; 0xe2
 80080a0:	fa01 f307 	lsl.w	r3, r1, r7
 80080a4:	9310      	str	r3, [sp, #64]	; 0x40
 80080a6:	9113      	str	r1, [sp, #76]	; 0x4c
 80080a8:	e745      	b.n	8007f36 <_strtod_l+0x6de>
 80080aa:	2300      	movs	r3, #0
 80080ac:	9310      	str	r3, [sp, #64]	; 0x40
 80080ae:	2301      	movs	r3, #1
 80080b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80080b2:	e740      	b.n	8007f36 <_strtod_l+0x6de>
 80080b4:	463a      	mov	r2, r7
 80080b6:	4620      	mov	r0, r4
 80080b8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80080ba:	f7ff f965 	bl	8007388 <__lshift>
 80080be:	901a      	str	r0, [sp, #104]	; 0x68
 80080c0:	2800      	cmp	r0, #0
 80080c2:	f47f af68 	bne.w	8007f96 <_strtod_l+0x73e>
 80080c6:	e605      	b.n	8007cd4 <_strtod_l+0x47c>
 80080c8:	08009928 	.word	0x08009928
 80080cc:	fffffc02 	.word	0xfffffc02
 80080d0:	7ff00000 	.word	0x7ff00000
 80080d4:	39500000 	.word	0x39500000
 80080d8:	46ca      	mov	sl, r9
 80080da:	d165      	bne.n	80081a8 <_strtod_l+0x950>
 80080dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080e2:	b352      	cbz	r2, 800813a <_strtod_l+0x8e2>
 80080e4:	4a9e      	ldr	r2, [pc, #632]	; (8008360 <_strtod_l+0xb08>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d12a      	bne.n	8008140 <_strtod_l+0x8e8>
 80080ea:	9b05      	ldr	r3, [sp, #20]
 80080ec:	4641      	mov	r1, r8
 80080ee:	b1fb      	cbz	r3, 8008130 <_strtod_l+0x8d8>
 80080f0:	4b9c      	ldr	r3, [pc, #624]	; (8008364 <_strtod_l+0xb0c>)
 80080f2:	f04f 32ff 	mov.w	r2, #4294967295
 80080f6:	ea09 0303 	and.w	r3, r9, r3
 80080fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80080fe:	d81a      	bhi.n	8008136 <_strtod_l+0x8de>
 8008100:	0d1b      	lsrs	r3, r3, #20
 8008102:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008106:	fa02 f303 	lsl.w	r3, r2, r3
 800810a:	4299      	cmp	r1, r3
 800810c:	d118      	bne.n	8008140 <_strtod_l+0x8e8>
 800810e:	4b96      	ldr	r3, [pc, #600]	; (8008368 <_strtod_l+0xb10>)
 8008110:	459a      	cmp	sl, r3
 8008112:	d102      	bne.n	800811a <_strtod_l+0x8c2>
 8008114:	3101      	adds	r1, #1
 8008116:	f43f addd 	beq.w	8007cd4 <_strtod_l+0x47c>
 800811a:	f04f 0800 	mov.w	r8, #0
 800811e:	4b91      	ldr	r3, [pc, #580]	; (8008364 <_strtod_l+0xb0c>)
 8008120:	ea0a 0303 	and.w	r3, sl, r3
 8008124:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008128:	9b05      	ldr	r3, [sp, #20]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d19a      	bne.n	8008064 <_strtod_l+0x80c>
 800812e:	e5db      	b.n	8007ce8 <_strtod_l+0x490>
 8008130:	f04f 33ff 	mov.w	r3, #4294967295
 8008134:	e7e9      	b.n	800810a <_strtod_l+0x8b2>
 8008136:	4613      	mov	r3, r2
 8008138:	e7e7      	b.n	800810a <_strtod_l+0x8b2>
 800813a:	ea53 0308 	orrs.w	r3, r3, r8
 800813e:	d081      	beq.n	8008044 <_strtod_l+0x7ec>
 8008140:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008142:	b1e3      	cbz	r3, 800817e <_strtod_l+0x926>
 8008144:	ea13 0f0a 	tst.w	r3, sl
 8008148:	d0ee      	beq.n	8008128 <_strtod_l+0x8d0>
 800814a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800814c:	4640      	mov	r0, r8
 800814e:	4649      	mov	r1, r9
 8008150:	9a05      	ldr	r2, [sp, #20]
 8008152:	b1c3      	cbz	r3, 8008186 <_strtod_l+0x92e>
 8008154:	f7ff fb5c 	bl	8007810 <sulp>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800815e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008160:	f7f8 f924 	bl	80003ac <__adddf3>
 8008164:	4680      	mov	r8, r0
 8008166:	4689      	mov	r9, r1
 8008168:	e7de      	b.n	8008128 <_strtod_l+0x8d0>
 800816a:	4013      	ands	r3, r2
 800816c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008170:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008174:	f04f 38ff 	mov.w	r8, #4294967295
 8008178:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800817c:	e7d4      	b.n	8008128 <_strtod_l+0x8d0>
 800817e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008180:	ea13 0f08 	tst.w	r3, r8
 8008184:	e7e0      	b.n	8008148 <_strtod_l+0x8f0>
 8008186:	f7ff fb43 	bl	8007810 <sulp>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008190:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008192:	f7f8 f909 	bl	80003a8 <__aeabi_dsub>
 8008196:	2200      	movs	r2, #0
 8008198:	2300      	movs	r3, #0
 800819a:	4680      	mov	r8, r0
 800819c:	4689      	mov	r9, r1
 800819e:	f7f8 fd23 	bl	8000be8 <__aeabi_dcmpeq>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d0c0      	beq.n	8008128 <_strtod_l+0x8d0>
 80081a6:	e606      	b.n	8007db6 <_strtod_l+0x55e>
 80081a8:	4659      	mov	r1, fp
 80081aa:	4630      	mov	r0, r6
 80081ac:	f7ff fabe 	bl	800772c <__ratio>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80081b8:	2200      	movs	r2, #0
 80081ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081be:	f7f8 fd27 	bl	8000c10 <__aeabi_dcmple>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d06f      	beq.n	80082a6 <_strtod_l+0xa4e>
 80081c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d17c      	bne.n	80082c6 <_strtod_l+0xa6e>
 80081cc:	f1b8 0f00 	cmp.w	r8, #0
 80081d0:	d159      	bne.n	8008286 <_strtod_l+0xa2e>
 80081d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d17b      	bne.n	80082d2 <_strtod_l+0xa7a>
 80081da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081de:	2200      	movs	r2, #0
 80081e0:	4b62      	ldr	r3, [pc, #392]	; (800836c <_strtod_l+0xb14>)
 80081e2:	f7f8 fd0b 	bl	8000bfc <__aeabi_dcmplt>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d15a      	bne.n	80082a0 <_strtod_l+0xa48>
 80081ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081ee:	2200      	movs	r2, #0
 80081f0:	4b5f      	ldr	r3, [pc, #380]	; (8008370 <_strtod_l+0xb18>)
 80081f2:	f7f8 fa91 	bl	8000718 <__aeabi_dmul>
 80081f6:	4605      	mov	r5, r0
 80081f8:	460f      	mov	r7, r1
 80081fa:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80081fe:	9506      	str	r5, [sp, #24]
 8008200:	9307      	str	r3, [sp, #28]
 8008202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008206:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800820a:	4b56      	ldr	r3, [pc, #344]	; (8008364 <_strtod_l+0xb0c>)
 800820c:	4a55      	ldr	r2, [pc, #340]	; (8008364 <_strtod_l+0xb0c>)
 800820e:	ea0a 0303 	and.w	r3, sl, r3
 8008212:	9313      	str	r3, [sp, #76]	; 0x4c
 8008214:	4b57      	ldr	r3, [pc, #348]	; (8008374 <_strtod_l+0xb1c>)
 8008216:	ea0a 0202 	and.w	r2, sl, r2
 800821a:	429a      	cmp	r2, r3
 800821c:	f040 80b0 	bne.w	8008380 <_strtod_l+0xb28>
 8008220:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008224:	4640      	mov	r0, r8
 8008226:	4649      	mov	r1, r9
 8008228:	f7ff f9c2 	bl	80075b0 <__ulp>
 800822c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008230:	f7f8 fa72 	bl	8000718 <__aeabi_dmul>
 8008234:	4642      	mov	r2, r8
 8008236:	464b      	mov	r3, r9
 8008238:	f7f8 f8b8 	bl	80003ac <__adddf3>
 800823c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8008364 <_strtod_l+0xb0c>
 8008240:	4a4d      	ldr	r2, [pc, #308]	; (8008378 <_strtod_l+0xb20>)
 8008242:	ea01 0a0a 	and.w	sl, r1, sl
 8008246:	4592      	cmp	sl, r2
 8008248:	4680      	mov	r8, r0
 800824a:	d948      	bls.n	80082de <_strtod_l+0xa86>
 800824c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800824e:	4b46      	ldr	r3, [pc, #280]	; (8008368 <_strtod_l+0xb10>)
 8008250:	429a      	cmp	r2, r3
 8008252:	d103      	bne.n	800825c <_strtod_l+0xa04>
 8008254:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008256:	3301      	adds	r3, #1
 8008258:	f43f ad3c 	beq.w	8007cd4 <_strtod_l+0x47c>
 800825c:	f04f 38ff 	mov.w	r8, #4294967295
 8008260:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008368 <_strtod_l+0xb10>
 8008264:	4620      	mov	r0, r4
 8008266:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008268:	f7fe fe76 	bl	8006f58 <_Bfree>
 800826c:	4620      	mov	r0, r4
 800826e:	9908      	ldr	r1, [sp, #32]
 8008270:	f7fe fe72 	bl	8006f58 <_Bfree>
 8008274:	4659      	mov	r1, fp
 8008276:	4620      	mov	r0, r4
 8008278:	f7fe fe6e 	bl	8006f58 <_Bfree>
 800827c:	4631      	mov	r1, r6
 800827e:	4620      	mov	r0, r4
 8008280:	f7fe fe6a 	bl	8006f58 <_Bfree>
 8008284:	e605      	b.n	8007e92 <_strtod_l+0x63a>
 8008286:	f1b8 0f01 	cmp.w	r8, #1
 800828a:	d103      	bne.n	8008294 <_strtod_l+0xa3c>
 800828c:	f1b9 0f00 	cmp.w	r9, #0
 8008290:	f43f ad91 	beq.w	8007db6 <_strtod_l+0x55e>
 8008294:	2200      	movs	r2, #0
 8008296:	4b39      	ldr	r3, [pc, #228]	; (800837c <_strtod_l+0xb24>)
 8008298:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800829a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800829e:	e016      	b.n	80082ce <_strtod_l+0xa76>
 80082a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80082a2:	4f33      	ldr	r7, [pc, #204]	; (8008370 <_strtod_l+0xb18>)
 80082a4:	e7a9      	b.n	80081fa <_strtod_l+0x9a2>
 80082a6:	4b32      	ldr	r3, [pc, #200]	; (8008370 <_strtod_l+0xb18>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082ae:	f7f8 fa33 	bl	8000718 <__aeabi_dmul>
 80082b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082b4:	4605      	mov	r5, r0
 80082b6:	460f      	mov	r7, r1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d09e      	beq.n	80081fa <_strtod_l+0x9a2>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082c4:	e79d      	b.n	8008202 <_strtod_l+0x9aa>
 80082c6:	2200      	movs	r2, #0
 80082c8:	4b28      	ldr	r3, [pc, #160]	; (800836c <_strtod_l+0xb14>)
 80082ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082ce:	4f27      	ldr	r7, [pc, #156]	; (800836c <_strtod_l+0xb14>)
 80082d0:	e797      	b.n	8008202 <_strtod_l+0x9aa>
 80082d2:	2200      	movs	r2, #0
 80082d4:	4b29      	ldr	r3, [pc, #164]	; (800837c <_strtod_l+0xb24>)
 80082d6:	4645      	mov	r5, r8
 80082d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082dc:	e7f7      	b.n	80082ce <_strtod_l+0xa76>
 80082de:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80082e2:	9b05      	ldr	r3, [sp, #20]
 80082e4:	46ca      	mov	sl, r9
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1bc      	bne.n	8008264 <_strtod_l+0xa0c>
 80082ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80082f0:	0d1b      	lsrs	r3, r3, #20
 80082f2:	051b      	lsls	r3, r3, #20
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d1b5      	bne.n	8008264 <_strtod_l+0xa0c>
 80082f8:	4628      	mov	r0, r5
 80082fa:	4639      	mov	r1, r7
 80082fc:	f7f8 fe88 	bl	8001010 <__aeabi_d2lz>
 8008300:	f7f8 f9dc 	bl	80006bc <__aeabi_l2d>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	4628      	mov	r0, r5
 800830a:	4639      	mov	r1, r7
 800830c:	f7f8 f84c 	bl	80003a8 <__aeabi_dsub>
 8008310:	460b      	mov	r3, r1
 8008312:	4602      	mov	r2, r0
 8008314:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8008318:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800831c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800831e:	ea4a 0a08 	orr.w	sl, sl, r8
 8008322:	ea5a 0a03 	orrs.w	sl, sl, r3
 8008326:	d06c      	beq.n	8008402 <_strtod_l+0xbaa>
 8008328:	a309      	add	r3, pc, #36	; (adr r3, 8008350 <_strtod_l+0xaf8>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	f7f8 fc65 	bl	8000bfc <__aeabi_dcmplt>
 8008332:	2800      	cmp	r0, #0
 8008334:	f47f acd8 	bne.w	8007ce8 <_strtod_l+0x490>
 8008338:	a307      	add	r3, pc, #28	; (adr r3, 8008358 <_strtod_l+0xb00>)
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008342:	f7f8 fc79 	bl	8000c38 <__aeabi_dcmpgt>
 8008346:	2800      	cmp	r0, #0
 8008348:	d08c      	beq.n	8008264 <_strtod_l+0xa0c>
 800834a:	e4cd      	b.n	8007ce8 <_strtod_l+0x490>
 800834c:	f3af 8000 	nop.w
 8008350:	94a03595 	.word	0x94a03595
 8008354:	3fdfffff 	.word	0x3fdfffff
 8008358:	35afe535 	.word	0x35afe535
 800835c:	3fe00000 	.word	0x3fe00000
 8008360:	000fffff 	.word	0x000fffff
 8008364:	7ff00000 	.word	0x7ff00000
 8008368:	7fefffff 	.word	0x7fefffff
 800836c:	3ff00000 	.word	0x3ff00000
 8008370:	3fe00000 	.word	0x3fe00000
 8008374:	7fe00000 	.word	0x7fe00000
 8008378:	7c9fffff 	.word	0x7c9fffff
 800837c:	bff00000 	.word	0xbff00000
 8008380:	9b05      	ldr	r3, [sp, #20]
 8008382:	b333      	cbz	r3, 80083d2 <_strtod_l+0xb7a>
 8008384:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008386:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800838a:	d822      	bhi.n	80083d2 <_strtod_l+0xb7a>
 800838c:	a328      	add	r3, pc, #160	; (adr r3, 8008430 <_strtod_l+0xbd8>)
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	4628      	mov	r0, r5
 8008394:	4639      	mov	r1, r7
 8008396:	f7f8 fc3b 	bl	8000c10 <__aeabi_dcmple>
 800839a:	b1a0      	cbz	r0, 80083c6 <_strtod_l+0xb6e>
 800839c:	4639      	mov	r1, r7
 800839e:	4628      	mov	r0, r5
 80083a0:	f7f8 fc92 	bl	8000cc8 <__aeabi_d2uiz>
 80083a4:	2801      	cmp	r0, #1
 80083a6:	bf38      	it	cc
 80083a8:	2001      	movcc	r0, #1
 80083aa:	f7f8 f93b 	bl	8000624 <__aeabi_ui2d>
 80083ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b0:	4605      	mov	r5, r0
 80083b2:	460f      	mov	r7, r1
 80083b4:	bb03      	cbnz	r3, 80083f8 <_strtod_l+0xba0>
 80083b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083ba:	9014      	str	r0, [sp, #80]	; 0x50
 80083bc:	9315      	str	r3, [sp, #84]	; 0x54
 80083be:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80083c2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80083c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083ca:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80083ce:	1a9b      	subs	r3, r3, r2
 80083d0:	9311      	str	r3, [sp, #68]	; 0x44
 80083d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80083d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80083d6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80083da:	f7ff f8e9 	bl	80075b0 <__ulp>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4640      	mov	r0, r8
 80083e4:	4649      	mov	r1, r9
 80083e6:	f7f8 f997 	bl	8000718 <__aeabi_dmul>
 80083ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083ee:	f7f7 ffdd 	bl	80003ac <__adddf3>
 80083f2:	4680      	mov	r8, r0
 80083f4:	4689      	mov	r9, r1
 80083f6:	e774      	b.n	80082e2 <_strtod_l+0xa8a>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008400:	e7dd      	b.n	80083be <_strtod_l+0xb66>
 8008402:	a30d      	add	r3, pc, #52	; (adr r3, 8008438 <_strtod_l+0xbe0>)
 8008404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008408:	f7f8 fbf8 	bl	8000bfc <__aeabi_dcmplt>
 800840c:	e79b      	b.n	8008346 <_strtod_l+0xaee>
 800840e:	2300      	movs	r3, #0
 8008410:	930e      	str	r3, [sp, #56]	; 0x38
 8008412:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008414:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	f7ff ba5b 	b.w	80078d2 <_strtod_l+0x7a>
 800841c:	2a65      	cmp	r2, #101	; 0x65
 800841e:	f43f ab52 	beq.w	8007ac6 <_strtod_l+0x26e>
 8008422:	2a45      	cmp	r2, #69	; 0x45
 8008424:	f43f ab4f 	beq.w	8007ac6 <_strtod_l+0x26e>
 8008428:	2301      	movs	r3, #1
 800842a:	f7ff bb87 	b.w	8007b3c <_strtod_l+0x2e4>
 800842e:	bf00      	nop
 8008430:	ffc00000 	.word	0xffc00000
 8008434:	41dfffff 	.word	0x41dfffff
 8008438:	94a03595 	.word	0x94a03595
 800843c:	3fcfffff 	.word	0x3fcfffff

08008440 <_strtod_r>:
 8008440:	4b01      	ldr	r3, [pc, #4]	; (8008448 <_strtod_r+0x8>)
 8008442:	f7ff ba09 	b.w	8007858 <_strtod_l>
 8008446:	bf00      	nop
 8008448:	20000068 	.word	0x20000068

0800844c <_strtol_l.constprop.0>:
 800844c:	2b01      	cmp	r3, #1
 800844e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008452:	4686      	mov	lr, r0
 8008454:	4690      	mov	r8, r2
 8008456:	d001      	beq.n	800845c <_strtol_l.constprop.0+0x10>
 8008458:	2b24      	cmp	r3, #36	; 0x24
 800845a:	d906      	bls.n	800846a <_strtol_l.constprop.0+0x1e>
 800845c:	f7fd fd92 	bl	8005f84 <__errno>
 8008460:	2316      	movs	r3, #22
 8008462:	6003      	str	r3, [r0, #0]
 8008464:	2000      	movs	r0, #0
 8008466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800846a:	460d      	mov	r5, r1
 800846c:	4835      	ldr	r0, [pc, #212]	; (8008544 <_strtol_l.constprop.0+0xf8>)
 800846e:	462a      	mov	r2, r5
 8008470:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008474:	5d06      	ldrb	r6, [r0, r4]
 8008476:	f016 0608 	ands.w	r6, r6, #8
 800847a:	d1f8      	bne.n	800846e <_strtol_l.constprop.0+0x22>
 800847c:	2c2d      	cmp	r4, #45	; 0x2d
 800847e:	d12e      	bne.n	80084de <_strtol_l.constprop.0+0x92>
 8008480:	2601      	movs	r6, #1
 8008482:	782c      	ldrb	r4, [r5, #0]
 8008484:	1c95      	adds	r5, r2, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d057      	beq.n	800853a <_strtol_l.constprop.0+0xee>
 800848a:	2b10      	cmp	r3, #16
 800848c:	d109      	bne.n	80084a2 <_strtol_l.constprop.0+0x56>
 800848e:	2c30      	cmp	r4, #48	; 0x30
 8008490:	d107      	bne.n	80084a2 <_strtol_l.constprop.0+0x56>
 8008492:	782a      	ldrb	r2, [r5, #0]
 8008494:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008498:	2a58      	cmp	r2, #88	; 0x58
 800849a:	d149      	bne.n	8008530 <_strtol_l.constprop.0+0xe4>
 800849c:	2310      	movs	r3, #16
 800849e:	786c      	ldrb	r4, [r5, #1]
 80084a0:	3502      	adds	r5, #2
 80084a2:	2200      	movs	r2, #0
 80084a4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80084a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80084ac:	fbbc f9f3 	udiv	r9, ip, r3
 80084b0:	4610      	mov	r0, r2
 80084b2:	fb03 ca19 	mls	sl, r3, r9, ip
 80084b6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80084ba:	2f09      	cmp	r7, #9
 80084bc:	d814      	bhi.n	80084e8 <_strtol_l.constprop.0+0x9c>
 80084be:	463c      	mov	r4, r7
 80084c0:	42a3      	cmp	r3, r4
 80084c2:	dd20      	ble.n	8008506 <_strtol_l.constprop.0+0xba>
 80084c4:	1c57      	adds	r7, r2, #1
 80084c6:	d007      	beq.n	80084d8 <_strtol_l.constprop.0+0x8c>
 80084c8:	4581      	cmp	r9, r0
 80084ca:	d319      	bcc.n	8008500 <_strtol_l.constprop.0+0xb4>
 80084cc:	d101      	bne.n	80084d2 <_strtol_l.constprop.0+0x86>
 80084ce:	45a2      	cmp	sl, r4
 80084d0:	db16      	blt.n	8008500 <_strtol_l.constprop.0+0xb4>
 80084d2:	2201      	movs	r2, #1
 80084d4:	fb00 4003 	mla	r0, r0, r3, r4
 80084d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084dc:	e7eb      	b.n	80084b6 <_strtol_l.constprop.0+0x6a>
 80084de:	2c2b      	cmp	r4, #43	; 0x2b
 80084e0:	bf04      	itt	eq
 80084e2:	782c      	ldrbeq	r4, [r5, #0]
 80084e4:	1c95      	addeq	r5, r2, #2
 80084e6:	e7ce      	b.n	8008486 <_strtol_l.constprop.0+0x3a>
 80084e8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80084ec:	2f19      	cmp	r7, #25
 80084ee:	d801      	bhi.n	80084f4 <_strtol_l.constprop.0+0xa8>
 80084f0:	3c37      	subs	r4, #55	; 0x37
 80084f2:	e7e5      	b.n	80084c0 <_strtol_l.constprop.0+0x74>
 80084f4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80084f8:	2f19      	cmp	r7, #25
 80084fa:	d804      	bhi.n	8008506 <_strtol_l.constprop.0+0xba>
 80084fc:	3c57      	subs	r4, #87	; 0x57
 80084fe:	e7df      	b.n	80084c0 <_strtol_l.constprop.0+0x74>
 8008500:	f04f 32ff 	mov.w	r2, #4294967295
 8008504:	e7e8      	b.n	80084d8 <_strtol_l.constprop.0+0x8c>
 8008506:	1c53      	adds	r3, r2, #1
 8008508:	d108      	bne.n	800851c <_strtol_l.constprop.0+0xd0>
 800850a:	2322      	movs	r3, #34	; 0x22
 800850c:	4660      	mov	r0, ip
 800850e:	f8ce 3000 	str.w	r3, [lr]
 8008512:	f1b8 0f00 	cmp.w	r8, #0
 8008516:	d0a6      	beq.n	8008466 <_strtol_l.constprop.0+0x1a>
 8008518:	1e69      	subs	r1, r5, #1
 800851a:	e006      	b.n	800852a <_strtol_l.constprop.0+0xde>
 800851c:	b106      	cbz	r6, 8008520 <_strtol_l.constprop.0+0xd4>
 800851e:	4240      	negs	r0, r0
 8008520:	f1b8 0f00 	cmp.w	r8, #0
 8008524:	d09f      	beq.n	8008466 <_strtol_l.constprop.0+0x1a>
 8008526:	2a00      	cmp	r2, #0
 8008528:	d1f6      	bne.n	8008518 <_strtol_l.constprop.0+0xcc>
 800852a:	f8c8 1000 	str.w	r1, [r8]
 800852e:	e79a      	b.n	8008466 <_strtol_l.constprop.0+0x1a>
 8008530:	2430      	movs	r4, #48	; 0x30
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1b5      	bne.n	80084a2 <_strtol_l.constprop.0+0x56>
 8008536:	2308      	movs	r3, #8
 8008538:	e7b3      	b.n	80084a2 <_strtol_l.constprop.0+0x56>
 800853a:	2c30      	cmp	r4, #48	; 0x30
 800853c:	d0a9      	beq.n	8008492 <_strtol_l.constprop.0+0x46>
 800853e:	230a      	movs	r3, #10
 8008540:	e7af      	b.n	80084a2 <_strtol_l.constprop.0+0x56>
 8008542:	bf00      	nop
 8008544:	08009951 	.word	0x08009951

08008548 <_strtol_r>:
 8008548:	f7ff bf80 	b.w	800844c <_strtol_l.constprop.0>

0800854c <__ssputs_r>:
 800854c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008550:	461f      	mov	r7, r3
 8008552:	688e      	ldr	r6, [r1, #8]
 8008554:	4682      	mov	sl, r0
 8008556:	42be      	cmp	r6, r7
 8008558:	460c      	mov	r4, r1
 800855a:	4690      	mov	r8, r2
 800855c:	680b      	ldr	r3, [r1, #0]
 800855e:	d82c      	bhi.n	80085ba <__ssputs_r+0x6e>
 8008560:	898a      	ldrh	r2, [r1, #12]
 8008562:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008566:	d026      	beq.n	80085b6 <__ssputs_r+0x6a>
 8008568:	6965      	ldr	r5, [r4, #20]
 800856a:	6909      	ldr	r1, [r1, #16]
 800856c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008570:	eba3 0901 	sub.w	r9, r3, r1
 8008574:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008578:	1c7b      	adds	r3, r7, #1
 800857a:	444b      	add	r3, r9
 800857c:	106d      	asrs	r5, r5, #1
 800857e:	429d      	cmp	r5, r3
 8008580:	bf38      	it	cc
 8008582:	461d      	movcc	r5, r3
 8008584:	0553      	lsls	r3, r2, #21
 8008586:	d527      	bpl.n	80085d8 <__ssputs_r+0x8c>
 8008588:	4629      	mov	r1, r5
 800858a:	f7fe fc19 	bl	8006dc0 <_malloc_r>
 800858e:	4606      	mov	r6, r0
 8008590:	b360      	cbz	r0, 80085ec <__ssputs_r+0xa0>
 8008592:	464a      	mov	r2, r9
 8008594:	6921      	ldr	r1, [r4, #16]
 8008596:	f000 fbdd 	bl	8008d54 <memcpy>
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a4:	81a3      	strh	r3, [r4, #12]
 80085a6:	6126      	str	r6, [r4, #16]
 80085a8:	444e      	add	r6, r9
 80085aa:	6026      	str	r6, [r4, #0]
 80085ac:	463e      	mov	r6, r7
 80085ae:	6165      	str	r5, [r4, #20]
 80085b0:	eba5 0509 	sub.w	r5, r5, r9
 80085b4:	60a5      	str	r5, [r4, #8]
 80085b6:	42be      	cmp	r6, r7
 80085b8:	d900      	bls.n	80085bc <__ssputs_r+0x70>
 80085ba:	463e      	mov	r6, r7
 80085bc:	4632      	mov	r2, r6
 80085be:	4641      	mov	r1, r8
 80085c0:	6820      	ldr	r0, [r4, #0]
 80085c2:	f000 fb68 	bl	8008c96 <memmove>
 80085c6:	2000      	movs	r0, #0
 80085c8:	68a3      	ldr	r3, [r4, #8]
 80085ca:	1b9b      	subs	r3, r3, r6
 80085cc:	60a3      	str	r3, [r4, #8]
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	4433      	add	r3, r6
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d8:	462a      	mov	r2, r5
 80085da:	f000 ff6c 	bl	80094b6 <_realloc_r>
 80085de:	4606      	mov	r6, r0
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d1e0      	bne.n	80085a6 <__ssputs_r+0x5a>
 80085e4:	4650      	mov	r0, sl
 80085e6:	6921      	ldr	r1, [r4, #16]
 80085e8:	f7fe fb7a 	bl	8006ce0 <_free_r>
 80085ec:	230c      	movs	r3, #12
 80085ee:	f8ca 3000 	str.w	r3, [sl]
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295
 80085f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085fc:	81a3      	strh	r3, [r4, #12]
 80085fe:	e7e9      	b.n	80085d4 <__ssputs_r+0x88>

08008600 <_svfiprintf_r>:
 8008600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	4698      	mov	r8, r3
 8008606:	898b      	ldrh	r3, [r1, #12]
 8008608:	4607      	mov	r7, r0
 800860a:	061b      	lsls	r3, r3, #24
 800860c:	460d      	mov	r5, r1
 800860e:	4614      	mov	r4, r2
 8008610:	b09d      	sub	sp, #116	; 0x74
 8008612:	d50e      	bpl.n	8008632 <_svfiprintf_r+0x32>
 8008614:	690b      	ldr	r3, [r1, #16]
 8008616:	b963      	cbnz	r3, 8008632 <_svfiprintf_r+0x32>
 8008618:	2140      	movs	r1, #64	; 0x40
 800861a:	f7fe fbd1 	bl	8006dc0 <_malloc_r>
 800861e:	6028      	str	r0, [r5, #0]
 8008620:	6128      	str	r0, [r5, #16]
 8008622:	b920      	cbnz	r0, 800862e <_svfiprintf_r+0x2e>
 8008624:	230c      	movs	r3, #12
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	f04f 30ff 	mov.w	r0, #4294967295
 800862c:	e0d0      	b.n	80087d0 <_svfiprintf_r+0x1d0>
 800862e:	2340      	movs	r3, #64	; 0x40
 8008630:	616b      	str	r3, [r5, #20]
 8008632:	2300      	movs	r3, #0
 8008634:	9309      	str	r3, [sp, #36]	; 0x24
 8008636:	2320      	movs	r3, #32
 8008638:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800863c:	2330      	movs	r3, #48	; 0x30
 800863e:	f04f 0901 	mov.w	r9, #1
 8008642:	f8cd 800c 	str.w	r8, [sp, #12]
 8008646:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80087e8 <_svfiprintf_r+0x1e8>
 800864a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800864e:	4623      	mov	r3, r4
 8008650:	469a      	mov	sl, r3
 8008652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008656:	b10a      	cbz	r2, 800865c <_svfiprintf_r+0x5c>
 8008658:	2a25      	cmp	r2, #37	; 0x25
 800865a:	d1f9      	bne.n	8008650 <_svfiprintf_r+0x50>
 800865c:	ebba 0b04 	subs.w	fp, sl, r4
 8008660:	d00b      	beq.n	800867a <_svfiprintf_r+0x7a>
 8008662:	465b      	mov	r3, fp
 8008664:	4622      	mov	r2, r4
 8008666:	4629      	mov	r1, r5
 8008668:	4638      	mov	r0, r7
 800866a:	f7ff ff6f 	bl	800854c <__ssputs_r>
 800866e:	3001      	adds	r0, #1
 8008670:	f000 80a9 	beq.w	80087c6 <_svfiprintf_r+0x1c6>
 8008674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008676:	445a      	add	r2, fp
 8008678:	9209      	str	r2, [sp, #36]	; 0x24
 800867a:	f89a 3000 	ldrb.w	r3, [sl]
 800867e:	2b00      	cmp	r3, #0
 8008680:	f000 80a1 	beq.w	80087c6 <_svfiprintf_r+0x1c6>
 8008684:	2300      	movs	r3, #0
 8008686:	f04f 32ff 	mov.w	r2, #4294967295
 800868a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800868e:	f10a 0a01 	add.w	sl, sl, #1
 8008692:	9304      	str	r3, [sp, #16]
 8008694:	9307      	str	r3, [sp, #28]
 8008696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800869a:	931a      	str	r3, [sp, #104]	; 0x68
 800869c:	4654      	mov	r4, sl
 800869e:	2205      	movs	r2, #5
 80086a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a4:	4850      	ldr	r0, [pc, #320]	; (80087e8 <_svfiprintf_r+0x1e8>)
 80086a6:	f7fd fc99 	bl	8005fdc <memchr>
 80086aa:	9a04      	ldr	r2, [sp, #16]
 80086ac:	b9d8      	cbnz	r0, 80086e6 <_svfiprintf_r+0xe6>
 80086ae:	06d0      	lsls	r0, r2, #27
 80086b0:	bf44      	itt	mi
 80086b2:	2320      	movmi	r3, #32
 80086b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086b8:	0711      	lsls	r1, r2, #28
 80086ba:	bf44      	itt	mi
 80086bc:	232b      	movmi	r3, #43	; 0x2b
 80086be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086c2:	f89a 3000 	ldrb.w	r3, [sl]
 80086c6:	2b2a      	cmp	r3, #42	; 0x2a
 80086c8:	d015      	beq.n	80086f6 <_svfiprintf_r+0xf6>
 80086ca:	4654      	mov	r4, sl
 80086cc:	2000      	movs	r0, #0
 80086ce:	f04f 0c0a 	mov.w	ip, #10
 80086d2:	9a07      	ldr	r2, [sp, #28]
 80086d4:	4621      	mov	r1, r4
 80086d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086da:	3b30      	subs	r3, #48	; 0x30
 80086dc:	2b09      	cmp	r3, #9
 80086de:	d94d      	bls.n	800877c <_svfiprintf_r+0x17c>
 80086e0:	b1b0      	cbz	r0, 8008710 <_svfiprintf_r+0x110>
 80086e2:	9207      	str	r2, [sp, #28]
 80086e4:	e014      	b.n	8008710 <_svfiprintf_r+0x110>
 80086e6:	eba0 0308 	sub.w	r3, r0, r8
 80086ea:	fa09 f303 	lsl.w	r3, r9, r3
 80086ee:	4313      	orrs	r3, r2
 80086f0:	46a2      	mov	sl, r4
 80086f2:	9304      	str	r3, [sp, #16]
 80086f4:	e7d2      	b.n	800869c <_svfiprintf_r+0x9c>
 80086f6:	9b03      	ldr	r3, [sp, #12]
 80086f8:	1d19      	adds	r1, r3, #4
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	9103      	str	r1, [sp, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	bfbb      	ittet	lt
 8008702:	425b      	neglt	r3, r3
 8008704:	f042 0202 	orrlt.w	r2, r2, #2
 8008708:	9307      	strge	r3, [sp, #28]
 800870a:	9307      	strlt	r3, [sp, #28]
 800870c:	bfb8      	it	lt
 800870e:	9204      	strlt	r2, [sp, #16]
 8008710:	7823      	ldrb	r3, [r4, #0]
 8008712:	2b2e      	cmp	r3, #46	; 0x2e
 8008714:	d10c      	bne.n	8008730 <_svfiprintf_r+0x130>
 8008716:	7863      	ldrb	r3, [r4, #1]
 8008718:	2b2a      	cmp	r3, #42	; 0x2a
 800871a:	d134      	bne.n	8008786 <_svfiprintf_r+0x186>
 800871c:	9b03      	ldr	r3, [sp, #12]
 800871e:	3402      	adds	r4, #2
 8008720:	1d1a      	adds	r2, r3, #4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	9203      	str	r2, [sp, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	bfb8      	it	lt
 800872a:	f04f 33ff 	movlt.w	r3, #4294967295
 800872e:	9305      	str	r3, [sp, #20]
 8008730:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80087ec <_svfiprintf_r+0x1ec>
 8008734:	2203      	movs	r2, #3
 8008736:	4650      	mov	r0, sl
 8008738:	7821      	ldrb	r1, [r4, #0]
 800873a:	f7fd fc4f 	bl	8005fdc <memchr>
 800873e:	b138      	cbz	r0, 8008750 <_svfiprintf_r+0x150>
 8008740:	2240      	movs	r2, #64	; 0x40
 8008742:	9b04      	ldr	r3, [sp, #16]
 8008744:	eba0 000a 	sub.w	r0, r0, sl
 8008748:	4082      	lsls	r2, r0
 800874a:	4313      	orrs	r3, r2
 800874c:	3401      	adds	r4, #1
 800874e:	9304      	str	r3, [sp, #16]
 8008750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008754:	2206      	movs	r2, #6
 8008756:	4826      	ldr	r0, [pc, #152]	; (80087f0 <_svfiprintf_r+0x1f0>)
 8008758:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800875c:	f7fd fc3e 	bl	8005fdc <memchr>
 8008760:	2800      	cmp	r0, #0
 8008762:	d038      	beq.n	80087d6 <_svfiprintf_r+0x1d6>
 8008764:	4b23      	ldr	r3, [pc, #140]	; (80087f4 <_svfiprintf_r+0x1f4>)
 8008766:	bb1b      	cbnz	r3, 80087b0 <_svfiprintf_r+0x1b0>
 8008768:	9b03      	ldr	r3, [sp, #12]
 800876a:	3307      	adds	r3, #7
 800876c:	f023 0307 	bic.w	r3, r3, #7
 8008770:	3308      	adds	r3, #8
 8008772:	9303      	str	r3, [sp, #12]
 8008774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008776:	4433      	add	r3, r6
 8008778:	9309      	str	r3, [sp, #36]	; 0x24
 800877a:	e768      	b.n	800864e <_svfiprintf_r+0x4e>
 800877c:	460c      	mov	r4, r1
 800877e:	2001      	movs	r0, #1
 8008780:	fb0c 3202 	mla	r2, ip, r2, r3
 8008784:	e7a6      	b.n	80086d4 <_svfiprintf_r+0xd4>
 8008786:	2300      	movs	r3, #0
 8008788:	f04f 0c0a 	mov.w	ip, #10
 800878c:	4619      	mov	r1, r3
 800878e:	3401      	adds	r4, #1
 8008790:	9305      	str	r3, [sp, #20]
 8008792:	4620      	mov	r0, r4
 8008794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008798:	3a30      	subs	r2, #48	; 0x30
 800879a:	2a09      	cmp	r2, #9
 800879c:	d903      	bls.n	80087a6 <_svfiprintf_r+0x1a6>
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d0c6      	beq.n	8008730 <_svfiprintf_r+0x130>
 80087a2:	9105      	str	r1, [sp, #20]
 80087a4:	e7c4      	b.n	8008730 <_svfiprintf_r+0x130>
 80087a6:	4604      	mov	r4, r0
 80087a8:	2301      	movs	r3, #1
 80087aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80087ae:	e7f0      	b.n	8008792 <_svfiprintf_r+0x192>
 80087b0:	ab03      	add	r3, sp, #12
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	462a      	mov	r2, r5
 80087b6:	4638      	mov	r0, r7
 80087b8:	4b0f      	ldr	r3, [pc, #60]	; (80087f8 <_svfiprintf_r+0x1f8>)
 80087ba:	a904      	add	r1, sp, #16
 80087bc:	f7fc fbaa 	bl	8004f14 <_printf_float>
 80087c0:	1c42      	adds	r2, r0, #1
 80087c2:	4606      	mov	r6, r0
 80087c4:	d1d6      	bne.n	8008774 <_svfiprintf_r+0x174>
 80087c6:	89ab      	ldrh	r3, [r5, #12]
 80087c8:	065b      	lsls	r3, r3, #25
 80087ca:	f53f af2d 	bmi.w	8008628 <_svfiprintf_r+0x28>
 80087ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087d0:	b01d      	add	sp, #116	; 0x74
 80087d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d6:	ab03      	add	r3, sp, #12
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	462a      	mov	r2, r5
 80087dc:	4638      	mov	r0, r7
 80087de:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <_svfiprintf_r+0x1f8>)
 80087e0:	a904      	add	r1, sp, #16
 80087e2:	f7fc fe37 	bl	8005454 <_printf_i>
 80087e6:	e7eb      	b.n	80087c0 <_svfiprintf_r+0x1c0>
 80087e8:	08009a51 	.word	0x08009a51
 80087ec:	08009a57 	.word	0x08009a57
 80087f0:	08009a5b 	.word	0x08009a5b
 80087f4:	08004f15 	.word	0x08004f15
 80087f8:	0800854d 	.word	0x0800854d

080087fc <__sfputc_r>:
 80087fc:	6893      	ldr	r3, [r2, #8]
 80087fe:	b410      	push	{r4}
 8008800:	3b01      	subs	r3, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	6093      	str	r3, [r2, #8]
 8008806:	da07      	bge.n	8008818 <__sfputc_r+0x1c>
 8008808:	6994      	ldr	r4, [r2, #24]
 800880a:	42a3      	cmp	r3, r4
 800880c:	db01      	blt.n	8008812 <__sfputc_r+0x16>
 800880e:	290a      	cmp	r1, #10
 8008810:	d102      	bne.n	8008818 <__sfputc_r+0x1c>
 8008812:	bc10      	pop	{r4}
 8008814:	f7fd bacf 	b.w	8005db6 <__swbuf_r>
 8008818:	6813      	ldr	r3, [r2, #0]
 800881a:	1c58      	adds	r0, r3, #1
 800881c:	6010      	str	r0, [r2, #0]
 800881e:	7019      	strb	r1, [r3, #0]
 8008820:	4608      	mov	r0, r1
 8008822:	bc10      	pop	{r4}
 8008824:	4770      	bx	lr

08008826 <__sfputs_r>:
 8008826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008828:	4606      	mov	r6, r0
 800882a:	460f      	mov	r7, r1
 800882c:	4614      	mov	r4, r2
 800882e:	18d5      	adds	r5, r2, r3
 8008830:	42ac      	cmp	r4, r5
 8008832:	d101      	bne.n	8008838 <__sfputs_r+0x12>
 8008834:	2000      	movs	r0, #0
 8008836:	e007      	b.n	8008848 <__sfputs_r+0x22>
 8008838:	463a      	mov	r2, r7
 800883a:	4630      	mov	r0, r6
 800883c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008840:	f7ff ffdc 	bl	80087fc <__sfputc_r>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d1f3      	bne.n	8008830 <__sfputs_r+0xa>
 8008848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800884c <_vfiprintf_r>:
 800884c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008850:	460d      	mov	r5, r1
 8008852:	4614      	mov	r4, r2
 8008854:	4698      	mov	r8, r3
 8008856:	4606      	mov	r6, r0
 8008858:	b09d      	sub	sp, #116	; 0x74
 800885a:	b118      	cbz	r0, 8008864 <_vfiprintf_r+0x18>
 800885c:	6a03      	ldr	r3, [r0, #32]
 800885e:	b90b      	cbnz	r3, 8008864 <_vfiprintf_r+0x18>
 8008860:	f7fd f9a2 	bl	8005ba8 <__sinit>
 8008864:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008866:	07d9      	lsls	r1, r3, #31
 8008868:	d405      	bmi.n	8008876 <_vfiprintf_r+0x2a>
 800886a:	89ab      	ldrh	r3, [r5, #12]
 800886c:	059a      	lsls	r2, r3, #22
 800886e:	d402      	bmi.n	8008876 <_vfiprintf_r+0x2a>
 8008870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008872:	f7fd fbb1 	bl	8005fd8 <__retarget_lock_acquire_recursive>
 8008876:	89ab      	ldrh	r3, [r5, #12]
 8008878:	071b      	lsls	r3, r3, #28
 800887a:	d501      	bpl.n	8008880 <_vfiprintf_r+0x34>
 800887c:	692b      	ldr	r3, [r5, #16]
 800887e:	b99b      	cbnz	r3, 80088a8 <_vfiprintf_r+0x5c>
 8008880:	4629      	mov	r1, r5
 8008882:	4630      	mov	r0, r6
 8008884:	f7fd fad4 	bl	8005e30 <__swsetup_r>
 8008888:	b170      	cbz	r0, 80088a8 <_vfiprintf_r+0x5c>
 800888a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800888c:	07dc      	lsls	r4, r3, #31
 800888e:	d504      	bpl.n	800889a <_vfiprintf_r+0x4e>
 8008890:	f04f 30ff 	mov.w	r0, #4294967295
 8008894:	b01d      	add	sp, #116	; 0x74
 8008896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889a:	89ab      	ldrh	r3, [r5, #12]
 800889c:	0598      	lsls	r0, r3, #22
 800889e:	d4f7      	bmi.n	8008890 <_vfiprintf_r+0x44>
 80088a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088a2:	f7fd fb9a 	bl	8005fda <__retarget_lock_release_recursive>
 80088a6:	e7f3      	b.n	8008890 <_vfiprintf_r+0x44>
 80088a8:	2300      	movs	r3, #0
 80088aa:	9309      	str	r3, [sp, #36]	; 0x24
 80088ac:	2320      	movs	r3, #32
 80088ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088b2:	2330      	movs	r3, #48	; 0x30
 80088b4:	f04f 0901 	mov.w	r9, #1
 80088b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80088bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008a6c <_vfiprintf_r+0x220>
 80088c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088c4:	4623      	mov	r3, r4
 80088c6:	469a      	mov	sl, r3
 80088c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088cc:	b10a      	cbz	r2, 80088d2 <_vfiprintf_r+0x86>
 80088ce:	2a25      	cmp	r2, #37	; 0x25
 80088d0:	d1f9      	bne.n	80088c6 <_vfiprintf_r+0x7a>
 80088d2:	ebba 0b04 	subs.w	fp, sl, r4
 80088d6:	d00b      	beq.n	80088f0 <_vfiprintf_r+0xa4>
 80088d8:	465b      	mov	r3, fp
 80088da:	4622      	mov	r2, r4
 80088dc:	4629      	mov	r1, r5
 80088de:	4630      	mov	r0, r6
 80088e0:	f7ff ffa1 	bl	8008826 <__sfputs_r>
 80088e4:	3001      	adds	r0, #1
 80088e6:	f000 80a9 	beq.w	8008a3c <_vfiprintf_r+0x1f0>
 80088ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088ec:	445a      	add	r2, fp
 80088ee:	9209      	str	r2, [sp, #36]	; 0x24
 80088f0:	f89a 3000 	ldrb.w	r3, [sl]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 80a1 	beq.w	8008a3c <_vfiprintf_r+0x1f0>
 80088fa:	2300      	movs	r3, #0
 80088fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008904:	f10a 0a01 	add.w	sl, sl, #1
 8008908:	9304      	str	r3, [sp, #16]
 800890a:	9307      	str	r3, [sp, #28]
 800890c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008910:	931a      	str	r3, [sp, #104]	; 0x68
 8008912:	4654      	mov	r4, sl
 8008914:	2205      	movs	r2, #5
 8008916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800891a:	4854      	ldr	r0, [pc, #336]	; (8008a6c <_vfiprintf_r+0x220>)
 800891c:	f7fd fb5e 	bl	8005fdc <memchr>
 8008920:	9a04      	ldr	r2, [sp, #16]
 8008922:	b9d8      	cbnz	r0, 800895c <_vfiprintf_r+0x110>
 8008924:	06d1      	lsls	r1, r2, #27
 8008926:	bf44      	itt	mi
 8008928:	2320      	movmi	r3, #32
 800892a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800892e:	0713      	lsls	r3, r2, #28
 8008930:	bf44      	itt	mi
 8008932:	232b      	movmi	r3, #43	; 0x2b
 8008934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008938:	f89a 3000 	ldrb.w	r3, [sl]
 800893c:	2b2a      	cmp	r3, #42	; 0x2a
 800893e:	d015      	beq.n	800896c <_vfiprintf_r+0x120>
 8008940:	4654      	mov	r4, sl
 8008942:	2000      	movs	r0, #0
 8008944:	f04f 0c0a 	mov.w	ip, #10
 8008948:	9a07      	ldr	r2, [sp, #28]
 800894a:	4621      	mov	r1, r4
 800894c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008950:	3b30      	subs	r3, #48	; 0x30
 8008952:	2b09      	cmp	r3, #9
 8008954:	d94d      	bls.n	80089f2 <_vfiprintf_r+0x1a6>
 8008956:	b1b0      	cbz	r0, 8008986 <_vfiprintf_r+0x13a>
 8008958:	9207      	str	r2, [sp, #28]
 800895a:	e014      	b.n	8008986 <_vfiprintf_r+0x13a>
 800895c:	eba0 0308 	sub.w	r3, r0, r8
 8008960:	fa09 f303 	lsl.w	r3, r9, r3
 8008964:	4313      	orrs	r3, r2
 8008966:	46a2      	mov	sl, r4
 8008968:	9304      	str	r3, [sp, #16]
 800896a:	e7d2      	b.n	8008912 <_vfiprintf_r+0xc6>
 800896c:	9b03      	ldr	r3, [sp, #12]
 800896e:	1d19      	adds	r1, r3, #4
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	9103      	str	r1, [sp, #12]
 8008974:	2b00      	cmp	r3, #0
 8008976:	bfbb      	ittet	lt
 8008978:	425b      	neglt	r3, r3
 800897a:	f042 0202 	orrlt.w	r2, r2, #2
 800897e:	9307      	strge	r3, [sp, #28]
 8008980:	9307      	strlt	r3, [sp, #28]
 8008982:	bfb8      	it	lt
 8008984:	9204      	strlt	r2, [sp, #16]
 8008986:	7823      	ldrb	r3, [r4, #0]
 8008988:	2b2e      	cmp	r3, #46	; 0x2e
 800898a:	d10c      	bne.n	80089a6 <_vfiprintf_r+0x15a>
 800898c:	7863      	ldrb	r3, [r4, #1]
 800898e:	2b2a      	cmp	r3, #42	; 0x2a
 8008990:	d134      	bne.n	80089fc <_vfiprintf_r+0x1b0>
 8008992:	9b03      	ldr	r3, [sp, #12]
 8008994:	3402      	adds	r4, #2
 8008996:	1d1a      	adds	r2, r3, #4
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	9203      	str	r2, [sp, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	bfb8      	it	lt
 80089a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80089a4:	9305      	str	r3, [sp, #20]
 80089a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a70 <_vfiprintf_r+0x224>
 80089aa:	2203      	movs	r2, #3
 80089ac:	4650      	mov	r0, sl
 80089ae:	7821      	ldrb	r1, [r4, #0]
 80089b0:	f7fd fb14 	bl	8005fdc <memchr>
 80089b4:	b138      	cbz	r0, 80089c6 <_vfiprintf_r+0x17a>
 80089b6:	2240      	movs	r2, #64	; 0x40
 80089b8:	9b04      	ldr	r3, [sp, #16]
 80089ba:	eba0 000a 	sub.w	r0, r0, sl
 80089be:	4082      	lsls	r2, r0
 80089c0:	4313      	orrs	r3, r2
 80089c2:	3401      	adds	r4, #1
 80089c4:	9304      	str	r3, [sp, #16]
 80089c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ca:	2206      	movs	r2, #6
 80089cc:	4829      	ldr	r0, [pc, #164]	; (8008a74 <_vfiprintf_r+0x228>)
 80089ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089d2:	f7fd fb03 	bl	8005fdc <memchr>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d03f      	beq.n	8008a5a <_vfiprintf_r+0x20e>
 80089da:	4b27      	ldr	r3, [pc, #156]	; (8008a78 <_vfiprintf_r+0x22c>)
 80089dc:	bb1b      	cbnz	r3, 8008a26 <_vfiprintf_r+0x1da>
 80089de:	9b03      	ldr	r3, [sp, #12]
 80089e0:	3307      	adds	r3, #7
 80089e2:	f023 0307 	bic.w	r3, r3, #7
 80089e6:	3308      	adds	r3, #8
 80089e8:	9303      	str	r3, [sp, #12]
 80089ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ec:	443b      	add	r3, r7
 80089ee:	9309      	str	r3, [sp, #36]	; 0x24
 80089f0:	e768      	b.n	80088c4 <_vfiprintf_r+0x78>
 80089f2:	460c      	mov	r4, r1
 80089f4:	2001      	movs	r0, #1
 80089f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80089fa:	e7a6      	b.n	800894a <_vfiprintf_r+0xfe>
 80089fc:	2300      	movs	r3, #0
 80089fe:	f04f 0c0a 	mov.w	ip, #10
 8008a02:	4619      	mov	r1, r3
 8008a04:	3401      	adds	r4, #1
 8008a06:	9305      	str	r3, [sp, #20]
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a0e:	3a30      	subs	r2, #48	; 0x30
 8008a10:	2a09      	cmp	r2, #9
 8008a12:	d903      	bls.n	8008a1c <_vfiprintf_r+0x1d0>
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d0c6      	beq.n	80089a6 <_vfiprintf_r+0x15a>
 8008a18:	9105      	str	r1, [sp, #20]
 8008a1a:	e7c4      	b.n	80089a6 <_vfiprintf_r+0x15a>
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	2301      	movs	r3, #1
 8008a20:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a24:	e7f0      	b.n	8008a08 <_vfiprintf_r+0x1bc>
 8008a26:	ab03      	add	r3, sp, #12
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	462a      	mov	r2, r5
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	4b13      	ldr	r3, [pc, #76]	; (8008a7c <_vfiprintf_r+0x230>)
 8008a30:	a904      	add	r1, sp, #16
 8008a32:	f7fc fa6f 	bl	8004f14 <_printf_float>
 8008a36:	4607      	mov	r7, r0
 8008a38:	1c78      	adds	r0, r7, #1
 8008a3a:	d1d6      	bne.n	80089ea <_vfiprintf_r+0x19e>
 8008a3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a3e:	07d9      	lsls	r1, r3, #31
 8008a40:	d405      	bmi.n	8008a4e <_vfiprintf_r+0x202>
 8008a42:	89ab      	ldrh	r3, [r5, #12]
 8008a44:	059a      	lsls	r2, r3, #22
 8008a46:	d402      	bmi.n	8008a4e <_vfiprintf_r+0x202>
 8008a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a4a:	f7fd fac6 	bl	8005fda <__retarget_lock_release_recursive>
 8008a4e:	89ab      	ldrh	r3, [r5, #12]
 8008a50:	065b      	lsls	r3, r3, #25
 8008a52:	f53f af1d 	bmi.w	8008890 <_vfiprintf_r+0x44>
 8008a56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a58:	e71c      	b.n	8008894 <_vfiprintf_r+0x48>
 8008a5a:	ab03      	add	r3, sp, #12
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	462a      	mov	r2, r5
 8008a60:	4630      	mov	r0, r6
 8008a62:	4b06      	ldr	r3, [pc, #24]	; (8008a7c <_vfiprintf_r+0x230>)
 8008a64:	a904      	add	r1, sp, #16
 8008a66:	f7fc fcf5 	bl	8005454 <_printf_i>
 8008a6a:	e7e4      	b.n	8008a36 <_vfiprintf_r+0x1ea>
 8008a6c:	08009a51 	.word	0x08009a51
 8008a70:	08009a57 	.word	0x08009a57
 8008a74:	08009a5b 	.word	0x08009a5b
 8008a78:	08004f15 	.word	0x08004f15
 8008a7c:	08008827 	.word	0x08008827

08008a80 <__sflush_r>:
 8008a80:	898a      	ldrh	r2, [r1, #12]
 8008a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a84:	4605      	mov	r5, r0
 8008a86:	0710      	lsls	r0, r2, #28
 8008a88:	460c      	mov	r4, r1
 8008a8a:	d457      	bmi.n	8008b3c <__sflush_r+0xbc>
 8008a8c:	684b      	ldr	r3, [r1, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	dc04      	bgt.n	8008a9c <__sflush_r+0x1c>
 8008a92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dc01      	bgt.n	8008a9c <__sflush_r+0x1c>
 8008a98:	2000      	movs	r0, #0
 8008a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a9e:	2e00      	cmp	r6, #0
 8008aa0:	d0fa      	beq.n	8008a98 <__sflush_r+0x18>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008aa8:	682f      	ldr	r7, [r5, #0]
 8008aaa:	6a21      	ldr	r1, [r4, #32]
 8008aac:	602b      	str	r3, [r5, #0]
 8008aae:	d032      	beq.n	8008b16 <__sflush_r+0x96>
 8008ab0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	075a      	lsls	r2, r3, #29
 8008ab6:	d505      	bpl.n	8008ac4 <__sflush_r+0x44>
 8008ab8:	6863      	ldr	r3, [r4, #4]
 8008aba:	1ac0      	subs	r0, r0, r3
 8008abc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008abe:	b10b      	cbz	r3, 8008ac4 <__sflush_r+0x44>
 8008ac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ac2:	1ac0      	subs	r0, r0, r3
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aca:	4628      	mov	r0, r5
 8008acc:	6a21      	ldr	r1, [r4, #32]
 8008ace:	47b0      	blx	r6
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	d106      	bne.n	8008ae4 <__sflush_r+0x64>
 8008ad6:	6829      	ldr	r1, [r5, #0]
 8008ad8:	291d      	cmp	r1, #29
 8008ada:	d82b      	bhi.n	8008b34 <__sflush_r+0xb4>
 8008adc:	4a28      	ldr	r2, [pc, #160]	; (8008b80 <__sflush_r+0x100>)
 8008ade:	410a      	asrs	r2, r1
 8008ae0:	07d6      	lsls	r6, r2, #31
 8008ae2:	d427      	bmi.n	8008b34 <__sflush_r+0xb4>
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	6062      	str	r2, [r4, #4]
 8008ae8:	6922      	ldr	r2, [r4, #16]
 8008aea:	04d9      	lsls	r1, r3, #19
 8008aec:	6022      	str	r2, [r4, #0]
 8008aee:	d504      	bpl.n	8008afa <__sflush_r+0x7a>
 8008af0:	1c42      	adds	r2, r0, #1
 8008af2:	d101      	bne.n	8008af8 <__sflush_r+0x78>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	b903      	cbnz	r3, 8008afa <__sflush_r+0x7a>
 8008af8:	6560      	str	r0, [r4, #84]	; 0x54
 8008afa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008afc:	602f      	str	r7, [r5, #0]
 8008afe:	2900      	cmp	r1, #0
 8008b00:	d0ca      	beq.n	8008a98 <__sflush_r+0x18>
 8008b02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b06:	4299      	cmp	r1, r3
 8008b08:	d002      	beq.n	8008b10 <__sflush_r+0x90>
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	f7fe f8e8 	bl	8006ce0 <_free_r>
 8008b10:	2000      	movs	r0, #0
 8008b12:	6360      	str	r0, [r4, #52]	; 0x34
 8008b14:	e7c1      	b.n	8008a9a <__sflush_r+0x1a>
 8008b16:	2301      	movs	r3, #1
 8008b18:	4628      	mov	r0, r5
 8008b1a:	47b0      	blx	r6
 8008b1c:	1c41      	adds	r1, r0, #1
 8008b1e:	d1c8      	bne.n	8008ab2 <__sflush_r+0x32>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d0c5      	beq.n	8008ab2 <__sflush_r+0x32>
 8008b26:	2b1d      	cmp	r3, #29
 8008b28:	d001      	beq.n	8008b2e <__sflush_r+0xae>
 8008b2a:	2b16      	cmp	r3, #22
 8008b2c:	d101      	bne.n	8008b32 <__sflush_r+0xb2>
 8008b2e:	602f      	str	r7, [r5, #0]
 8008b30:	e7b2      	b.n	8008a98 <__sflush_r+0x18>
 8008b32:	89a3      	ldrh	r3, [r4, #12]
 8008b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b38:	81a3      	strh	r3, [r4, #12]
 8008b3a:	e7ae      	b.n	8008a9a <__sflush_r+0x1a>
 8008b3c:	690f      	ldr	r7, [r1, #16]
 8008b3e:	2f00      	cmp	r7, #0
 8008b40:	d0aa      	beq.n	8008a98 <__sflush_r+0x18>
 8008b42:	0793      	lsls	r3, r2, #30
 8008b44:	bf18      	it	ne
 8008b46:	2300      	movne	r3, #0
 8008b48:	680e      	ldr	r6, [r1, #0]
 8008b4a:	bf08      	it	eq
 8008b4c:	694b      	ldreq	r3, [r1, #20]
 8008b4e:	1bf6      	subs	r6, r6, r7
 8008b50:	600f      	str	r7, [r1, #0]
 8008b52:	608b      	str	r3, [r1, #8]
 8008b54:	2e00      	cmp	r6, #0
 8008b56:	dd9f      	ble.n	8008a98 <__sflush_r+0x18>
 8008b58:	4633      	mov	r3, r6
 8008b5a:	463a      	mov	r2, r7
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	6a21      	ldr	r1, [r4, #32]
 8008b60:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008b64:	47e0      	blx	ip
 8008b66:	2800      	cmp	r0, #0
 8008b68:	dc06      	bgt.n	8008b78 <__sflush_r+0xf8>
 8008b6a:	89a3      	ldrh	r3, [r4, #12]
 8008b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b74:	81a3      	strh	r3, [r4, #12]
 8008b76:	e790      	b.n	8008a9a <__sflush_r+0x1a>
 8008b78:	4407      	add	r7, r0
 8008b7a:	1a36      	subs	r6, r6, r0
 8008b7c:	e7ea      	b.n	8008b54 <__sflush_r+0xd4>
 8008b7e:	bf00      	nop
 8008b80:	dfbffffe 	.word	0xdfbffffe

08008b84 <_fflush_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	690b      	ldr	r3, [r1, #16]
 8008b88:	4605      	mov	r5, r0
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	b913      	cbnz	r3, 8008b94 <_fflush_r+0x10>
 8008b8e:	2500      	movs	r5, #0
 8008b90:	4628      	mov	r0, r5
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	b118      	cbz	r0, 8008b9e <_fflush_r+0x1a>
 8008b96:	6a03      	ldr	r3, [r0, #32]
 8008b98:	b90b      	cbnz	r3, 8008b9e <_fflush_r+0x1a>
 8008b9a:	f7fd f805 	bl	8005ba8 <__sinit>
 8008b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0f3      	beq.n	8008b8e <_fflush_r+0xa>
 8008ba6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ba8:	07d0      	lsls	r0, r2, #31
 8008baa:	d404      	bmi.n	8008bb6 <_fflush_r+0x32>
 8008bac:	0599      	lsls	r1, r3, #22
 8008bae:	d402      	bmi.n	8008bb6 <_fflush_r+0x32>
 8008bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bb2:	f7fd fa11 	bl	8005fd8 <__retarget_lock_acquire_recursive>
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	4621      	mov	r1, r4
 8008bba:	f7ff ff61 	bl	8008a80 <__sflush_r>
 8008bbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	07da      	lsls	r2, r3, #31
 8008bc4:	d4e4      	bmi.n	8008b90 <_fflush_r+0xc>
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	059b      	lsls	r3, r3, #22
 8008bca:	d4e1      	bmi.n	8008b90 <_fflush_r+0xc>
 8008bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bce:	f7fd fa04 	bl	8005fda <__retarget_lock_release_recursive>
 8008bd2:	e7dd      	b.n	8008b90 <_fflush_r+0xc>

08008bd4 <__swhatbuf_r>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bdc:	4615      	mov	r5, r2
 8008bde:	2900      	cmp	r1, #0
 8008be0:	461e      	mov	r6, r3
 8008be2:	b096      	sub	sp, #88	; 0x58
 8008be4:	da0c      	bge.n	8008c00 <__swhatbuf_r+0x2c>
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	2100      	movs	r1, #0
 8008bea:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008bee:	bf0c      	ite	eq
 8008bf0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008bf4:	2340      	movne	r3, #64	; 0x40
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	6031      	str	r1, [r6, #0]
 8008bfa:	602b      	str	r3, [r5, #0]
 8008bfc:	b016      	add	sp, #88	; 0x58
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}
 8008c00:	466a      	mov	r2, sp
 8008c02:	f000 f875 	bl	8008cf0 <_fstat_r>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	dbed      	blt.n	8008be6 <__swhatbuf_r+0x12>
 8008c0a:	9901      	ldr	r1, [sp, #4]
 8008c0c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008c10:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008c14:	4259      	negs	r1, r3
 8008c16:	4159      	adcs	r1, r3
 8008c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c1c:	e7eb      	b.n	8008bf6 <__swhatbuf_r+0x22>

08008c1e <__smakebuf_r>:
 8008c1e:	898b      	ldrh	r3, [r1, #12]
 8008c20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c22:	079d      	lsls	r5, r3, #30
 8008c24:	4606      	mov	r6, r0
 8008c26:	460c      	mov	r4, r1
 8008c28:	d507      	bpl.n	8008c3a <__smakebuf_r+0x1c>
 8008c2a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c2e:	6023      	str	r3, [r4, #0]
 8008c30:	6123      	str	r3, [r4, #16]
 8008c32:	2301      	movs	r3, #1
 8008c34:	6163      	str	r3, [r4, #20]
 8008c36:	b002      	add	sp, #8
 8008c38:	bd70      	pop	{r4, r5, r6, pc}
 8008c3a:	466a      	mov	r2, sp
 8008c3c:	ab01      	add	r3, sp, #4
 8008c3e:	f7ff ffc9 	bl	8008bd4 <__swhatbuf_r>
 8008c42:	9900      	ldr	r1, [sp, #0]
 8008c44:	4605      	mov	r5, r0
 8008c46:	4630      	mov	r0, r6
 8008c48:	f7fe f8ba 	bl	8006dc0 <_malloc_r>
 8008c4c:	b948      	cbnz	r0, 8008c62 <__smakebuf_r+0x44>
 8008c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c52:	059a      	lsls	r2, r3, #22
 8008c54:	d4ef      	bmi.n	8008c36 <__smakebuf_r+0x18>
 8008c56:	f023 0303 	bic.w	r3, r3, #3
 8008c5a:	f043 0302 	orr.w	r3, r3, #2
 8008c5e:	81a3      	strh	r3, [r4, #12]
 8008c60:	e7e3      	b.n	8008c2a <__smakebuf_r+0xc>
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	6020      	str	r0, [r4, #0]
 8008c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c6a:	81a3      	strh	r3, [r4, #12]
 8008c6c:	9b00      	ldr	r3, [sp, #0]
 8008c6e:	6120      	str	r0, [r4, #16]
 8008c70:	6163      	str	r3, [r4, #20]
 8008c72:	9b01      	ldr	r3, [sp, #4]
 8008c74:	b15b      	cbz	r3, 8008c8e <__smakebuf_r+0x70>
 8008c76:	4630      	mov	r0, r6
 8008c78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c7c:	f000 f84a 	bl	8008d14 <_isatty_r>
 8008c80:	b128      	cbz	r0, 8008c8e <__smakebuf_r+0x70>
 8008c82:	89a3      	ldrh	r3, [r4, #12]
 8008c84:	f023 0303 	bic.w	r3, r3, #3
 8008c88:	f043 0301 	orr.w	r3, r3, #1
 8008c8c:	81a3      	strh	r3, [r4, #12]
 8008c8e:	89a3      	ldrh	r3, [r4, #12]
 8008c90:	431d      	orrs	r5, r3
 8008c92:	81a5      	strh	r5, [r4, #12]
 8008c94:	e7cf      	b.n	8008c36 <__smakebuf_r+0x18>

08008c96 <memmove>:
 8008c96:	4288      	cmp	r0, r1
 8008c98:	b510      	push	{r4, lr}
 8008c9a:	eb01 0402 	add.w	r4, r1, r2
 8008c9e:	d902      	bls.n	8008ca6 <memmove+0x10>
 8008ca0:	4284      	cmp	r4, r0
 8008ca2:	4623      	mov	r3, r4
 8008ca4:	d807      	bhi.n	8008cb6 <memmove+0x20>
 8008ca6:	1e43      	subs	r3, r0, #1
 8008ca8:	42a1      	cmp	r1, r4
 8008caa:	d008      	beq.n	8008cbe <memmove+0x28>
 8008cac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cb4:	e7f8      	b.n	8008ca8 <memmove+0x12>
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	4402      	add	r2, r0
 8008cba:	428a      	cmp	r2, r1
 8008cbc:	d100      	bne.n	8008cc0 <memmove+0x2a>
 8008cbe:	bd10      	pop	{r4, pc}
 8008cc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cc4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cc8:	e7f7      	b.n	8008cba <memmove+0x24>

08008cca <strncmp>:
 8008cca:	b510      	push	{r4, lr}
 8008ccc:	b16a      	cbz	r2, 8008cea <strncmp+0x20>
 8008cce:	3901      	subs	r1, #1
 8008cd0:	1884      	adds	r4, r0, r2
 8008cd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cd6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d103      	bne.n	8008ce6 <strncmp+0x1c>
 8008cde:	42a0      	cmp	r0, r4
 8008ce0:	d001      	beq.n	8008ce6 <strncmp+0x1c>
 8008ce2:	2a00      	cmp	r2, #0
 8008ce4:	d1f5      	bne.n	8008cd2 <strncmp+0x8>
 8008ce6:	1ad0      	subs	r0, r2, r3
 8008ce8:	bd10      	pop	{r4, pc}
 8008cea:	4610      	mov	r0, r2
 8008cec:	e7fc      	b.n	8008ce8 <strncmp+0x1e>
	...

08008cf0 <_fstat_r>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	4d06      	ldr	r5, [pc, #24]	; (8008d10 <_fstat_r+0x20>)
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	602b      	str	r3, [r5, #0]
 8008cfe:	f7f8 fff2 	bl	8001ce6 <_fstat>
 8008d02:	1c43      	adds	r3, r0, #1
 8008d04:	d102      	bne.n	8008d0c <_fstat_r+0x1c>
 8008d06:	682b      	ldr	r3, [r5, #0]
 8008d08:	b103      	cbz	r3, 8008d0c <_fstat_r+0x1c>
 8008d0a:	6023      	str	r3, [r4, #0]
 8008d0c:	bd38      	pop	{r3, r4, r5, pc}
 8008d0e:	bf00      	nop
 8008d10:	2000061c 	.word	0x2000061c

08008d14 <_isatty_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	2300      	movs	r3, #0
 8008d18:	4d05      	ldr	r5, [pc, #20]	; (8008d30 <_isatty_r+0x1c>)
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	4608      	mov	r0, r1
 8008d1e:	602b      	str	r3, [r5, #0]
 8008d20:	f7f8 fff0 	bl	8001d04 <_isatty>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d102      	bne.n	8008d2e <_isatty_r+0x1a>
 8008d28:	682b      	ldr	r3, [r5, #0]
 8008d2a:	b103      	cbz	r3, 8008d2e <_isatty_r+0x1a>
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	bd38      	pop	{r3, r4, r5, pc}
 8008d30:	2000061c 	.word	0x2000061c

08008d34 <_sbrk_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	2300      	movs	r3, #0
 8008d38:	4d05      	ldr	r5, [pc, #20]	; (8008d50 <_sbrk_r+0x1c>)
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	4608      	mov	r0, r1
 8008d3e:	602b      	str	r3, [r5, #0]
 8008d40:	f7f8 fff6 	bl	8001d30 <_sbrk>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d102      	bne.n	8008d4e <_sbrk_r+0x1a>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	b103      	cbz	r3, 8008d4e <_sbrk_r+0x1a>
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	2000061c 	.word	0x2000061c

08008d54 <memcpy>:
 8008d54:	440a      	add	r2, r1
 8008d56:	4291      	cmp	r1, r2
 8008d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d5c:	d100      	bne.n	8008d60 <memcpy+0xc>
 8008d5e:	4770      	bx	lr
 8008d60:	b510      	push	{r4, lr}
 8008d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d66:	4291      	cmp	r1, r2
 8008d68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d6c:	d1f9      	bne.n	8008d62 <memcpy+0xe>
 8008d6e:	bd10      	pop	{r4, pc}

08008d70 <nan>:
 8008d70:	2000      	movs	r0, #0
 8008d72:	4901      	ldr	r1, [pc, #4]	; (8008d78 <nan+0x8>)
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	7ff80000 	.word	0x7ff80000

08008d7c <__assert_func>:
 8008d7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d7e:	4614      	mov	r4, r2
 8008d80:	461a      	mov	r2, r3
 8008d82:	4b09      	ldr	r3, [pc, #36]	; (8008da8 <__assert_func+0x2c>)
 8008d84:	4605      	mov	r5, r0
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68d8      	ldr	r0, [r3, #12]
 8008d8a:	b14c      	cbz	r4, 8008da0 <__assert_func+0x24>
 8008d8c:	4b07      	ldr	r3, [pc, #28]	; (8008dac <__assert_func+0x30>)
 8008d8e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d92:	9100      	str	r1, [sp, #0]
 8008d94:	462b      	mov	r3, r5
 8008d96:	4906      	ldr	r1, [pc, #24]	; (8008db0 <__assert_func+0x34>)
 8008d98:	f000 fbca 	bl	8009530 <fiprintf>
 8008d9c:	f000 fbda 	bl	8009554 <abort>
 8008da0:	4b04      	ldr	r3, [pc, #16]	; (8008db4 <__assert_func+0x38>)
 8008da2:	461c      	mov	r4, r3
 8008da4:	e7f3      	b.n	8008d8e <__assert_func+0x12>
 8008da6:	bf00      	nop
 8008da8:	20000064 	.word	0x20000064
 8008dac:	08009a6a 	.word	0x08009a6a
 8008db0:	08009a77 	.word	0x08009a77
 8008db4:	08009aa5 	.word	0x08009aa5

08008db8 <_calloc_r>:
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	fba1 5402 	umull	r5, r4, r1, r2
 8008dbe:	b934      	cbnz	r4, 8008dce <_calloc_r+0x16>
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	f7fd fffd 	bl	8006dc0 <_malloc_r>
 8008dc6:	4606      	mov	r6, r0
 8008dc8:	b928      	cbnz	r0, 8008dd6 <_calloc_r+0x1e>
 8008dca:	4630      	mov	r0, r6
 8008dcc:	bd70      	pop	{r4, r5, r6, pc}
 8008dce:	220c      	movs	r2, #12
 8008dd0:	2600      	movs	r6, #0
 8008dd2:	6002      	str	r2, [r0, #0]
 8008dd4:	e7f9      	b.n	8008dca <_calloc_r+0x12>
 8008dd6:	462a      	mov	r2, r5
 8008dd8:	4621      	mov	r1, r4
 8008dda:	f7fd f881 	bl	8005ee0 <memset>
 8008dde:	e7f4      	b.n	8008dca <_calloc_r+0x12>

08008de0 <rshift>:
 8008de0:	6903      	ldr	r3, [r0, #16]
 8008de2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008de6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008dea:	f100 0414 	add.w	r4, r0, #20
 8008dee:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008df2:	dd46      	ble.n	8008e82 <rshift+0xa2>
 8008df4:	f011 011f 	ands.w	r1, r1, #31
 8008df8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008dfc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e00:	d10c      	bne.n	8008e1c <rshift+0x3c>
 8008e02:	4629      	mov	r1, r5
 8008e04:	f100 0710 	add.w	r7, r0, #16
 8008e08:	42b1      	cmp	r1, r6
 8008e0a:	d335      	bcc.n	8008e78 <rshift+0x98>
 8008e0c:	1a9b      	subs	r3, r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	1eea      	subs	r2, r5, #3
 8008e12:	4296      	cmp	r6, r2
 8008e14:	bf38      	it	cc
 8008e16:	2300      	movcc	r3, #0
 8008e18:	4423      	add	r3, r4
 8008e1a:	e015      	b.n	8008e48 <rshift+0x68>
 8008e1c:	46a1      	mov	r9, r4
 8008e1e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e22:	f1c1 0820 	rsb	r8, r1, #32
 8008e26:	40cf      	lsrs	r7, r1
 8008e28:	f105 0e04 	add.w	lr, r5, #4
 8008e2c:	4576      	cmp	r6, lr
 8008e2e:	46f4      	mov	ip, lr
 8008e30:	d816      	bhi.n	8008e60 <rshift+0x80>
 8008e32:	1a9a      	subs	r2, r3, r2
 8008e34:	0092      	lsls	r2, r2, #2
 8008e36:	3a04      	subs	r2, #4
 8008e38:	3501      	adds	r5, #1
 8008e3a:	42ae      	cmp	r6, r5
 8008e3c:	bf38      	it	cc
 8008e3e:	2200      	movcc	r2, #0
 8008e40:	18a3      	adds	r3, r4, r2
 8008e42:	50a7      	str	r7, [r4, r2]
 8008e44:	b107      	cbz	r7, 8008e48 <rshift+0x68>
 8008e46:	3304      	adds	r3, #4
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	eba3 0204 	sub.w	r2, r3, r4
 8008e4e:	bf08      	it	eq
 8008e50:	2300      	moveq	r3, #0
 8008e52:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e56:	6102      	str	r2, [r0, #16]
 8008e58:	bf08      	it	eq
 8008e5a:	6143      	streq	r3, [r0, #20]
 8008e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e60:	f8dc c000 	ldr.w	ip, [ip]
 8008e64:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e68:	ea4c 0707 	orr.w	r7, ip, r7
 8008e6c:	f849 7b04 	str.w	r7, [r9], #4
 8008e70:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e74:	40cf      	lsrs	r7, r1
 8008e76:	e7d9      	b.n	8008e2c <rshift+0x4c>
 8008e78:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e7c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e80:	e7c2      	b.n	8008e08 <rshift+0x28>
 8008e82:	4623      	mov	r3, r4
 8008e84:	e7e0      	b.n	8008e48 <rshift+0x68>

08008e86 <__hexdig_fun>:
 8008e86:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008e8a:	2b09      	cmp	r3, #9
 8008e8c:	d802      	bhi.n	8008e94 <__hexdig_fun+0xe>
 8008e8e:	3820      	subs	r0, #32
 8008e90:	b2c0      	uxtb	r0, r0
 8008e92:	4770      	bx	lr
 8008e94:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008e98:	2b05      	cmp	r3, #5
 8008e9a:	d801      	bhi.n	8008ea0 <__hexdig_fun+0x1a>
 8008e9c:	3847      	subs	r0, #71	; 0x47
 8008e9e:	e7f7      	b.n	8008e90 <__hexdig_fun+0xa>
 8008ea0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008ea4:	2b05      	cmp	r3, #5
 8008ea6:	d801      	bhi.n	8008eac <__hexdig_fun+0x26>
 8008ea8:	3827      	subs	r0, #39	; 0x27
 8008eaa:	e7f1      	b.n	8008e90 <__hexdig_fun+0xa>
 8008eac:	2000      	movs	r0, #0
 8008eae:	4770      	bx	lr

08008eb0 <__gethex>:
 8008eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb4:	4681      	mov	r9, r0
 8008eb6:	468a      	mov	sl, r1
 8008eb8:	4617      	mov	r7, r2
 8008eba:	680a      	ldr	r2, [r1, #0]
 8008ebc:	b085      	sub	sp, #20
 8008ebe:	f102 0b02 	add.w	fp, r2, #2
 8008ec2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008ec6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008eca:	9302      	str	r3, [sp, #8]
 8008ecc:	32fe      	adds	r2, #254	; 0xfe
 8008ece:	eb02 030b 	add.w	r3, r2, fp
 8008ed2:	46d8      	mov	r8, fp
 8008ed4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008ed8:	9301      	str	r3, [sp, #4]
 8008eda:	2830      	cmp	r0, #48	; 0x30
 8008edc:	d0f7      	beq.n	8008ece <__gethex+0x1e>
 8008ede:	f7ff ffd2 	bl	8008e86 <__hexdig_fun>
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d138      	bne.n	8008f5a <__gethex+0xaa>
 8008ee8:	2201      	movs	r2, #1
 8008eea:	4640      	mov	r0, r8
 8008eec:	49a7      	ldr	r1, [pc, #668]	; (800918c <__gethex+0x2dc>)
 8008eee:	f7ff feec 	bl	8008cca <strncmp>
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d169      	bne.n	8008fcc <__gethex+0x11c>
 8008ef8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008efc:	465d      	mov	r5, fp
 8008efe:	f7ff ffc2 	bl	8008e86 <__hexdig_fun>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d064      	beq.n	8008fd0 <__gethex+0x120>
 8008f06:	465a      	mov	r2, fp
 8008f08:	7810      	ldrb	r0, [r2, #0]
 8008f0a:	4690      	mov	r8, r2
 8008f0c:	2830      	cmp	r0, #48	; 0x30
 8008f0e:	f102 0201 	add.w	r2, r2, #1
 8008f12:	d0f9      	beq.n	8008f08 <__gethex+0x58>
 8008f14:	f7ff ffb7 	bl	8008e86 <__hexdig_fun>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	fab0 f480 	clz	r4, r0
 8008f1e:	465e      	mov	r6, fp
 8008f20:	0964      	lsrs	r4, r4, #5
 8008f22:	9301      	str	r3, [sp, #4]
 8008f24:	4642      	mov	r2, r8
 8008f26:	4615      	mov	r5, r2
 8008f28:	7828      	ldrb	r0, [r5, #0]
 8008f2a:	3201      	adds	r2, #1
 8008f2c:	f7ff ffab 	bl	8008e86 <__hexdig_fun>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	d1f8      	bne.n	8008f26 <__gethex+0x76>
 8008f34:	2201      	movs	r2, #1
 8008f36:	4628      	mov	r0, r5
 8008f38:	4994      	ldr	r1, [pc, #592]	; (800918c <__gethex+0x2dc>)
 8008f3a:	f7ff fec6 	bl	8008cca <strncmp>
 8008f3e:	b978      	cbnz	r0, 8008f60 <__gethex+0xb0>
 8008f40:	b946      	cbnz	r6, 8008f54 <__gethex+0xa4>
 8008f42:	1c6e      	adds	r6, r5, #1
 8008f44:	4632      	mov	r2, r6
 8008f46:	4615      	mov	r5, r2
 8008f48:	7828      	ldrb	r0, [r5, #0]
 8008f4a:	3201      	adds	r2, #1
 8008f4c:	f7ff ff9b 	bl	8008e86 <__hexdig_fun>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d1f8      	bne.n	8008f46 <__gethex+0x96>
 8008f54:	1b73      	subs	r3, r6, r5
 8008f56:	009e      	lsls	r6, r3, #2
 8008f58:	e004      	b.n	8008f64 <__gethex+0xb4>
 8008f5a:	2400      	movs	r4, #0
 8008f5c:	4626      	mov	r6, r4
 8008f5e:	e7e1      	b.n	8008f24 <__gethex+0x74>
 8008f60:	2e00      	cmp	r6, #0
 8008f62:	d1f7      	bne.n	8008f54 <__gethex+0xa4>
 8008f64:	782b      	ldrb	r3, [r5, #0]
 8008f66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f6a:	2b50      	cmp	r3, #80	; 0x50
 8008f6c:	d13d      	bne.n	8008fea <__gethex+0x13a>
 8008f6e:	786b      	ldrb	r3, [r5, #1]
 8008f70:	2b2b      	cmp	r3, #43	; 0x2b
 8008f72:	d02f      	beq.n	8008fd4 <__gethex+0x124>
 8008f74:	2b2d      	cmp	r3, #45	; 0x2d
 8008f76:	d031      	beq.n	8008fdc <__gethex+0x12c>
 8008f78:	f04f 0b00 	mov.w	fp, #0
 8008f7c:	1c69      	adds	r1, r5, #1
 8008f7e:	7808      	ldrb	r0, [r1, #0]
 8008f80:	f7ff ff81 	bl	8008e86 <__hexdig_fun>
 8008f84:	1e42      	subs	r2, r0, #1
 8008f86:	b2d2      	uxtb	r2, r2
 8008f88:	2a18      	cmp	r2, #24
 8008f8a:	d82e      	bhi.n	8008fea <__gethex+0x13a>
 8008f8c:	f1a0 0210 	sub.w	r2, r0, #16
 8008f90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f94:	f7ff ff77 	bl	8008e86 <__hexdig_fun>
 8008f98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008f9c:	fa5f fc8c 	uxtb.w	ip, ip
 8008fa0:	f1bc 0f18 	cmp.w	ip, #24
 8008fa4:	d91d      	bls.n	8008fe2 <__gethex+0x132>
 8008fa6:	f1bb 0f00 	cmp.w	fp, #0
 8008faa:	d000      	beq.n	8008fae <__gethex+0xfe>
 8008fac:	4252      	negs	r2, r2
 8008fae:	4416      	add	r6, r2
 8008fb0:	f8ca 1000 	str.w	r1, [sl]
 8008fb4:	b1dc      	cbz	r4, 8008fee <__gethex+0x13e>
 8008fb6:	9b01      	ldr	r3, [sp, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	bf14      	ite	ne
 8008fbc:	f04f 0800 	movne.w	r8, #0
 8008fc0:	f04f 0806 	moveq.w	r8, #6
 8008fc4:	4640      	mov	r0, r8
 8008fc6:	b005      	add	sp, #20
 8008fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fcc:	4645      	mov	r5, r8
 8008fce:	4626      	mov	r6, r4
 8008fd0:	2401      	movs	r4, #1
 8008fd2:	e7c7      	b.n	8008f64 <__gethex+0xb4>
 8008fd4:	f04f 0b00 	mov.w	fp, #0
 8008fd8:	1ca9      	adds	r1, r5, #2
 8008fda:	e7d0      	b.n	8008f7e <__gethex+0xce>
 8008fdc:	f04f 0b01 	mov.w	fp, #1
 8008fe0:	e7fa      	b.n	8008fd8 <__gethex+0x128>
 8008fe2:	230a      	movs	r3, #10
 8008fe4:	fb03 0002 	mla	r0, r3, r2, r0
 8008fe8:	e7d0      	b.n	8008f8c <__gethex+0xdc>
 8008fea:	4629      	mov	r1, r5
 8008fec:	e7e0      	b.n	8008fb0 <__gethex+0x100>
 8008fee:	4621      	mov	r1, r4
 8008ff0:	eba5 0308 	sub.w	r3, r5, r8
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	2b07      	cmp	r3, #7
 8008ff8:	dc0a      	bgt.n	8009010 <__gethex+0x160>
 8008ffa:	4648      	mov	r0, r9
 8008ffc:	f7fd ff6c 	bl	8006ed8 <_Balloc>
 8009000:	4604      	mov	r4, r0
 8009002:	b940      	cbnz	r0, 8009016 <__gethex+0x166>
 8009004:	4602      	mov	r2, r0
 8009006:	21e4      	movs	r1, #228	; 0xe4
 8009008:	4b61      	ldr	r3, [pc, #388]	; (8009190 <__gethex+0x2e0>)
 800900a:	4862      	ldr	r0, [pc, #392]	; (8009194 <__gethex+0x2e4>)
 800900c:	f7ff feb6 	bl	8008d7c <__assert_func>
 8009010:	3101      	adds	r1, #1
 8009012:	105b      	asrs	r3, r3, #1
 8009014:	e7ef      	b.n	8008ff6 <__gethex+0x146>
 8009016:	2300      	movs	r3, #0
 8009018:	469b      	mov	fp, r3
 800901a:	f100 0a14 	add.w	sl, r0, #20
 800901e:	f8cd a004 	str.w	sl, [sp, #4]
 8009022:	45a8      	cmp	r8, r5
 8009024:	d344      	bcc.n	80090b0 <__gethex+0x200>
 8009026:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800902a:	4658      	mov	r0, fp
 800902c:	f848 bb04 	str.w	fp, [r8], #4
 8009030:	eba8 080a 	sub.w	r8, r8, sl
 8009034:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009038:	6122      	str	r2, [r4, #16]
 800903a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800903e:	f7fe f83d 	bl	80070bc <__hi0bits>
 8009042:	683d      	ldr	r5, [r7, #0]
 8009044:	eba8 0800 	sub.w	r8, r8, r0
 8009048:	45a8      	cmp	r8, r5
 800904a:	dd59      	ble.n	8009100 <__gethex+0x250>
 800904c:	eba8 0805 	sub.w	r8, r8, r5
 8009050:	4641      	mov	r1, r8
 8009052:	4620      	mov	r0, r4
 8009054:	f7fe fbbb 	bl	80077ce <__any_on>
 8009058:	4683      	mov	fp, r0
 800905a:	b1b8      	cbz	r0, 800908c <__gethex+0x1dc>
 800905c:	f04f 0b01 	mov.w	fp, #1
 8009060:	f108 33ff 	add.w	r3, r8, #4294967295
 8009064:	1159      	asrs	r1, r3, #5
 8009066:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800906a:	f003 021f 	and.w	r2, r3, #31
 800906e:	fa0b f202 	lsl.w	r2, fp, r2
 8009072:	420a      	tst	r2, r1
 8009074:	d00a      	beq.n	800908c <__gethex+0x1dc>
 8009076:	455b      	cmp	r3, fp
 8009078:	dd06      	ble.n	8009088 <__gethex+0x1d8>
 800907a:	4620      	mov	r0, r4
 800907c:	f1a8 0102 	sub.w	r1, r8, #2
 8009080:	f7fe fba5 	bl	80077ce <__any_on>
 8009084:	2800      	cmp	r0, #0
 8009086:	d138      	bne.n	80090fa <__gethex+0x24a>
 8009088:	f04f 0b02 	mov.w	fp, #2
 800908c:	4641      	mov	r1, r8
 800908e:	4620      	mov	r0, r4
 8009090:	f7ff fea6 	bl	8008de0 <rshift>
 8009094:	4446      	add	r6, r8
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	42b3      	cmp	r3, r6
 800909a:	da41      	bge.n	8009120 <__gethex+0x270>
 800909c:	4621      	mov	r1, r4
 800909e:	4648      	mov	r0, r9
 80090a0:	f7fd ff5a 	bl	8006f58 <_Bfree>
 80090a4:	2300      	movs	r3, #0
 80090a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090a8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80090ac:	6013      	str	r3, [r2, #0]
 80090ae:	e789      	b.n	8008fc4 <__gethex+0x114>
 80090b0:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80090b4:	2a2e      	cmp	r2, #46	; 0x2e
 80090b6:	d014      	beq.n	80090e2 <__gethex+0x232>
 80090b8:	2b20      	cmp	r3, #32
 80090ba:	d106      	bne.n	80090ca <__gethex+0x21a>
 80090bc:	9b01      	ldr	r3, [sp, #4]
 80090be:	f843 bb04 	str.w	fp, [r3], #4
 80090c2:	f04f 0b00 	mov.w	fp, #0
 80090c6:	9301      	str	r3, [sp, #4]
 80090c8:	465b      	mov	r3, fp
 80090ca:	7828      	ldrb	r0, [r5, #0]
 80090cc:	9303      	str	r3, [sp, #12]
 80090ce:	f7ff feda 	bl	8008e86 <__hexdig_fun>
 80090d2:	9b03      	ldr	r3, [sp, #12]
 80090d4:	f000 000f 	and.w	r0, r0, #15
 80090d8:	4098      	lsls	r0, r3
 80090da:	ea4b 0b00 	orr.w	fp, fp, r0
 80090de:	3304      	adds	r3, #4
 80090e0:	e79f      	b.n	8009022 <__gethex+0x172>
 80090e2:	45a8      	cmp	r8, r5
 80090e4:	d8e8      	bhi.n	80090b8 <__gethex+0x208>
 80090e6:	2201      	movs	r2, #1
 80090e8:	4628      	mov	r0, r5
 80090ea:	4928      	ldr	r1, [pc, #160]	; (800918c <__gethex+0x2dc>)
 80090ec:	9303      	str	r3, [sp, #12]
 80090ee:	f7ff fdec 	bl	8008cca <strncmp>
 80090f2:	9b03      	ldr	r3, [sp, #12]
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d1df      	bne.n	80090b8 <__gethex+0x208>
 80090f8:	e793      	b.n	8009022 <__gethex+0x172>
 80090fa:	f04f 0b03 	mov.w	fp, #3
 80090fe:	e7c5      	b.n	800908c <__gethex+0x1dc>
 8009100:	da0b      	bge.n	800911a <__gethex+0x26a>
 8009102:	eba5 0808 	sub.w	r8, r5, r8
 8009106:	4621      	mov	r1, r4
 8009108:	4642      	mov	r2, r8
 800910a:	4648      	mov	r0, r9
 800910c:	f7fe f93c 	bl	8007388 <__lshift>
 8009110:	4604      	mov	r4, r0
 8009112:	eba6 0608 	sub.w	r6, r6, r8
 8009116:	f100 0a14 	add.w	sl, r0, #20
 800911a:	f04f 0b00 	mov.w	fp, #0
 800911e:	e7ba      	b.n	8009096 <__gethex+0x1e6>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	42b3      	cmp	r3, r6
 8009124:	dd74      	ble.n	8009210 <__gethex+0x360>
 8009126:	1b9e      	subs	r6, r3, r6
 8009128:	42b5      	cmp	r5, r6
 800912a:	dc35      	bgt.n	8009198 <__gethex+0x2e8>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b02      	cmp	r3, #2
 8009130:	d023      	beq.n	800917a <__gethex+0x2ca>
 8009132:	2b03      	cmp	r3, #3
 8009134:	d025      	beq.n	8009182 <__gethex+0x2d2>
 8009136:	2b01      	cmp	r3, #1
 8009138:	d115      	bne.n	8009166 <__gethex+0x2b6>
 800913a:	42b5      	cmp	r5, r6
 800913c:	d113      	bne.n	8009166 <__gethex+0x2b6>
 800913e:	2d01      	cmp	r5, #1
 8009140:	d10b      	bne.n	800915a <__gethex+0x2aa>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	9a02      	ldr	r2, [sp, #8]
 8009146:	f04f 0862 	mov.w	r8, #98	; 0x62
 800914a:	6013      	str	r3, [r2, #0]
 800914c:	2301      	movs	r3, #1
 800914e:	6123      	str	r3, [r4, #16]
 8009150:	f8ca 3000 	str.w	r3, [sl]
 8009154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009156:	601c      	str	r4, [r3, #0]
 8009158:	e734      	b.n	8008fc4 <__gethex+0x114>
 800915a:	4620      	mov	r0, r4
 800915c:	1e69      	subs	r1, r5, #1
 800915e:	f7fe fb36 	bl	80077ce <__any_on>
 8009162:	2800      	cmp	r0, #0
 8009164:	d1ed      	bne.n	8009142 <__gethex+0x292>
 8009166:	4621      	mov	r1, r4
 8009168:	4648      	mov	r0, r9
 800916a:	f7fd fef5 	bl	8006f58 <_Bfree>
 800916e:	2300      	movs	r3, #0
 8009170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009172:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	e724      	b.n	8008fc4 <__gethex+0x114>
 800917a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1f2      	bne.n	8009166 <__gethex+0x2b6>
 8009180:	e7df      	b.n	8009142 <__gethex+0x292>
 8009182:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1dc      	bne.n	8009142 <__gethex+0x292>
 8009188:	e7ed      	b.n	8009166 <__gethex+0x2b6>
 800918a:	bf00      	nop
 800918c:	080098fc 	.word	0x080098fc
 8009190:	0800978f 	.word	0x0800978f
 8009194:	08009aa6 	.word	0x08009aa6
 8009198:	f106 38ff 	add.w	r8, r6, #4294967295
 800919c:	f1bb 0f00 	cmp.w	fp, #0
 80091a0:	d133      	bne.n	800920a <__gethex+0x35a>
 80091a2:	f1b8 0f00 	cmp.w	r8, #0
 80091a6:	d004      	beq.n	80091b2 <__gethex+0x302>
 80091a8:	4641      	mov	r1, r8
 80091aa:	4620      	mov	r0, r4
 80091ac:	f7fe fb0f 	bl	80077ce <__any_on>
 80091b0:	4683      	mov	fp, r0
 80091b2:	2301      	movs	r3, #1
 80091b4:	ea4f 1268 	mov.w	r2, r8, asr #5
 80091b8:	f008 081f 	and.w	r8, r8, #31
 80091bc:	fa03 f308 	lsl.w	r3, r3, r8
 80091c0:	f04f 0802 	mov.w	r8, #2
 80091c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80091c8:	4631      	mov	r1, r6
 80091ca:	4213      	tst	r3, r2
 80091cc:	4620      	mov	r0, r4
 80091ce:	bf18      	it	ne
 80091d0:	f04b 0b02 	orrne.w	fp, fp, #2
 80091d4:	1bad      	subs	r5, r5, r6
 80091d6:	f7ff fe03 	bl	8008de0 <rshift>
 80091da:	687e      	ldr	r6, [r7, #4]
 80091dc:	f1bb 0f00 	cmp.w	fp, #0
 80091e0:	d04a      	beq.n	8009278 <__gethex+0x3c8>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d016      	beq.n	8009216 <__gethex+0x366>
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d018      	beq.n	800921e <__gethex+0x36e>
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d109      	bne.n	8009204 <__gethex+0x354>
 80091f0:	f01b 0f02 	tst.w	fp, #2
 80091f4:	d006      	beq.n	8009204 <__gethex+0x354>
 80091f6:	f8da 3000 	ldr.w	r3, [sl]
 80091fa:	ea4b 0b03 	orr.w	fp, fp, r3
 80091fe:	f01b 0f01 	tst.w	fp, #1
 8009202:	d10f      	bne.n	8009224 <__gethex+0x374>
 8009204:	f048 0810 	orr.w	r8, r8, #16
 8009208:	e036      	b.n	8009278 <__gethex+0x3c8>
 800920a:	f04f 0b01 	mov.w	fp, #1
 800920e:	e7d0      	b.n	80091b2 <__gethex+0x302>
 8009210:	f04f 0801 	mov.w	r8, #1
 8009214:	e7e2      	b.n	80091dc <__gethex+0x32c>
 8009216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009218:	f1c3 0301 	rsb	r3, r3, #1
 800921c:	930f      	str	r3, [sp, #60]	; 0x3c
 800921e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009220:	2b00      	cmp	r3, #0
 8009222:	d0ef      	beq.n	8009204 <__gethex+0x354>
 8009224:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009228:	f104 0214 	add.w	r2, r4, #20
 800922c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009230:	9301      	str	r3, [sp, #4]
 8009232:	2300      	movs	r3, #0
 8009234:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009238:	4694      	mov	ip, r2
 800923a:	f852 1b04 	ldr.w	r1, [r2], #4
 800923e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009242:	d01e      	beq.n	8009282 <__gethex+0x3d2>
 8009244:	3101      	adds	r1, #1
 8009246:	f8cc 1000 	str.w	r1, [ip]
 800924a:	f1b8 0f02 	cmp.w	r8, #2
 800924e:	f104 0214 	add.w	r2, r4, #20
 8009252:	d13d      	bne.n	80092d0 <__gethex+0x420>
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	3b01      	subs	r3, #1
 8009258:	42ab      	cmp	r3, r5
 800925a:	d10b      	bne.n	8009274 <__gethex+0x3c4>
 800925c:	2301      	movs	r3, #1
 800925e:	1169      	asrs	r1, r5, #5
 8009260:	f005 051f 	and.w	r5, r5, #31
 8009264:	fa03 f505 	lsl.w	r5, r3, r5
 8009268:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800926c:	421d      	tst	r5, r3
 800926e:	bf18      	it	ne
 8009270:	f04f 0801 	movne.w	r8, #1
 8009274:	f048 0820 	orr.w	r8, r8, #32
 8009278:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800927a:	601c      	str	r4, [r3, #0]
 800927c:	9b02      	ldr	r3, [sp, #8]
 800927e:	601e      	str	r6, [r3, #0]
 8009280:	e6a0      	b.n	8008fc4 <__gethex+0x114>
 8009282:	4290      	cmp	r0, r2
 8009284:	f842 3c04 	str.w	r3, [r2, #-4]
 8009288:	d8d6      	bhi.n	8009238 <__gethex+0x388>
 800928a:	68a2      	ldr	r2, [r4, #8]
 800928c:	4593      	cmp	fp, r2
 800928e:	db17      	blt.n	80092c0 <__gethex+0x410>
 8009290:	6861      	ldr	r1, [r4, #4]
 8009292:	4648      	mov	r0, r9
 8009294:	3101      	adds	r1, #1
 8009296:	f7fd fe1f 	bl	8006ed8 <_Balloc>
 800929a:	4682      	mov	sl, r0
 800929c:	b918      	cbnz	r0, 80092a6 <__gethex+0x3f6>
 800929e:	4602      	mov	r2, r0
 80092a0:	2184      	movs	r1, #132	; 0x84
 80092a2:	4b1a      	ldr	r3, [pc, #104]	; (800930c <__gethex+0x45c>)
 80092a4:	e6b1      	b.n	800900a <__gethex+0x15a>
 80092a6:	6922      	ldr	r2, [r4, #16]
 80092a8:	f104 010c 	add.w	r1, r4, #12
 80092ac:	3202      	adds	r2, #2
 80092ae:	0092      	lsls	r2, r2, #2
 80092b0:	300c      	adds	r0, #12
 80092b2:	f7ff fd4f 	bl	8008d54 <memcpy>
 80092b6:	4621      	mov	r1, r4
 80092b8:	4648      	mov	r0, r9
 80092ba:	f7fd fe4d 	bl	8006f58 <_Bfree>
 80092be:	4654      	mov	r4, sl
 80092c0:	6922      	ldr	r2, [r4, #16]
 80092c2:	1c51      	adds	r1, r2, #1
 80092c4:	6121      	str	r1, [r4, #16]
 80092c6:	2101      	movs	r1, #1
 80092c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80092cc:	6151      	str	r1, [r2, #20]
 80092ce:	e7bc      	b.n	800924a <__gethex+0x39a>
 80092d0:	6921      	ldr	r1, [r4, #16]
 80092d2:	4559      	cmp	r1, fp
 80092d4:	dd0b      	ble.n	80092ee <__gethex+0x43e>
 80092d6:	2101      	movs	r1, #1
 80092d8:	4620      	mov	r0, r4
 80092da:	f7ff fd81 	bl	8008de0 <rshift>
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	3601      	adds	r6, #1
 80092e2:	42b3      	cmp	r3, r6
 80092e4:	f6ff aeda 	blt.w	800909c <__gethex+0x1ec>
 80092e8:	f04f 0801 	mov.w	r8, #1
 80092ec:	e7c2      	b.n	8009274 <__gethex+0x3c4>
 80092ee:	f015 051f 	ands.w	r5, r5, #31
 80092f2:	d0f9      	beq.n	80092e8 <__gethex+0x438>
 80092f4:	9b01      	ldr	r3, [sp, #4]
 80092f6:	f1c5 0520 	rsb	r5, r5, #32
 80092fa:	441a      	add	r2, r3
 80092fc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009300:	f7fd fedc 	bl	80070bc <__hi0bits>
 8009304:	42a8      	cmp	r0, r5
 8009306:	dbe6      	blt.n	80092d6 <__gethex+0x426>
 8009308:	e7ee      	b.n	80092e8 <__gethex+0x438>
 800930a:	bf00      	nop
 800930c:	0800978f 	.word	0x0800978f

08009310 <L_shift>:
 8009310:	f1c2 0208 	rsb	r2, r2, #8
 8009314:	0092      	lsls	r2, r2, #2
 8009316:	b570      	push	{r4, r5, r6, lr}
 8009318:	f1c2 0620 	rsb	r6, r2, #32
 800931c:	6843      	ldr	r3, [r0, #4]
 800931e:	6804      	ldr	r4, [r0, #0]
 8009320:	fa03 f506 	lsl.w	r5, r3, r6
 8009324:	432c      	orrs	r4, r5
 8009326:	40d3      	lsrs	r3, r2
 8009328:	6004      	str	r4, [r0, #0]
 800932a:	f840 3f04 	str.w	r3, [r0, #4]!
 800932e:	4288      	cmp	r0, r1
 8009330:	d3f4      	bcc.n	800931c <L_shift+0xc>
 8009332:	bd70      	pop	{r4, r5, r6, pc}

08009334 <__match>:
 8009334:	b530      	push	{r4, r5, lr}
 8009336:	6803      	ldr	r3, [r0, #0]
 8009338:	3301      	adds	r3, #1
 800933a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800933e:	b914      	cbnz	r4, 8009346 <__match+0x12>
 8009340:	6003      	str	r3, [r0, #0]
 8009342:	2001      	movs	r0, #1
 8009344:	bd30      	pop	{r4, r5, pc}
 8009346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800934a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800934e:	2d19      	cmp	r5, #25
 8009350:	bf98      	it	ls
 8009352:	3220      	addls	r2, #32
 8009354:	42a2      	cmp	r2, r4
 8009356:	d0f0      	beq.n	800933a <__match+0x6>
 8009358:	2000      	movs	r0, #0
 800935a:	e7f3      	b.n	8009344 <__match+0x10>

0800935c <__hexnan>:
 800935c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	2500      	movs	r5, #0
 8009362:	680b      	ldr	r3, [r1, #0]
 8009364:	4682      	mov	sl, r0
 8009366:	115e      	asrs	r6, r3, #5
 8009368:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800936c:	f013 031f 	ands.w	r3, r3, #31
 8009370:	bf18      	it	ne
 8009372:	3604      	addne	r6, #4
 8009374:	1f37      	subs	r7, r6, #4
 8009376:	4690      	mov	r8, r2
 8009378:	46b9      	mov	r9, r7
 800937a:	463c      	mov	r4, r7
 800937c:	46ab      	mov	fp, r5
 800937e:	b087      	sub	sp, #28
 8009380:	6801      	ldr	r1, [r0, #0]
 8009382:	9301      	str	r3, [sp, #4]
 8009384:	f846 5c04 	str.w	r5, [r6, #-4]
 8009388:	9502      	str	r5, [sp, #8]
 800938a:	784a      	ldrb	r2, [r1, #1]
 800938c:	1c4b      	adds	r3, r1, #1
 800938e:	9303      	str	r3, [sp, #12]
 8009390:	b342      	cbz	r2, 80093e4 <__hexnan+0x88>
 8009392:	4610      	mov	r0, r2
 8009394:	9105      	str	r1, [sp, #20]
 8009396:	9204      	str	r2, [sp, #16]
 8009398:	f7ff fd75 	bl	8008e86 <__hexdig_fun>
 800939c:	2800      	cmp	r0, #0
 800939e:	d14f      	bne.n	8009440 <__hexnan+0xe4>
 80093a0:	9a04      	ldr	r2, [sp, #16]
 80093a2:	9905      	ldr	r1, [sp, #20]
 80093a4:	2a20      	cmp	r2, #32
 80093a6:	d818      	bhi.n	80093da <__hexnan+0x7e>
 80093a8:	9b02      	ldr	r3, [sp, #8]
 80093aa:	459b      	cmp	fp, r3
 80093ac:	dd13      	ble.n	80093d6 <__hexnan+0x7a>
 80093ae:	454c      	cmp	r4, r9
 80093b0:	d206      	bcs.n	80093c0 <__hexnan+0x64>
 80093b2:	2d07      	cmp	r5, #7
 80093b4:	dc04      	bgt.n	80093c0 <__hexnan+0x64>
 80093b6:	462a      	mov	r2, r5
 80093b8:	4649      	mov	r1, r9
 80093ba:	4620      	mov	r0, r4
 80093bc:	f7ff ffa8 	bl	8009310 <L_shift>
 80093c0:	4544      	cmp	r4, r8
 80093c2:	d950      	bls.n	8009466 <__hexnan+0x10a>
 80093c4:	2300      	movs	r3, #0
 80093c6:	f1a4 0904 	sub.w	r9, r4, #4
 80093ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80093ce:	461d      	mov	r5, r3
 80093d0:	464c      	mov	r4, r9
 80093d2:	f8cd b008 	str.w	fp, [sp, #8]
 80093d6:	9903      	ldr	r1, [sp, #12]
 80093d8:	e7d7      	b.n	800938a <__hexnan+0x2e>
 80093da:	2a29      	cmp	r2, #41	; 0x29
 80093dc:	d155      	bne.n	800948a <__hexnan+0x12e>
 80093de:	3102      	adds	r1, #2
 80093e0:	f8ca 1000 	str.w	r1, [sl]
 80093e4:	f1bb 0f00 	cmp.w	fp, #0
 80093e8:	d04f      	beq.n	800948a <__hexnan+0x12e>
 80093ea:	454c      	cmp	r4, r9
 80093ec:	d206      	bcs.n	80093fc <__hexnan+0xa0>
 80093ee:	2d07      	cmp	r5, #7
 80093f0:	dc04      	bgt.n	80093fc <__hexnan+0xa0>
 80093f2:	462a      	mov	r2, r5
 80093f4:	4649      	mov	r1, r9
 80093f6:	4620      	mov	r0, r4
 80093f8:	f7ff ff8a 	bl	8009310 <L_shift>
 80093fc:	4544      	cmp	r4, r8
 80093fe:	d934      	bls.n	800946a <__hexnan+0x10e>
 8009400:	4623      	mov	r3, r4
 8009402:	f1a8 0204 	sub.w	r2, r8, #4
 8009406:	f853 1b04 	ldr.w	r1, [r3], #4
 800940a:	429f      	cmp	r7, r3
 800940c:	f842 1f04 	str.w	r1, [r2, #4]!
 8009410:	d2f9      	bcs.n	8009406 <__hexnan+0xaa>
 8009412:	1b3b      	subs	r3, r7, r4
 8009414:	f023 0303 	bic.w	r3, r3, #3
 8009418:	3304      	adds	r3, #4
 800941a:	3e03      	subs	r6, #3
 800941c:	3401      	adds	r4, #1
 800941e:	42a6      	cmp	r6, r4
 8009420:	bf38      	it	cc
 8009422:	2304      	movcc	r3, #4
 8009424:	2200      	movs	r2, #0
 8009426:	4443      	add	r3, r8
 8009428:	f843 2b04 	str.w	r2, [r3], #4
 800942c:	429f      	cmp	r7, r3
 800942e:	d2fb      	bcs.n	8009428 <__hexnan+0xcc>
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	b91b      	cbnz	r3, 800943c <__hexnan+0xe0>
 8009434:	4547      	cmp	r7, r8
 8009436:	d126      	bne.n	8009486 <__hexnan+0x12a>
 8009438:	2301      	movs	r3, #1
 800943a:	603b      	str	r3, [r7, #0]
 800943c:	2005      	movs	r0, #5
 800943e:	e025      	b.n	800948c <__hexnan+0x130>
 8009440:	3501      	adds	r5, #1
 8009442:	2d08      	cmp	r5, #8
 8009444:	f10b 0b01 	add.w	fp, fp, #1
 8009448:	dd06      	ble.n	8009458 <__hexnan+0xfc>
 800944a:	4544      	cmp	r4, r8
 800944c:	d9c3      	bls.n	80093d6 <__hexnan+0x7a>
 800944e:	2300      	movs	r3, #0
 8009450:	2501      	movs	r5, #1
 8009452:	f844 3c04 	str.w	r3, [r4, #-4]
 8009456:	3c04      	subs	r4, #4
 8009458:	6822      	ldr	r2, [r4, #0]
 800945a:	f000 000f 	and.w	r0, r0, #15
 800945e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009462:	6020      	str	r0, [r4, #0]
 8009464:	e7b7      	b.n	80093d6 <__hexnan+0x7a>
 8009466:	2508      	movs	r5, #8
 8009468:	e7b5      	b.n	80093d6 <__hexnan+0x7a>
 800946a:	9b01      	ldr	r3, [sp, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0df      	beq.n	8009430 <__hexnan+0xd4>
 8009470:	f04f 32ff 	mov.w	r2, #4294967295
 8009474:	f1c3 0320 	rsb	r3, r3, #32
 8009478:	40da      	lsrs	r2, r3
 800947a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800947e:	4013      	ands	r3, r2
 8009480:	f846 3c04 	str.w	r3, [r6, #-4]
 8009484:	e7d4      	b.n	8009430 <__hexnan+0xd4>
 8009486:	3f04      	subs	r7, #4
 8009488:	e7d2      	b.n	8009430 <__hexnan+0xd4>
 800948a:	2004      	movs	r0, #4
 800948c:	b007      	add	sp, #28
 800948e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009492 <__ascii_mbtowc>:
 8009492:	b082      	sub	sp, #8
 8009494:	b901      	cbnz	r1, 8009498 <__ascii_mbtowc+0x6>
 8009496:	a901      	add	r1, sp, #4
 8009498:	b142      	cbz	r2, 80094ac <__ascii_mbtowc+0x1a>
 800949a:	b14b      	cbz	r3, 80094b0 <__ascii_mbtowc+0x1e>
 800949c:	7813      	ldrb	r3, [r2, #0]
 800949e:	600b      	str	r3, [r1, #0]
 80094a0:	7812      	ldrb	r2, [r2, #0]
 80094a2:	1e10      	subs	r0, r2, #0
 80094a4:	bf18      	it	ne
 80094a6:	2001      	movne	r0, #1
 80094a8:	b002      	add	sp, #8
 80094aa:	4770      	bx	lr
 80094ac:	4610      	mov	r0, r2
 80094ae:	e7fb      	b.n	80094a8 <__ascii_mbtowc+0x16>
 80094b0:	f06f 0001 	mvn.w	r0, #1
 80094b4:	e7f8      	b.n	80094a8 <__ascii_mbtowc+0x16>

080094b6 <_realloc_r>:
 80094b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ba:	4680      	mov	r8, r0
 80094bc:	4614      	mov	r4, r2
 80094be:	460e      	mov	r6, r1
 80094c0:	b921      	cbnz	r1, 80094cc <_realloc_r+0x16>
 80094c2:	4611      	mov	r1, r2
 80094c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094c8:	f7fd bc7a 	b.w	8006dc0 <_malloc_r>
 80094cc:	b92a      	cbnz	r2, 80094da <_realloc_r+0x24>
 80094ce:	f7fd fc07 	bl	8006ce0 <_free_r>
 80094d2:	4625      	mov	r5, r4
 80094d4:	4628      	mov	r0, r5
 80094d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094da:	f000 f842 	bl	8009562 <_malloc_usable_size_r>
 80094de:	4284      	cmp	r4, r0
 80094e0:	4607      	mov	r7, r0
 80094e2:	d802      	bhi.n	80094ea <_realloc_r+0x34>
 80094e4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094e8:	d812      	bhi.n	8009510 <_realloc_r+0x5a>
 80094ea:	4621      	mov	r1, r4
 80094ec:	4640      	mov	r0, r8
 80094ee:	f7fd fc67 	bl	8006dc0 <_malloc_r>
 80094f2:	4605      	mov	r5, r0
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d0ed      	beq.n	80094d4 <_realloc_r+0x1e>
 80094f8:	42bc      	cmp	r4, r7
 80094fa:	4622      	mov	r2, r4
 80094fc:	4631      	mov	r1, r6
 80094fe:	bf28      	it	cs
 8009500:	463a      	movcs	r2, r7
 8009502:	f7ff fc27 	bl	8008d54 <memcpy>
 8009506:	4631      	mov	r1, r6
 8009508:	4640      	mov	r0, r8
 800950a:	f7fd fbe9 	bl	8006ce0 <_free_r>
 800950e:	e7e1      	b.n	80094d4 <_realloc_r+0x1e>
 8009510:	4635      	mov	r5, r6
 8009512:	e7df      	b.n	80094d4 <_realloc_r+0x1e>

08009514 <__ascii_wctomb>:
 8009514:	4603      	mov	r3, r0
 8009516:	4608      	mov	r0, r1
 8009518:	b141      	cbz	r1, 800952c <__ascii_wctomb+0x18>
 800951a:	2aff      	cmp	r2, #255	; 0xff
 800951c:	d904      	bls.n	8009528 <__ascii_wctomb+0x14>
 800951e:	228a      	movs	r2, #138	; 0x8a
 8009520:	f04f 30ff 	mov.w	r0, #4294967295
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	4770      	bx	lr
 8009528:	2001      	movs	r0, #1
 800952a:	700a      	strb	r2, [r1, #0]
 800952c:	4770      	bx	lr
	...

08009530 <fiprintf>:
 8009530:	b40e      	push	{r1, r2, r3}
 8009532:	b503      	push	{r0, r1, lr}
 8009534:	4601      	mov	r1, r0
 8009536:	ab03      	add	r3, sp, #12
 8009538:	4805      	ldr	r0, [pc, #20]	; (8009550 <fiprintf+0x20>)
 800953a:	f853 2b04 	ldr.w	r2, [r3], #4
 800953e:	6800      	ldr	r0, [r0, #0]
 8009540:	9301      	str	r3, [sp, #4]
 8009542:	f7ff f983 	bl	800884c <_vfiprintf_r>
 8009546:	b002      	add	sp, #8
 8009548:	f85d eb04 	ldr.w	lr, [sp], #4
 800954c:	b003      	add	sp, #12
 800954e:	4770      	bx	lr
 8009550:	20000064 	.word	0x20000064

08009554 <abort>:
 8009554:	2006      	movs	r0, #6
 8009556:	b508      	push	{r3, lr}
 8009558:	f000 f834 	bl	80095c4 <raise>
 800955c:	2001      	movs	r0, #1
 800955e:	f7f8 fb74 	bl	8001c4a <_exit>

08009562 <_malloc_usable_size_r>:
 8009562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009566:	1f18      	subs	r0, r3, #4
 8009568:	2b00      	cmp	r3, #0
 800956a:	bfbc      	itt	lt
 800956c:	580b      	ldrlt	r3, [r1, r0]
 800956e:	18c0      	addlt	r0, r0, r3
 8009570:	4770      	bx	lr

08009572 <_raise_r>:
 8009572:	291f      	cmp	r1, #31
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	4604      	mov	r4, r0
 8009578:	460d      	mov	r5, r1
 800957a:	d904      	bls.n	8009586 <_raise_r+0x14>
 800957c:	2316      	movs	r3, #22
 800957e:	6003      	str	r3, [r0, #0]
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	bd38      	pop	{r3, r4, r5, pc}
 8009586:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009588:	b112      	cbz	r2, 8009590 <_raise_r+0x1e>
 800958a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800958e:	b94b      	cbnz	r3, 80095a4 <_raise_r+0x32>
 8009590:	4620      	mov	r0, r4
 8009592:	f000 f831 	bl	80095f8 <_getpid_r>
 8009596:	462a      	mov	r2, r5
 8009598:	4601      	mov	r1, r0
 800959a:	4620      	mov	r0, r4
 800959c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095a0:	f000 b818 	b.w	80095d4 <_kill_r>
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d00a      	beq.n	80095be <_raise_r+0x4c>
 80095a8:	1c59      	adds	r1, r3, #1
 80095aa:	d103      	bne.n	80095b4 <_raise_r+0x42>
 80095ac:	2316      	movs	r3, #22
 80095ae:	6003      	str	r3, [r0, #0]
 80095b0:	2001      	movs	r0, #1
 80095b2:	e7e7      	b.n	8009584 <_raise_r+0x12>
 80095b4:	2400      	movs	r4, #0
 80095b6:	4628      	mov	r0, r5
 80095b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095bc:	4798      	blx	r3
 80095be:	2000      	movs	r0, #0
 80095c0:	e7e0      	b.n	8009584 <_raise_r+0x12>
	...

080095c4 <raise>:
 80095c4:	4b02      	ldr	r3, [pc, #8]	; (80095d0 <raise+0xc>)
 80095c6:	4601      	mov	r1, r0
 80095c8:	6818      	ldr	r0, [r3, #0]
 80095ca:	f7ff bfd2 	b.w	8009572 <_raise_r>
 80095ce:	bf00      	nop
 80095d0:	20000064 	.word	0x20000064

080095d4 <_kill_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	2300      	movs	r3, #0
 80095d8:	4d06      	ldr	r5, [pc, #24]	; (80095f4 <_kill_r+0x20>)
 80095da:	4604      	mov	r4, r0
 80095dc:	4608      	mov	r0, r1
 80095de:	4611      	mov	r1, r2
 80095e0:	602b      	str	r3, [r5, #0]
 80095e2:	f7f8 fb22 	bl	8001c2a <_kill>
 80095e6:	1c43      	adds	r3, r0, #1
 80095e8:	d102      	bne.n	80095f0 <_kill_r+0x1c>
 80095ea:	682b      	ldr	r3, [r5, #0]
 80095ec:	b103      	cbz	r3, 80095f0 <_kill_r+0x1c>
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	bd38      	pop	{r3, r4, r5, pc}
 80095f2:	bf00      	nop
 80095f4:	2000061c 	.word	0x2000061c

080095f8 <_getpid_r>:
 80095f8:	f7f8 bb10 	b.w	8001c1c <_getpid>

080095fc <_init>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	bf00      	nop
 8009600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009602:	bc08      	pop	{r3}
 8009604:	469e      	mov	lr, r3
 8009606:	4770      	bx	lr

08009608 <_fini>:
 8009608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960a:	bf00      	nop
 800960c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800960e:	bc08      	pop	{r3}
 8009610:	469e      	mov	lr, r3
 8009612:	4770      	bx	lr
